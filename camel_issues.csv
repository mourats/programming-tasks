Type,Assignee,Created,Created Epoch,Description,Comments
Improvement,Unassigned,2007-04-18T16:06:05+0000,1176912365,,james you think we still need this?. see http://activemq.apache.org/camel/maven/camel-core/apidocs/org/apache/camel/RuntimeExchangeException.html. 
Bug,Hiram R. Chirino,2007-05-18T12:57:31+0000,1179493051,Will attach a dump,Fixed. Cwiki updated for amq  nms  cpp  and camel spaces.. 
Bug,James Strachan,2007-06-04T07:38:12+0000,1180942692,public void testNPE() throws Exception {         final CamelContext camelContext = new DefaultCamelContext();         final String fromQueue = "queue:A";         camelContext.addRoutes(new RouteBuilder() {             public void configure() throws Exception {                 from(fromQueue).process(new Processor() {                     public void process(Exchange exchange) throws Exception {                         final Message in = exchange.getIn();                         assertNotNull("Message is Null"  in);                         String isDebugString = in.getHeader("someproperty"  String.class);                         assertNull(isDebugString);                         assertNotNull("Message is Null"  in);                         boolean isDebug = in.getHeader("someproperty"  Boolean.class);                         assertFalse(isDebug);                     }                 });             }         });         camelContext.start();         new CamelTemplate(camelContext).sendBody(fromQueue  "ha!");         Thread.sleep(5000L);     }   throws NPE on the isDebug = ... line.,I've added a test case here  https://svn.apache.org/repos/asf/activemq/camel/trunk/camel-core/src/test/java/org/apache/camel/issues/Issue3Test.java  which is a minor refactor of your test case. (I switched to the direct: endpoint so that the send is synchronous  so no need to sleep & the exception fails the test case - also I used the handy base class for starting/stopping the context etc).  I got a valid stack trace BTW. I suspect the reason you didn't was a JVM thing (e.g. try running with hotspot disabled maybe?).  Basically the issue was to do with Java 5's type coercion and not anything specific with Camel.  Boolean b = in.getHeader("foo"  Boolean.class);  does work fine and returns null for an undefined property. However if you force it to be coerced to a 'boolean' rather than 'Boolean') you get an NPE as the value is null (since there is no header called "foo"). (The same is true when converting from Integer to int when the value is null).  I've just patched the converter code so that if you do  boolean b = in.getHeader("foo"  boolean.class);  then it returns a valid value and does not throw an NPE. (i.e. it returns false for missing headers).. 
New Feature,Unassigned,2007-06-07T20:51:09+0000,1181249469,,There's some discussion on this issue here: http://www.nabble.com/Monitoring-and-management-of-Camel-tf3886171s22882.html. Partial patch  support for jmx. More cleanup coming shortly.. Patch applied with thanks Hadrian!. I'm gonna mark this issue as resolved; we can always raise new issues for improvements or enhanced functionality. 
New Feature,Willem Jiang,2007-06-07T20:54:02+0000,1181249642,There's some discussion on this issue here: http://www.nabble.com/Monitoring-and-management-of-Camel-tf3886171s22882.html,Current Camel uses LifecycleStrategy to listen the Context's creation  Endpoint  Router  Service's adding events. So they are the same thing with the CamelRouterListener and CamelEndpointListener.  Since there is no method call for the route and endpoint stopping  removing in camel  all these instance will be clean up when stopping the CamelContext. I think we can resolve this issue.. 
New Feature,Willem Jiang,2007-06-07T20:54:38+0000,1181249678,There's some discussion on this issue here: http://www.nabble.com/Monitoring-and-management-of-Camel-tf3886171s22882.html,Current Camel uses LifecycleStrategy to listen the Context's creation  Endpoint  Router  Service's adding events. So they are the same thing with the CamelRouterListener and CamelEndpointListener.  Since there is no method call for the route and endpoint stopping  removing in camel  all these instance will be clean up when stopping the CamelContext. I think we can resolve this issue.. 
New Feature,Unassigned,2007-06-07T21:07:52+0000,1181250472,Background: http://www.enterpriseintegrationpatterns.com/Aggregator.html  Docs go here: http://activemq.apache.org/camel/enterprise-integration-patterns.html,See the documentation here: http://cwiki.apache.org/CAMEL/aggregator.html. 
New Feature,Unassigned,2007-06-07T21:09:09+0000,1181250549,Background: http://www.enterpriseintegrationpatterns.com/DynamicRouter.html  Docs: http://activemq.apache.org/camel/enterprise-integration-patterns.html,Moving to 2.0. James added some documentation here http://camel.apache.org/dynamic-router.html  Maybe this is sufficient?. Jonathan  yes that is perfect.  With the dynamic recipient list and getting the endpoints from your dynamic store allows you to do the dynamic router EIP. So lets call this a day then.. Closing all 2.0M2 tickets. 
New Feature,Unassigned,2007-06-07T21:11:14+0000,1181250674,To visualise routes as DOT files or in Eclipse we need to be able to walk the tree as simple POJOs more easily,FWIW the need for this has diminished slightly due to the new JAXB2 POJO model we have; as the POJO model is fairly easy to navigate. I don't think we need this anymore as we have the POJO model for the routing definition in org.apache.camel.model package. 
New Feature,Hadrian Zbarcea,2007-06-07T21:12:21+0000,1181250741,,this issue is related to CAMEL-4. Fancy taking a stab at this one - given the great work of your other patch?. Patch applied with thanks!. 
New Feature,Hadrian Zbarcea,2007-06-07T21:14:53+0000,1181250893,e.g. be able to look in camel-core or camel-jms or whatever and see what types from -> to etc  e.g.  Document -> String  Source  byte[]  Stax ....   etc,In an earlier version I had the logic in the Mojo  but I thought it's better to move it in camel-core utils. Now the mojo uses the same logic as the camel core so the results are more likely to be relevant. Reporting is quite primitive  but all the info is there. It's not a problem for instance to make it xml and use xslt later. Please give it a shot and let me know if this is what you expected.. Patch applied with huge thanks Hadrian!  I'm wondering; should we move this code into the camel-maven-plugin as another goal/report? Also making it a real maven report  so it gets its own page in the maven generated site; like the 'mvn camel:dot' plugin does?  http://activemq.apache.org/camel/camel-maven-plugin.html  we could use one of those Sink classes  like the DotMojo does to generate HTML nicely for the report.  BTW when I did a build  I found the converters.txt only had the stuff from camel-core in there? Am thinking  we might wanna use a similar trick to the DotMojo (maybe even combine the two) - we basically boot up the camel context in a new class loader so that all the jars are available  then generate the EIP diagrams.  Maybe we just need to do like the EmbeddedMojo does and just create a new classloader; then in that class loader we run the actual generation of the report via reflection?. Hadrian  Is there some wiki documentation that should be added/updated with this change?. Closing 1.4 issues.. 
New Feature,Unassigned,2007-06-07T21:17:53+0000,1181251073,we've got the basic camel.view classes for making a DOT file (wiki notation for graphical pictures of routes). e.g. see ServiceMix stuff...  http://incubator.apache.org/servicemix/visualisation.html  so we need to be able to automatically generate nice graphs,See http://activemq.apache.org/camel/camel-maven-plugin.html  and  http://activemq.apache.org/camel/camel-dot-maven-goal.html. 
New Feature,James Strachan,2007-06-11T17:42:58+0000,1181583778,Component for Remote Files. Similar to the File Component  but using remote files over various protocols (currently supporting FTP  SFTP. WebDAV planned).  Generally works  but still needs unit tests.,Patch applied with many thanks! I added an Apache FtpServer based test case too. We get an error warning when the test case runs we should tidy up (to do with shutting down while the poller keeps on going) but other than that its looking great! Nicely done!. 
New Feature,Unassigned,2007-06-11T19:07:33+0000,1181588853,If you have a route that goes through a processor that is expensive  you may want to pool that processor so it's not holding up the rest of the route.  Configuration could look as such:   from("activemq:queue:SOMETHING").pool(5 [min]  15 [max]).process(new ExpensiveMessageEnricher()).to("activemq:queue:SOMEWHERE_ELSE"); or from("activemq:queue:SOMETHING").process(new ExpensiveMessageEnricher()).pool(5 [min]  15 [max]).to("activemq:queue:SOMEWHERE_ELSE");    I'm not sure exactly how these would differ  but I think the first one would have 5-15 MQ queue listeners  which would all go through 1 EME  and then through 1 mq producer  and the second would have 1 mq listener that would dispatch to one of the 5-15 EME threads (if available?  not sure if that level of interaction between steps is good)  and then go through 1 mq producer.  Seems like the first would be the better option as I write this...  Notes from IRC convo with James: first thought is; we might wanna wrap a Producer in a factory thingy that does pooling (e.g. like the way spring does pooling using interceptors etc); but that the pool part could be done wherever a Processor can be used,Be careful  what you propose (pool(5 15)) can generate confusion in the head of the users because actually  you can define the number of thread that you want :  from("activemq:queue:SOMETHING").thread(5).process(new ExpensiveMessageEnricher()).to("activemq:queue:SOMEWHERE_ELSE");  Personally  what you request already exist except that we cannot now define the limit of the thread to be created.  If you want to process tasks in // (parallel)  you can use the multicast EIP (http://activemq.apache.org/camel/multicast.html).. Yes as Charles said there is a thread() DSL type that can be used for thread pool.  It has attributes you can configure (see ThreadType.java) for instance it has a max size property: private Integer maxSize = 1;  Can't you just append the options using the fluent builder?  from("activemq:queue:SOMETHING").thread(5).setMaxSize(15).process(new ExpensiveMessageEnricher()).to("activemq:queue:SOMEWHERE_ELSE");   I think thus we already have this feature in Camel 1.4. Ah it got fluent builders already so you should use  thread(5).maxSize(15). Implemented by CAMEL-149. Closing this one.. Closing old tickets. 
New Feature,James Strachan,2007-06-12T19:16:51+0000,1181675811,,implemented.. 
New Feature,James Strachan,2007-06-12T19:24:14+0000,1181676254,Be able to send and receive exchanges from JMS endpoints.,implemented.. 
New Feature,James Strachan,2007-06-12T19:37:34+0000,1181677054,Provide a declarative way to correlate the multiple process actions related to business activity and generate monitoring events when pocessing constraints are violated.,initial framework has been implemented.. 
New Feature,James Strachan,2007-06-12T19:40:33+0000,1181677233,,implemented.. 
New Feature,James Strachan,2007-06-12T19:45:26+0000,1181677526,,implemented.. 
New Feature,Unassigned,2007-06-12T19:47:55+0000,1181677675,Allows for subsequent Exchange processors to work with an exchanages that has a Pojo based body.,The JaxbConverter has been implemented but I have not seen any use cases for it.. the camel-jaxb module now has a FaillbackTypeConverter so that any POJO which has an @XmlRootElement is automatically convertable to a stream/Source/Result/Document etc.  However we should also add some JaxbMarshaller plugin so that if a POJO does not have any JAXB annotations we can still use a JAXB conversion. see the Data Format support such as for JAXB. 
New Feature,James Strachan,2007-06-12T19:50:31+0000,1181677831,,implemented.. 
New Feature,James Strachan,2007-06-12T19:53:16+0000,1181677996,,implemented. See: http://activemq.apache.org/camel/sql.html. 
New Feature,James Strachan,2007-06-12T19:56:42+0000,1181678202,The jpa: component allows you to work with databases using JPA (EJB 3 Persistence) such as for working with OpenJPA  Hibernate  TopLink to work with relational databases.  Sending POJOs to the JPA endpoint inserts entities into the database. Consuming messages removes (or updates) entities in the database.,implemented see: http://activemq.apache.org/camel/jpa.html. 
New Feature,James Strachan,2007-06-12T19:58:24+0000,1181678304,,implemented. See: http://activemq.apache.org/camel/idempotent-consumer.html. 
New Feature,James Strachan,2007-06-12T20:02:58+0000,1181678578,,implemented: http://activemq.apache.org/camel/mail.html. implemented: http://activemq.apache.org/camel/mail.html. 
New Feature,James Strachan,2007-06-12T20:03:44+0000,1181678624,,implemented. see: http://activemq.apache.org/camel/mail.html. 
New Feature,James Strachan,2007-06-12T20:04:31+0000,1181678671,,implemented. see: http://activemq.apache.org/camel/mail.html. 
New Feature,James Strachan,2007-06-12T20:06:25+0000,1181678785,,implemented.. see: http://activemq.apache.org/camel/mina.html. 
New Feature,James Strachan,2007-06-12T20:08:12+0000,1181678892,,implemented: http://activemq.apache.org/camel/quartz.html. 
New Feature,James Strachan,2007-06-12T20:09:14+0000,1181678954,,implemented. See:  http://activemq.apache.org/camel/rmi.html. 
New Feature,James Strachan,2007-06-12T20:11:24+0000,1181679084,,implemented.. 
New Feature,James Strachan,2007-06-12T20:13:03+0000,1181679183,,implemented.. 
New Feature,James Strachan,2007-06-12T20:14:48+0000,1181679288,,implemented. see:  http://activemq.apache.org/camel/spring.html. 
New Feature,James Strachan,2007-06-12T20:16:42+0000,1181679402,,implemented. See the JMS component for a use case.. 
New Feature,James Strachan,2007-06-12T20:19:44+0000,1181679584,Provide a spring remoting implemenation that can invoke Camel PojoExchanges and expose Spring pojos as via PojoExchanges on the camel router.,implemented.. 
Task,James Strachan,2007-06-12T20:20:54+0000,1181679654,,Done - see http://cwiki.apache.org/CAMEL/spring-remoting.html. 
New Feature,James Strachan,2007-06-12T20:22:15+0000,1181679735,,implemented: http://activemq.apache.org/camel/xmpp.html. 
New Feature,James Strachan,2007-06-12T20:35:42+0000,1181680542,,implemented. see:  http://activemq.apache.org/camel/direct.html. 
New Feature,Unassigned,2007-06-12T20:38:08+0000,1181680688,,implemented. See:  http://activemq.apache.org/camel/file.html. 
New Feature,James Strachan,2007-06-12T20:40:25+0000,1181680825,,Implemented. see: http://activemq.apache.org/camel/mock.html. 
New Feature,Hiram R. Chirino,2007-06-12T20:41:54+0000,1181680914,,implemented. See:  http://activemq.apache.org/camel/pojo.html. 
New Feature,Hiram R. Chirino,2007-06-12T20:43:01+0000,1181680981,,implemented. see: http://activemq.apache.org/camel/queue.html. 
New Feature,James Strachan,2007-06-12T20:44:44+0000,1181681084,,Implemented. http://activemq.apache.org/camel/timer.html. The timer:// endpoint is a simpler version of the Quartz timer which only depends on Java 1.5. 
New Feature,James Strachan,2007-06-12T20:47:51+0000,1181681271,,implemented.  See: http://activemq.apache.org/camel/dsl.html. 
New Feature,Unassigned,2007-06-13T18:31:42+0000,1181759502,,we could add a demo to show how to combine the CXF with camle. This patch contains a demo to show how to use came as a port router of webservice.. Just fixed a cxf producer client create bug. Please use this patch file.. Patch applied - though it needs documentation - could you edit this page please to add a link to the CXF example? http://activemq.apache.org/camel/examples.html  I get this log when I try and run it - is that expected?...  Hello there jstrachan 01-Oct-2007 15:02:13 org.apache.cxf.transport.jms.JMSDestination$JMSExecutor run INFO: run the incoming message in the threadpool 01-Oct-2007 15:02:13 org.apache.camel.example.cxf.GreeterImpl pingMe INFO: Executing operation pingMe  throwing PingMeFault exception  message = hello Executing operation pingMe  throwing PingMeFault exception  01-Oct-2007 15:02:13 org.apache.cxf.phase.PhaseInterceptorChain doIntercept INFO: Interceptor has thrown exception  unwinding now org.apache.cxf.interceptor.Fault: PingMeFault raised by server at org.apache.cxf.service.invoker.AbstractInvoker.createFault(AbstractInvoker.java:101) at org.apache.cxf.jaxws.JAXWSMethodInvoker.createFault(JAXWSMethodInvoker.java:76) at org.apache.cxf.service.invoker.AbstractInvoker.invoke(AbstractInvoker.java:90) at org.apache.cxf.jaxws.JAXWSMethodInvoker.invoke(JAXWSMethodInvoker.java:100) at org.apache.cxf.service.invoker.AbstractInvoker.invoke(AbstractInvoker.java:63) at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:56) at org.apache.cxf.workqueue.SynchronousExecutor.execute(SynchronousExecutor.java:37) at org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:92) at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:207) at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:73) at org.apache.cxf.transport.jms.JMSDestination.incoming(JMSDestination.java:200) at org.apache.cxf.transport.jms.JMSDestination$JMSExecutor.run(JMSDestination.java:331) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675) at java.lang.Thread.run(Thread.java:613) Caused by: org.apache.hello_world_soap_http.PingMeFault: PingMeFault raised by server at org.apache.camel.example.cxf.GreeterImpl.pingMe(GreeterImpl.java:69) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at org.apache.cxf.service.invoker.AbstractInvoker.performInvocation(AbstractInvoker.java:107) at org.apache.cxf.service.invoker.AbstractInvoker.invoke(AbstractInvoker.java:77) ... 12 more 01-Oct-2007 15:02:13 org.apache.cxf.phase.PhaseInterceptorChain doIntercept INFO: Interceptor has thrown exception  unwinding now org.apache.cxf.interceptor.Fault: PingMeFault raised by server at org.apache.camel.component.cxf.CamelInvoker.invoke(CamelInvoker.java:171) at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:56) at org.apache.cxf.workqueue.SynchronousExecutor.execute(SynchronousExecutor.java:37) at org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:92) at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:207) at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:73) at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.serviceRequest(JettyHTTPDestination.java:268) at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.doService(JettyHTTPDestination.java:224) at org.apache.cxf.transport.http_jetty.JettyHTTPHandler.handle(JettyHTTPHandler.java:54) at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:712) at org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:211) at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:139) at org.mortbay.jetty.Server.handle(Server.java:313) at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:506) at org.mortbay.jetty.HttpConnection$RequestHandler.content(HttpConnection.java:844) at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:726) at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:211) at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:381) at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:396) at org.mortbay.thread.BoundedThreadPool$PoolThread.run(BoundedThreadPool.java:475) Caused by: org.apache.hello_world_soap_http.PingMeFault: PingMeFault raised by server at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39) at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27) at java.lang.reflect.Constructor.newInstance(Constructor.java:494) at org.apache.cxf.interceptor.ClientFaultConverter.processFaultDetail(ClientFaultConverter.java:125) at org.apache.cxf.interceptor.ClientFaultConverter.handleMessage(ClientFaultConverter.java:68) at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:207) at org.apache.cxf.interceptor.AbstractFaultChainInitiatorObserver.onMessage(AbstractFaultChainInitiatorObserver.java:90) at org.apache.cxf.binding.soap.interceptor.ReadHeadersInterceptor.handleMessage(ReadHeadersInterceptor.java:179) at org.apache.cxf.binding.soap.interceptor.ReadHeadersInterceptor.handleMessage(ReadHeadersInterceptor.java:56) at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:207) at org.apache.cxf.endpoint.ClientImpl.onMessage(ClientImpl.java:395) at org.apache.cxf.transport.jms.JMSConduit$JMSOutputStream.handleResponse(JMSConduit.java:375) at org.apache.cxf.transport.jms.JMSConduit$JMSOutputStream.doClose(JMSConduit.java:256) at org.apache.cxf.io.CachedOutputStream.close(CachedOutputStream.java:119) at org.apache.cxf.transport.AbstractConduit.close(AbstractConduit.java:66) at org.apache.cxf.interceptor.MessageSenderInterceptor$MessageSenderEndingInterceptor.handleMessage(MessageSenderInterceptor.java:62) at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:207) at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:254) at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:205) at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:180) at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:200) at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:186) at org.apache.camel.component.cxf.CxfProducer.process(CxfProducer.java:152) at org.apache.camel.component.cxf.CxfProducer.process(CxfProducer.java:136) at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsynProcessorBridge.process(AsyncProcessorTypeConverter.java:44) at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:73) at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:136) at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:86) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:44) at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:174) at org.apache.camel.component.cxf.CamelInvoker.invoke(CamelInvoker.java:161) ... 19 more Expected exception: PingMeFault has occurred: PingMeFault raised by server. Yes  the exception is expected.. gonna mark this as resolved as we've quite a few examples now. 
Improvement,Claus Ibsen,2007-06-13T18:32:57+0000,1181759577,Peter thanks a lot for the great work on the ant files.  We will sure include it in the 1.4.  Would it be possible to have a property etc to easy set the correct Camel version. I am sure we forget. In you build files its set to 1.3-SNAPSHOT.,Hi there   I've attached a patch which adds some build.xml files for building the examples with ant. Includes minor README.txt file changes for instructions for ant. If you have any comments or would like any additions/modifications made please let me know!  Thanks  Peter. Damm I changed the description and did not add a new comment. Peter see my notes in the description.. Hi Claus   Leaving the camel.version property set to 1.3-SNAPSHOT in the common-build.xml is definitely likely to not get updated. The only place this property was being used  was in building a jar for a sample (in the jar name)  and it was included just to be consistent with maven naming. However  the build.jar target is only executed if you pass in -Dbuild.jar=true right now. So  I'm thinking of just deleting the camel.version property  and the build.jar target altogether... the samples will run fine without this  so it doesn't serve much purpose. Do you think thats reasonable?  One other thing I accidentally omitted was executing dot to generate svg files for the camel-example-docs sample. I've updated my copy of that sample's build file to do that  and I'll attach an updated patch in the morning to replace the earlier patch.  Cheers  Peter. Attached a replacement for the previous patch. This patch removes the reference to camel.version and the build.jar target from common_build.xml and adds a generatedot macro which is used by the camel-example-docs sample.. Peter I suppose the requirement for the backport jar is a requirement by ActiveMQ 5.0 to support JDK1.4? <include name="*/backport-util-concurrent-.jar"/>  Camel does however only run on JDK1.5 but it is possible to run it on 1.4 http://activemq.apache.org/camel/can-i-use-camel-on-java-14.html. Peter I get the ANT warning while starting the bam example  run: Warning: Reference sample.run.classpath has not been set at runtime  but was found during build file parsing  attempting to resolve. Future versions of Ant may support referencing ids defined in non-executed targets.  I am using ANT v1.7.0. Peter.  The spring-xquery sample does not properly initialize log4j so it uses the log4j.properties from the src/main/resources folder  run: Warning: Reference sample.run.classpath has not been set at runtime  but was found during build file parsing  attempting to resolve. Future versions of Ant may support referencing ids defined in non-executed targets. [java] log4j:WARN No appenders could be found for logger (org.apache.camel.spring.Main). [java] log4j:WARN Please initialize the log4j system properly.. Applied the patch to trunk and added a few missing log4j.properties to some examples.. Hi Claus   Yes  the backport_util_concurrent seems to be required by the samples which use activemq.  For the ant 1.7 warning: Warning: Reference sample.run.classpath has not been set at runtime  but was found during build file parsing  I've attached a small patch for common_build.xml. Sorry about that  I only tested with ant 1.6.5  and it seems that there has been a change which prints this warning if you reference a property prior to its definition in the build file.  Thanks for applying the patch! Peter. Peter sure think. Your patch is great.  Is it possible to add an ant target for all the samples so the end user can generate the visualization dot documentation. Using maven you run  mvn camel:dot. Hi Claus   For sure this is possible. Probably would add a camel.dot target to each build.xml which calls the generatedot macro in common_build.xml. So something like:  <target name="camel.dot"> <generatedot ... /> </target>  The run target in camel-examples-docs/build.xml is the only one which uses the generatedot macro at the moment.  There is one issue which I wasn't quite able to work out so far with the generatedot macro. On unix  passing a wildcard to the dot executable seems to work  so the macro can call: "dot -T svg -O *.dot" for instance and generate svg files for all of the .dot files. When I tested on windows though  I had to pass in the full name of the .dot file: "dot.exe -T svg -O routes.dot". Would be nice to figure out a better way to make the macro as generic as possible.. Hi Claus   I attached a patch which adds a camel.dot target to the common_build.xml file. So this should be able to be called from the other samples. It generates .svg files for any .dot files in the samples. I'm not sure if this is everything you meant though. It looks like the maven plugin probably also generates an index.html file. I'll have to look at that a bit closer. If this is needed also  could maybe add an ant xslt task to create the index.html somehow. What do you think?  Cheers  Peter. Peter this is great.  I would love some more information in the README.TXT files that you can run the ant camel.dot target to generate visualization graphs And that you need dot.exe in the PATH for it to work.  You could add a link to: http://activemq.apache.org/camel/visualisation.html. And this wiki page could use an update of that you can run the examples using ANT now (@since 1.4)  http://activemq.apache.org/camel/running-examples.html. Hi Claus   I attached readme.patch which has a very minor change to mention the camel.dot target in the spring example and an update for the docs example. I don't have the permissions to edit the wiki page linked above. I think updating the page with text as follows should do (the elipsis... just indicates stuff that doesn't need to be changed):  [...]  Before you start  [...]  To run the demos with maven  you need to download and install Apache Maven.  [...]  Since Camel 1.4  you can also run the examples with Ant. To do so  download and install Apache Ant. Several of the examples depend on other projects which you will need to download to run with Ant. Refer to the individual example README.txt files for details.  [...]  Running the examples in Ant  To run an example  change to the directory of the example you want to run  set any environment variables mentioned in the README.txt  and then launch ant:  on UNIX cd camel-example-spring export ACTIVEMQ_HOME=<path to ActiveMQ install directory> ant on Windows cd camel-example-spring set ACTIVEMQ_HOME=<path to ActiveMQ install directory> ant. Thanks a lot Peter for all the patches and keep on improving it.  Now Camel has a broader audience as they can try it out of the box with ANT. Now we just need some better examples. 
Improvement,Jonas B. Lim,2007-06-15T07:00:31+0000,1181890831,The content of the docbook would exist inside confluence and have the tool retrieve it and  transform them nicely into a docbook format.  Here's an example of the book for ActiveMQ  https://svn.apache.org/repos/asf/activemq/trunk/activemq-book/,added initial source for the maven plugin and docbook project at :  https://svn.apache.org/repos/asf/activemq/camel/trunk/camel-book https://svn.apache.org/repos/asf/activemq/camel/trunk/tooling/maven/maven-html-to-docbook/  r547564  The docbook transformation still needs a lot of improvement in the following : 1. handling of images - currently does not handle images 2. handling of href links (current transformation converts all local links to complete url ie. http://activemq.apache.org/camel/user-guide.html) 3. improving the format of the docbook markup. Great work!  Does the build work for you btw; when I tried it I got...  [INFO] [docbkx:generate-pdf  {execution: default}  ] [INFO] Processing Camel.xml Error Failure reading /workspace/java/camel/camel-book/target/docbkx/source/Camel.xml: /workspace/java/camel/camel-book/target/docbkx/source/index.xml (No such file or directory)  which is a bit bizarre as that file does exist. I seem to have left out an extra space on the entity declarion in the main docbook xml (Camel.xml). Windows was just ignoring this space so it was builiding in my environment.  updated the maven docbook plugin at : r548256. added process to download all image files and store them where the html output can reference them. Next would be to figure out how to apply this for the pdf output  r:549119. BTW I've updated the pom to include a decent amount of content; though it seems to break the generator now. Not sure why.  It seemed to be when I added all the enterprise integration pattern pages; I tried looking at the XML to see if I could grok why things bafed but I couldn't spot it - any ideas?. Incidentally  could we change the XSL so that the <chapter><title> is actually the <h1> heading on the page? Right now the chapter headings are the file names which are not great as they are lower case and have - in them. BTW I was wondering; should we switch the phase that the docbook generation happens to the site phase? Then the build only kicks in when creating the site etc.  (We probably wanna also copy the HTML and PDF to the site/doc directory or something so that site:deploy will deploy the PDFs etc). Oh one more thought  When we get the PDF generation thingy working again; we should include the PDF and HTML versions in the distro. Maybe in  doc/ reference/ html/ camel.pdf  Then we've somewhere we can put the site / javadoc in there later on. added updates to  use the first h1/h2 find as the page heading change the plugin phase to site handle duplicate anchor/bridgehead ids - this was causing the generator to break on book-pattern-appendix.html and book-component-appendix.html resources  images are now handled nicely in html but still needs work when to support pdf output. Another thing to work on are the html links. It would be nice if the links are inside the docbook   rev: 550436. to make it easier to track the various bits and pieces  I'm gonna create a few sub-tasks. BTW I just moved the camel-book module into the tooling directory (as new users won't really need to look much at this module as its mostly a tool to create the PDF from the wiki). Great work Jonas - its looking good!. Hiram's change to use princexml.com fixes this issue.  I've refactored the camel-book module to be called camel-manual now and it generates both a HTML and PDF representation nicely now in target/site/manual/  Note that you must have princexml.com installed for this to work!. 
New Feature,Willem Jiang,2007-06-22T16:16:24+0000,1182528984,,The archetype has been committed into the repository.. Remember to add some doc on the wiki how to use it and what it is there for.  The tools section of the wiki is rather hard to find  maybe it should be a top level link to it from the Documentation page/right menu.  This link is only from the architecture link and not from user guide etc. http://activemq.apache.org/camel/tools.html. I changed the tools page's parent from architecture to developer and added a page to talk about the camel component archetype.. Closed all 1.3 tickets. 
Sub-task,Jonas B. Lim,2007-06-25T10:27:16+0000,1182767236,,I don't believe table layout "auto" is implemented in FOP since it seems to only support table-layout="fixed". We can probably hack a work around by modifying our xsl - we can discover all the things a fixed-layout table needs before creating the FO elements. I guess longer term  we may wish to customize the widths of tables on specific pages. e.g. in the pom we could maybe do something like (am using a properties file notation here  but we could use XML if you prefer)  # this page has 2 tables 1.uri = cheese.html 1.table.1.widths = 10% 10% 80% 1.table.2.widths = 30% 80%  2.url = foo.html 3.url = bar.html   As a hacky workaround for now - how about we come up with some good defaults. Basically in all the tables in the current document  the first 1 or 2 columns are kinda small; the last column is always the big one as its the description. So how about our default table sizing is something along the lines of the last column is double the width?. Hiram's change to use princexml.com fixes this issue. 
Sub-task,Jonas B. Lim,2007-06-25T10:29:57+0000,1182767397,I think this is due to the generated HTML on the Auto-Export plugin in Confluence; its generating those little icons after a link to indicate if its external links etc. Can we shave these things off in the XSL?,fixed in revision 550810. 
Sub-task,Jonas B. Lim,2007-06-25T10:37:18+0000,1182767838,Am not sure if its easy to just configure the 'target/docbkx' directory in the maven plugins  or if we need a separate copy task,updated the maven plugin configurations to output the pdf/html to target/site/book  rev: 550722. looks like we need to copy the images too for the html version...  http://activemq.apache.org/camel/maven/camel-book/book/html/ch03.html. oops..forgot to copy the images   rev: 550767. 
Sub-task,Jonas B. Lim,2007-06-25T10:46:04+0000,1182768364,sometimes we get some strange stuff inserted into the generated docbook. e.g. the first part of book-architecture.xml contains some bogus stuff...    <title>Architecture</title>   <section>     <ulink url="http://cwiki.apache.org/CAMEL/dsl.html">Routing Domain Specific Language (DSL)</ulink>     <ulink url="http://cwiki.apache.org/CAMEL/xml-configuration.html">Xml Configuration</ulink>     <ulink url="http://cwiki.apache.org/CAMEL/routes.html">routing and mediation rules</ulink>     <ulink url="http://cwiki.apache.org/CAMEL/http://activemq.apache.org/camel/maven/camel-core/apidocs/org/apache/camel/CamelContext.html">       CamelContext       <mediaobject>         <imageobject>           <imagedata fileref="../images/linkext7.gif" depth="7" width="7"/>         </imageobject>       </mediaobject>     </ulink>     <ulink url="http://cwiki.apache.org/CAMEL/enterprise-integration-patterns.html">Enterprise Integration Patterns     </ulink>     <para>At a high level Camel consists of a     Everything between <section> and <para> looks bogus (or at least generates strangeness in the PDF). I wonder if might help if we keep the HTML that is downloaded from the site so we can see  is this a wiki issue or XSL issue etc. As right now I've no idea!,refactored a bit the output source location.  docbook source are now extracted by default to : /docbkx/docbkx-source wiki source are now extracted by default to : /docbkx/wiki-source  rev: 550675. 
Sub-task,Jonas B. Lim,2007-06-25T10:55:17+0000,1182768917,If you look at chapter 3 on Enterprise Integration Patterns; or section 5 the Pattern Appendix; there's lots of h2 usage for each collection of patterns. e.g. the first section is   "Message Systems" then "Messaging Channels" etc.  http://cwiki.apache.org/CAMEL/book-pattern-appendix.html  yet these don't seem to come out in the docbook; nor do they appear in the table of contents etc,BTW all the <h2>'s disapper in the HTML version of Pattern Appendix and the first <h2> (Messaging Systems) disappears from chapter 3 (Enterprise Integration Patterns). fixed in r552673. Am reopening; the h2 headings no longer disappear - but they don't appear in the table of contents. h2 headings are now included in the html/pdf. had to modify the source a bit before transforming it via xsl. All contents after a <h2> element are moved to <h2_section> element created inside the <h2>. If another <h2> is found the process is repeated. This is so that the contents inside a chapter can be divided by section with <h2> as the delimiter  rev: 556828. 
Sub-task,Jonas B. Lim,2007-06-25T11:05:56+0000,1182769556,It'd be great to reuse the html-to-docbook plugin on other projects like ActiveMQ and ServiceMix. While its totally cool being able to overload the XSL's on a per project basis; mostly it seems to be generic apache HTML -> DocBook stuff. So am wondering if it'd make more sense to put these XSL files into the plugin (so that they are shared among all the various projects  rather than cutting and pasting into each project).,fixed in rev: 551512  also added an optional configuration parameter <xslFile> which will handle an xsl location if a project would like to overload the default xsl. 
New Feature,James Strachan,2007-06-25T13:42:14+0000,1182778934,example endpoint to connect to the camel IRC channel: "irc://camel-irc@irc.codehaus.org/%23camel"  Component has no unit tests  and breaks when you try and do to(endpointA  endpointB).  Connections are shared between Endpoints of the same username and host.   only dep is IRClib v. 1.10  http://moepii.sourceforge.net/,Patch applied with great thanks! Will work on a unit test.... BTW I've added an integration test case...  https://svn.apache.org/repos/asf/activemq/camel/trunk/components/camel-irc/src/test/java/org/apache/camel/component/irc/IrcRouteIntegration.java  I've named it *Integration.java rather than *Test.java to differentiate from unit tests. You can run integration tests using the maven profile...  http://cwiki.apache.org/CAMEL/testing.html. 
Sub-task,Jonas B. Lim,2007-06-26T13:30:47+0000,1182864647,,Fixed at rev: 551017.. 
Sub-task,Jonas B. Lim,2007-06-27T02:52:25+0000,1182912745,images are currently not supported  in pdf output. We'll need to tweak the xsl files to support this,fixed in r552771. Some of the images look a bit odd (kinda like the black is missing) - not sure why that is. Any idea? Could it be certain types of images don't work too well (jpg v png v gif or something?). Not really sure either but it appears the pdf conversion works well with jpg format. I tried converting the images that were odd to jpg and they were rendered properly. Any chance we can convert those images in the site to jpg format ?. 
Sub-task,Jonas B. Lim,2007-06-29T13:18:02+0000,1183123082,ERROR:  'null' FATAL ERROR:  'Could not compile stylesheet' javax.xml.transform.TransformerConfigurationException: Could not compile stylesheet         at com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl.newTemplates(TransformerFactoryImpl.java:824)         at com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl.newTransformer(TransformerFactoryImpl.java:619)         at org.apache.camel.maven.GenerateDocBookMojo.process(GenerateDocBookMojo.java:221)         at org.apache.camel.maven.GenerateDocBookMojo.execute(GenerateDocBookMojo.java:160)         at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:420)         at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoals(DefaultLifecycleExecutor.java:539)         at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalWithLifecycle(DefaultLifecycleExecutor.java:480)         at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoal(DefaultLifecycleExecutor.java:459)         at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeGoalAndHandleFailures(DefaultLifecycleExecutor.java:311)         at org.apache.maven.lifecycle.DefaultLifecycleExecutor.executeTaskSegments(DefaultLifecycleExecutor.java:278)         at org.apache.maven.lifecycle.DefaultLifecycleExecutor.execute(DefaultLifecycleExecutor.java:143)         at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:330)         at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:123)         at org.apache.maven.cli.MavenCli.main(MavenCli.java:272)         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)         at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)         at java.lang.reflect.Method.invoke(Method.java:585)         at org.codehaus.classworlds.Launcher.launchEnhanced(Launcher.java:315)         at org.codehaus.classworlds.Launcher.launch(Launcher.java:255)         at org.codehaus.classworlds.Launcher.mainWithExitCode(Launcher.java:430)         at org.codehaus.classworlds.Launcher.main(Launcher.java:375) [INFO] [docbkx:generate-html  {execution: execution1} ] [INFO] Processing manual.xml [INFO] [docbkx:generate-pdf  {execution: execution2} ] [INFO] Processing manual.xml [INFO] Using com.icl.saxon.aelfred.SAXDriver as SAX2 Parser [INFO] building formatting object tree [INFO] setting up fonts [INFO] [1] [INFO] [2] [INFO] Parsing of document complete  stopping renderer [INFO] ------------------------------------------------------------------------ [ERROR] BUILD ERROR [INFO] ------------------------------------------------------------------------ [INFO] Failed to convert to PDF  Embedded error: file:/workspace/java/camel/tooling/camel-book/:11:2965 fo:flow must contain block-level children,The docbook plugin will need to be build first since an update was made there to move the xsl inside the plugin.  Updated the tooling project to build first the docbook plugin before the project : r552637. 
New Feature,Unassigned,2007-06-29T17:35:17+0000,1183138517,,see the documentation: http://activemq.apache.org/camel/vm.html. 
New Feature,James Strachan,2007-07-02T11:19:31+0000,1183375171,,See the documentation here: http://cwiki.apache.org/CAMEL/event.html. 
New Feature,James Strachan,2007-07-02T14:46:03+0000,1183387563,,See here for more details: http://cwiki.apache.org/CAMEL/file.html. 
Improvement,James Strachan,2007-07-02T14:59:36+0000,1183388376,,file locking now enabled by default for the duration of the processor. I just test this lock feature in the windows box by run the unit test of file endpoint in the trunk.  I found the RenameFileStrategy will not rename the file successfully when the old file is locked. So I think we can get find some way to do this file's lock job by a logic lock or do some thing to walk around.. Just checking I understand what you're staying corectly. You're saying that the rename doesn't work if the RenameFileStrategy grabs the lock first on the old file? Or is it if some other process has that lock?. yes  the file which handled by RenameFileStrategy will be locked by RenameFileStrategy first. It looks FileEndpoint will set the strategy to lock the file first .. BTW I've added an exception throwing to the RenameFileStrategy if the rename doens't work.  I think going forward we need to introduce a separate lock file (with the file name based on the name of the original. e.g. for a file foo/bar.txt we use foo/bar.text.lock as the lock file); then we lock that first; once the file is locked we can then move / delete the original. James  I just changed some code of the FileStategySupport as you mentioned  and tested it against the last code. I will attach the patch for it . Please have a look at it.. I tested this patch in windows  please verify it in others box.. Patch applied with thanks - rev 558732. Many thanks!. 
New Feature,James Strachan,2007-07-03T13:59:16+0000,1183471156,,now implemented. For more detail see the documentation: http://cwiki.apache.org/CAMEL/delayer.html. 
Improvement,Willem Jiang,2007-07-03T17:41:37+0000,1183484497,For example splitter() should be split() and resequencer should be resequence. Old methods should be deprecated.,This applies for the Spring DSL as well. And I guess Gertv have used good names in his Scala DSL?  I guess we should only do this in the code when we have created the 1.x branch so trunk is 2.0.  Does it make sense to keep the old DSL as @deprecated. For the Spring DSL it would be really painful to keep the old and new DSL?. @Willem  could you please not start working on this just yet. I want to have a few discussions about the dsl in the coming weeks that may impact this.. @Hadrian  I will hold it until we get the conculsion about the DSL. @Claus Yes  It is painful and we can't support old spring xsd at the same time. So I suggest we don't tough the Spring DSL. @ALL I just went through the ProcessorType and Spring configuration. Now we are using the noun as the processor name  the methods which create the processor types are using the noun for the EIP actions. In these case we can think we just put the processor in the middle of the routing rule  and the processor will take care of the more detail EIP verb action. So I don't will to use verbs for the EIP actions in Camel DSL.  Any thoughts?  Willem. I think we need to align the Java and Spring DSL so we use the same verbs otherwise it's confusing. So I think we need to clean both Java and Spring DSL if they are not correct.  We better take the API breaks in a big bang with 2.0 than newer.. Willem I dont understand you @ALL. Could you give an example?. Here is the java doc for the splitter method in ProcessorType /**  Creates the <a href="http://activemq.apache.org/camel/delayer.html">Delayer</a> pattern where an expression is used to calculate the time which the message will be dispatched on * @return the builder */ public ThrottlerType throttler(long maximumRequestCount) { ThrottlerType answer = new ThrottlerType(maximumRequestCount); addOutput(answer); return answer; }  we could think the throtter method as the ThrotterType creating method  and it is same with the Spring configuration such as  <camelContext id="camel" xmlns="http://activemq.apache.org/camel/schema/spring"> <route> <from uri="seda:a" /> <throttler maximumRequestsPerPeriod="3" timePeriodMillis="30000"> <to uri="mock:result" /> </throttler> </route> </camelContext>  In this way we could just think to put a throttler in the middle of router rule  if your are using the GUI to write the rule   you just drop a box which name is throttler in the rule digraph. If the EPI action is named with noun  it will make the Spring DSL   even the Camel GUI more consistent with the Java DSL.. Well first of all the javadoc was wrong - I created a ticket CAMEL-1087  I thought the idea of this ticket was to use better wording (verbs) for the DSL  So for instance if you have a route like:  from(x).throttler(10).to(y)   Then when you read it in English it's not correct. It should be:  from(x).throttle(10).to(y)   The same applies for splitter -> split aggregator -> aggregate delayer -> delay. Yes  it could be a huge change. I will head to this now. Do we still need to support throttler in camel 2.0 at the same time?  It is not easy to make the Spring DSL support both throttler and throttle.. I think we need to break the compability. So the Java DSL should just rename the verbs (no need to mark @deprecated) otherwise the method list when end users hit ctrl+space gets to big.  And hence the spring DSL should also be renamed.  But I also think we need a [HEADS UP] or [DISCUSS] on the dev forum about this breaking  so everyone agrees that we do this. > It is not easy to make the Spring DSL support both throttler and throttle. No not possible. Actually  it is possible  but I think we'll be trading different kinds of pains for the users. Since we'll have to removed them at some point  better do it now.  +1 of Claus' proposal to break compatibility.. Changing the method name:  In the ProcessorType splitter -> split Done resequencer -> resequence Done aggregator -> aggregate Done delayer -> delay Done throttler -> throttle Done  In the ExceptionType delay -> setDelay Done. I would propose the rename the setDelay to redeliveryDelay to use a consitent builder syntax (not having set/get etc.)  In the ExceptionType setDelay -> redeliveryDelay  Using redeliveryDelay is also concise with the other fluent method such as: maximumRedeliveryDelay. @Claus good suggestion  I will change it in my next commit.. @Willem  Should the spring DSL also be changed to use the same verbs as the Java DSL?  For instance: @XmlRootElement(name = "throttler") Should be: @XmlRootElement(name = "throttle")  And remeber to change the attribute in RedeliveryPolicyType to also be redeliveryDelay so it's aligned with the Java DSL fluent builder syntax: @XmlAttribute private Long delay;. Changed the JAXB annotations AggregatorType @XmlRootElement(name = "aggregator") -> @XmlRootElement(name = "aggregate")  DelayerType @XmlRootElement(name = "delay") -> @XmlRootElement(name = "delay") @XmlElement private Long delay = 0L; -> @XmlElement private Long delayTime = 0L;  RedeliveryPolicyType @XmlAttribute private Long delay; -> @XmlAttribute private Long redeliveryDelay;  ResequencerType @XmlRootElement(name = "resequencer") -> @XmlRootElement(name = "resequence")  SplitterType @XmlRootElement(name = "splitter") -> @XmlRootElement(name = "split")  ThrottlerType @XmlRootElement(name = "throttler") -> @XmlRootElement(name = "throttle"). We should document on the 2.0 release notes that the DSL have changed for the above types.. committed the change and updated the 2.0 release notes.. Closing 2.0m1 tickets. 
New Feature,James Strachan,2007-07-04T19:37:46+0000,1183577866,,implementation and test case added (ThrottlerTest in camel-core) just needs documentation. See rev: 553312. documentation: http://cwiki.apache.org/CAMEL/throttler.html. 
Improvement,James Strachan,2007-07-04T19:40:01+0000,1183578001,something like   mockEndpoint.expectMessagesAscending(header("foo")),see documentation: http://cwiki.apache.org/CAMEL/mock.html. 
New Feature,Unassigned,2007-07-08T06:02:40+0000,1183874560,to make it easy to perform conditional routing based on if a message matches a certain XSD etc,For JAXP validation (XSD) see http://cwiki.apache.org/CAMEL/validation.html  for RelaxNG see http://cwiki.apache.org/CAMEL/jing.html. 
New Feature,Unassigned,2007-07-08T06:07:06+0000,1183874826,,
New Feature,James Strachan,2007-07-08T06:15:51+0000,1183875351,,Code added to trunk in the activemq-core module - just waiting for documentation here... http://cwiki.apache.org/ACTIVEMQ/enterprise-integration-patterns.html. 
New Feature,James Strachan,2007-07-08T06:24:45+0000,1183875885,we could keep support for queue: prefix for a short while  deprecating it; then remove it completely in 1.2.  the name "seda:" is probably better,Done (rev 554600) see documentation: http://cwiki.apache.org/CAMEL/seda.html. 
Improvement,Unassigned,2007-07-08T06:38:25+0000,1183876705,,Code committed; also the old [From|To|*]Builder classes have been removed and replaced with the camel.model.*Type classes which map to the JAXB2 XML too. 
Bug,Unassigned,2007-07-08T10:33:06+0000,1183890786,Because of the File.separator is different between the unix and windows system.  So the test can't pass in windows box. I just attached a patch for it.   Please have a look at it  I tested it in windows box.,patch applied with thanks!. 
Improvement,Unassigned,2007-07-09T06:07:26+0000,1183961246,This demo only setup the router and does not show how the messages which should be routed I did as the REAME said  but I only get the some broker service start up code info. I can't see the Received exchange: *** logger info as the camel-example-jms-file shows.  We need to add the code or description to show how to generate the jms message for the router.,I guess we could do like te ETL example - and use a directory of files as a source of messages to send to JMS (allowing folks to write a file to disk as a way of sending a message etc)?. This is my first patch.  There are two examples in the patch: First :how to create jms message for router; Another :like the ETL example but via JMS.  Please check it. Many Thanks.. Sorry please check the v2 path. It should save as UTF-8.  Many thanks!  PS:There seems like when I have created the patch the META-INF/serviese/org/apache/camel/TypeConverter resume to the latest svn version?. Its fixed in the 1.3 release.  This release outputs the XML received.. Closed all 1.3 tickets. 
New Feature,James Strachan,2007-07-12T11:31:15+0000,1184239875,,See the camel-juel module committed at rev: 555586. Docs at http://activemq.apache.org/camel/el.html. 
Sub-task,Jonas B. Lim,2007-07-17T06:46:21+0000,1184654781,let's  move  internal links inside docbook. Currently  all the links are pointing to the website url,Hiram's change to use princexml.com fixes this issue. 
Sub-task,Jonas B. Lim,2007-07-23T11:32:26+0000,1185190346,I wonder if this warning is an issue? Am wondering if pretty-printing formatting the XML as its written to disk (with newlines and indentations) would fix it?   [INFO] [docbkx:generate-pdf  {execution: execution2} ] [INFO] Processing manual.xml [INFO] Using com.icl.saxon.aelfred.SAXDriver as SAX2 Parser [INFO] building formatting object tree [INFO] setting up fonts [INFO] [1] [INFO] [2] [INFO] [1] [INFO] [2] [INFO] area contents overflows area in line  [INFO] [3] [INFO] area contents overflows area in line,fixed in rev. 559771. 
Improvement,Unassigned,2007-07-26T18:22:18+0000,1185474138,,The ETL Sample shows this working fine http://activemq.apache.org/camel/etl-example.html. 
Improvement,Unassigned,2007-07-26T18:44:26+0000,1185475466,,code successfully converted to JAXB2 now and all tests now passing. 
Improvement,James Strachan,2007-07-27T08:37:05+0000,1185525425,,Initial code checked in.  Documentation is here: http://cwiki.apache.org/CAMEL/etl-example.html. 
Bug,Hadrian Zbarcea,2007-07-27T14:04:05+0000,1185545045,Caused by:  <4|true|0.9.6-incubating> org.apache.openjpa.persistence.ArgumentException: The type "class org.apache.camel.processor.idempotent.jpa.MessageProcessed" has not been enhanced. 	at org.apache.openjpa.meta.ClassMetaData.resolveMeta(ClassMetaData.java:1590) 	at org.apache.openjpa.meta.ClassMetaData.resolve(ClassMetaData.java:1564) 	at org.apache.openjpa.meta.MetaDataRepository.processBuffer(MetaDataRepository.java:654) 	at org.apache.openjpa.meta.MetaDataRepository.resolveMeta(MetaDataRepository.java:554) 	at org.apache.openjpa.meta.MetaDataRepository.resolve(MetaDataRepository.java:479) 	at org.apache.openjpa.meta.MetaDataRepository.getMetaData(MetaDataRepository.java:283) 	at org.apache.openjpa.kernel.jpql.JPQLExpressionBuilder.getClassMetaData(JPQLExpressionBuilder.java:162) 	at org.apache.openjpa.kernel.jpql.JPQLExpressionBuilder.resolveClassMetaData(JPQLExpressionBuilder.java:131) 	at org.apache.openjpa.kernel.jpql.JPQLExpressionBuilder.getCandidateMetaData(JPQLExpressionBuilder.java:211) 	at org.apache.openjpa.kernel.jpql.JPQLExpressionBuilder.getCandidateMetaData(JPQLExpressionBuilder.java:181) 	at org.apache.openjpa.kernel.jpql.JPQLExpressionBuilder.getCandidateType(JPQLExpressionBuilder.java:174) 	at org.apache.openjpa.kernel.jpql.JPQLExpressionBuilder.access$500(JPQLExpressionBuilder.java:61) 	at org.apache.openjpa.kernel.jpql.JPQLExpressionBuilder$ParsedJPQL.populate(JPQLExpressionBuilder.java:1657) 	at org.apache.openjpa.kernel.jpql.JPQLParser.populate(JPQLParser.java:52) 	at org.apache.openjpa.kernel.ExpressionStoreQuery.populateFromCompilation(ExpressionStoreQuery.java:145) 	at org.apache.openjpa.kernel.QueryImpl.newCompilation(QueryImpl.java:642) 	at org.apache.openjpa.kernel.QueryImpl.compilationFromCache(QueryImpl.java:623) 	at org.apache.openjpa.kernel.QueryImpl.compileForCompilation(QueryImpl.java:589) 	at org.apache.openjpa.kernel.QueryImpl.compileForExecutor(QueryImpl.java:651) 	at org.apache.openjpa.kernel.QueryImpl.getOperation(QueryImpl.java:1464) 	at org.apache.openjpa.kernel.DelegatingQuery.getOperation(DelegatingQuery.java:120) 	at org.apache.openjpa.persistence.QueryImpl.execute(QueryImpl.java:202) 	at org.apache.openjpa.persistence.QueryImpl.getResultList(QueryImpl.java:251) 	at org.springframework.orm.jpa.JpaTemplate$9.doInJpa(JpaTemplate.java:313) 	at org.springframework.orm.jpa.JpaTemplate.execute(JpaTemplate.java:191) 	at org.springframework.orm.jpa.JpaTemplate.executeFind(JpaTemplate.java:158) 	at org.springframework.orm.jpa.JpaTemplate.find(JpaTemplate.java:305) 	at org.apache.camel.processor.idempotent.jpa.JpaMessageIdRepository$1.doInTransaction(JpaMessageIdRepository.java:76) 	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:127) 	at org.apache.camel.processor.idempotent.jpa.JpaMessageIdRepository.contains(JpaMessageIdRepository.java:73) 	at org.apache.camel.processor.idempotent.IdempotentConsumer.process(IdempotentConsumer.java:57) 	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:77) 	at org.apache.camel.component.direct.DirectEndpoint.process(DirectEndpoint.java:65) 	at org.apache.camel.component.direct.DirectEndpoint$1.process(DirectEndpoint.java:54) 	at org.apache.camel.util.ProducerCache.send(ProducerCache.java:91) 	at org.apache.camel.CamelTemplate.send(CamelTemplate.java:93) 	at org.apache.camel.processor.IdempotentConsumerTest.sendMessage(IdempotentConsumerTest.java:51) 	at org.apache.camel.processor.IdempotentConsumerTest.testDuplicateMessagesAreFilteredOut(IdempotentConsumerTest.java:40) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) 	at java.lang.reflect.Method.invoke(Method.java:585) 	at junit.framework.TestCase.runTest(TestCase.java:168) 	at junit.framework.TestCase.runBare(TestCase.java:134) 	at junit.framework.TestResult$1.protect(TestResult.java:110) 	at junit.framework.TestResult.runProtected(TestResult.java:128) 	at junit.framework.TestResult.run(TestResult.java:113) 	at junit.framework.TestCase.run(TestCase.java:124) 	at junit.framework.TestSuite.runTest(TestSuite.java:232) 	at junit.framework.TestSuite.run(TestSuite.java:227) 	at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:128) 	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196) [                          main] DeadLetterChannel              ERROR On delivery attempt: 3 caught: org.springframework.dao.InvalidDataAccessApiUsageException: The type "class org.apache.camel.processor.idempotent.jpa.MessageProcessed" has not been enhanced.; nested exception is <4|true|0.9.6-incubating> org.apache.openjpa.persistence.ArgumentException: The type "class org.apache.camel.processor.idempotent.jpa.MessageProcessed" has not been enhanced. org.springframework.dao.InvalidDataAccessApiUsageException: The type "class org.apache.camel.processor.idempotent.jpa.MessageProcessed" has not been enhanced.; nested exception is <4|true|0.9.6-incubating> org.apache.openjpa.persistence.ArgumentException: The type "class org.apache.camel.processor.idempotent.jpa.MessageProcessed" has not been enhanced. Caused by:  <4|true|0.9.6-incubating> org.apache.openjpa.persistence.ArgumentException: The type "class org.apache.camel.processor.idempotent.jpa.MessageProcessed" has not been enhanced. 	at org.apache.openjpa.meta.ClassMetaData.resolveMeta(ClassMetaData.java:1590) 	at org.apache.openjpa.meta.ClassMetaData.resolve(ClassMetaData.java:1564) 	at org.apache.openjpa.meta.MetaDataRepository.processBuffer(MetaDataRepository.java:654) 	at org.apache.openjpa.meta.MetaDataRepository.resolveMeta(MetaDataRepository.java:554) 	at org.apache.openjpa.meta.MetaDataRepository.resolve(MetaDataRepository.java:479) 	at org.apache.openjpa.meta.MetaDataRepository.getMetaData(MetaDataRepository.java:283) 	at org.apache.openjpa.kernel.jpql.JPQLExpressionBuilder.getClassMetaData(JPQLExpressionBuilder.java:162) 	at org.apache.openjpa.kernel.jpql.JPQLExpressionBuilder.resolveClassMetaData(JPQLExpressionBuilder.java:131) 	at org.apache.openjpa.kernel.jpql.JPQLExpressionBuilder.getCandidateMetaData(JPQLExpressionBuilder.java:211) 	at org.apache.openjpa.kernel.jpql.JPQLExpressionBuilder.getCandidateMetaData(JPQLExpressionBuilder.java:181) 	at org.apache.openjpa.kernel.jpql.JPQLExpressionBuilder.getCandidateType(JPQLExpressionBuilder.java:174) 	at org.apache.openjpa.kernel.jpql.JPQLExpressionBuilder.access$500(JPQLExpressionBuilder.java:61) 	at org.apache.openjpa.kernel.jpql.JPQLExpressionBuilder$ParsedJPQL.populate(JPQLExpressionBuilder.java:1657) 	at org.apache.openjpa.kernel.jpql.JPQLParser.populate(JPQLParser.java:52) 	at org.apache.openjpa.kernel.ExpressionStoreQuery.populateFromCompilation(ExpressionStoreQuery.java:145) 	at org.apache.openjpa.kernel.QueryImpl.newCompilation(QueryImpl.java:642) 	at org.apache.openjpa.kernel.QueryImpl.compilationFromCache(QueryImpl.java:623) 	at org.apache.openjpa.kernel.QueryImpl.compileForCompilation(QueryImpl.java:589) 	at org.apache.openjpa.kernel.QueryImpl.compileForExecutor(QueryImpl.java:651) 	at org.apache.openjpa.kernel.QueryImpl.getOperation(QueryImpl.java:1464) 	at org.apache.openjpa.kernel.DelegatingQuery.getOperation(DelegatingQuery.java:120) 	at org.apache.openjpa.persistence.QueryImpl.execute(QueryImpl.java:202) 	at org.apache.openjpa.persistence.QueryImpl.getResultList(QueryImpl.java:251) 	at org.springframework.orm.jpa.JpaTemplate$9.doInJpa(JpaTemplate.java:313) 	at org.springframework.orm.jpa.JpaTemplate.execute(JpaTemplate.java:191) 	at org.springframework.orm.jpa.JpaTemplate.executeFind(JpaTemplate.java:158) 	at org.springframework.orm.jpa.JpaTemplate.find(JpaTemplate.java:305) 	at org.apache.camel.processor.idempotent.jpa.JpaMessageIdRepository$1.doInTransaction(JpaMessageIdRepository.java:76) 	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:127) 	at org.apache.camel.processor.idempotent.jpa.JpaMessageIdRepository.contains(JpaMessageIdRepository.java:73) 	at org.apache.camel.processor.idempotent.IdempotentConsumer.process(IdempotentConsumer.java:57) 	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:77) 	at org.apache.camel.component.direct.DirectEndpoint.process(DirectEndpoint.java:65) 	at org.apache.camel.component.direct.DirectEndpoint$1.process(DirectEndpoint.java:54) 	at org.apache.camel.util.ProducerCache.send(ProducerCache.java:91) 	at org.apache.camel.CamelTemplate.send(CamelTemplate.java:93) 	at org.apache.camel.processor.IdempotentConsumerTest.sendMessage(IdempotentConsumerTest.java:51) 	at org.apache.camel.processor.IdempotentConsumerTest.testDuplicateMessagesAreFilteredOut(IdempotentConsumerTest.java:40) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) 	at java.lang.reflect.Method.invoke(Method.java:585) 	at junit.framework.TestCase.runTest(TestCase.java:168) 	at junit.framework.TestCase.runBare(TestCase.java:134) 	at junit.framework.TestResult$1.protect(TestResult.java:110) 	at junit.framework.TestResult.runProtected(TestResult.java:128) 	at junit.framework.TestResult.run(TestResult.java:113) 	at junit.framework.TestCase.run(TestCase.java:124) 	at junit.framework.TestSuite.runTest(TestSuite.java:232) 	at junit.framework.TestSuite.run(TestSuite.java:227) 	at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:128) 	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196) [                          main] DeadLetterChannel              ERROR On delivery attempt: 4 caught: org.springframework.dao.InvalidDataAccessApiUsageException: The type "class org.apache.camel.processor.idempotent.jpa.MessageProcessed" has not been enhanced.; nested exception is <4|true|0.9.6-incubating> org.apache.openjpa.persistence.ArgumentException: The type "class org.apache.camel.processor.idempotent.jpa.MessageProcessed" has not been enhanced. org.springframework.dao.InvalidDataAccessApiUsageException: The type "class org.apache.camel.processor.idempotent.jpa.MessageProcessed" has not been enhanced.; nested exception is <4|true|0.9.6-incubating> org.apache.openjpa.persistence.ArgumentException: The type "class org.apache.camel.processor.idempotent.jpa.MessageProcessed" has not been enhanced. Caused by:  <4|true|0.9.6-incubating> org.apache.openjpa.persistence.ArgumentException: The type "class org.apache.camel.processor.idempotent.jpa.MessageProcessed" has not been enhanced. 	at org.apache.openjpa.meta.ClassMetaData.resolveMeta(ClassMetaData.java:1590) 	at org.apache.openjpa.meta.ClassMetaData.resolve(ClassMetaData.java:1564) 	at org.apache.openjpa.meta.MetaDataRepository.processBuffer(MetaDataRepository.java:654) 	at org.apache.openjpa.meta.MetaDataRepository.resolveMeta(MetaDataRepository.java:554) 	at org.apache.openjpa.meta.MetaDataRepository.resolve(MetaDataRepository.java:479) 	at org.apache.openjpa.meta.MetaDataRepository.getMetaData(MetaDataRepository.java:283) 	at org.apache.openjpa.kernel.jpql.JPQLExpressionBuilder.getClassMetaData(JPQLExpressionBuilder.java:162)  [...],Possible cleanup issue. The test always works on a clean working copy. Subsequent runs consistently fail. Removing the target dir manually causes the test to pass once.  This happens on winxp  don't know about other platforms.. I wonder if switching the database to use HSQL DB (i.e. memory only) fixes this?. set the patch available flag. Patch applied with thanks! I made a minor change  cleaning up the repo on the start of the test rather than the end (in case a test fails mid-way through). The call to the cleanup method is actually commented out  so the cleanup doesn't take place.. Also updated log4j.properties to make test cases succeed silently.. Patch applied with thanks! can you double check all the patches you intended have been applied correctly please? We can reopen if we've missed anything. 
Bug,Unassigned,2007-07-27T14:31:38+0000,1185546698,With the current logic  during stop the service is both started and stopped.,Patch applied with thanks!. 
New Feature,James Strachan,2007-08-01T05:28:19+0000,1185946099,e.g. with a wire tap it'd be nice to do   to("log:theLoggingCategory?level=error"),code committed  just needs documenting. Documentation here: http://cwiki.apache.org/CAMEL/log.html. 
Improvement,Unassigned,2007-08-02T23:06:30+0000,1186095990,Converting from String to ByteBuffer is pretty straightforward  we should supply a TypeConverter which can do so,we have bidirectional String <-> ByteBuffer converters now. 
Improvement,Hadrian Zbarcea,2007-08-02T23:41:31+0000,1186098091,When there is no type converter available an NPE is thrown that requires tracing through sources to find root of problem,Hadrian - I'm thinking this should be more at the runtime level rather than the java-dsl-creation of the route definition. Am also wondering about consistency. If we throw exceptions in the convertBody(Type) DSL entry  we should be consistent - should we also throw checked exceptions on the TypeConverter API too?. This discussion came up on the dev list... http://www.nabble.com/Re%3A-Some-Notes-on-Using-Camel-p12462313s22882.html  If we think there might be ambiguity between null as a conversion result and as a marker of no conversion available - then we need to use exceptions for NoTypeConversionAvailableException in the Type Conversion module - then these would just filter up in the DSL when using things like convertBody(someClass). This is hard to remedy. Camel internals is used to/dependent upon that Camel silently ignores the fact that it could no convert the type and returns a null.  We have other tickets reported in JIRA for improvements to the type converter system to get  hold of meta data so you can do context based type conversions (get access to the Exchange etc.) get hold of user specified encodings for conversion with bytes etc.. A patch that lets the null passes through. However still plenty of unit test failures due Camel internals is used to returns null instead of thrown a exception. Just committed partial fix. This wasn't a fun one.. Hadrian great work. Yeah that was a tought job.  I think we should consider for camel 2.0 to let IntrospectionSupport throw NoTypeConversionAvailableException in the convert method. Or since its mostly used internally we could consider adding NoTypeConversionAvailableException to the throws list.  Then we avoid wrapping this  as I don't like that when we have the NoTypeConversionAvailableException class to be thrown in these conditions.. I think I nailed it. I committed more fixes for the failing components. I hope I didn't miss any. I'll check again in the morning  document the fix as it may have impact on user's processors and then we can close this.  The impact should not be significant  but could be annoying because instead of checking for null  users should change their code to catch the runtime exception NoTypeConversionAvailableException.. Finally.... Closing all 1.5.0 issues. 
Bug,James Strachan,2007-08-03T04:26:19+0000,1186115179,It appears that the deprecation of the Queue component means the VM component incorrectly complains that it is deprecated.,Great spot - many thanks Taylor!. 
Improvement,Unassigned,2007-08-03T07:21:55+0000,1186125715,Currently we have various approaches to POJOs in Camel   	POJO component which provides a proxy to any interface; which creates a PojoInvocation as a message body which sends to a camel endpoint; then a server side which consumes the message and invokes the server 	a Bean component which binds messages to any bean in spring 	a bean post processor (spring) which can inject various Camel resources via annotations; plus allows a method on a POJO to consume messages by binding flexibly the method to a message exchange 	a spring remoting implementation    We need to rationalise the code and promote reuse across these integration points.,The code now reuses the same common Processor (BeanProcessor) for invoking a bean from any Camel exchange however a bean is connected to a message exchange (bean post processor via annotations  or the bean component).  I've unified the POJO and Bean components together (there's now just the Bean component which has moved from Spring to camel-core). This also uses the Camel Registry to find the POJO - so we can use the bean component with JNDI to find the beans if the user is not using spring etc. The POJO component now really has turned into the ProxyHelper which allows a proxy to be created for any bean (which the implementation sends a message to Camel)  Finally the binding mechanism between a message exchange on the bean can now use the BeanInvocation body if the body can be converted to that (which defines exactly what the method is and its parameters) - or the message might include a header to describe the method  or the type of the body is used to figure out which method to invoke (if a single method call is unambiguous  otherwise its an error). See the documentation here  http://cwiki.apache.org/CAMEL/bean-integration.html. 
New Feature,Unassigned,2007-08-03T19:46:57+0000,1186170417,,code committed  just waiting for documentation. Here's the documentation http://cwiki.apache.org/CAMEL/ognl.html. 
New Feature,James Strachan,2007-08-06T14:00:41+0000,1186408841,,code committed to camel-msv  just waiting for documentation. http://cwiki.apache.org/CAMEL/msv.html. 
New Feature,Unassigned,2007-08-07T09:52:00+0000,1186480320,So far it appears that Jing is the only library capable of validating using RNC  so lets have a camel-jing component,code committed in the camel-jing module - just waiting for documentation. see http://cwiki.apache.org/CAMEL/jing.html. 
Improvement,James Strachan,2007-08-08T15:16:06+0000,1186586166,,
New Feature,James Strachan,2007-08-08T15:28:35+0000,1186586915,,the code is in examples/camel-example-bam we just need the documentation. See the documentation here: http://cwiki.apache.org/CAMEL/bam-example.html. 
New Feature,Unassigned,2007-08-09T16:31:37+0000,1186677097,See this discussion for details of the feature...  http://www.nabble.com/Exception-based-routing-tf4226796s22882.html,Implementation committed; see these test cases...  https://svn.apache.org/repos/asf/activemq/camel/trunk/camel-core/src/test/java/org/apache/camel/processor/InterceptRouteTest.java https://svn.apache.org/repos/asf/activemq/camel/trunk/camel-core/src/test/java/org/apache/camel/processor/InterceptWithPredicateAndProceedRouteTest.java https://svn.apache.org/repos/asf/activemq/camel/trunk/camel-core/src/test/java/org/apache/camel/processor/InterceptWithPredicateRouteTest.java https://svn.apache.org/repos/asf/activemq/camel/trunk/camel-core/src/test/java/org/apache/camel/processor/InterceptWithoutProceedRouteTest.java  just waiting for documentation.... See the documentation here: http://cwiki.apache.org/CAMEL/dsl.html. 
New Feature,Unassigned,2007-08-09T17:36:35+0000,1186680995,For discussions see this thread http://www.nabble.com/Exception-based-routing-tf4226796s22882.html,Code implemented - see this test case  https://svn.apache.org/repos/asf/activemq/camel/trunk/camel-core/src/test/java/org/apache/camel/processor/ValidationWithExceptionTest.java  just waiting for documentation. Documentation here: http://cwiki.apache.org/CAMEL/exception-clause.html. 
Improvement,Claus Ibsen,2007-08-10T07:15:22+0000,1186730122,If we are given a File body  we could optmiise the implementation to use either FileChannel. transferFrom() or FileChannel.transferTo(),I do plan to do some upgrades of the File component so I might as well have this assigned as wel... Fixed in rev 684296. Closing all 1.5.0 issues. 
Bug,Unassigned,2007-08-10T07:17:38+0000,1186730258,See http://www.nabble.com/FileConsumer-to-FileProducer-bug-tf4245175s22882.html for issue and patch,See the test case  https://svn.apache.org/repos/asf/activemq/camel/trunk/camel-core/src/test/java/org/apache/camel/component/file/FileConsumerProducerRouteTest.java. 
Bug,James Strachan,2007-08-10T11:53:53+0000,1186746833,e.g JMSCorrelationID  JMSReplyTo  JMSType,also the other JMS properties like JMSMessageID and JMSDestination are not explicitly visible on the Exchange/Message APIs - unless casting to the JmsExchange/JmsMessage and grabbing the underlying JMS Message object. Fixed - see test cases  https://svn.apache.org/repos/asf/activemq/camel/trunk/components/camel-activemq/src/test/java/org/apache/camel/component/activemq/ActiveMQJmsHeaderRouteTest.java https://svn.apache.org/repos/asf/activemq/camel/trunk/components/camel-activemq/src/test/java/org/apache/camel/component/activemq/ActiveMQReplyToHeaderUsingConverterTest.java. 
Improvement,James Strachan,2007-08-10T15:49:32+0000,1186760972,e.g. something like   exception(Validation.class).maximumRetries(3);  from("foo").to("bar");,for more background see: http://www.nabble.com/Exception-based-routing-tf4226796s22882.html. see the test case https://svn.apache.org/repos/asf/activemq/camel/trunk/camel-core/src/test/java/org/apache/camel/processor/RedeliveryPolicyPerExceptionTest.java. Documentation here: http://cwiki.apache.org/CAMEL/exception-clause.html. 
Bug,Unassigned,2007-08-10T16:48:14+0000,1186764494,For more details see:  http://www.nabble.com/FileConsumer-to-FtpProducer-bug-tf4249639s22882.html,Test case here: https://svn.apache.org/repos/asf/activemq/camel/trunk/components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FromFileToFtpTest.java. moved to 1.1.0 release.... 
Improvement,Unassigned,2007-08-13T14:06:33+0000,1187013993,jstrachan: I was wondering about moving the LifecycleStrategy and InstrumentationAgent from camel -> camel.spi (as they are kinda internal things for providers of Camel rather than end users) - any objections?,Patch applied with thanks!. 
Improvement,Unassigned,2007-08-13T19:28:46+0000,1187033326,This may be moot given the projects' relationship  but it's a recently introduced side effect.  Before the most recent snapshot  I was able to use Camel without any ActiveMQ jar's floating around so long as I never tried to use any "activemq:queue:foo" URI's.  Now with the most recent snapshot  the first time I do something that uses AnnotationTypeCoverterLoader  ActiveMQConverter gets loaded  and then causes a NoClassDefFoundError for ActiveMQDestination.,Any idea how to reproduce the ClassNotFoundException? e.g. the camel-core project doesn't use activemq yet it uses the AnnotationTypeConverterLoader OK?. In my case  I'm using these jars in a jboss deployment. So long as I include each individual camel jar except camel-activemq  things are OK.  Add camel-activemq to camel-spring's pom.xml  and the run "mvn test" for camel-spring. I couldn't get this to reproduce for camel-core for some reason. I apologize that this isn't the most direct example  but the stack trace looks the same.. Any chance of getting a stack trace to see exactly where this occurs?  BTW I think I get it now - Camel auto-discovers type converters in each library. So if you add  say  camel-activemq.jar to the classpath but without the activemq code  it won't be able to load the type converters defined in camel-activemq.jar.  To fix this we should just log some kinda warning that the type converters in camel-activemq cannot be used or something?. I've added a test case to try reproduce this issue...  https://svn.apache.org/repos/asf/activemq/camel/trunk/tests/camel-partial-classpath-test/  am using a custom type converter  adding camel-activemq to the classpath but (AFAIK) without ActiveMQ and its working without any errors.  Maybe this has been fixed; or maybe I'm just not doing the right thing to reproduce your issue? Any ideas how to reproduce it? e.g. an example classpath that causes problems maybe?. I figured out how to make this test case actually fail in the end; then added a fix for it.. Nice work! Out of curiosity  what was it that finally made the test case fail? I couldn't quite discern from the svn commits.. Am not 100% sure  I added a custom converter to the test case  which certainly helped; then the test didn't fail in my IDE  but definitely failed in maven (i'd maybe not ran the test in maven when I thought it wasn't failing). It could have been not failing in my IDEA due to a bad classpath (e.g. an ActiveMQ jar on the classpath etc). 
New Feature,Unassigned,2007-08-13T23:40:25+0000,1187048425,feel free to break out the inner class too...  builder to limit throughput on a given route.    package org.apache.camel.builder;  import org.apache.camel.Exchange; import org.apache.camel.Processor; import org.apache.camel.impl.ServiceSupport; import org.apache.camel.util.ServiceHelper;  public class SquelchBuilder extends FromBuilder {     private long minMessageSpacingInMs;       public SquelchBuilder(FromBuilder parent  long minMessageSpacingInMs)  {         super(parent);         this.minMessageSpacingInMs = minMessageSpacingInMs;     }      public SquelchProcessor createProcessor() throws Exception  {         // lets create a single processor for all child predicates         final Processor childProcessor = super.createProcessor();         return new SquelchProcessor(minMessageSpacingInMs  childProcessor);     }      class SquelchProcessor extends ServiceSupport implements Processor {         private long minMessageSpacingInMs;         private Processor processor;         private long nextLetThroughTime;          public SquelchProcessor(long minMessageSpacingInMs  Processor processor)  {             this.minMessageSpacingInMs = minMessageSpacingInMs;             this.processor = processor;         }          public void process(Exchange exchange) throws Exception {             final long now = System.currentTimeMillis();             if (now < nextLetThroughTime)  {                 final long sleepTime = nextLetThroughTime - now;                 Thread.sleep(sleepTime);             }             processor.process(exchange);             nextLetThroughTime = System.currentTimeMillis() + minMessageSpacingInMs; // reset the now         }          protected void doStart() throws Exception  {             ServiceHelper.startServices(processor);         }          protected void doStop() throws Exception  {             ServiceHelper.stopServices(processor);         }     } }     add this method in FromBuilder (might need to change the annotations  not sure how they affect things...)     @Fluent     public SquelchBuilder squelch(             @FluentArg(value = "minMessageSpacingInMs"  element = true)             long minMessageSpacingInMs)  {         SquelchBuilder answer = new SquelchBuilder(this  minMessageSpacingInMs);         addProcessBuilder(answer);         return answer;     },[3:42pm] nnordrum: hey chirino_m  does Camel have a "squaker"  i.e. only let 5 messages through a second [3:42pm] chirino_m: don't recall off the to of my head. [3:43pm] nnordrum: should be pretty simple to do though... would you do it as a component  or a processor? [3:44pm] chirino_m: could be either. [3:44pm] chirino_m: but I think a component is more reasonable [3:44pm] chirino_m: since it acts like a queue. [3:44pm] nnordrum: that's what I was thinking... [3:44pm] chirino_m: you might want to even extend the seda component  just discovered there's a throttler.... 
New Feature,Claus Ibsen,2007-08-14T12:18:22+0000,1187093902,,Moving to 2.0. Notice this only applies for non transactions (i.e. using the DeadLetterChannel as error handler). Added to 2.0  Sending camel-core\src\main\java\org\apache\camel\model\ExceptionType.java Sending camel-core\src\main\java\org\apache\camel\processor\DeadLetterChannel.java Sending camel-core\src\main\java\org\apache\camel\processor\RedeliveryPolicy.java Adding camel-core\src\test\java\org\apache\camel\processor\onexception\OnExceptionRetryUntilTest.java Transmitting file data .... Committed revision 721149.  Updated exception clause wiki documentation and release notes DONE. Closing 2.0m1 tickets. 
Bug,Unassigned,2007-08-14T18:22:55+0000,1187115775,Caused by: java.lang.ClassCastException: org.springframework.context.support.GenericApplicationContext             at org.apache.camel.spring.SpringCamelContext.createInjector(SpringCamelCon text.java:147)             at org.apache.camel.impl.DefaultCamelContext.getInjector(DefaultCamelContex t.java:322)             at org.apache.camel.impl.DefaultCamelContext.forceLazyInitialization(Defaul tCamelContext.java:407)             at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.ja va:373)             at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.ja va:139)             at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:38)             at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(Camel ContextFactoryBean.java:103)             ... 20 more,I've just committed a patch which I think resolves this - need a test case to be sure.... added a test case in CamelContextFactoryBeanTest. 
Task,Hadrian Zbarcea,2007-08-14T18:34:42+0000,1187116482,,Fancy taking a stab at this one?. unflagged the patch available  as there isn't one yet. It looks like I didn't verify that the patch got attached. Sorry. I think I found a jira bug though.. Patch applied with thanks!. 
Bug,Unassigned,2007-08-14T21:27:14+0000,1187126834,Thanks to NIO's awesomely intuitive behavior  the FileProducer is only writing out the first & last buffers it reads.  Apparently ByteBuffer needs to be cleared after each FileChannel write?,Added patch. Patch applied with thanks!. 
Bug,James Strachan,2007-08-15T12:16:52+0000,1187180212,For a full breakdown of the investigation and issue see  http://www.nabble.com/CAMEL-and-ActiveMQ5---Integration-tf4140859s22882.html#a12160309,It seems like these are bad jars - see the thread for more details. If anyone knows how to deal with bad jars with no actual folders inside them - please let us know and we can reopen this one!. 
Bug,Hiram R. Chirino,2007-08-16T05:05:47+0000,1187240747,org.apache.camel.component.activemq.JournalRouteTest fails due to accumulation of messages and no cleanup.  The attached patch fixes the test by creating and cleaning up an AsyncDataManager.  The JournalEndpoint does not expose its inner AsyncDataManager nor does it provide a cleanup method.  So the cleanup has to be done manually via activemq api.  Is that sufficient?,Hi.. the test case should consume the message. so there should be no accumulation of messages.  There was a bug in the ActiveMQ journal code where the mark was not being store properly but this has now been committed. Hadrian  could you check to see if the reported bug goes away if you run it against a freshly built SNAPSHOT?  Thanks  Hiram. Hi  I can confirm that the test runs fine now both in a clean local copy and during subsequent runs. Thanks  hz. 
Improvement,James Strachan,2007-08-16T08:17:05+0000,1187252225,So that   class Cheese {   @EndpointInject   ProducerTemplate fooEndpoint; }    would look up in the registry (such as Spring AppContext) to find "fooEndpoint",code checked into svn; just requires a test case to confirm it does actually work!. test case added to InjectBeanTest in camel-spring. 
New Feature,Unassigned,2007-08-16T16:28:36+0000,1187281716,For routes that start and end with File-based endpoints  there's utility in preserving the pathnames of the Files relative to the endpoints  instead of using generated message id's.  Modified RemoteFileProducers to behave more like FileProducers  writing to a pre-specified filename if it's in the message's header.  I used FileComponent.HEADER_FILE_NAME to settle on a standard.  Modified RemoteFileConsumers and FileConsumer to place the relative path in the header if the setNames property is set to true.  By default this property is set to false  because I haven't tested this out with Windows.  For example  using the route from("file://incoming/path/?setNames=true").to("ftp://somehost/outgoing/")  the file "incoming/path/some/nested/filename" would get transferred to "ftp://somehow/outgoing/some/nested/filename",Patch applied - many thanks Aaron  thats awesome.  I actually made this behaviour the default - since I can't see much of a reason to ever not preserve the relative file name. In those rare cases  you can always use the DSL to fix it. e.g.  from("file:foo").setHeader("org.apache.camel.file.name"  null).to("file:foo")   We could maybe add a producer flag that says to ignore the file name. 
Improvement,James Strachan,2007-08-16T19:00:21+0000,1187290821,,code in SVN along with test case (InjectBeanTest in camel-spring). 
Bug,Unassigned,2007-08-16T20:18:11+0000,1187295491,See  http://www.nabble.com/Exception-based-routing-tf4226796s22882.html#a12183747,See the test case  https://svn.apache.org/repos/asf/activemq/camel/trunk/camel-core/src/test/java/org/apache/camel/processor/BeanWithExceptionTest.java. 
Bug,Unassigned,2007-08-17T16:05:54+0000,1187366754,See thread: http://www.nabble.com/MethodName-in-header-is-ignored-by-beanRef%28%29-tf4285009s22882.html#a12198390,See test case ActiveMQReplyToHeaderUsingConverterTest. 
Improvement,James Strachan,2007-08-19T04:39:03+0000,1187498343,,see BeanWithPropertiesAndHeadersInjectionTest. 
Improvement,Unassigned,2007-08-20T06:48:03+0000,1187592483,,
Improvement,Hadrian Zbarcea,2007-08-21T19:51:46+0000,1187725906,I ran into a problem where I need to move some data from a Header into the body. It would be nice to supply the exchange to the type converter o this can be done in type conversion rather than as an explicit processor,Need access to metadata about charset to use for encoding etc.  So while working on a clever way of getting hold on the Exchange you could also think about how to get hold of other kind of metadata for the future.. This is important  scoping it for 1.4 release. It'd be nice to be able to pass in context parameters  like Exchange or Message as another parameter to the converter.  e.g.  public InputStream toStream(File file  Exchange context)  {....}. Hadrian see also the chat log for yesterday. James and I had a little chat about this one.  But it would really be great for Camel 1.5 to get this one. We need this especially for byte converters that need encoding configuration.. Closing all 1.5.0 issues. 
Improvement,Unassigned,2007-08-23T14:06:27+0000,1187877987,currently the timer component assumes its used with runnable beans; we should change that so it just sends a message exchange that can then be used to poll any endpoint etc.  maybe setting a header for the time etc,See http://cwiki.apache.org/CAMEL/timer.html. 
Task,James Strachan,2007-08-24T07:09:19+0000,1187939359,,Am guessing this is resolved now? If not let us know and we can reopen. 
Sub-task,Unassigned,2007-08-24T07:20:36+0000,1187940036,CXFProducer  holds the CXF client's reference CXFConsumer holds the  CXF server's reference  Now I just wrote a router test which redirect a service request from CXFService A to CXFService B  I attached a patch and a svn state out put which would be helpful to verify the files statues,After applying your changes I get these compile errors  /workspace/java/camel/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfConsumer.java:[24 38] package org.apache.cxf.transport.local does not exist  /workspace/java/camel/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfEndpoint.java:[26 38] package org.apache.cxf.transport.local does not exist  /workspace/java/camel/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfConsumer.java:[33 18] cannot find symbol symbol  : class LocalTransportFactory location: class org.apache.camel.component.cxf.CxfConsumer  /workspace/java/camel/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfConsumer.java:[36 66] cannot find symbol symbol  : class LocalTransportFactory location: class org.apache.camel.component.cxf.CxfConsumer  /workspace/java/camel/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfComponent.java:[30 38] package org.apache.cxf.transport.local does not exist  /workspace/java/camel/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfEndpoint.java:[80 11] cannot find symbol symbol  : class LocalTransportFactory location: class org.apache.camel.component.cxf.CxfEndpoint  /workspace/java/camel/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfComponent.java:[39 12] cannot find symbol symbol  : class LocalTransportFactory location: class org.apache.camel.component.cxf.CxfComponent  /workspace/java/camel/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfComponent.java:[61 11] cannot find symbol symbol  : class LocalTransportFactory location: class org.apache.camel.component.cxf.CxfComponent  /workspace/java/camel/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfComponent.java:[71 41] cannot find symbol symbol  : class LocalTransportFactory location: class org.apache.camel.component.cxf.CxfComponent  /workspace/java/camel/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfComponent.java:[75 14] cannot find symbol symbol  : class LocalTransportFactory location: class org.apache.camel.component.cxf.CxfComponent  /workspace/java/camel/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CamelInvoker.java:[10 30] cannot find symbol symbol  : class MessageContentsList location: package org.apache.cxf.message  /workspace/java/camel/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfEndpoint.java:[46 15] internal error; cannot instantiate org.apache.camel.component.cxf.CxfProducer.<init> at org.apache.camel.component.cxf.CxfProducer to ()  /workspace/java/camel/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfComponent.java:[65 44] cannot find symbol symbol  : class LocalTransportFactory location: class org.apache.camel.component.cxf.CxfComponent  /workspace/java/camel/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfComponent.java:[78 16] cannot find symbol symbol  : class LocalTransportFactory location: class org.apache.camel.component.cxf.CxfComponent  /workspace/java/camel/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfComponent.java:[78 65] cannot find symbol symbol  : variable LocalTransportFactory location: class org.apache.camel.component.cxf.CxfComponent  /workspace/java/camel/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CamelInvoker.java:[32 25] cannot find symbol symbol  : class MessageContentsList location: class org.apache.camel.component.cxf.CamelInvoker  /workspace/java/camel/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfProducer.java:[78 31] cannot find symbol symbol  : method getAddress() location: class org.apache.camel.component.cxf.CxfEndpoint  /workspace/java/camel/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfProducer.java:[79 28] cannot find symbol symbol  : method getServiceClass() location: class org.apache.camel.component.cxf.CxfEndpoint  /workspace/java/camel/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfProducer.java:[80 63] cannot find symbol symbol  : method getServiceClass() location: class org.apache.camel.component.cxf.CxfEndpoint  /workspace/java/camel/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfProducer.java:[82 28] cannot find symbol symbol  : method getWsdlURL() location: class org.apache.camel.component.cxf.CxfEndpoint  /workspace/java/camel/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfProducer.java:[83 35] cannot find symbol symbol  : method getWsdlURL() location: class org.apache.camel.component.cxf.CxfEndpoint. BTW is it your intention in this patch to delete the CxfInvoke component right? Are you saying that you are combining both CXF components together right?. Adding back the transport-local dependency you deleted removes some of the compile errors...  /workspace/java/camel/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfEndpoint.java:[46 15] cannot find symbol symbol  : constructor CxfProducer(org.apache.camel.component.cxf.CxfEndpoint org.apache.cxf.transport.local.LocalTransportFactory) location: class org.apache.camel.component.cxf.CxfProducer  /workspace/java/camel/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfProducer.java:[78 31] cannot find symbol symbol  : method getAddress() location: class org.apache.camel.component.cxf.CxfEndpoint  /workspace/java/camel/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfProducer.java:[79 28] cannot find symbol symbol  : method getServiceClass() location: class org.apache.camel.component.cxf.CxfEndpoint  /workspace/java/camel/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfProducer.java:[80 63] cannot find symbol symbol  : method getServiceClass() location: class org.apache.camel.component.cxf.CxfEndpoint  /workspace/java/camel/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfProducer.java:[82 28] cannot find symbol symbol  : method getWsdlURL() location: class org.apache.camel.component.cxf.CxfEndpoint  /workspace/java/camel/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfProducer.java:[83 35] cannot find symbol symbol  : method getWsdlURL() location: class org.apache.camel.component.cxf.CxfEndpoint   Am guessing you used a different CXF version?. Hmm - it seems that the patch cannot be applied on a few files - e.g. the CxfEndpoint.java patch. As it seems your patch is against an old version of the code?  e.g. your patch uses the line    * @version $Revision$   when trunk is   * @version $Revision: 563665 $   Any chance you could do an 'svn update' to ensure you are using the latest/greatest trunk  then create the patch again please? As right now I cant apply it. remove the cxf invoke componet. patch for cxf componets. So I've tried IDEA  eclipse  patch and TextMate. None of them are capable of applying your latest cxf.patch2 file. I've no idea what it is you're doing thats screwing up any attempt at an automated apply.  How are you creating the patch file?  Here's the output from patch...  stracbook:/workspace/java/camel jstrachan$ patch -i ~/Desktop/cxf.patch2  (Stripping trailing CRs from patch.) patching file CxfRouterTest.java (Stripping trailing CRs from patch.) patching file CxfProducerTest.java (Stripping trailing CRs from patch.) can't find file to patch at input line 227 Perhaps you should have used the -p or --strip option? The text leading up to this was: -------------------------- | |Property changes on: components\camel-cxf\src\test\java\org\apache\camel\component\cxf\CxfProducerTest.java |___________________________________________________________________ |Name: svn:keywords |   + Rev Date |Name: svn:eol-style |   + native | |Index: components/camel-cxf/src/test/java/org/apache/camel/component/cxf/HelloServiceImpl.java |=================================================================== |--- components/camel-cxf/src/test/java/org/apache/camel/component/cxf/HelloServiceImpl.java    (revision 570399) |+++ components/camel-cxf/src/test/java/org/apache/camel/component/cxf/HelloServiceImpl.java    (working copy) -------------------------- File to patch: ^C   In Ecilpse most of the changes are marked with a red ! which means eclipse won't apply them.. Here are the rejections from TextMate (which seems to give the best rejection messages)  *************** *** 16 42 ****    */   package org.apache.camel.component.cxf;    - import java.net.URI;   import java.util.Map;      import org.apache.camel.CamelContext;   import org.apache.camel.Endpoint;   import org.apache.camel.impl.DefaultComponent; - import org.apache.cxf.Bus; - import org.apache.cxf.BusException; - import org.apache.cxf.bus.CXFBusFactory; - import org.apache.cxf.service.model.EndpointInfo; - import org.apache.cxf.transport.DestinationFactoryManager; - import org.apache.cxf.transport.local.LocalTransportFactory; - import org.xmlsoap.schemas.wsdl.http.AddressType;      /**    * Defines the <a href="http://activemq.apache.org/camel/cxf.html">CXF Component</a>       * @version $Revision$    */   public class CxfComponent extends DefaultComponent<CxfExchange> { -     private LocalTransportFactory localTransportFactory;          public CxfComponent() {       } --- 16 36 ----    */   package org.apache.camel.component.cxf;      import java.util.Map;      import org.apache.camel.CamelContext;   import org.apache.camel.Endpoint;   import org.apache.camel.impl.DefaultComponent; + import org.apache.camel.util.IntrospectionSupport;    +    /**    * Defines the <a href="http://activemq.apache.org/camel/cxf.html">CXF Component</a>       * @version $Revision$    */   public class CxfComponent extends DefaultComponent<CxfExchange> { + 	          public CxfComponent() {       }  *************** *** 18 72 ****      import org.apache.camel.Processor;   import org.apache.camel.impl.DefaultConsumer;   import org.apache.cxf.message.Message;   import org.apache.cxf.transport.Destination;   import org.apache.cxf.transport.MessageObserver; - import org.apache.cxf.transport.local.LocalTransportFactory;      /**    * A consumer of exchanges for a service in CXF    *     * @version $Revision$    */   public class CxfConsumer extends DefaultConsumer<CxfExchange> { -     private CxfEndpoint endpoint; -     private final LocalTransportFactory transportFactory;       private Destination destination;    -     public CxfConsumer(CxfEndpoint endpoint  Processor processor  LocalTransportFactory transportFactory) {           super(endpoint  processor);           this.endpoint = endpoint; -         this.transportFactory = transportFactory;       }          @Override       protected void doStart() throws Exception { -         super.doStart(); -  -         destination = transportFactory.getDestination(endpoint.getEndpointInfo()); -         destination.setMessageObserver(new MessageObserver() { -             public void onMessage(Message message) { -                 incomingCxfMessage(message); -             } -         });       }          @Override       protected void doStop() throws Exception { -         if (destination != null) { -             destination.shutdown(); -         }           super.doStop();       }    -     protected void incomingCxfMessage(Message message) { -         try { -             CxfExchange exchange = endpoint.createExchange(message); -             getProcessor().process(exchange); -         } catch (Exception e) { -             // TODO: what do do if we are getting processing errors from camel? -             // Shutdown? -             e.printStackTrace(); -         } -     }   } --- 18 71 ----      import org.apache.camel.Processor;   import org.apache.camel.impl.DefaultConsumer; + import org.apache.cxf.endpoint.Server; + import org.apache.cxf.frontend.ServerFactoryBean;   import org.apache.cxf.message.Message;   import org.apache.cxf.transport.Destination;   import org.apache.cxf.transport.MessageObserver;    +    /**    * A consumer of exchanges for a service in CXF    *     * @version $Revision$    */   public class CxfConsumer extends DefaultConsumer<CxfExchange> { +     private CxfEndpoint endpoint;     +     private Server server;       private Destination destination;    +     public CxfConsumer(CxfEndpoint endpoint  Processor processor) throws ClassNotFoundException { +                   super(endpoint  processor); +         System.out.println(processor.toString());           this.endpoint = endpoint; +         //we setup the interceptors by the endpoint configuration +         //create server here  now we just use the simple front-end         +         ServerFactoryBean svrBean = new ServerFactoryBean(); +         Class serviceClass = Class.forName(endpoint.getServiceClass());         +         svrBean.setAddress(endpoint.getAddress()); +         svrBean.setServiceClass(serviceClass); +         if (endpoint.isInvoker()) { +             System.out.println("setup the invoker "); +             svrBean.setInvoker(new CamelInvoker(this)); +         }     +         svrBean.setStart(false); +         server = svrBean.create();       }          @Override       protected void doStart() throws Exception { +         super.doStart();         +          +         server.start();       }          @Override       protected void doStop() throws Exception { +         server.stop();           super.doStop();       }    +        }  *************** *** 16 53 ****    */   package org.apache.camel.component.cxf;      import org.apache.camel.Consumer;   import org.apache.camel.Processor;   import org.apache.camel.Producer;   import org.apache.camel.impl.DefaultEndpoint; - import org.apache.cxf.BusException;   import org.apache.cxf.message.Message; - import org.apache.cxf.service.model.EndpointInfo; - import org.apache.cxf.transport.local.LocalTransportFactory;      /**    * Defines the <a href="http://activemq.apache.org/camel/cxf.html">CXF Endpoint</a>    *     * @version $Revision$    */ - public class CxfEndpoint extends DefaultEndpoint<CxfExchange> {       private CxfBinding binding; -     private final CxfComponent component; -     private final EndpointInfo endpointInfo;       private boolean inOut = true;    -     public CxfEndpoint(String uri  CxfComponent component  EndpointInfo endpointInfo) {           super(uri  component); -         this.component = component; -         this.endpointInfo = endpointInfo;       } -        public Producer<CxfExchange> createProducer() throws Exception { -         return new CxfProducer(this  getLocalTransportFactory());       }          public Consumer<CxfExchange> createConsumer(Processor processor) throws Exception { -         return new CxfConsumer(this  processor  getLocalTransportFactory());       }          public CxfExchange createExchange() { --- 16 59 ----    */   package org.apache.camel.component.cxf;    + import javax.xml.namespace.QName; +    import org.apache.camel.Consumer;   import org.apache.camel.Processor;   import org.apache.camel.Producer;   import org.apache.camel.impl.DefaultEndpoint; + import org.apache.cxf.endpoint.Endpoint;   import org.apache.cxf.message.Message;    +    /**    * Defines the <a href="http://activemq.apache.org/camel/cxf.html">CXF Endpoint</a>    *     * @version $Revision$    */ + public class CxfEndpoint extends DefaultEndpoint<CxfExchange> {     +     private final CxfComponent component; +     private final String address; +     private String wsdlURL; +     private String serviceClass;       private CxfBinding binding; +     private QName portName; +     private QName serviceName;       private boolean inOut = true; +     private boolean invoker = true;    +     public CxfEndpoint(String uri  String address  CxfComponent component) {           super(uri  component); +         this.component = component;         +         this.address = address;       } +                public Producer<CxfExchange> createProducer() throws Exception { +         return new CxfProducer(this);       }          public Consumer<CxfExchange> createConsumer(Processor processor) throws Exception { +         return new CxfConsumer(this  processor);       }          public CxfExchange createExchange() {. Patch applied with thanks! Could you check I've applied it correctly please?. 
Sub-task,James Strachan,2007-08-24T07:54:23+0000,1187942063,,Support spring context in CXF endpoint  which can help camel to build up CXF Server and CXF Client. Added of the CXF endpoint spring support. Now camel-cxf component support the get the cxf endpoint information from the Spring Application Context The CXF endpoint schema CxfEndpoint.xsd can be found at trunk/components/camel-cxf/src/main/resources/schema/cxfEndpoint.xsd  The endpoint spring example can be found at trunk/components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/GreeterEndpointBeans.xml  BTW  this patch(cxf-spring.patch) also includes the CAMEL-162's patch.. Patch applied with thanks!. 
Improvement,Unassigned,2007-08-24T08:40:07+0000,1187944807,then folks could poll a HTTP resource via  from("http://foo.bar").to("...") etc,The jetty sever is now in it's own component.. see rev 570501. 
Sub-task,Unassigned,2007-08-24T08:43:44+0000,1187945024,A CXF request message will be handled with a bunch of interceptor  we can dived these different stage message to raw message   payload message  and POJO invocation Raw Message This message is the fresh message which come from CXF transport  it is not been handled any other interceptors . Payload Message The message which is marshaled message headers and leave the remain message as StaX stream reader. POJO invocation The client side request will be marshaled into Java objcets as the POJO invocation finally  we can it a POJO invocation.  This task just work on to enable the CXF components to deal with RawMessage and Payload Message.,The patch 121 has some unit tests to show how to create a camel router with different message model. I will continue to do some clean up work about it task   they are listed in the todo comments of the code.. Current CXF component do not support the oneway message and handle the fault message in the PAYLOAD and MESSAGE Data Formate. The patch now doesn't work as I've applied CAMEL-119.  Any chance you could re-create the patch for this issue?. Hi James   This patch has been applied by chirino in the revision 576522 at Sep 17. I think we can close it now.  Willem.. applied by chirino in the revision 576522 at Sep 17.. 
Task,Hadrian Zbarcea,2007-08-25T06:55:26+0000,1188024926,,James has recently added stuff so you can ref to a spring bean that is the error handler and redelivery policy. So in fact you can do all the spring configuration. Maybe this issue is less important now.. I agree with Claus on this one. Hadrian  if you haven't put too much work into this  maybe we could move to 2.0?. I think if we need full DSL support using the same name as java DSL then there are many xml elements to add  and what if end-users mix/match with this and the errorHandlerRef stuff? Then it gets complicated.  However maybe we can not do complex error handling routing as in Java DSL. How do you do this?  errorHandler(deadLetterChannel()).processRef(myErrorProcessor).to("bean:someBean).to("file://backup/errror");   beware of syntax error as Firefox does not have code intellisence. The Spring DSL can now properly do error handling  albeit you should define it as spring beans etc.  See wiki doc: http://camel.apache.org/error-handler.html. Closing 2.0m1 tickets. 
Improvement,Claus Ibsen,2007-08-25T06:58:53+0000,1188025133,e.g. file / FTP should only delete the file after successful processing has occurred etc,have added a UnitOfWork object on an Exchange which can act as the registration point for onComplete / onFailure callbacks - it just needs to be wired into the sync/async processing changes Hiram made yesterday. James any update/status on this? Is there some work pending?. The File components could benefit from this so they will hook into UOW and get a onComplete or onFailure callbacks.  These components handle it themself today using try .. catch logic.  I might as well take on this one and use the file component as use-case. For starters the API can be exposed internally/spi and later we can consider some nice DSL supports so you can attach custom code to be invoked.. UnitOfWork is only weaven into the route if you use the route builder.  For manual code such as creating a consumer from an endpoint will not inject the UoW. We got a catch-22 situation  UnitOfWorkProcessor set up the add/remove synchronzation callbacks but they are lazy created just before the Exchange is processed. So in another component/consumer component/producer you can not add the synchronization before its processed.  But you need to use the async processor and do it in the callback done method.  Need to look into this some more. The idea is also to expose some nice methods in the DSL so end users can add their own custom processing  such as being able to send an email  log or whatever an exchange is done/failed.. A work in progress patch.  We need to step back and rethink this one. James have some good ideas.. [13:22] <jstrachan> cibsen: with all this consumer v route v UOW; we maybe need a review of all that code really - as when we allow for routes to be started/stopped as independent things it might change things a bit [13:23] <cibsen> yeah [13:24] <cibsen> there is a gremlin lying there waiting when starting/stopping routes is more dynamic [13:24] <cibsen> I will park my work and attach a patch to the ticket [13:26] <jstrachan> yeah [13:26] <jstrachan> might have a big impact when we try add that [13:26] <jstrachan> it'd be great if we can keep all the big impacts inside the core common impl of camel rather than having component/endpoint developers having to worry about it [13:29] <cibsen> +1 [13:29] <cibsen> yeah I wanted the UoW stuff for components as well so they can register custom code for clean up [13:29] <jstrachan> yeah! [13:29] <jstrachan> however that works - we need a nice simple API the component developers can use [13:30] <jstrachan> then we can tinker under the covers to figure out how it works [13:30] <jstrachan> (whether using real spring transactions  or UOW or whatever) [13:30] <jstrachan> maybe we should just use spring transactions for example? [13:30] <cibsen> I also thoght that we needed a nice DSL in the route: from.onComplete(process).to(zzz) [13:30] <jstrachan> and just kinda make transactions look like a transaction manager? [13:30] <jstrachan> though then there's the transaction context propogating threads issue etc [13:30] <jstrachan> yeah [13:31] <jstrachan> we might also want to be able to start/stop routes by ID too [13:31] <cibsen> yeah i think we should stick with Spring TX [13:31] <jstrachan> yeah [13:31] <cibsen> its to comple to roll out your own [13:31] <jstrachan> lets do it  [13:31] <jstrachan> yeah [13:31] <jstrachan> then we'd just need a file transaction manager [13:31] <jstrachan> or some kinda 'simple local transaction manager' for non-tx resources. We need a bit more time on this one  and I want to narrow down on a milestone build of Camel 2.0. CAMEL-1604 implements this feature. Closing all 2.0M2 tickets. 
Improvement,Claus Ibsen,2007-08-25T06:59:54+0000,1188025194,,Scheduled for Camel 2.0 where we have time to refactor so we can have more common code in file  ftp etc using a VFS.. The major refactor to camel-ftp introduced the RemoteFileProcessStrategy.  We have these strategies  delete rename lock. Closing 2.0m1 tickets. 
Improvement,Unassigned,2007-08-26T17:00:33+0000,1188147633,Attached is a patch that adds a stream-processing resequencer to Camel. The resequencing algorithm is based on the detection of gaps in a message stream rather than on a fixed batch size. Gap detection in combination with timeouts removes the constraint of having to know the number of messages of a sequence in advance (although a capacity parameter prevents the resequencer from running out of memory)   Route builder examples for the stream-processing resequencer:  from("direct:start").resequencer(header("seqnum")).stream().to("mock:result")  is equivalent to:  from("direct:start").resequencer(header("seqnum")).stream(StreamResequencerConfig.getDefault()).to("mock:result")  Custom values for the resequencer's capacity and timeout can be set like in this example:  from("direct:start").resequencer(header("seqnum")).stream(new StreamResequencerConfig(300  4000L)).to("mock:result")  The XML configuration looks like:   <camelContext id="camel" xmlns="http://activemq.apache.org/camel/schema/spring">   <route>     <from uri="direct:start"/>     <resequencer>       <simple>in.header.seqnum</simple>       <to uri="mock:result" />       <stream-config capacity="300"  timeout="4000"/>     </resequencer>   </route> </camelContext>    The existing batch-processing resequencer can be defined as usual:  from("direct:start").resequencer(header("seqnum")).to("mock:result")  which is now equivalent to   from("direct:start").resequencer(header("seqnum")).batch().to("mock:result")  It is now also possible to define a custom configuration for the existing batch-processing resequencer:    from("direct:start").resequencer(header("seqnum")).batch(new BatchResequencerConfig(300  4000L)).to("mock:result")  This set the batchSize to 300 and the batchTimeout to 4000 ms.   For the stream-processing resequencer to work  messages must contain a sequence number for which a predecessor and a successor is known. For example a message with the sequence number 3 has a predecessor message with the sequence number 2 and a successor message with the sequence number 4. The message sequence 2 3 5 has a gap because the sucessor of 3 is missing. The resequencer therefore has to retain message 5 until message 4 arrives (or a timeout occurs).   Gap detection is done with strategies that implement the SequenceNumberComparator<E> interface. In addition to the java.util.Comparator<E>.compare(E  E) operation the SequenceNumberComparator<E> interface defines the predecessor(E  E) and successor(E  E) operations. The stream resequencer can be configured with cutstom SequenceNumberComparator<E> strategies.  The stream-processing resequencer uses the same algorithm as the one in ServiceMix-3.2-SNAPSHOT (servicemix-eip). In order to avoid compile-time dependencies to ServiceMix I've copied the ServiceMix-independent resequencing engine over to Camel. This redundancy should be removed once Camel and servicemix-eip are going to be combined (are they?). I can contribute to this task  if needed.,Awesome patch and comments! Am on vacation today but will hopefully get chance to review fully and commit on tueday.  Incidentally yes I'd love to combine camel and servicemix-eip together - contributions most welcome. In ServiceMix 4 it'd be great to combine them into Camel and have ServiceMix natively understand Camel components maybe (FWIW the Camel API is extremely close to the new ServiceMix 4 APIs). Contributions always welcome! Keep up the great work Martin!. Patch applied with huge thanks - great work Martin!  One thought I had was  should we make the ResequenceEngine take a Processor type thing to deliver messages rather than using the Queue and SequenceSender. I guess we could reuse a SedaProcessor or something; I did wonder if we might want to support synchronous dispatch of the messages for easier transaction handling.  e.g. in one JMS session say  consume a bunch of messages and send them on in the right order - in a single thread & JMS transaction.. ... Processor instead of Queue and SequenceSender: Good idea. I'll provide a patch (within the next two weeks  I hope).  ... Synchronous dispatch: Here I can imagine to use a polling consumer as done in org.apache.camel.processor.Resequencer. With a small (configurable) receive-timeout (e.g. of 200 ms) the polling consumer repeatedly receives messages and adds it to resequencer engine. With every receive-timeout the polling thread also attempts to deliver() re-ordered exchanges (to the next processor). In this case we can turn off the deliver() call from the internal timer thread and we remain with a single thread that performs the delivery/dispatch. Does this address your point? If yes  I'll start working on that and provide a patch.  Cheers  Martin. ... and thanks for applying the patches. 
Improvement,Gert Vanthienen,2007-08-28T11:09:53+0000,1188299393,Currently the ResequencerEngine uses a Queue for asynchronous delivery of the messages. We might want to provide a Processor instead; so we could if we prefer use synchronous dispatch.   e.g. to be able to use a single thread and JMS transaction on a single JMS session (to avoid XA etc) to do    	consume messages 	reorder 	send them on to another destination 	jms session.commit()    As far as I understand it  the current async mechanism will make transactional re-sequencing harder right?,Right. Also  we have turn off delivery of messages from the internal timer thread. Hope  I have a patch ready within the next days ...  I guess jms session.commit() gets implicitly called when setting the JMSConfiguration.transacted property to true (during JMSComponent setup)  right?. Attached is a patch for synchronous delivery of messages. Messages are now consumed from an endpoint and sent to the next processor by a single thread. Further unit tests are included as well.. Attached is some documentation (Wiki markup) about the stream-processing resequencer.. Sorry this issue fell through the cracks. I tried applying the patch and got compile errors in the StreamResequencer; not yet sure its that trunk has moved on since the patch was created or if its an IDEA bug applying the patch.... I could not reproduce the compile errors when using Eclipse for applying the patch. There was only a minor conflict within the javadocs. However  I re-created a patch for the latest trunk (attachment: camel-core.patch-update) to remove these minor conflicts. Also  the path names in the patch are now relative to the camel-core module.. James   can you please try again to apply the patch (camel-core.patch-update-2.zip). I re-created the patch from today's trunk.  I also tested to apply the patch locally and found that there are unmatched regions in StreamResequencer.java. Therefore  I included a local copy of StreamResequencer.java file as well. Copying the file over the old version of StreamResequencer.java in addition to applying the patch should work.  Thanks in advance  Martin. Martin   Thanks for your patch! It has been committed in http://svn.eu.apache.org/viewvc?view=rev&revision=697732. I did need to make some minor changes to get it working again  so feel free to reopen this issue and attach a new patch to correct the things I messed up in the process   Regards   Gert. Gert   thanks for applying the patch. I re-opened this issue because of a thread-safety problem introduced with the latest changes: StreamResequencer.process(Exchange) used the non-thread-safe ResequencerEngine. I changed this method to be empty (this consistent with BatchProcessor.process(Exchange)) so that exchanges are only polled from an endpoint and synchronously sent to a destination/processor using a single polling thread. The corresponding patch is camel-core.patch-update-3.  (A multi-threaded Processor-based implementation has been discussed in http://www.nabble.com/forum/ViewPost.jtp?post=19344150&framed=y&skin=22882. Not sure yet when I can provide an additional patch for that but as soon as I have one I'll open another related JIRA issue for it).  With camel-core.patch-update-3 I also added support for a more fluent resequencer configuration. For example instead of writing from(...).resequencer(...).stream(new StreamResequencerConfig(5000  4000L)) you can now alternatively write from(...).resequencer(...).stream().capacity(5000).timeout(4000L). I'll update the documentation in the Camel Wiki as soon as the patch is applied.  Regards  Martin. Martin   Thanks for the patch. I have applied it.  Please open a new ticket for the missing multi thread processor  otherwise we forget about it. Martin  I think the Config object could be a shared object for all kind that uses the BatchProcessor  resequencer aggregator  So we should consider having a shared config object for this in Camel 2.0. But I like it. Then its possible to have Java DSL and use Spring XML for dynamic values  where they are easier to spot and change.. Claus  I'll address that when I work on https://issues.apache.org/activemq/browse/CAMEL-949.. Closing all 1.5.0 issues. 
Improvement,Unassigned,2007-08-28T11:33:45+0000,1188300825,,See http://cwiki.apache.org/CAMEL/timer.html. 
New Feature,James Strachan,2007-08-28T23:18:15+0000,1188343095,Adds a JDBC component,Awesome stuff! Patch applied with thanks! Am just tinkering a bit with the test case...  We just need to document it on the wiki. I've added a basic page here...  http://cwiki.apache.org/confluence/display/CAMEL/JDBC  Fancy filling in any more details?. Documentation is here: http://cwiki.apache.org/CAMEL/jdbc.html. 
New Feature,Hiram R. Chirino,2007-08-29T16:02:21+0000,1188403341,,The lack of support for doing this was first noticed on this thread: http://www.nabble.com/JMSExpiration-not-being-maintained-by-routing--tf4346887s22882.html. The JMS endpoint now supports a a preserveMessageQos=  {boolean}  option. This option is used by the endpoint producer when sending a message to JMS to determine if it should use the QoS options that are in the message that it is given when sending.  example usage:  from("activemq:queue:p1").to("activemq:queue:p2?preserveMessageQos=true");. fixed in trunk in rev 570851. 
New Feature,Hiram R. Chirino,2007-08-30T14:51:35+0000,1188485495,,Implemented but it looks like the Jetty client implementation still has a few bugs in it so I don't recommend it get used in anger yet.. 
New Feature,James Strachan,2007-08-30T14:52:39+0000,1188485559,,implemented.. 
Improvement,Unassigned,2007-08-31T11:12:02+0000,1188558722,,fixed  see HttpPollingGetTest. 
Improvement,Unassigned,2007-08-31T15:22:10+0000,1188573730,currently MINA assumes InOnly; we should make it easy to configure things to be InOut or InOnly - maybe also defaulting the MEP via a URI parameter?,trunk now supports Exchange.getExchangePattern() which is-a ExchangePattern. now you can do endpoint.createExchange(pattern) to specify an exact ExchangePattern to be used on an endpoint. I was in need to communicate with a text based protocol socket. I am adding a patch to configure codec via URI parameters. This patch also allows for InOut ExchangePattern on the MinaProducer and waits for response.  There is test case (MinaTcpWithInOutTest) using the ReverserServer from mina examples. The test case only works when stepping via debugger and not when run... I think its related to the AsyncProcessor changes. Please take a look. Fixed the previous problem with this patch. It now runs fine ( I learnt that I have to wait for the response and there is no ReadFuture equivalent of WriteFuture).. patch applied with huge thanks Nicky! Great job!. 
Improvement,James Strachan,2007-09-03T15:30:34+0000,1188833434,,I've added some debug logging to DefaultCamelContext and DefaultComponentResolver to provide debug logging of how components are resolved and to show which component creates endpoint URIs.  I wonder how this could be improved? I wonder if we should invent some logging names for the discovery of components / endpoints / type converters so its easy to watch the 'magic' via log4j config files?. Am gonna mark this one as fixed for now; if anyone has any good ideas for how to improve this we can reopen it. 
Improvement,James Strachan,2007-09-04T17:29:23+0000,1188926963,when sending a message exchange into a pipeline  the pipeline should terminate as soon as there's any kind of exception or fault.  also the output  fault and exception should be returned from the last step called in a pipeline,For examples of this working  see the FaultRouteTest and PipelineTest. 
Improvement,Unassigned,2007-09-06T11:34:21+0000,1189078461,e.g. to support reordering according to the JMSXGroupID / JMSXGroupSeq headers we only reorder messages for the same value of JMSXGroupID if the sequence numbers are out of range.  For ActiveMQ we generally only reorder messages for the same Destination and ProducerId but differing ProducerSequenceId.  So in pseudocode its    if (groupComparator.compare(firstMessage  secondMessage) == 0) {   if (messageComparator.compare(firstMessage  secondMessage) > 0) {     // lets swap the messages   },Moving to 2.0. This is already fixed by Martins great resequencer:  You can also use multiple expressions; so you could for example sort by priority first then some other custom header  resequencer(header("JMSPriority")  header("MyCustomerRating")). Closing 2.0m1 tickets. 
Improvement,James Strachan,2007-09-07T13:23:38+0000,1189171418,,
Improvement,James Strachan,2007-09-07T19:52:49+0000,1189194769,,
New Feature,James Strachan,2007-09-07T19:55:22+0000,1189194922,,See the docs here: http://cwiki.apache.org/CAMEL/ibatis.html. 
Bug,Unassigned,2007-09-10T14:17:19+0000,1189433839,XsltBuilder uses a ResultHandler instance variable to hold the result of the transformation. That makes it thread unsafe and at the same time  as it's never cleared/reset  it can't be used more then once.,Great catch! Many thanks Dejan! I've patched this to create a stack-local result instead. 
Improvement,Unassigned,2007-09-11T05:46:12+0000,1189489572,,committed - see the SimpleTest for some example expressions that work such as "foo ${in.headers.cheese}!". 
Improvement,Unassigned,2007-09-11T05:46:57+0000,1189489617,,see SimulatorTest in camel-core using the simple language or in camel-juel using EL. 
Improvement,Unassigned,2007-09-11T09:56:38+0000,1189504598,Xpath xml element offers no way to define namespace mappings.,Fixed! Here's a test case showing it in action...  https://svn.apache.org/repos/asf/activemq/camel/trunk/components/camel-spring/src/test/resources/org/apache/camel/spring/processor/xpathFilterWithNamespace.xml  https://svn.apache.org/repos/asf/activemq/camel/trunk/components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringXPathFilterWithNamespaceTest.java. 
New Feature,James Strachan,2007-09-12T04:53:21+0000,1189572801,,We can reconsider in the future if we find a neat way of ensuring the DSL can stay in sync with the model from camel-core. Just keeping the scala DSL in sync is hard already.. Closing all resolved tickets from 2010 or older. 
New Feature,James Strachan,2007-09-12T04:55:19+0000,1189572919,,We got plenty on our hands with the java  scala and xml based. 
New Feature,Guillaume Nodet,2007-09-12T07:28:35+0000,1189582115,,Committed revision 574819.. 
New Feature,James Strachan,2007-09-14T09:36:52+0000,1189762612,,See the documentation: http://cwiki.apache.org/CAMEL/velocity.html. 
New Feature,James Strachan,2007-09-15T05:49:58+0000,1189835398,,See the docs: http://cwiki.apache.org/CAMEL/stringtemplate.html. 
New Feature,Hiram R. Chirino,2007-09-17T23:45:09+0000,1190072709,Brian McCallister had this great idea.. add a thread() method to the DSL instead of using the seda component to do async processing.  We should be able to:         from("file:foo").thread(10).maxSize(20).to("wombat:nugget")          or        ThreadPoolExecutor pool = ...        from("file:foo").thread(pool).to("wombat:nugget"),Fixed.. 
Bug,Guillaume Nodet,2007-09-18T03:22:09+0000,1190085729,PredicateBuilder reads    public static <E extends Exchange> Predicate<E> isGreaterThanOrEqualTo(final Expression<E> left                                                                             final Expression<E> right) {         return new BinaryPredicateSupport<E>(left  right) {              protected boolean matches(E exchange  Object leftValue  Object rightValue)  {                 return compare(leftValue  rightValue) < 0;             }              protected String getOperationText()  {                 return ">=";             }         };     }  This should be  return compare(leftValue  rightValue) >= 0;,Fixed  thx for reporting this!  Sending src/main/java/org/apache/camel/builder/PredicateBuilder.java Transmitting file data . Committed revision 576744.. 
New Feature,Guillaume Nodet,2007-09-18T07:41:38+0000,1190101298,,Sending camel-core/pom.xml Sending components/camel-atom/pom.xml Sending components/camel-bam/pom.xml Sending components/camel-cxf/pom.xml Sending components/camel-ftp/pom.xml Sending components/camel-groovy/pom.xml Sending components/camel-http/pom.xml Sending components/camel-ibatis/pom.xml Sending components/camel-irc/pom.xml Sending components/camel-jaxb/pom.xml Sending components/camel-jdbc/pom.xml Sending components/camel-jetty/pom.xml Sending components/camel-jhc/pom.xml Sending components/camel-jing/pom.xml Sending components/camel-jms/pom.xml Sending components/camel-josql/pom.xml Sending components/camel-jpa/pom.xml Sending components/camel-juel/pom.xml Sending components/camel-mail/pom.xml Sending components/camel-mina/pom.xml Sending components/camel-msv/pom.xml Sending components/camel-ognl/pom.xml Sending components/camel-quartz/pom.xml Sending components/camel-rmi/pom.xml Sending components/camel-ruby/pom.xml Sending components/camel-saxon/pom.xml Sending components/camel-script/pom.xml Sending components/camel-spring/pom.xml Sending components/camel-stringtemplate/pom.xml Sending components/camel-velocity/pom.xml Sending components/camel-xmlbeans/pom.xml Sending components/camel-xmpp/pom.xml Sending pom.xml Transmitting file data ................................. Committed revision 576785.. 
New Feature,Guillaume Nodet,2007-09-19T19:48:43+0000,1190231323,,URL: http://svn.apache.org/viewvc?rev=577424&view=rev. 
New Feature,Guillaume Nodet,2007-09-20T12:41:35+0000,1190292095,,Sending camel-core/src/main/java/org/apache/camel/spi/ComponentResolver.java Adding components/camel-osgi Adding components/camel-osgi/pom.xml Adding components/camel-osgi/src Adding components/camel-osgi/src/main Adding components/camel-osgi/src/main/java Adding components/camel-osgi/src/main/java/org Adding components/camel-osgi/src/main/java/org/apache Adding components/camel-osgi/src/main/java/org/apache/camel Adding components/camel-osgi/src/main/java/org/apache/camel/osgi Adding components/camel-osgi/src/main/java/org/apache/camel/osgi/CamelContextFactoryBean.java Adding components/camel-osgi/src/main/java/org/apache/camel/osgi/CamelNamespaceHandler.java Adding components/camel-osgi/src/main/java/org/apache/camel/osgi/OsgiComponentResolver.java Adding components/camel-osgi/src/main/java/org/apache/camel/osgi/package-info.java Adding components/camel-osgi/src/main/resources Adding components/camel-osgi/src/main/resources/META-INF Adding components/camel-osgi/src/main/resources/META-INF/spring.handlers Adding components/camel-osgi/src/main/resources/META-INF/spring.schemas Adding components/camel-osgi/src/main/resources/camel-osgi.xsd Adding components/camel-osgi/src/main/resources/org Adding components/camel-osgi/src/main/resources/org/apache Adding components/camel-osgi/src/main/resources/org/apache/camel Adding components/camel-osgi/src/main/resources/org/apache/camel/osgi Adding components/camel-osgi/src/main/resources/org/apache/camel/osgi/jaxb.index Sending components/pom.xml Transmitting file data ........... Committed revision 577721.. 
Bug,Hadrian Zbarcea,2007-09-24T14:31:44+0000,1190644304,When using spring to wire camel components  the whole magic is driven by org.springframework.context.support.AbstractApplicationContext.refresh().  At about line 327 the xml file is read and at some point AbstractApplicationContext.doParse is called.  What is notable is that we use parseUsingJaxb (line 135) instead of the spring way of doing things  and then we still use  BeanDefinitionParser(s) to build the BeanDefinition(s).  On a sample context definition like the one in the unit tests:   <camelContext id="camel" xmlns="http://activemq.apache.org/camel/schema/spring">     <beanPostProcessor/>     <endpoint id="endpoint1" uri="direct:start"/>     <endpoint id="endpoint2" uri="mock:end"/>      <route>       <from ref="endpoint1"/>       <to ref="endpoint2"/>     </route>   </camelContext> The jaxb parser instantiates the BeanPostProcessor  endpoints  the RouteType  From/ToTypes properly  but the BeanPostProcessor is not injected with the camelContext and applicationContext  obviously.  Later on in AbstractApplicationContext.refresh() during the registerBeanPostProcessors() call (line 337) spring figures out that it needs to instantiate the BeanPostProcessor first and use it before it initializes the other beans.  So far so good  but in doing so there are 2 major problems. 1. It uses the BeanDefinition instead of the instance already created during jaxb parsing. 2. There is a chicken and egg situation; while it initializes "camel:beanPostProcessor"  it looks for a "camel" bean which isn't registered yet.  The model for it does exist though  so a new instance of the CamelContextFactoryBean gets instantiated (and the id now is null instead of "camel" as in the spring xml).  I wrestled with this and couldn't figure out a solution.,The issue was the id not being set on the BeanDefinition  so when Spring initialized the CamelContextFactoryBean  the id was missing.  I also refactored the jmx naming conventions with this patch. Patch applied rev 579301. 
Improvement,Unassigned,2007-09-24T15:58:21+0000,1190649501,Added methods to aggregator type to configure the batch processor options,Patch applied with thanks! I made a minor change; I exposed both regular bean properties (to work nicely with JAXB2) and added separate fluent APIs (batchSize rather than setBatchSize) to match the fluent naming conventions in the rest of Camel. 
Improvement,Unassigned,2007-09-24T17:53:23+0000,1190656403,The get method needs a facility to set the query parameters dynamically.,This patch adds a QUERY constant to HttpProducer. This is the name used in the "In" message header to set the query parameter string. The attached unit test shows how to do this...heres a snippet  from("direct:start").setHeader(HttpProducer.QUERY constant("hl=en&q=activemq")).to("http://www.google.com/search").to("mock:results");. The string for query should be encoded correctly 'application/x-www-form-urlencoded'...EncodingUtil does this...I am not sure how to do this... so for right now the onus on the user to encode the query string correctly. Many thanks - patch applied!. 
Improvement,Hadrian Zbarcea,2007-09-25T16:31:42+0000,1190737902,,patch applied with thanks!. 
Bug,Hiram R. Chirino,2007-09-26T17:06:45+0000,1190826405,,HttpBinding did was not fully implemented. fix commited in rev 579718. 
Bug,Willem Jiang,2007-09-26T20:17:10+0000,1190837830,Splitter in its process method iterates over the body of a message and processes each part synchronously. It does not propogate exceptions thrown by the processor when processing the exchange. This makes it problematic for tryBlock()....handleAll() kind of applications.,Is this still an issue for you? The Splitter class has changed quite a bit since you created this ticket.. Shouldn't exception propagation be handled by aggregationStrategy? I believe that in case of splitter when we have one exception and few successful responses it is not so obvious if it is an exception of not.  I believe that if aggregationStrategy aggregates the exception into result  then it will be handled. Maybe we should simply verify if default aggregation strategy used propagates those exceptions by choosing maybe the last one that occurred.. +1 for Roman's suggestion. I just did some change in the UseLatestAggregationStrategy.java to hold the latest exception in the exchange and added a unit test in SplitterTest to test for the propagating exceptions testing.. trunk http://svn.apache.org/viewvc?rev=727377&view=rev  1.x branch http://svn.apache.org/viewvc?rev=727409&view=rev. Closing 2.0m1 tickets. 
Bug,James Strachan,2007-09-26T23:49:05+0000,1190850545,try{}finally{} pattern does not work. There is also the problem (see test) of TryType getting lost ( a fluent API issue).,Attached a patch. I am not sure if on handleAll the dead letter handler should be disabled? However thats the implementation in the patch.. patch applied with huge thanks. 
Bug,James Strachan,2007-09-28T04:04:46+0000,1190952286,"Message Transformer" link is broken.,Great catch thanks! Have patched trunk; the nightly build should update the javadoc tomorrow. For now the right link is: http://activemq.apache.org/camel/message-translator.html. 
Improvement,Unassigned,2007-09-29T09:43:12+0000,1191058992,In RFC1738   there some unsafe characters need to encode  they are    Space   Quotation marks  'Less Than' symbol ("<")   'Greater Than' symbol (">")   'Pound' character ("#")  Percent character ("%")   Left Curly Brace (" {")     Right Curly Brace ("} ")     Vertical Bar/Pipe ("|")     Backslash ("\")     Caret ("^")     Tilde ("~")     Left Square Bracket ("[")     Right Square Bracket ("]")     Grave Accent ("`")  So I wrote an UnsafeCharactersEncoder to do this job  the unit test also was included. Please review  and apply the patch .,URLEncoder in java.net package already implements this. I suggest using that http://java.sun.com/j2se/1.3/docs/api/java/net/URLEncoder.html. This patch is just for encoding the UnsafeChararers and It will not encode the NON-ASCII characters and Reserved characters.. Willem I've applied your patch as part of CAMEL-119; but am wondering why wouldn't we just use URLEncoder instead?. Hi James   URLEncoder will encode URL Reserved characters such as "$"  "&"   "=" ":"  etc. We do not want to encode them in the component uri string. If we use the URLEncoder to do that   we can't get the parameters from the encoded uri   because there is no any "&" or "=" .  Willem.. Removed the dependency of Sun's JDK internal API. Please apply this patch ASAP  so camel can work on the other JDKs.. patch applied.. 
Improvement,James Strachan,2007-10-01T12:34:48+0000,1191242088,See: http://opensource.atlassian.com/projects/spring/browse/SPR-3890 for details. No idea if'/when this will be fixed; so lets move to the less efficient CACHE_CONNECTION for now,Patch applied. Juergen have fixed SPR-3890 in Spring 2.5.1. Check his comments in the JIRA.. Closing 1.4 issues. 
New Feature,James Strachan,2007-10-05T14:04:19+0000,1191593059,to make it easy to route messages to and from AMQP providers,Committed initial spike for this component; just requires documentation. See the docs http://cwiki.apache.org/CAMEL/amqp.html. 
New Feature,James Strachan,2007-10-08T15:10:35+0000,1191856235,Make it easy to explicit marshall/unmarshall POJOs using different encodings such as Java Serialization  JAXB2  XMLBeans etc,Its documented here: http://activemq.apache.org/camel/data-format.html. 
Bug,Unassigned,2007-10-09T05:24:42+0000,1191907482,Running org.apache.camel.processor.UnitOfWorkWithAsyncFlowTest Tests run: 3  Failures: 1  Errors: 0  Skipped: 0  Time elapsed: 20.345 sec <<< FAILURE!  This prevents developer from building camel under Linux platform. Thanks!,made a blocker for 1.2.0. Ok I figured out why this was failing. Seem that when: (1) a route completes async (like in our UnitOfWorkWithAsyncFlowTest) (2) you invoked the route via the sync form of the Processor process() API.  The test was assuming that all the registered Synchronizations on the UnitOfWork would complete before the process() call finished. Unfortunately  that's not the case. The Synchronizations are completed async and perhaps after the process call finishes.  I patched up the test cases to account for this and now they should be working.. fixed in version 583549. 
New Feature,James Strachan,2007-10-09T11:15:36+0000,1191928536,e.g. it'd be nice to do things like   from(someUri).bean(myJmsListenerBean);    and it'd work out how to invoke a JMS MessageListener from the route; or indeed any kind of service / message API or transformation API thats around.  i.e. allow a Type Converter to be specified from the POJO's class to a Processor; then if one is available use that for processing the bean.,Issue resolved. Its documented here for an example http://cwiki.apache.org/CAMEL/activemq.html  or the principle is described here... http://cwiki.apache.org/CAMEL/bean-binding.html. ActiveMQ 5.0 can use this mechanism to invoke any JMS MessageListener in a bean flow...  from(anyURI).bean(aJmsMessageListener);. 
Bug,James Strachan,2007-10-09T15:24:36+0000,1191943476,camel-ognl has a typo in its packaging. This causes the classes to be not included in the snapshot,Patch applied with thanks!. 
Bug,James Strachan,2007-10-09T18:07:36+0000,1191953256,The release candidate seems to declare dependencies on camel-core 1.1-SNAPSHOT.  A release should not declare dependencies on SNAPSHOT version and also not on previous releases.   http://people.apache.org/~chirino/apache-camel-1.2.0-RC1/maven2/org/apache/camel/camel-parent/1.2.0/camel-parent-1.2.0.pom  I checked out 1.2.0 from tags and build it myself.  I noticed that there were some 1.1 SNAPSHOT versions but did not pay too much attention to it.  I then deployed to our internal Maven repository and clean-up my local repository.  I had a dependency to camel-core 1.2.0 declared in my project.  This give me the following error:  Exception in thread "main" java.lang.NoSuchMethodError: org.apache.camel.util.CamelContextHelper.convertTo(Lorg/apache/camel/CamelContext;Ljava/lang/Class;Ljava/lang/Object;)Ljava/lang/Object;  If I remove the dependency I get the following compilation error:  Missing: ---------- 1) org.apache.camel:camel-core:jar:1.1-SNAPSHOT    Try downloading the file manually from the project website.    Then  install it using the command:       mvn install:install-file -DgroupId=org.apache.camel -DartifactId=camel-core \           -Dversion=1.1-SNAPSHOT -Dpackaging=jar -Dfile=/path/to/file Alternatively  if you host your own repository you can deploy the file there:       mvn deploy:deploy-file -DgroupId=org.apache.camel -DartifactId=camel -core \           -Dversion=1.1-SNAPSHOT -Dpackaging=jar -Dfile=/path/to/file \            -Durl=[url] -DrepositoryId=[id]    Path to dependency:         1) markettools.platform:messaging:jar:1.0-SNAPSHOT         2) org.apache.camel:camel-jms:jar:1.2.0         3) org.apache.camel:camel-core:jar:1.1-SNAPSHOT  ---------- 1 required artifact is missing.,fixed in RC2. 
Bug,Unassigned,2007-10-09T21:46:21+0000,1191966381,----Original Message---- From: Jos Dirksen jos.dirksen@gmail.com  Sent: Tuesday  October 09  2007 2:06 PM To: camel-user@activemq.apache.org Subject: Re: Receipient List seems not to work in Camel 1.2.0   I'm experiencing the same problem. With the 1.2.0 release and also with the latest from SVN. One way or the other the last route is always used.      private final static String ENDPOINT_1 = "jbi:endpoint:http://servicemix.apache.org/samples/filemover/fileSender/fileSenderEndpoint";     private final static String ENDPOINT_2 = "jbi:endpoint:http://servicemix.apache.org/samples/filemover/anotherFileSender/anotherFileSenderEndpoint";      public void configure() throws Exception  {         from("jbi:service:http://servicemix.apache.org/samples/filemover/camelReceiver").to(ENDPOINT_1 ENDPOINT_2);     }  Very simple route  however instead of sending it once to endpoint_1 it get's sent twice to endpoint_2.  I've been debugging a bit and to problem seem to occur in the " wrapProcessorInInterceptors(RouteContext routeContext  Processor target)" method of the ProcessorType class.   To be more specific  I can see my old routes being overwritten in this part of the method:          for (InterceptorType interceptorRef : interceptors) {             DelegateProcessor p = interceptorRef.createInterceptor(routeContext);             if (first == null)  {                 first = p;             }             if (last != null)  {                 last.setProcessor(p);             }             last = p;         }          if (last != null)  {             last.setProcessor(target);         }   Andreas G Guther wrote: >  > Either I am getting something wrong or the current 1.2.0 version has > some problems. >   –  View this message in context: http://www.nabble.com/Receipient-*List*-seems-not-to-work-in-Camel-1.2.0-tf4596679s22882.html#a13124770 Sent from the Camel - Users mailing list archive at Nabble.com.,FWIW I've just added this test case from that thread...  public class MyRouteBuilder extends RouteBuilder {      public static final String Q1 = "jms:test.MyQueue.ONE-1";     public static final String Q2 = "jms:test.Number.2";     public static final String Q3 = "jms:test.Number.3";      /**       * Allow this route to be run as an application       *       * @param args       */      public static void main(String[] args) {          new Main().run(args);      }       public void configure() {                  System.out.println("**** Configuring ****");          // lets populate the message queue with some messages          from("file:src/data?noop=true").to(Q1);           //from(Q1).to("file://target/test?noop=true");  // works fine  and writes into file system                  //from(Q1).to(Q2); // works also fine  writes into Q2                   //from(Q1).to("file://target/test?noop=true"  Q2); //  writes to Q2 but not to file                  //from(Q1).to(Q2  "file://target/test?noop=true"); //  writes to file but not to Q2                  from(Q1).to(Q2  Q3); // write to Q3 but not to Q2           // set up a listener on the file component          from("file://target/test?noop=true").                  bean(new SomeBean());      }       public static class SomeBean {           public void someMethod(String body) {              System.out.println("Received: " + body);          }      }  }    I refactored a little and added it as Issue170Test to camel-core - though its working fine with trunk!  Will investigate trying to break it - such as by moving to the JMS transport. OK I've added another test case which derives from Issue170Test which rather than using mock endpoints  uses JMS. So we send a message to a queue (Q1)  then go from Q1 -> two JMS queues. Then separately we consume from those 2 JMS queues to send to the 2 mock endpoints for the tests. It all works for me.  https://svn.apache.org/repos/asf/activemq/camel/trunk/components/camel-jms/src/test/java/org/apache/camel/component/jms/issues/JmsIssue170Test.java  and here's the base class which tests using just mock endpoints https://svn.apache.org/repos/asf/activemq/camel/trunk/camel-core/src/test/java/org/apache/camel/issues/Issue170Test.java  Any idea how to reproduce using just camel and file / JMS endpoints? Maybe this has now been resolved in trunk?. Until we figure out how to reproduce this issue  I'm gonna mark it as cannot reproduce - let us know if you can find a way to reproduce and we can reopen. 
Bug,Claus Ibsen,2007-10-11T03:05:14+0000,1192071914,Running org.apache.camel.component.file.remote.FromFileToFtpTest Server ready :: Apache FTP Server Oct 11  2007 10:57:43 AM org.apache.camel.component.mock.MockEndpoint assertIsSatisfied INFO: Asserting: Endpoint[mock:result] is satisfied / = true //tmp2 = true //tmp2/camel = true Oct 11  2007 10:57:44 AM org.apache.camel.processor.Logger log SEVERE: On delivery attempt: 0 caught: org.apache.camel.RuntimeCamelException: error sending file org.apache.camel.RuntimeCamelException: error sending file         at org.apache.camel.component.file.remote.FtpProducer.process(FtpProducer.java:51)         at org.apache.camel.component.file.remote.FtpProducer.process(FtpProducer.java:37)         at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsynProcessorBridge.process(AsyncProcessorTypeConverter.java:44)         at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:73)         at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:136)         at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:86)         at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:40)         at org.apache.camel.component.file.FileConsumer.pollFile(FileConsumer.java:131)         at org.apache.camel.component.file.FileConsumer.pollFileOrDirectory(FileConsumer.java:68)         at org.apache.camel.component.file.File   The build still said "successful" at the end,Will see if the test has a problem on the trunk. Was fixed on trunk.. Closed all 1.3 tickets. 
Bug,Unassigned,2007-10-11T03:07:10+0000,1192072030,Running org.apache.camel.example.JAXBConvertTest 2007-10-11 10:58:30 209 [mponent@1a99561] ERROR FileConsumer                   - com.sun.xml.bind.v2.runtime.IllegalAnnotationsException: 1 counts of IllegalAnnotationExceptions XmlElementRef points to a non-existent class.         this problem is related to the following location:                 at java.util.List org.apache.camel.converter.jaxb.MessageType.headers                 at org.apache.camel.converter.jaxb.MessageType  org.apache.camel.RuntimeCamelException: com.sun.xml.bind.v2.runtime.IllegalAnnotationsException: 1 counts of IllegalAnnotationExceptions XmlElementRef points to a non-existent class.         this problem is related to the following location:                 at java.util.List org.apache.camel.converter.jaxb.MessageType.headers                 at org.apache.camel.converter.jaxb.MessageType          at org.apache.camel.converter.jaxb.FallbackTypeConverter.convertTo(FallbackTypeConverter.java:70)         at org.apache.camel.impl.converter.DefaultTypeConverter.convertTo(DefaultTypeConverter.java:68)         at org.apache.camel.builder.ExpressionBuilder$16.evaluate(ExpressionBuilder.java:339)         at org.apache.camel.builder.ValueBuilder.evaluate(ValueBuilder.java:36)         at org.apache.camel.builder.ProcessorBuilder$1.process(ProcessorBuilder.java:42)         at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsynProcessorBridge.process(AsyncProcessorTypeConverter.java:44)         at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:136)         at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:86)         at org.apache.camel.processor.Pipeline.process(Pipeline.java:103)         at org.apache.camel.processor.Pipeline.process(Pipeline.java:87)         at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:40)         at org.apache.camel.component.file.FileConsumer.pollFile(FileConsumer.java:131)         at org.apache.camel.component.file.FileConsumer.pollFileOrDirectory(FileConsumer.java:68)         at org.apache.camel.component.file.FileConsumer.pollFileOrDirectory(FileConsumer.java:76)         at org.apache.camel.component.file.FileConsumer.poll(FileConsumer.java:49)         at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:63)         at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:417)         at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:280)         at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:135)         at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:65)         at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:142)         at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:166)         at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650)         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675)         at java.lang.Thread.run(Thread.java:595) Caused by: com.sun.xml.bind.v2.runtime.IllegalAnnotationsException: 1 counts of IllegalAnnotationExceptions XmlElementRef points to a non-existent class.         this problem is related to the following location:                 at java.util.List org.apache.camel.converter.jaxb.MessageType.headers                 at org.apache.camel.converter.jaxb.MessageType          at com.sun.xml.bind.v2.runtime.IllegalAnnotationsException$Builder.check(IllegalAnnotationsException.java:66)         at com.sun.xml.bind.v2.runtime.JAXBContextImpl.getTypeInfoSet(JAXBContextImpl.java:361)         at com.sun.xml.bind.v2.runtime.JAXBContextImpl.<init>(JAXBContextImpl.java:217)         at com.sun.xml.bind.v2.ContextFactory.createContext(ContextFactory.java:76)         at com.sun.xml.bind.v2.ContextFactory.createContext(ContextFactory.java:55),Haven't seen this error on the 1.3 trunk on either local or Bamboo.  Bozhong you you try again on the latest SVN code to see if you can reproduce the problem on your machine. If you still have a problem then we can reopen this ticket.. 
Bug,Claus Ibsen,2007-10-11T08:13:31+0000,1192090411,the example throws following error:  [pache.camel.spring.Main.main()] Main                           INFO  Apache Camel 1.2.0 starting [pache.camel.spring.Main.main()] Main                           INFO  Generating DOT file for routes: /opt/dev/apache-camel-1.2.0/examples/camel-example-bam/target/site/cameldoc for: org.apache.camel.spring.SpringCamelContext@352d87 [nent.file.FileComponent@db248c] JDBCExceptionReporter          WARN  SQL Error: 0  SQLState: null [nent.file.FileComponent@db248c] JDBCExceptionReporter          ERROR failed batch Failed to load preferences.  Proceeding with defaults:  [nent.file.FileComponent@db248c] AbstractFlushingEventListener  ERROR Could not synchronize database state with session org.hibernate.exception.GenericJDBCException: Could not execute JDBC batch update         at org.hibernate.exception.SQLStateConverter.handledNonSpecificException(SQLStateConverter.java:103)         at org.hibernate.exception.SQLStateConverter.convert(SQLStateConverter.java:91)         at org.hibernate.exception.JDBCExceptionHelper.convert(JDBCExceptionHelper.java:43)         at org.hibernate.jdbc.AbstractBatcher.executeBatch(AbstractBatcher.java:249)         at org.hibernate.engine.ActionQueue.executeActions(ActionQueue.java:235)         at org.hibernate.engine.ActionQueue.executeActions(ActionQueue.java:139)         at org.hibernate.event.def.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:298)         at org.hibernate.event.def.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:27)         at org.hibernate.impl.SessionImpl.flush(SessionImpl.java:1000)         at org.hibernate.ejb.AbstractEntityManagerImpl.flush(AbstractEntityManagerImpl.java:296)         at org.springframework.orm.jpa.JpaTemplate$8.doInJpa(JpaTemplate.java:289)         at org.springframework.orm.jpa.JpaTemplate.execute(JpaTemplate.java:191)         at org.springframework.orm.jpa.JpaTemplate.flush(JpaTemplate.java:287)         at org.apache.camel.bam.processor.JpaBamProcessorSupport.loadEntity(JpaBamProcessorSupport.java:118)         at org.apache.camel.bam.processor.BamProcessorSupport$1.doInTransaction(BamProcessorSupport.java:96)         at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:127)         at org.apache.camel.bam.processor.BamProcessorSupport.process(BamProcessorSupport.java:91)         at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsynProcessorBridge.process(AsyncProcessorTypeConverter.java:44)         at org.apache.camel.component.file.FileConsumer.pollFile(FileConsumer.java:131)         at org.apache.camel.component.file.FileConsumer.pollFileOrDirectory(FileConsumer.java:68)         at org.apache.camel.component.file.FileConsumer.pollFileOrDirectory(FileConsumer.java:76)         at org.apache.camel.component.file.FileConsumer.poll(FileConsumer.java:49)         at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:63)         at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:417)         at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:280)         at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:135)         at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:65)         at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:142)         at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:166)         at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650)         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675)         at java.lang.Thread.run(Thread.java:595) Caused by: java.sql.BatchUpdateException: failed batch         at org.hsqldb.jdbc.jdbcStatement.executeBatch(Unknown Source)         at org.hsqldb.jdbc.jdbcPreparedStatement.executeBatch(Unknown Source)         at org.hibernate.jdbc.BatchingBatcher.doExecuteBatch(BatchingBatcher.java:48)         at org.hibernate.jdbc.AbstractBatcher.executeBatch(AbstractBatcher.java:242)         ... 28 more [nent.file.FileComponent@db248c] BamProcessorSupport            INFO  Attempt to insert duplicate row due to concurrency issue  so retrying: org.springframework.orm.jpa.JpaSystemException: org.hibernate.exception.GenericJDBCException: Could not execute JDBC batch update; nested exception is javax.persistence.PersistenceException: org.hibernate.exception.GenericJDBCException: Could not execute JDBC batch update [nent.file.FileComponent@db248c] BamProcessorSupport            INFO  Retry attempt due to duplicate row: 1 [         ActivityMonitorEngine] BamFailures                    ERROR Exchange[Message: ActivityState[2 on ProcessInstance[p3] Activity[2 name: file:src/data/invoices?noop=true]]] [         ActivityMonitorEngine] BamFailures                    ERROR Exchange[Message: ActivityState[7 on ProcessInstance[p2] Activity[2 name: file:src/data/invoices?noop=true]]],The exception is happening on startup  it does not affect the application later on. However it would be nicer to remove this noise.. Agreed. I"m thinking this could be caused by concurrent threads trying to insert the same row? Am wondering if a different JDBC provider does locking better or something?. CAMEL-173  fixed concurrency issue with creating a new entity. Now using a ReentrantLock from Java. no more exceptions in the camel-bam-example demo app as well. added some assertions to the unit test. James please by all means review my patch committed.  Running the demo app now only displays:  [INFO] [camel:run] [pache.camel.spring.Main.main()] Main                           INFO  Apache Camel 1.3-SNAPSHOT starting [pache.camel.spring.Main.main()] Main                           INFO  Generating DOT file for routes: D:\project\camel\examples\camel-example-bam\target/site/cameldoc for: org.apache.camel.spring.SpringCamelContext@ae4f8b Failed to load preferences.  Proceeding with defaults:  [         ActivityMonitorEngine] BamFailures                    ERROR Exchange[Message: ActivityState[3 on ProcessInstance[p1] Activity[2 name: file:src/data/invoices?noop=true]]] [         ActivityMonitorEngine] BamFailures                    ERROR Exchange[Message: ActivityState[4 on ProcessInstance[p3] Activity[2 name: file:src/data/invoices?noop=true]]] [         ActivityMonitorEngine] BamFailures                    ERROR Exchange[Message: ActivityState[6 on ProcessInstance[p2] Activity[2 name: file:src/data/invoices?noop=true]]] Stopping. Awesome stuff!   I guess the problem could still happen if folks were running multiple JVMs against the same database; though in that case a real database would be used that properly implements locks etc. Closed all 1.3 tickets. 
Improvement,Unassigned,2007-10-11T08:34:08+0000,1192091648,right now  some examples can be run with "mvn exec:java" command  some examples can be run with "mvn camel:run" command  some example can be run with either command. We should make "how to run" behavior consistent across all examples.,Am not sure really - as the main reason we support "mvn exec:java" is for the examples which don't use spring - "mvn camel:run" is only for spring based demos.  So the only demo which should rely on mvn exec:java is the hello-world one. Its stated in the README how to run it with the correct maven command. And after all there is only two styles.  Also in 1.4 we will have ANT files to start the samples with thanks to Peter for the hard work of creating the ANT files and provide it as a patch.. 
New Feature,Unassigned,2007-10-11T12:26:17+0000,1192105577,,trunk fixed now. 
Improvement,James Strachan,2007-10-11T15:03:52+0000,1192115032,,Sorted - see the test cases in camel-jaxb. 
Bug,Unassigned,2007-10-11T21:03:09+0000,1192136589,Added to test... existing test passes  new test fails. Follow up from discussion http://www.nabble.com/Pipeline-createNewExchange-t4609319s22882.html  Index: C:/backyard/camel/camel-core/src/test/java/org/apache/camel/processor/SplitterTest.java =================================================================== — C:/backyard/camel/camel-core/src/test/java/org/apache/camel/processor/SplitterTest.java	(revision 583358) +++ C:/backyard/camel/camel-core/src/test/java/org/apache/camel/processor/SplitterTest.java	(working copy) @@ -30 19 +30 40 @@  public class SplitterTest extends ContextTestSupport {      protected Endpoint<Exchange> startEndpoint;      protected MockEndpoint resultEndpoint; +    protected MockEndpoint nextResultEndpoint;       public void testSendingAMessageUsingMulticastReceivesItsOwnExchange() throws Exception {          resultEndpoint.expectedBodiesReceived("James"  "Guillaume"  "Hiram"  "Rob"); +        nextResultEndpoint.expectedBodiesReceived("James"  "Guillaume"  "Hiram"  "Rob"); +         +        template.send("direct:a"  new Processor() { +            public void process(Exchange exchange)  { +                Message in = exchange.getIn(); +                in.setBody("James Guillaume Hiram Rob"); +                in.setHeader("foo"  "bar"); +            } +        });  +        resultEndpoint.assertIsSatisfied(); +        nextResultEndpoint.assertIsSatisfied(); +    } + +    public void testSendingAMessageDoesNotForwardOutBody() throws Exception { +        resultEndpoint.expectedBodiesReceived("James"  "Guillaume"  "Hiram"  "Rob"); +        nextResultEndpoint.expectedBodiesReceived("James"  "Guillaume"  "Hiram"  "Rob"); +                  template.send("direct:a"  new Processor() {              public void process(Exchange exchange)  {                  Message in = exchange.getIn();                  in.setBody("James Guillaume Hiram Rob");                  in.setHeader("foo"  "bar"); +                Message out = exchange.getOut(); +                out.setBody("Some Junk");              }          });           resultEndpoint.assertIsSatisfied(); +        nextResultEndpoint.assertIsSatisfied();      }       @Override @@ -50 12 +71 13 @@          super.setUp();           resultEndpoint = getMockEndpoint("mock:result"); +        nextResultEndpoint = getMockEndpoint("mock:nextResult");      }       protected RouteBuilder createRouteBuilder() {          return new RouteBuilder() {              public void configure()  { -                from("direct:a").splitter(body().tokenize(" ")).to("mock:result"); +                from("direct:a").splitter(body().tokenize(" ")).to("mock:result" "mock:nextResult");              }          };      },Please review this patch carefully. It makes some changes to the tests as well so some assertions are removed/changed to make the test pass. I did this after some thought of what a pipeline should do and am looking for other suggestions/solutions. Nicky I know this is +1 year since. But what was the original problem you try to solve?. Create a new bug if this issue still exists. We have changed a lot in the code base since this bug was reported  and James have already fixed what Nicky spotted.. 
Improvement,Unassigned,2007-10-12T19:52:49+0000,1192218769,also add a test case showing XQuery injection of a bean,the <xquery> tag is also namespace aware too; so if you do  <beans xmlns:foo="whatnot"> ...  <filter>   <xquery>//foo:bar</xquery>   You can reuse the namespace prefixes in the doc. 
Improvement,Unassigned,2007-10-13T07:54:30+0000,1192262070,If the original message in the example below contains a StreamSource  the second target in the to() will probably fail.  Auto-converting it to e.g. DOMSource should fix this...   from("jbi:service:urn:servicemix:tutorial:wiretap")          .to("jbi:endpoint:urn:servicemix:tutorial:jms:myQueue"  "jbi:endpoint:urn:servicemix:tutorial:file:sender");,This patch is a first attempt to solve this issue. As discussed on IRC  a reusable ReReadableInterceptor was created to make it easier to add message re-readability to e.g. the dead letter channel afterwards.. Great stuff. I guess there are more routes that could lead to the same body being re-read other than just the multicast type; so I guess we might wanna apply this interceptor by default anyway - or at least make it a default and let folks remove it maybe?  I can imagine we'd also wanna do things like support other types such as...  InputStream Reader  I wonder if the default behaviour should be to make things re-readable by default to avoid common issues (e.g. retry logic) - but have some way where we can explicitly disable the re-reading behaviour when we really don't want it (which is gonna be pretty rare). Second attempt in attached CAMEL-179-v2.diff  The interceptor now uses Camel's type converter with a new interface instead of a hard-coded conversion map.  I've added methods to RouteBuilder and RouteType to make it easier to use the new interceptor  but if we still want to make it the default  I would like some feedback on the asynchonous test cases going astray after implementing this – can't seem to figure out what's going on there.. Patch applied with huge thanks! Its just missed the cut of the 1.3.0 release; but I figure it'd be good to kick the tyres on this one a bit then we'll release 1.4.0 pretty soon I hope. Closed all 1.3 tickets. 
Sub-task,Unassigned,2007-10-15T08:05:01+0000,1192435501,In camel we want to create the soap endpoint which can leverage the CXF soap interceptors to do the soap message processing.  In this case we do not want to create the endpoint with the SEI   we just want to create the endpoint with WSDL.   this task includes these subtask *Supporting to create server and client without SEI  *Supporting the Spring configuration of the  CXF soap endpoint  *Processing the inMessage and outMessage,This patch implements the soap component by calling the CXF soap binding's interceptors to do the soap relate work. The unit test is CxfSoapTest  which show how to send input stream to the soap consumer and how to send the source object to a soap provider.  This patch is not include the Spring configuration support. I will create an other JIRA to trace this.. Awesome  I will have a look at it asap. the patch is in the trunk. 
Improvement,Unassigned,2007-10-15T09:25:08+0000,1192440308,,You can now do things like  from("activemq:foo.bar").filter().   then smart completion will find things like  el() groovy() ognl() xpath() xquery()  etc. We can now do better namespace based queries in XPath / XQuery now using the following                  Namespaces ns = new Namespaces("c"  "http://acme.com/cheese");                  from("direct:start").filter().                         xpath("/c:person[@name='James']"  ns).                         to("mock:result");. 
Bug,Unassigned,2007-10-17T22:41:57+0000,1192660917,Exceptions are not handled when exception processing is done by pipeline.  It is probably because pipeline breaks when exchange contains an exception and there is exception because in org.apache.camel.processor.DeadLetterChannel.process(Exchange  AsyncCallback  RedeliveryData) method when you handle exception you clear it  but just few lines later in incrementRedeliveryCounter invocation you set it back.  JUnit test attached.,I have another comment to this issue. From one side we should be able to process exception in pipeline. On the other hand we should have an access to exception that was thrown in exception handling flow. Maybe some way to reset the exception or move it to property?. Duplicate of CAMEL-210. 
New Feature,James Strachan,2007-10-18T18:37:43+0000,1192732663,,Code committed to trunk; just waiting for docs. see http://cwiki.apache.org/CAMEL/xstream.html. 
New Feature,James Strachan,2007-10-18T18:40:43+0000,1192732843,,If response of jms server and consumer ist very fast  i get an error that correlationId isn't registered and the wait of response end with a timeout.  I moved in JMSproducer.java the lines:  long requestTimeout = endpoint.getRequestTimeout(); FutureTask future = requestor.getReceiveFuture(correlationId  requestTimeout);  before the send:  getInOutTemplate().send(endpoint.getDestination()  new MessageCreator() {  Now all works fine.. great catch - reopening unti this is fixed. Patch appled Axel  many thanks!. Hi James   i have another problem wit jms INOUT messages. On some Client computers there are problems. When i send a request to the ActiveMQ server it will be shown in the log of the ActiveMQ  but my consumer (A AsyncProzessor with Spring) doesn't receive the message.  In the class JmsConfiguration in method createInOutTemplate in case of inout message the explicitQosEnabled is set to true  If i remove this line jmsTemplate.setExplicitQosEnabled(true); all work fine with all clients.  Have you any idea?  Regards Axel. 
New Feature,Unassigned,2007-10-18T19:11:39+0000,1192734699,It would be cool if GWT RPC calls could be handled and routed VIA camel.  For more info on GWT RPC see: http://code.google.com/webtoolkit/documentation/com.google.gwt.doc.DeveloperGuide.RemoteProcedureCalls.html  They have nice RPC class that allows frameworks to easily encode and decode it method invocations.. see: http://code.google.com/webtoolkit/documentation/com.google.gwt.user.server.rpc.RPC.html,Recently noticed a similar mechanism seems to exist for the 'soafaces' project  dubbed the UniversalClient API; "An API to use from any GWT client to make SOA service calls with no RPC." Not sure if it only works for Mule endpoints or not based on the following.  http://code.google.com/p/soafaces/wiki/UniversalClient  "No need to write GWT RPC code anymore. Use the UniversalClient API to talk with POJO services that are packaged in your application server and/or talk with Mule accessible services/endpoints all across your enterprise and internet. Your GWT application will have convenient access to messaging services (SOAP  JMS  ESB ...etc) that can return JavaBeans or JSON objects back to the GWT client. All marshaling is handled by the framework.". Closing old tickets which has no activity. 
New Feature,Willem Jiang,2007-10-18T19:52:09+0000,1192737129,JSON is becoming a big data format for the Web 2.0 world.  Supporting this in camel could be interesting.  Perhaps we should support coverting the body of the JSON message do JSON based DOM like:  http://json.org/java/  What would be nicer is there were JSON binding annotations so that a JSON message could get mapped to a bean similar to how JAXB maps XML to beans.  But I don't think there is anything out there does does this.  [jabsorb\http://code.google.com/p/jabsorb/wiki/Manual] takes a stab at it and so does  rocket-gwt but I find it a bit lacking.  Also they don't provide a nice marshaling API that a 3rd party lib like Camel can leverage.,This issue is resolved in CAMEL-822.. 
Bug,Unassigned,2007-10-19T14:12:52+0000,1192803172,When used in ServiceMix messages are of the type javax.xml.transform.dom.DOMSource and not org.w3c.dom.Node  so we get a class cast exception.,patch applied with thanks!. 
Bug,Unassigned,2007-10-19T14:17:14+0000,1192803434,<route>             <from uri="direct:foo"/>             <filter>                 <xpath>                     /alwaysFalse                 </xpath>             </filter>             <to uri="mock:foo"/> </route>  Exchange to mock:foo gets executed even when expression evaluates to false. when it evaluates to true  it doesn't get executed twice.,So this is our bad - the XML encoding has changed a little. now a <filter> contains the prediate and the actions to perform if the filter matches (like <when> as well).  e.g. this should do what you want  <route> <from uri="direct:foo"/> <filter>   <xpath>   /alwaysFalse   </xpath>   <to uri="mock:foo"/> </filter> </route>. Ok  works.  But I wouldn't call it "filter" then  it's actually an "if".. 
Bug,Unassigned,2007-10-19T22:38:20+0000,1192833500,I was browsing the source for the FTP component to see how the inner works.  I discovered a System.out statement in the class FtpProducer:             System.out.println(sb.toString() + " = " + success);,
Sub-task,Unassigned,2007-10-23T08:02:33+0000,1193126553,We could implement an Camel transport for CXF to use. In this case  CXF client can easily access the service which is provided by other Camel endpoint. BTW  we could save hop by not send the message to the camel-cxf component's consumer.  To avoid the circlar dependency between the Camel and CXF   all the Camel transport work will be done in the Camel svn.,Is this issue still open? Just wondered if we can close it yet with all the CXF effort lately. Hi James   I am working on this JIRA and the camel conduit can work now  If everything is OK   I can submit the patch tomorrow.  Regards  Willem.. Implementingthe cxf transport API with Camel core  also adding the unit test for test camel transport.  TODO support load camel context in camel transport from spring configuration. Adding systest and example to show how to use camel transport.  I will fill new camel JIRAs to trace the upper works.. Patch applied with thanks!. 
Bug,Unassigned,2007-10-25T19:26:22+0000,1193340382,Catch clause with pipeline does not proceed. This is because the pipeline is designed to reject exceptions. The catch processor should give the exchange a fresh start  This started from thread http://www.nabble.com/Camel-1.2---CatchProcessor-not-working--t4690438s22882.html,Review patch. Gives the exchange a fresh start by removing the exception that caused it to reach the catch clause. The exception is still available in the in header map with "caught.exception" key. Patch applied with huge thanks!. 
Bug,Unassigned,2007-10-26T15:20:32+0000,1193412032,,fix committed. 
Bug,Unassigned,2007-10-30T15:25:47+0000,1193757947,current XsltBuilder lazy creates out messages even it doesn't work on them.  It causes problems as out messages are propagated by pipeline then.,This problem is fixed in 1.3 branch as now pipeline always copies Out->In that wasn't the case in 1.2.0 branch. Now xmls should populate Out message and it does it.. 
Bug,Unassigned,2007-10-30T15:33:01+0000,1193758381,There is default converter from dom.Document -> xml.transform.DOMSource  Unfortunately when you try to send DOM document (implementation) and convert it to Source there is no converter found  because Document cannot be assigned to implementation without a cast.,Patch applied with thanks! I guess we could do with a test case though. 
Improvement,Jonathan Anstey,2007-10-30T16:42:42+0000,1193762562,See the discussion: : http://www.nabble.com/How-to-do-that-in-Camel-XML-%28again%29---tf4647505s22882.html#a13276113  we need to add more of the built in Java processors to the XSD...,This patch incorporates setHeader and converyBodyTo into the Spring XML Extensions.  Seems as though the intercept feature is already available in XML (see [1]). Is this correct?  [1] http://svn.apache.org/repos/asf/activemq/camel/trunk/camel-core/src/main/java/org/apache/camel/model/InterceptType.java. Jonathan as always quality work from you. The patch is great with good unit tests as well.  [1] It is there in the core with a unit tests that however has a TODO attached to it  XmlParseTest.java      //TODO get the test fixed     public void xtestParseRouteWithInterceptorXml() throws Exception {         RouteType route = assertOneRoute("routeWithInterceptor.xml");         assertFrom(route  "seda:a");         assertChildTo("to"  route  "seda:d");         assertInterceptorRefs(route  "interceptor1"  "interceptor2");     }. Thanks for this!  One comment... it looks like the <setHeader> syntax requires a child processor? I don't believe it does in the Java DSL. I would expect the syntax to look more like it does for <convertBodyTo>  eg:      <route>       <from uri="seda:a"/>       <setHeader headerName="oldBodyValue">         <simple>body</simple>       </setHeader>       <to uri="mock:b"/>          </route>. Hey Claus  thx for the props!  That test appears to be for the following feature... http://svn.apache.org/repos/asf/activemq/camel/trunk/camel-core/src/main/java/org/apache/camel/model/InterceptorRef.java  Without looking deeper I'm not sure how it differs from InterceptType.  I wonder if the original author of this feature would care to comment?. Hmmm... yeah  I believe this is a side effect of me extending from the ExpressionNode in the SetHeaderType JAXB object. From the schema  it appears though that the child processor is optional  so you should be able to safely omit it. Also  the underlying SetHeaderProcessor does not require it. See the following snippet from http://activemq.apache.org/camel/schema/spring/camel-spring.xsd    <xs:complexType name="expressionNode">     <xs:complexContent>       <xs:extension base="tns:processorType">         <xs:sequence>           <xs:element ref="tns:interceptor" maxOccurs="unbounded" minOccurs="0"/>           <xs:choice maxOccurs="1" minOccurs="1">             <xs:element ref="tns:el"/>             ...             <xs:element ref="tns:xpath"/>             <xs:element ref="tns:xquery"/>           </xs:choice>           <xs:choice maxOccurs="unbounded" minOccurs="0">             <xs:element ref="tns:aggregator"/>             ...             <xs:element ref="tns:to"/>             <xs:element ref="tns:try"/>           </xs:choice>         </xs:sequence>       </xs:extension>     </xs:complexContent>   </xs:complexType>. Aaron has a valid point of the XML syntax. Its not intuitive if the to tag should be inlined in the setHeader tag  etc.  Jonathan looks like you last comment states that its doable. If so can the unit tests and documentations  code snippets etc. be updated accordingly?. Updated patch to include tests using the setHeader syntax suggested by Aaron.  <route>   <from uri="seda:a"/>   <setHeader headerName="oldBodyValue">     <simple>body</simple>   </setHeader>   <to uri="mock:b"/>      </route>. Jonathan have you update all the XML examples?  SpringSetHeaderTestWithChildProcessor-context.xml setHeaderToConstant.xml setHeaderWithChildProcessor.xml  uses the "odd" style in the patch.2 file.. Claus  you have eyes like a hawk   I've updated setHeaderToConstant.xml only since the other two test the odd child processor case (since its technically valid).. CAMEL-195 applied patch with huge thanks to Jonathan. Cool. Thanks Claus!. 
Improvement,Unassigned,2007-10-30T17:29:55+0000,1193765395,,code committed - just needs documentation. See http://cwiki.apache.org/CAMEL/xslt.html. 
Bug,Unassigned,2007-10-31T14:50:18+0000,1193842218,Please see attached patch to reproduce.  I made a small change to an existing unit test and created a route like this: from("direct:a").intercept(interceptor1).process(orderProcessor).intercept(interceptor2).to("direct:d");   I think one would expect to have one route and the invocation order to be interceptor1 -> orderProcessor -> interceptor2 -> direct:d.  Instead we have: 1. two routes 1. interceptor1 and interceptor2 are invoked twice 2. orderProcessor is never invoked 3. direct:d is invoked twice  i think.,fixed - see the test cases... InterceptorBuilderTest and InterceptorBuilderWithEndTest. 
Improvement,James Strachan,2007-10-31T16:24:23+0000,1193847863,e.g.    from("file").to("xquery:com/acme/foo.xquery").to("activemq:foo.bar");    treating XQuery as an endpoint,see the documentation: http://cwiki.apache.org/CAMEL/xquery-endpoint.html. 
Improvement,Unassigned,2007-11-02T07:11:47+0000,1193987507,Currently  there is no converter from Node -> Source.  It is required when using Camel's splitter() functionality inside ServiceMix:  from("jbi:service:urn:eu:java:smx:fleetintegrator:camel")    .splitter(xpath("/traces/trace"))    .to("jbi:endpoint:urn:eu:java:smx:fleetintegrator:jms:mq");,patch applied with thanks!. 
Bug,Unassigned,2007-11-02T07:26:36+0000,1193988396,can we either fix the release guide - or make the archetype somehow use the current version?,This patch will make the archetype use the current version of camel.. Applied with thanks!. Closed all 1.3 tickets. 
Improvement,Jonathan Anstey,2007-11-02T17:37:12+0000,1194025032,e.g.   <route>   <from uri="activemq:Foo.Bar"/>    <transform>      <xquery>....</xquery>   </transform> </route>    This basically means renaming the DSL's setOutBody() to be transform(Expression),I finally got around to doing this one up. There are no XQuery specific tests (mainly because of not knowing where to put them )  but it is generic enough to work for any expression language. Let me know if you have any questions!. Johathan. The patch looks great. Only two issues with the ident of the code. One @override was not idented properly. And one method parameter was on a new line instead of singleline. Just nitpicking.  Would love to have it documented on the wiki that we got this new transform DSL now. And we should remember to add it to the release notes that setOutBody() is depreacted and replaced with transform()  And since setOutBody() is to be replaced with transform. Could we have a unit test that verifies a setOutBody() test that is done by transform render the same OUT body?. Hey Claus   Nitpick away  I fixed up the indentations and added a test that verifies the deprecated setOutBody method still behaves. Yeah  the wiki will need to be updated once this feature gets in.. Patch applied. Excellent contribution  thanks Jon. I will leave this issue open until we update the documentation.. Updated the docs for this at: http://cwiki.apache.org/confluence/display/CAMEL/Message+Translator  Unfortunately  it doesn't look as nice as it should because confluence is barfing all over the place with the following message: "An error occurred: Connection refused. The system administrator has been notified.". Jonathan: btw there's some XQuery tests in components/camel-saxon where the XQuery implementation lives  for example XQueryFilterTest.java. IIRC one of my issues for putting a spring transform test in camel-saxon was that the public camel xsd did not contain the transform element yet and so it failed to resolve. The camel-spring module has some magic in there to use a locally built xsd  so the transform element could be tested there fine. Since putting an XQuery test in camel-spring is a bad idea (circular dependency!)  I opted for a test case using the "simple" expression language. Make sense?. Got it.  BTW when running unit tests using the Spring XSD  Spring will use the XSD thats on the classpath by default. So the XSD will validate in camel-saxon as it'll use the latest/greatest XSD generated by camel-spring.  The only time it won't validate is in your IDE when editing the XML   But then you can fudge your IDE to take the XSD from your generated XSD in camel-spring/target/schema/camel-*.xsd. Oh  neat! I could swear I hit the case where it wasn't using the locally built xsd though... perhaps I'm going crazy   I was just gonna try it out again but it seems apache svn is down... grumble grumble.... You've gotta make sure your project is using the latest/greatest built camel-spring jar though! Sometimes IDE based maven projects have a tendency to pick a different version. Yeah  I know... because of this I still don't trust Eclipse based results when it comes to multi-module maven projects. When multiple modules are involved I always run the maven build from the command line just to be sure!. 
Improvement,Hadrian Zbarcea,2007-11-02T17:38:05+0000,1194025085,,fancy taking a stab?. I attached a partial fix that works for choice  with or without the optional otherwise. I had no choice but to introduce the concept of parent in the ProcessorType  as an end() in a ProcessorType with nested Block(s) should continue with it's parent context.  I'll try to fix the others tomorrow. Cheers.. Complete patch  please disregard the previous one.  fixes block semantics for choice  filter and try/handle/handleAll fixes catch semantics to continue normal processing  clearing the exception. fixes semantics for handleAll() to be equivalent to java finally. The equivalent of a catch(Throwable) can be achieved with a handle(Throwable.class). 
Bug,Unassigned,2007-11-05T11:32:17+0000,1194262337,When using the FileComponent ("file://") to publish to a non-existent directory tree  the last part of the path is created as file instead of directory. It only happens when setting the filename in the header (FileComponent.HEADER_FILE_NAME).  This is because the method that determines the file name (which checks whether a directory exists)  is called before the directory tree is built.   See also http://www.nabble.com/Problem-with-concurrent-dir-file-access--tf4724448s22882.html,patch applied with thanks!. Thanks James!. 
Improvement,Unassigned,2007-11-05T12:12:04+0000,1194264724,,See the test case  https://svn.apache.org/repos/asf/activemq/camel/trunk/components/camel-spring/src/test/resources/org/apache/camel/spring/processor/aggregator-custom-strategy.xml. 
Bug,Unassigned,2007-11-05T12:45:05+0000,1194266705,,for the test case see ConsumeJmsMapMessageTest in camel-jms. 
Improvement,Unassigned,2007-11-05T15:03:38+0000,1194275018,,see the test case SplitterTest. 
Improvement,Unassigned,2007-11-05T15:08:25+0000,1194275305,,Discussions on this issue are here  http://www.nabble.com/splitter-aggregator-scenatio-tf4726642s22882.html http://www.nabble.com/Aggregator-strategies-%28again%29-tf4750834s22882.html. an early spike implementation has been committed - try adding a Predicate to the AggregatorType or DSL; though it needs testing!. Test for aggregator scenario together with fix for a bug that was in current implementation - aggregated messages were not cleared and condition in the loop was wrong.. Many thanks - patch applied!. Sorry for constantly reopening this issue but my patch partially fixed the problem. Another one shows up when you aggregate things for different correlation id's at the same time.  I hope this is the last patch for this problem - now better tested... BTW I commit your previous patch without checking that the camel-spring model worked - I think your last patch broke the Spring test case.... when I apply your second patch  I get the testPredicate failing - only 5 messages received instead of 20. BTW I fixed the failing SpringAggregatorTest by using the new <methodCall bean="foo" method="whatnot"/> expression for example      <route>       <from uri="direct:predicate"/>       <aggregator strategyRef="myAggregatorStrategy">         <simple>header.cheese</simple>         <to uri="mock:result"/>         <completedPredicate>           <methodCall bean="myAggregatorStrategy" method="isCompleted"/>         </completedPredicate>       </aggregator>     </route>. Sorry I've missed your comment.  I've just updated my sources and created this patch. I've already tested it on my source code and everything passes now (for me  ).  I believe previously I had not updated my sources or you had different source code and patch was applied in some wrong way... Patch applied with thanks!. 
Bug,Hadrian Zbarcea,2007-11-05T17:41:45+0000,1194284505,Construct like:  setOutHeader("header"  constant("test")). setOutBody(constant("body"));   doesn't work because setOutHeader() sets only header on out message that has null body. Then in pipeline when it creates new exchange it copies out message to in only when out message is not null and it contains not null body (that is not the case here). So pipeline copies in -> in so our out header is lost.  Set out header should just copy message body or (I believe better solution) createNewExchange in pipeline should use out message even if body is null (consistent with ExchangeHelper.copyResults).,File with JUnit test and patch itself attached.. I see that my patch doesn't solve all the problem that is a little deeper. When you call setOutBody all it does it sets body of out message. As it is invoked in pipeline then previous out header becomes in header. Then we set out body and the header previously set is lost.  I'm starting to think that this is just a feature of the fact that we have in and out messages and the way pipeline works. But then it is quite confusing for end users as the first impression is that after executing the snippet I presented in previous comment we will have body and header set.  At the moment I don't really know how to solve that problem  but I just want to show it.  Anyway patch I provided is (I believe) OK because of consistency with ExchangeHelper.copyResults.. Patch applied with thanks!. 
Improvement,Jonathan Anstey,2007-11-05T18:13:36+0000,1194286416,ContentEnricher (http://www.enterpriseintegrationpatterns.com/DataEnricher.html) support is needed. Here's a thread that outlines the usecase http://www.nabble.com/How-to-enrich-message-with-the-result-of-other-invocation-t4714129s22882.html,We can do this today  but the DSL could be spiced up a bit.  If we have the consumer template (oppose to producer template) you could consume from a processor and enrhich the original exchange with the result.  void process(Exchange e) {   Exchange result = consumerTemplate.consume("jdbc:xxx")   // enrich original exchange with result   Letting you do the enrich in Java gives you the full power how it should be enriched.. You might also want to take a look at the content enricher in the Open eHealth Integration Platform (IPF) which is based on Camel. The example is written in Groovy but its easy to make it running in Java a well (except for using the closure). If you think this way of content enrichement is helpful for you I can contribute the enricher to Camel. Any thoughts?. Martin  looks great. Closures really comes handy for the merge logic.  We have also talked about a DSL for spawning an Exchange so there could be a double win here  since I see that enricher needs to spawn an Exchange.  And as always we love contributions. Very nice impl Martin. We'd love it contributed to Camel!. Attached are two patches that add content support enrichment to Camel trunk. A Java DSL example is  AggregationStrategy myAggregationStartegy = ...  from("direct:start") .enrich("direct:resource"  myAggregationStrategy) .to("mock:result");  // get additional data from this endpoint from("direct:resource") .transform().constant("blah"); ...   A Spring DSL example is    <camelContext id="camel" xmlns="http://camel.apache.org/schema/spring">     <route>       <from uri="direct:start"/>       <enrich resourceUri="direct:resource" aggregationStrategyRef="sampleAggregator"/>       <to uri="mock:result"/>     </route>     <route>       <from uri="direct:resource"/>       <transform>         <constant>blah</constant>       </transform>     </route>   </camelContext>    <bean id="sampleAggregator" class="org.apache.camel.processor.enricher.SampleAggregator" />   If you don't have any objections to these patches I'll add some documentation to the Camel Wiki.. Looks cool. Just taking a peek at the source now.. Martin   I just committed your patches in revision 743442. Great work!  I'm wondering now if we should shorten the Spring syntax a bit though. Something like this would align better with the other processors  <enrich uri="direct:resource" strategyRef="sampleAggregator"/>   What do you think?. Let's do that. Do you need a further patch or do you want to change that yourself?. No need for a patch. I'll update it shortly.. Committed the change in rev 743474.. Martin. Great work.  Yeah I was about to suggest to use uri as the attribute in spring DSL but I can see that you have also that covered.. In the enrich code part where you create a producer template you need to close it as well  See this faq: http://camel.apache.org/why-does-camel-use-too-many-threads-with-producertemplate.html  It would be better to create it once and keep it around. We have the service interface for that with start/stop.  I will patch it.. Martin  please feel free to add some wiki documentation to this great new feature. Its great with the community stepping up to help.  And we should mention it on the release guide as well http://camel.apache.org/camel-200-release.html. On the EIP page: http://camel.apache.org/content-enricher.html  Maybe we should divide it into 2 sections  the old solution  where you have full power in a processor and can enrich the exchange how you like it and the new one with the enrich DSL  So end users can see two kind of solutions.. Claus   wouldn't it be even better to resolve the resource endpoint in the EnricherType.doCreateProcessor() method  create a producer from that endpoint and inject that producer into the Enricher?  public class EnricherType extends OutputType<EnricherType> {    ...    public Processor createProcessor(RouteContext routeContext) throws Exception {       Enricher enricher = new Enricher(...);       enricher.setProducer(routeContext.resolveEndpoint(resourceUri).createProducer());       ...       return enricher;   }  }   The Enricher then starts and stops the producer within its start()/stop() methods and uses it in its process(Exchange) method to send the resourceExchange  public class Enricher extends ServiceSupport implements Processor {     public void process(Exchange exchange) {       ...       producer.process(resourceExchange);       ...    } }   Then the enricher creation and wiring code has been moved to the EnricherType and the Enricher is only doing the logic it needs to do. What do you think?  I can provide a patch if you want.. @Martin  Good idea. Patch is much welcome.. Here's the patch to resolve the resource endpoint inside the EnricherType (camel-core.patch.2).. Committed your patch in revision 743733. Thanks again Martin.. Documentation looks good. I'm closing this one.. Closing 2.0m1 tickets. 
Bug,Hadrian Zbarcea,2007-11-06T11:46:53+0000,1194349613,Problem is very similar to CAMEL-191 but this time with exception clause. As exceptions are not cleared pipeline doesn't proceed.,This patch modifies DeadLetterQueue so before it sends a message to error processor it will clear exception information and store it as property. At the end it retrieves it so all other flows are notified about the error that happened and (for example) pipelines will be terminated.. hmm  looks like this was the patch for camel-208  also copied here.. This patch should be better..  Sorry for this mistake - to many patches on my drive. patch applied with thanks!. 
Bug,Unassigned,2007-11-08T12:37:45+0000,1194525465,httpClientConfigurer property is not propagated to the endpoint on endpoint creation.,Patch applied with thanks!. 
Improvement,Unassigned,2007-11-12T22:25:18+0000,1194906318,There should be easy way to disable JMSReplyTo behavior using URI in an endpoint. As it is partially implemented in EndpointMessageListener there is still no easy way to set it up.,Now resolved see test case JmsEndpointConfigurationTest.testConfigureMessageListener(). e.g. use ?disableReplyTo=true on your JMS URI. Currently jms endpoint sets MEP according to presence of JMSReplyTo property. I believe that if we disableReplyTo then we should behave as there is no JMSReplyTo so we should have InOnly MEP.. patch applied with thanks!. 
Bug,Unassigned,2007-11-13T11:38:59+0000,1194953939,,I've fixed the code for the JMSXAppID header - see test case MQSeriesHeaderTest.  If there are any other MQ headers it doesn't like clients setting we can reopen this issue and fix them.... I just made another patch so that only valid Java identifier headers are output to the JMS message - to avoid further exceptions with MQSeries - see http://www.nabble.com/Camel-1.2-Websphere-MQ-6-issue-tf4793824s22882.html. Just added another patch to conform to page 39 of the JMS 1.1 spec ignoring a bunch of other headers...                  "JMSXUserID"  "JMSXAppID"                  "JMSXDeliveryCount"  "JMSXProducerTXID"  "JMSXConsumerTXID"                  "JMSXRcvTimestamp"  "JMSXState". 
Bug,Hadrian Zbarcea,2007-11-13T12:20:42+0000,1194956442,I wondered if this was due to your machine Hiram having some dodgy maven plugin around or something?,What is the status. Do we have the javadocs in the 1.3 RC3 release?. I did some fixing work last week by adding the camel-core and camel-spring java doc into the doc directory. But there is no user guide doc in the 1.3 RC3 since the build machine did not install the Prince. Fixed in apache-camel-1.3.0-RC4. Closed all 1.3 tickets. 
New Feature,Unassigned,2007-11-13T14:31:44+0000,1194964304,LoadBalancingProcessor myStrategy;  // my own strategy to choose an endpoint   from(endpointA).loadBalance().setLoadBalance(myStrategy).to(Endpoint1  Endpoint2  ...);   or if can use an out of the box strategy like:   from(endpointA).loadBalance().roundRobin() to(endpoint1  endpoint2  ...);  Just a minor twist on that idea; how about  from(endpointA).loadBalance().roundRobin().endpoints().<someExpression>  where loadBalance() returns a LoadBalanceClause rather like filter() returns an ExpressionClause which lets folks pick the strategy of load balancer to use.  Using a named reference could be by  from(endpointA).loadBalance().ref("someName")...  I also added the idea of using an expression to determine the endpoints to load balance across as we might wanna support dynamic load balancing. e.g. querying the endpoints in OSGi or JNDI or whatever.,This patch just implement configure the load balance endpoints with a static list. We could add the dynamical endpoints support in the next phase.. patch applied with thanks!. Is this really correct for the random() strategy (new RoundRobin)?  + public LoadBalanceType random()  { + loadBalancer = new RoundRobinLoadBalancer(); + return this; + }. sorry   it is my fault. We should create a RandomLoadBalancer here.. Patch applied thanks Claus & Willem. 
Task,Unassigned,2007-11-13T18:04:43+0000,1194977083,Since CXF 2.0.3 will be released   and there are some internal API changes happens    we need update CXF version to 2.0.x snap shot for coming up release.,Upgraded CXF from 2.0.2 to 2.0.3  also included some refactoring work of CXFSoapBinding and part of work of camel CXF transport.. Patch applied with thanks!. 
Improvement,Claus Ibsen,2007-11-13T18:28:27+0000,1194978507,,Moving to 2.0. This can benefit the resequence as well. In fact it should be supported by the common BatchProcessor.  It should be a pluggable data store so end users can use what they like  eg. file based  some custom JDBC code them implement.. There is a SPI interface now AggregationRepository which allows people to plugin their own implementation.. We are looking into use KahaDB instead of JPA to provide persistence out of the box with Camel.  A JPA is really ill fitted for a map based kind of repository and KahaDB is used by ActiveMQ and thus well tested and really fast. Hiram has helped getting the bits together.  End users can still create their own JPA version if they fancy using a RDBMS.. Using HawtDB as persistent store.  trunk: 917520.. trunk: 917545.  See wiki page http://cwiki.apache.org/confluence/display/CAMEL/HawtDB. Closing all resolved tickets from 2010 or older. 
Improvement,Unassigned,2007-11-14T16:41:38+0000,1195058498,,
Improvement,Unassigned,2007-11-14T18:12:58+0000,1195063978,,
Improvement,Unassigned,2007-11-14T18:17:24+0000,1195064244,,see the docs here... http://cwiki.apache.org/CAMEL/spring-xquery-example.html. 
Improvement,Unassigned,2007-11-14T18:36:04+0000,1195065364,,
Improvement,Unassigned,2007-11-15T11:03:01+0000,1195124581,Ditto for setProperty  setOutHeader,also applied to setBody().xpath("/foo/bar"). 
Bug,Hadrian Zbarcea,2007-11-15T14:27:56+0000,1195136876,,I think it's not a bug in this test  but the result of CAMEL-274 (basically timeout is not long enough despite of the set value). After patching I can re-run this unit test endlessly and have it always passed.. Closed all 1.3 tickets. 
Bug,Unassigned,2007-11-16T08:33:43+0000,1195202023,After xslt processing the message headers are lost. See attached unit test  this test fails since revision 590680.  http://svn.apache.org/viewvc?view=rev&revision=590680,Patch applied with thanks - see XsltLosesHeaderTest in the camel-juel module. I've patched the code so it always copies any input headers first. Thanks James!. 
Improvement,Unassigned,2007-11-16T10:50:32+0000,1195210232,Also we should support Type Converters to/from the MINA ByteBuffer types to other types...,for more background see this thread...  http://www.nabble.com/Re%3A-Problem-using-the-mina-component-p13740674s22882.html. more docs here: http://cwiki.apache.org/CAMEL/mina.html. 
New Feature,Unassigned,2007-11-16T12:45:47+0000,1195217147,This allows us to put complex expressions or predicates into a bean method we can just invoke when we like.  Lets document here: http://activemq.apache.org/camel/bean-language.html,Documented and examples checked in such as MethodFilterTest or SpringAggregatorTest. 
Improvement,Unassigned,2007-11-16T17:10:48+0000,1195233048,,Yep I hit this problem back in the good old days with WebLogic 5.1. We have a filter in camel-jms that will replace dots to underscore and vice verse when its being consumed.  I guess the dots is just a to "standard" practice to use for header names as we use package names: org.apache.camel.XXX As the jms stuff now works  maybe we should consider closing this ticket  and leave it be?. +1 for closing the issue – if the JMS component can now handle conversion to/from underscore  I don't see any real reason why we would replace all the . in all our constants everywhere. JMS can propagate headers.. Closing all 1.5.0 issues. 
Improvement,Unassigned,2007-11-16T17:14:33+0000,1195233273,,am kinda wondering that all header/property names used by components are in some well known annotated place that we can then find?  e.g.  maybe we annotate the classes they live in (typically a Component or Endpoint?) then annotate each header that they are a standard camel header.  e.g. something like  @CamelDocument public class FooComponent { @HeaderDocument  public static final String FOO_NAME = "CamelFooName";  ... }   Then we can start to automatically generate reference documentation of all the special header names used by components. 
New Feature,Unassigned,2007-11-16T22:16:29+0000,1195251389,Now you can figure the loadBalancer through the Spring configuration file. NOTE: we get some sequence define here  so I can't put the loadBalancerStrategy before the to tag. So the configuration had to be like this  <camelContext id="camel" xmlns="http://activemq.apache.org/camel/schema/spring">     <route>       <from uri="direct:start"/>       <loadBalance>           <to uri="mock:x"/>                   <to uri="mock:y"/>                  <to uri="mock:z"/>           <roundRobin/>       </loadBalance>     </route>   </camelContext>,Added a bunch of type class to support configure loadBalance in Spring configuration file.. Patch applied with thanks!. 
Improvement,Unassigned,2007-11-17T10:40:34+0000,1195296034,e.g.    to("seda:foo?size=2000"),See the test case SedaConfigureTest to show we can configure seda/vm endpoints using the size parameter. 
Bug,Unassigned,2007-11-18T14:58:28+0000,1195397908,I tried to figure out how i could edit the wiki page myself - i created an account but do not have edit rights  or I could not find the edit button.  Type converts has a broken link: http://cwiki.apache.org/confluence/display/CAMEL/Type+Converter  In the chapter "Discovering Type Converts" the link for @Converter is missing the h in http so the link is broken. "ttp://activemq.apache.org/camel/maven/camel-core/apidocs/org/apache/camel/Converter",BTW see this FAQ entry on how to edit the website.. Fix applied - thanks Claus! I've also granted you confluence karma - so you should be able to edit the wiki now. 
Bug,Hadrian Zbarcea,2007-11-18T15:42:14+0000,1195400534,,Patch applied with thanks!. 
Bug,Unassigned,2007-11-19T00:03:00+0000,1195430580,There is a bug in FELIX-422 (NPE thrown by GetEntryPathsEnumeration constructor) when caused bundle.getEntryPaths() to throw NPE for the system bundle.  While this is a bug in Felix  Camel's OsgiComponentResolver should continue (after logging an error) to process the next bundle.,Please review the attached patch. patch applied with thanks!. 
New Feature,Claus Ibsen,2007-11-19T09:44:33+0000,1195465473,If we support something like   <camelContext ...>   <import uri="rules.xml"/> </camelContext>    we could auto-detect if rules.xml changes and auto-reload 'em so that folks could dynamically change the routing rules,One solution to the problem is just to reuse the ServiceMix 4 Runtime which supports auto-reloading of OSGi bundles in jar or expanded form.  We could make the Camel distro come with theServiceMix Runtime so Camel rules can be easily hot deployed and redeployed as folks change the Java / Spring XML. hey   this feature would be a great benefit for all the people using activemq as message broker and want to use the eip without restarting a core component or running another java service. in my case i could integrate activemq into a rails application and do not care about activemq being java  cause i can configure eip's in xml  update the rules.xml in the lifecycle of my application deployments and have just on running  reliable service. that would be nice!  greets  jochen. So using OSGi (e.g. the ServiceMix Kernel) this works already today.  Also the Web Console for Camel now has a highly RESTful API along with a web UI so you can view/edit/start/stop routes restfully - via your browser or scripted.. Yeah I think we should let containers handle this and not Camel itself.  Isnt jetty:run capable of reloading web apps if you change files?. Since Camel is not designed to be a server by itself (it relies on a container)  I think the container should take care of that. ServiceMix does this pretty well.. Yeah this is out of scope for Camel itself. People can update routes from XML files using the API on CamelContext. We have an example in the cookbook documentation page.  A server such as Tomcat  Jetty  ServiceMix which can hot-deploy an app is the better choice. A Camel route could have updated java code  reference to other beans  and whatnot  that Camel itself cannot update on-the-fly.. 
Bug,Hadrian Zbarcea,2007-11-19T14:29:33+0000,1195482573,See log...   [pache.camel.spring.Main.main()] DefaultListableBeanFactory     INFO  Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@ca61f9: defining beans [camel:beanPostProcessor camel jms agent mbeanServer registry serverConnector]; root of factory hierarchy [pache.camel.spring.Main.main()] InstrumentationProcessor       WARN  Could not register CamelContext MBean javax.management.InstanceAlreadyExistsException: org.apache.camel:context=stracbook.local/camel name=context         at com.sun.jmx.mbeanserver.RepositorySupport.addMBean(RepositorySupport.java:452)         at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.internal_addObject(DefaultMBeanServerInterceptor.java:1410)         at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerObject(DefaultMBeanServerInterceptor.java:936)         at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerMBean(DefaultMBeanServerInterceptor.java:337)         at com.sun.jmx.mbeanserver.JmxMBeanServer.registerMBean(JmxMBeanServer.java:497)         at org.apache.camel.management.InstrumentationAgentImpl.registerMBeanWithServer(InstrumentationAgentImpl.java:186)         at org.apache.camel.management.InstrumentationAgentImpl.register(InstrumentationAgentImpl.java:119)         at org.apache.camel.management.InstrumentationAgentImpl.register(InstrumentationAgentImpl.java:102)         at org.apache.camel.management.InstrumentationLifecycleStrategy.onContextCreate(InstrumentationLifecycleStrategy.java:53)         at org.apache.camel.management.InstrumentationAgentImpl.doStart(InstrumentationAgentImpl.java:157)         at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:51)         at org.apache.camel.spring.SpringInstrumentationAgent.afterPropertiesSet(SpringInstrumentationAgent.java:39)         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1201)         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1171)         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:425)         at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:251)         at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:156)         at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:248)         at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:160)         at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:287)         at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:352)         at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:91)         at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:75)         at org.apache.camel.spring.Main.createDefaultApplicationContext(Main.java:292)         at org.apache.camel.spring.Main.doStart(Main.java:285)         at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:51)         at org.apache.camel.spring.Main.run(Main.java:102)         at org.apache.camel.spring.Main.run(Main.java:93)         at org.apache.camel.spring.Main.main(Main.java:84)         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)         at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)         at java.lang.reflect.Method.invoke(Method.java:585)         at org.apache.camel.maven.RunMojo$1.run(RunMojo.java:333)         at java.lang.Thread.run(Thread.java:613) [pache.camel.spring.Main.main()] RmiRegistryFactoryBean         INFO  Looking for RMI registry at port '1099',CAMEL-296 was a duplicate of this one.. 
Improvement,Unassigned,2007-11-19T17:47:02+0000,1195494422,,issue resolved - see the NewInstanceTest to show it in action. 
Improvement,Hadrian Zbarcea,2007-11-19T20:25:35+0000,1195503935,from 1.0,patch applied with thanks!. 
Improvement,Unassigned,2007-11-19T20:46:11+0000,1195505171,,See the CamelCauseException property on the Exchange when a message is sent to the dead letter channel. You can then use the DSL to encode/format this property however you like. Is there any way we could see this attached exception when viewing messages on the DLQ using the Web Console?  Thanks very much  Mike.. Mike  The Web Console is the one from ActiveMQ right?. Closed all 1.3 tickets. 
Improvement,Unassigned,2007-11-19T20:48:35+0000,1195505315,,Is this still relevant?  camel-jms now only propagates simple types jms headers. Real objects is discarded.. Closing 2.0m1 tickets. 
Bug,Unassigned,2007-11-19T23:51:26+0000,1195516286,This problem can be demontrated by org.apache.camel.processor.InterceptWithoutProceedRouteTest      protected RouteBuilder createRouteBuilder() {         return new RouteBuilder() {             public void configure()  {                 // we will disable the output to 'mock:a' since we never proceed()                 intercept().filter(header("foo").isEqualTo("bar")).to("mock:b");                  from("direct:start").to("mock:a");             }         };     }  If I slightly modify the testSendMatchingMessage() to make sure that my message was not proceeded to "mock:a"  it fails.      public void testSendMatchingMessage() throws Exception  {         b.expectedMessageCount(1);         a.expectedMessageCount(0);  // added by me          template.sendBodyAndHeader("direct:start"  "<matched/>"  "foo"  "bar");          assertMockEndpointsSatisifed();     }  The problem can be observed in org.apache.camel.processor.InterceptRouteTest.      protected RouteBuilder createRouteBuilder() {         return new RouteBuilder() {             public void configure()  {                 intercept().choice().                         when(header("foo").isEqualTo("bar")).to("mock:b").                         otherwise().proceed();                  from("direct:start").to("mock:a");             }         };     }     public void testSendMatchingMessage() throws Exception  {         a.expectedMessageCount(0);  //   I don't expect mock:a to receive my message  but it did.          b.expectedMessageCount(1);          template.sendBodyAndHeader("direct:start"  "<matched/>"  "foo"  "bar");          assertMockEndpointsSatisifed();     },Resolved!. 
New Feature,Unassigned,2007-11-21T12:46:01+0000,1195649161,See http://commons.apache.org/jxpath/,Added a new component (camel-jxpath) for supporting JXPath. Patch applied with thanks! BTW to add to the XSD and DSL I changed the language/jaxb.index  added language.JXPathExpression and changed builder.ExpressionClause classes.  http://svn.apache.org/viewvc?rev=638833&view=rev. i've reopened this issue until we've got test cases and documentation done. I'm working on a few test cases that should be ready soon.... Added a test case both of the DSL and the XML versions which are now working great.. I've added a web page...  http://cwiki.apache.org/confluence/display/CAMEL/JXPath. Closed all 1.3 tickets. 
Improvement,Unassigned,2007-11-22T07:41:33+0000,1195717293,,
Bug,Unassigned,2007-11-23T06:57:25+0000,1195801045,CxfProducer didn't write back return value to the exchange  so can't get return value when other kind of consumer (such as SMX consumer) work with CxfProducer need add  exchange.copyFrom(cxfExchange);  in the public void process(Exchange exchange) method  The CamelInvoker used for CxfConsumer didn't set correct ExchangePattern after create the Exchage   need add         if (bop.getOperationInfo().isOneWay())  {         	cxfExchange.setPattern(ExchangePattern.InOnly);         }  else  {         	cxfExchange.setPattern(ExchangePattern.InOut);         }  to set the MEP correctly according to the Cxf ServiceModel,patch for this issue. Patch applied with thanks!. 
New Feature,Unassigned,2007-11-25T12:12:06+0000,1195992726,See http://supercsv.sourceforge.net or http://commons.apache.org/sandbox/csv/ for details of APIs,trunk now has support for the commons CSV API; though documentation is required. Damm this is fast. Just voted for it a few days ago.  However is this correct from the commit log? (JAXB format?)  + + /** + * Uses the JAXB data format + */ + public T csv()  { + return dataFormat(new CsvDataFormat()); }. Sorry for being picky but shouldn't the unit test using assertions instead of Log.debug   In CsvRouteTest it outputs log.debug("Received: " + text);  Wouldn't it be possible to assert that the received string is in CSV format?. In the 2 CSVDataFormat classes should the OutputStream not be closed in a finally block to do propery house keeping in case of exceptions? Or am I just being old school?. Patches all applied Claus - thanks for the feedback!. Closed all 1.3 tickets. 
Improvement,Unassigned,2007-11-26T06:33:32+0000,1196058812,Current JHC component 's consumer just try to bind to a certain port when it is started.  If this port is used   the consumer will not work.   We could use static factory class to trace the port  and bind the handler with the context to  support multi-endpoint in same port.  BTW  we also need to add a JHC module in the JIRA,This patch upgrade http core form 4.0-alpha5 to 4.0-alpha6 and allow multi-endpoint share a same port. BTW  We use the String.startsWith() to look up the endpoint path with Request URI.. Sending components/camel-jhc/src/main/java/org/apache/camel/component/jhc/AsyncBufferingHttpServiceHandler.java Adding components/camel-jhc/src/main/java/org/apache/camel/component/jhc/AsyncHttpRequestHandler.java Adding components/camel-jhc/src/main/java/org/apache/camel/component/jhc/AsyncResponseHandler.java Sending components/camel-jhc/src/main/java/org/apache/camel/component/jhc/BufferingHttpServiceHandler.java Sending components/camel-jhc/src/main/java/org/apache/camel/component/jhc/DefaultListeningIOReactor.java Sending components/camel-jhc/src/main/java/org/apache/camel/component/jhc/JhcConsumer.java Sending components/camel-jhc/src/main/java/org/apache/camel/component/jhc/JhcProducer.java Adding components/camel-jhc/src/main/java/org/apache/camel/component/jhc/JhcServerEngine.java Adding components/camel-jhc/src/main/java/org/apache/camel/component/jhc/JhcServerEngineFactory.java Sending components/camel-jhc/src/test/java/org/apache/camel/component/jhc/HttpTest.java Sending pom.xml Transmitting file data ........... Committed revision 599946.  Thanks a lot for this awesome patch. I've just added the missing ASF headers. 
Improvement,Willem Jiang,2007-11-26T09:39:44+0000,1196069984,if a ConnectionFactory doesnt' support the configuration of the username/password (such as for MQSeries) then we might wanna wrap it in a UserCredentialsConnectionFactoryAdapter instead.  For background see...  http://www.nabble.com/JMSComponent-connecting-to-WebSphereMQ-tf4861290s2354.html#a13946581,The Tibco EMS Connection factory has the same problem and I think the same adapter would help.  But what is this issue really about? Is only documentation necessary or do we have to change some camel code? If you give me a hint where to look I could provide a patch. But as far as I understand the code you can already set the ConnectionFactory to use when initiliaizing the JmsComponent.. So I was thinking that we'd add the username/password properties to the JmsComponent/JmsConfiguration and if they are specified  we wrap the ConnectionFactory in the UserCredentialsConnectionFactoryAdapter so the user doesn't need to worry about the internal spring details. When looking at the current implementation of JMSComponent I would advise not to wrap the UserCredentialsConnectionFactoryAdapter. There are currently too many ways to insert the factory to cleanly add username and password. So I would suggest to leave the adapter out of the code and simply document how to use it in the wiki and the examples.  If that is ok for you I could add the necessary documentation.. also update the wiki page. Closing 2.0m1 tickets. 
Bug,Unassigned,2007-11-29T09:09:11+0000,1196327351,1. input params List shouldn't be null  at lease it should be a empty List  so use List<Object> params = new ArrayList<Object>(); instead of  List<Object> params = null; in CamelInvoker.java to avoid input params is null  2. Cxf Producer should only copy back exchange when ExchangePattern is not InOnly so  use if (exchange.getPattern() != ExchangePattern.InOnly) {         	exchange.copyFrom(cxfExchange); } instead of      exchange.copyFrom(cxfExchange);,address this issue and append test to verify it works Could anyone review and apply this patch for me?  Thanks. Patch applied with thanks!. 
Bug,Unassigned,2007-11-29T14:59:33+0000,1196348373,This patch fixed the Camel loadBalance tag 's attribute ref do not support to ref another loadBalancer strategy issue.,Patch applied with thanks!. Hi Willem   I just noticed that you did not grant the license to ASF for inclusion. Could you please resubmit the patch with the appropriate check or I will have to roll it back tomorrow.  Thanks Hadrian. Resubmit the patch with granting license to ASF.. That was quick. Thanks Willem!. 
Bug,Hadrian Zbarcea,2007-11-29T18:16:24+0000,1196360184,FileEndpoint generates an empty string for the relative pathname it places in the header.,Aaron  thank you for reporting this and for the patch. Could you please add a unit test and  more importantly  grant license to ASF for inclusion. Without this check we cannot apply it.. Re-attached patch w/ ASF license granted (it'd be nice if this was an option when creating a JIRA issue). I'll see if I can get a unit test up by tomorrow.. Added patch to FileConfigureTest. Patch applied with thanks!. 
Improvement,Unassigned,2007-11-29T18:39:51+0000,1196361591,The use case is a FileConsumer polling a directory that's populated by an FTP server.  Currently  the FileConsumer is almost guaranteed to grab files that aren't complete.  Setting the consumer delay to something large just reduces the likelihood  and requiring external lock files or renaming (though potentially more atomic) seems like too many moving parts.  In an attempt to combat this  I added an isUnchanged() method to FileConsumer that is used similar to isMatched()  along with two properties  unchangedDelay and unchangedSize.  Setting unchangedDelay to eg: 5000 will cause FileConsumer to avoid processing a file until its last modified time is at least 5 seconds in the past.  For large files being copied across a local filesystem  this doesn't always work  because the modified date may be preserved even though the file's not done copying.  Thus  setting unchangedSize to true will cause FileConsumer to avoid processing a file until its filesize remains unchanged across two successive polls.  There's probably a more camel-like way to do this  maybe involving a polling strategy  so that the technique could shared with RemoteFileConsumers  but that made my brain hurt.,Re-attached patch w/ ASF license granted (it'd be nice if this was an option when creating a JIRA issue). Patch applied with thanks!  It would be nice if the logic of deciding when a file is ready would not be hardcoded though. What about a pluggable strategy?. 
Improvement,Unassigned,2007-11-29T19:16:53+0000,1196363813,RemoteFileConfiguration.toString() displays the file instead of directory (a boolean)  FtpProducer/SftpProducer automagically attempt to reconnect if disconnected/timed-out from their destinations.  This should probably be shared with Consumers  and could maybe done more cleanly using camel's try/catch features  but there you go.  Smarter directory/file building/handling.  This lets you handle URI's like ftp://somehost/somedir  ftp://somehost/somedir/ similarly  avoid putting files in '/' on servers that expose the full filesystem  etc.  More verbose logging.  Stuff like "what file went where " reconnection attempts  etc.,Re-attached patch w/ ASF license granted (it'd be nice if this was an option when creating a JIRA issue). D'oh! That patch completely broke FtpConsumer and SftpConsumer  and a few unit tests. I'll have something that fixes those shortly.. Reconnect logic was added to FtpConsumer/SftpConsumer. UriConfigurationTest was re-written to more thoroughly check defaults and file/path parsing.. Patch applied. Excellent work  thanks Aaron!. 
New Feature,Hadrian Zbarcea,2007-11-30T13:48:03+0000,1196430483,Adding a new component to Camel to access JCR-compliant content repositories (e.g. Apache Jackrabbit),This is a very basic implementation  which allows a user to add a node in the repository and receive the UUID of the newly created node in the "out" message. Based on Lars Heinemann's code donation to ServiceMix and many thanks to him for helping me test this one.  We probably need to add more features afterwards (full CRUD support  searching/polling for nodes  ...)  but at least this is a start.. Awsome patch  thanks Gert!. This new patch adds the necessary SNIPPET comment to be able to show a code example in the JCR component web page.. Patch already applied. Thanks!. 
Improvement,Unassigned,2007-12-03T15:42:45+0000,1196696565,We should default to CACHE_CONSUMER for non-durable topics until Spring fix their bug then we can use CACHE_CONSUMER by default on all endpoints,A workaround is to append your URL as follows  activemq:topic.Cheese?cacheLevelName=CACHE_CONSUMER   Though trunk now has a fix so we use CACHE_CONSUMER for non-durable subscriptions on topics.. Closed all 1.3 tickets. 
Improvement,Roman Kalukiewicz,2007-12-04T09:43:17+0000,1196761397,Now there is no way to set http request headers via camel headers while  response headers are available. This functionality is required when we want to send SOAP request via http component as there is SOAPAction header required.,Maybe we should exclude some of headers by default like content-length or host? On the other hand maybe it will be required by someone? Or maybe some flag?  To show the problem there is a code snippet that could lead to a problem:  from("direct:start").to("http://host:1234/a").to("http://host:1234/b");   After first http invocation we have content-length header set and when we execute the second http endpoint this header is propagated and /b endpoint is fooled by wrong value in content-length header.  On the other hand maybe it is a feature we shouldn't worry about – header set  header used... We need to worry about that  as basic use case will fail. There are at least two ways to solve the problem:  do not include those http headers in the camel exchange do not use these headers when building the http request  I'm thinking we need to implement the second one  as if we don't  requests will be unusable. But the first option may be interesting to save bandwith and could be controlled by a flag in the uri maybe.  Also  I suppose the same patch should be applied to the camel-jhc component  which uses asynchronous nio.. I applied a patch to camel-http and commited it. I have the same change for camel-jhc  but it is copy/paste code then  as there is no dependency between those two projects.. Patches applied. Closed all 1.3 tickets. 
Improvement,Unassigned,2007-12-04T12:31:11+0000,1196771471,Current JMSBinding doesn't allow to send JMS ByteMessage and MapMessage. Natural behavior would be to send those messages if body contains byte[] and Map. Now if you want those messages to be sent you have to create them yourself  that cannot be done easily as messages require JMS session to be created.  Patch applied represents BytesMessage}}s as {{byte[] body.  Moreover when byte[] body arrives it is sent as BytesMessage. When Map body arrives it tries to create MapMessage – if it cannot be created (for example because map elements are not primitives) then if falls back to previous behaviour - creates ObjectMessage.  It means that JMS component is now symmetric – if BytesMessage is received then it is sent as BytesMessage. If MapMessage is received then MapMessage is sent.,Patch applied with thanks!. I think the unit test method for testing the bytes is a copy/paste error from the other test. (map)  It is named: testSendMapMessage() in both unit tests (for byte and map).. Right! And there is also testConsumeMapMessage() test in bytes  and you're right - copy/paste error   Let's correct it - I don't think it requires a separate patch. Fixed - on the ConsumeJmsBytesMessageTest - thanks!. 
Improvement,Unassigned,2007-12-04T12:44:20+0000,1196772260,XPathBuilder contains namespace() method that can configure namespaces for XPathBuilder but there is no easy way to reuse many namespaces using DSL. We could use Namespaces object and its xpath() method  but it returns XPathExpression so there is no easy way to set return type.  Applied path adds namespaces() method on XPathBuilder so we can configure it with namespaces provided using DSL. Another solution would be to change xpath() method on Namespaces class so it returns XPathBuilder  but I'm not sure if it doesn't influence XML configuration.,BTW have you seen these two test cases that show different ways to reuse namespaces...  XPathWithNamespaceBuilderFilterTest XPathWithNamespacesFilterTest. Patch applied with thanks Roman! I've also added a helper method to the Namespaces class so you can do  Namespaces ns = ...; ns.xpath("/foo/bar"  String.class);   i.e. you can specify the result type if you want.. 
Bug,Willem Jiang,2007-12-05T02:28:31+0000,1196821711,-------------------------------------------------------  T E S T S ------------------------------------------------------- Running org.apache.camel.component.mina.MinaUdpTest 1578 [AnonymousIoService-1] WARN org.apache.camel.component.mina.MinaConsumer$1 - [/127.0.0.1:32858] EXCEPTION  please implement org.apache.camel.component.mina.MinaConsumer$1.exceptionCaught() for proper handling: java.lang.IllegalStateException: Already released buffer.  You released the buffer too many times.         at org.apache.mina.common.PooledByteBufferAllocator$PooledByteBuffer.release(PooledByteBufferAllocator.java:310)         at org.apache.mina.util.ByteBufferUtil.releaseIfPossible(ByteBufferUtil.java:39)         at org.apache.mina.common.support.AbstractIoFilterChain$TailFilter.messageReceived(AbstractIoFilterChain.java:572)         at org.apache.mina.common.support.AbstractIoFilterChain.callNextMessageReceived(AbstractIoFilterChain.java:299)         at org.apache.mina.common.support.AbstractIoFilterChain.access$1100(AbstractIoFilterChain.java:53)         at org.apache.mina.common.support.AbstractIoFilterChain$EntryImpl$1.messageReceived(AbstractIoFilterChain.java:648)         at org.apache.mina.filter.codec.support.SimpleProtocolDecoderOutput.flush(SimpleProtocolDecoderOutput.java:58)         at org.apache.mina.filter.codec.ProtocolCodecFilter.messageReceived(ProtocolCodecFilter.java:173)         at org.apache.mina.common.support.AbstractIoFilterChain.callNextMessageReceived(AbstractIoFilterChain.java:299)         at org.apache.mina.common.support.AbstractIoFilterChain.access$1100(AbstractIoFilterChain.java:53)         at org.apache.mina.common.support.AbstractIoFilterChain$EntryImpl$1.messageReceived(AbstractIoFilterChain.java:648)         at org.apache.mina.filter.executor.ExecutorFilter.processEvent(ExecutorFilter.java:220)         at org.apache.mina.filter.executor.ExecutorFilter$ProcessEventsRunnable.run(ExecutorFilter.java:264)         at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650)         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675)         at org.apache.mina.util.NamePreservingRunnable.run(NamePreservingRunnable.java:51)         at java.lang.Thread.run(Thread.java:595) 2143 [AnonymousIoService-2] WARN org.apache.camel.component.mina.MinaConsumer$1 - [/127.0.0.1:32858] EXCEPTION  please implement org.apache.camel.component.mina.MinaConsumer$1.exceptionCaught() for proper handling: java.lang.IllegalStateException: Already released buffer.  You released the buffer too many times.         at org.apache.mina.common.PooledByteBufferAllocator$PooledByteBuffer.release(PooledByteBufferAllocator.java:310)         at org.apache.mina.util.ByteBufferUtil.releaseIfPossible(ByteBufferUtil.java:39)         at org.apache.mina.common.support.AbstractIoFilterChain$TailFilter.messageReceived(AbstractIoFilterChain.java:572)         at org.apache.mina.common.support.AbstractIoFilterChain.callNextMessageReceived(AbstractIoFilterChain.java:299)         at org.apache.mina.common.support.AbstractIoFilterChain.access$1100(AbstractIoFilterChain.java:53)         at org.apache.mina.common.support.AbstractIoFilterChain$EntryImpl$1.messageReceived(AbstractIoFilterChain.java:648)         at org.apache.mina.filter.codec.support.SimpleProtocolDecoderOutput.flush(SimpleProtocolDecoderOutput.java:58)         at org.apache.mina.filter.codec.ProtocolCodecFilter.messageReceived(ProtocolCodecFilter.java:173)         at org.apache.mina.common.support.AbstractIoFilterChain.callNextMessageReceived(AbstractIoFilterChain.java:299)         at org.apache.mina.common.support.AbstractIoFilterChain.access$1100(AbstractIoFilterChain.java:53)         at org.apache.mina.common.support.AbstractIoFilterChain$EntryImpl$1.messageReceived(AbstractIoFilterChain.java:648)         at org.apache.mina.filter.executor.ExecutorFilter.processEvent(ExecutorFilter.java:220)         at org.apache.mina.filter.executor.ExecutorFilter$ProcessEventsRunnable.run(ExecutorFilter.java:264)         at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650)         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675)         at org.apache.mina.util.NamePreservingRunnable.run(NamePreservingRunnable.java:51)         at java.lang.Thread.run(Thread.java:595) 3151 [AnonymousIoService-3] WARN org.apache.camel.component.mina.MinaConsumer$1 - [/127.0.0.1:32858] EXCEPTION  please implement org.apache.camel.component.mina.MinaConsumer$1.exceptionCaught() for proper handling: java.lang.IllegalStateException: Already released buffer.  You released the buffer too many times.         at org.apache.mina.common.PooledByteBufferAllocator$PooledByteBuffer.release(PooledByteBufferAllocator.java:310)         at org.apache.mina.util.ByteBufferUtil.releaseIfPossible(ByteBufferUtil.java:39)         at org.apache.mina.common.support.AbstractIoFilterChain$TailFilter.messageReceived(AbstractIoFilterChain.java:572)         at org.apache.mina.common.support.AbstractIoFilterChain.callNextMessageReceived(AbstractIoFilterChain.java:299)         at org.apache.mina.common.support.AbstractIoFilterChain.access$1100(AbstractIoFilterChain.java:53)         at org.apache.mina.common.support.AbstractIoFilterChain$EntryImpl$1.messageReceived(AbstractIoFilterChain.java:648)         at org.apache.mina.filter.codec.support.SimpleProtocolDecoderOutput.flush(SimpleProtocolDecoderOutput.java:58)         at org.apache.mina.filter.codec.ProtocolCodecFilter.messageReceived(ProtocolCodecFilter.java:173)         at org.apache.mina.common.support.AbstractIoFilterChain.callNextMessageReceived(AbstractIoFilterChain.java:299)         at org.apache.mina.common.support.AbstractIoFilterChain.access$1100(AbstractIoFilterChain.java:53)         at org.apache.mina.common.support.AbstractIoFilterChain$EntryImpl$1.messageReceived(AbstractIoFilterChain.java:648)         at org.apache.mina.filter.executor.ExecutorFilter.processEvent(ExecutorFilter.java:220)         at org.apache.mina.filter.executor.ExecutorFilter$ProcessEventsRunnable.run(ExecutorFilter.java:264)         at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650)         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675)         at org.apache.mina.util.NamePreservingRunnable.run(NamePreservingRunnable.java:51)         at java.lang.Thread.run(Thread.java:595) Sent 3 messages Dec 5  2007 10:28:57 AM org.apache.camel.component.mock.MockEndpoint assertIsSatisfied INFO: Asserting: Endpoint[mock:result] is satisfied Tests run: 1  Failures: 0  Errors: 0  Skipped: 0  Time elapsed: 4.442 sec Running org.apache.camel.component.mina.MinaFileUdpTest Dec 5  2007 10:28:58 AM org.apache.camel.component.mock.MockEndpoint assertIsSatisfied INFO: Asserting: Endpoint[mock:results] is satisfied 1600 [AnonymousIoService-3] WARN org.apache.camel.component.mina.MinaConsumer$1 - [/127.0.0.1:32858] EXCEPTION  please implement org.apache.camel.component.mina.MinaConsumer$1.exceptionCaught() for proper handling: java.lang.IllegalStateException: Already released buffer.  You released the buffer too many times.         at org.apache.mina.common.PooledByteBufferAllocator$PooledByteBuffer.release(PooledByteBufferAllocator.java:310)         at org.apache.mina.util.ByteBufferUtil.releaseIfPossible(ByteBufferUtil.java:39)         at org.apache.mina.common.support.AbstractIoFilterChain$TailFilter.messageReceived(AbstractIoFilterChain.java:572)         at org.apache.mina.common.support.AbstractIoFilterChain.callNextMessageReceived(AbstractIoFilterChain.java:299)         at org.apache.mina.common.support.AbstractIoFilterChain.access$1100(AbstractIoFilterChain.java:53)         at org.apache.mina.common.support.AbstractIoFilterChain$EntryImpl$1.messageReceived(AbstractIoFilterChain.java:648)         at org.apache.mina.filter.codec.support.SimpleProtocolDecoderOutput.flush(SimpleProtocolDecoderOutput.java:58)         at org.apache.mina.filter.codec.ProtocolCodecFilter.messageReceived(ProtocolCodecFilter.java:173)         at org.apache.mina.common.support.AbstractIoFilterChain.callNextMessageReceived(AbstractIoFilterChain.java:299)         at org.apache.mina.common.support.AbstractIoFilterChain.access$1100(AbstractIoFilterChain.java:53)         at org.apache.mina.common.support.AbstractIoFilterChain$EntryImpl$1.messageReceived(AbstractIoFilterChain.java:648)         at org.apache.mina.filter.executor.ExecutorFilter.processEvent(ExecutorFilter.java:220)         at org.apache.mina.filter.executor.ExecutorFilter$ProcessEventsRunnable.run(ExecutorFilter.java:264)         at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650)         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675)         at org.apache.mina.util.NamePreservingRunnable.run(NamePreservingRunnable.java:51)         at java.lang.Thread.run(Thread.java:595) Tests run: 1  Failures: 0  Errors: 0  Skipped: 0  Time elapsed: 1.842 sec Running org.apache.camel.component.mina.MinaUdpUsingTemplateTest 495 [AnonymousIoService-4] WARN org.apache.camel.component.mina.MinaConsumer$1 - [/127.0.0.1:32858] EXCEPTION  please implement org.apache.camel.component.mina.MinaConsumer$1.exceptionCaught() for proper handling: java.lang.IllegalStateException: Already released buffer.  You released the buffer too many times.         at org.apache.mina.common.PooledByteBufferAllocator$PooledByteBuffer.release(PooledByteBufferAllocator.java:310)         at org.apache.mina.util.ByteBufferUtil.releaseIfPossible(ByteBufferUtil.java:39)         at org.apache.mina.common.support.AbstractIoFilterChain$TailFilter.messageReceived(AbstractIoFilterChain.java:572)         at org.apache.mina.common.support.AbstractIoFilterChain.callNextMessageReceived(AbstractIoFilterChain.java:299)         at org.apache.mina.common.support.AbstractIoFilterChain.access$1100(AbstractIoFilterChain.java:53)         at org.apache.mina.common.support.AbstractIoFilterChain$EntryImpl$1.messageReceived(AbstractIoFilterChain.java:648)         at org.apache.mina.filter.codec.support.SimpleProtocolDecoderOutput.flush(SimpleProtocolDecoderOutput.java:58)         at org.apache.mina.filter.codec.ProtocolCodecFilter.messageReceived(ProtocolCodecFilter.java:173)         at org.apache.mina.common.support.AbstractIoFilterChain.callNextMessageReceived(AbstractIoFilterChain.java:299)         at org.apache.mina.common.support.AbstractIoFilterChain.access$1100(AbstractIoFilterChain.java:53)         at org.apache.mina.common.support.AbstractIoFilterChain$EntryImpl$1.messageReceived(AbstractIoFilterChain.java:648)         at org.apache.mina.filter.executor.ExecutorFilter.processEvent(ExecutorFilter.java:220)         at org.apache.mina.filter.executor.ExecutorFilter$ProcessEventsRunnable.run(ExecutorFilter.java:264)         at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650)         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675)         at org.apache.mina.util.NamePreservingRunnable.run(NamePreservingRunnable.java:51)         at java.lang.Thread.run(Thread.java:595) 497 [AnonymousIoService-4] WARN org.apache.camel.component.mina.MinaConsumer$1 - [/127.0.0.1:32858] EXCEPTION  please implement org.apache.camel.component.mina.MinaConsumer$1.exceptionCaught() for proper handling: java.lang.IllegalStateException: Already released buffer.  You released the buffer too many times.         at org.apache.mina.common.PooledByteBufferAllocator$PooledByteBuffer.release(PooledByteBufferAllocator.java:310)         at org.apache.mina.util.ByteBufferUtil.releaseIfPossible(ByteBufferUtil.java:39)         at org.apache.mina.common.support.AbstractIoFilterChain$TailFilter.messageReceived(AbstractIoFilterChain.java:572)         at org.apache.mina.common.support.AbstractIoFilterChain.callNextMessageReceived(AbstractIoFilterChain.java:299)         at org.apache.mina.common.support.AbstractIoFilterChain.access$1100(AbstractIoFilterChain.java:53)         at org.apache.mina.common.support.AbstractIoFilterChain$EntryImpl$1.messageReceived(AbstractIoFilterChain.java:648)         at org.apache.mina.filter.codec.support.SimpleProtocolDecoderOutput.flush(SimpleProtocolDecoderOutput.java:58)         at org.apache.mina.filter.codec.ProtocolCodecFilter.messageReceived(ProtocolCodecFilter.java:173)         at org.apache.mina.common.support.AbstractIoFilterChain.callNextMessageReceived(AbstractIoFilterChain.java:299)         at org.apache.mina.common.support.AbstractIoFilterChain.access$1100(AbstractIoFilterChain.java:53)         at org.apache.mina.common.support.AbstractIoFilterChain$EntryImpl$1.messageReceived(AbstractIoFilterChain.java:648)         at org.apache.mina.filter.executor.ExecutorFilter.processEvent(ExecutorFilter.java:220)         at org.apache.mina.filter.executor.ExecutorFilter$ProcessEventsRunnable.run(ExecutorFilter.java:264)         at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650)         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675)         at org.apache.mina.util.NamePreservingRunnable.run(NamePreservingRunnable.java:51)         at java.lang.Thread.run(Thread.java:595) 498 [AnonymousIoService-4] WARN org.apache.camel.component.mina.MinaConsumer$1 - [/127.0.0.1:32858] EXCEPTION  please implement org.apache.camel.component.mina.MinaConsumer$1.exceptionCaught() for proper handling: java.lang.IllegalStateException: Already released buffer.  You released the buffer too many times.         at org.apache.mina.common.PooledByteBufferAllocator$PooledByteBuffer.release(PooledByteBufferAllocator.java:310)         at org.apache.mina.util.ByteBufferUtil.releaseIfPossible(ByteBufferUtil.java:39)         at org.apache.mina.common.support.AbstractIoFilterChain$TailFilter.messageReceived(AbstractIoFilterChain.java:572)         at org.apache.mina.common.support.AbstractIoFilterChain.callNextMessageReceived(AbstractIoFilterChain.java:299)         at org.apache.mina.common.support.AbstractIoFilterChain.access$1100(AbstractIoFilterChain.java:53)         at org.apache.mina.common.support.AbstractIoFilterChain$EntryImpl$1.messageReceived(AbstractIoFilterChain.java:648)         at org.apache.mina.filter.codec.support.SimpleProtocolDecoderOutput.flush(SimpleProtocolDecoderOutput.java:58)         at org.apache.mina.filter.codec.ProtocolCodecFilter.messageReceived(ProtocolCodecFilter.java:173)         at org.apache.mina.common.support.AbstractIoFilterChain.callNextMessageReceived(AbstractIoFilterChain.java:299)         at org.apache.mina.common.support.AbstractIoFilterChain.access$1100(AbstractIoFilterChain.java:53)         at org.apache.mina.common.support.AbstractIoFilterChain$EntryImpl$1.messageReceived(AbstractIoFilterChain.java:648)         at org.apache.mina.filter.executor.ExecutorFilter.processEvent(ExecutorFilter.java:220)         at org.apache.mina.filter.executor.ExecutorFilter$ProcessEventsRunnable.run(ExecutorFilter.java:264)         at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650)         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675)         at org.apache.mina.util.NamePreservingRunnable.run(NamePreservingRunnable.java:51)         at java.lang.Thread.run(Thread.java:595) Dec 5  2007 10:29:00 AM org.apache.camel.component.mock.MockEndpoint assertIsSatisfied INFO: Asserting: Endpoint[mock:result] is satisfied,Is fixed in the recent Mina patches. Apache MINA 2.0 has a much better API where all the allocate and release should be handled internally by itself.. Is fixed by the latest mina patches that has been comitted. The Exception Caused by: java.lang.IllegalStateException: Already released buffer. You released the buffer too many times. is still there in the latest trunk.  We still need to so something to fix it. Willem. Yes its potentially a little harder bug to track.  In the roadmap for MINA 2.x they have refactored this so the alloc/release would be much easier for clients. So we might get this for free when we upgrade to Mina 2.0. However it could take a while as Mina has just released the first milestone on 2.0 and we would like to fix it for MINA 1.1 users.  I have tried to track it down but as I had other bugs/improvements in the mina component I did not do a deep debugging.. The type should be changed from improvement to bug. Yes got it now.  The hint was here: http://markmail.org/message/ye7ijfeb4i4j7e2o#query:%22Already%20released%20buffer.%20You%20released%20the%20buffer%20too%20many%20times.%22+page:1+mid:34ud5ugapa5jz2bz+state:results  We should acquire the ByteBuffer in the datagram decoder.  I will attach a patch.. The patch. Notice that this file also contains parts for the CAMEL-371 patch.  I assume that applying CAMEL-371 and then this patch is the right order.  This fix is just the acquire() stuff in the datagram decoder.. Got that   you just added in.acqurie() call after the CAMEL-371 patch. I need to keep up my speed to catch you patch. Finally we got this nailed and fixed.. Sorry for the little mess with all these new JIRAs  I wanted to let 375 be a master and all the others as sub-task but I could not moved the already created bugs as a subtask of 375.. As the patch is already applied could we close this issue? A test for this patch would be great though! Thanks!. Closed all 1.3 tickets. 
Sub-task,Hadrian Zbarcea,2007-12-06T08:35:19+0000,1196930119,Support to load camel context from spring configuration for camel transport factory   camel conduit   camel destination.,Added the parsers to deal with camel:destination and camel:conduit 's configuration  also included the unit tests for them. Added j.u.l configuration to make camel-cxf component mvn:run much quiet.. Patch applied with thanks!. Hi Hadrian   I think you do not use svn add to the new files in the patch. I had to reopen this JIRA.  Here is a tool[1] to avoid this kind of error  http://svn.haxx.se/dev/archive-2003-04/0164.shtml  You can use "svn st |grep ?" to find them in you work space.  Thanks   Willem.  Here are the list of files that you did not add into svn. components/camel-cxf/src/test/resources/logging.properties components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/transport/CamelDestination.xml components/camel-cxf/src/test/resources/org/apache/camel/component/cxf/transport/CamelConduit.xml components/camel-cxf/src/main/java/org/apache/camel/component/cxf/transport/spring/AbstractCamelContextBeanDefinitionParser.java components/camel-cxf/src/main/java/org/apache/camel/component/cxf/transport/spring/CamelDestinationDefinitionParser.java components/camel-cxf/src/main/java/org/apache/camel/component/cxf/transport/spring/NamespaceHandler.java components/camel-cxf/src/main/java/org/apache/camel/component/cxf/transport/spring/CamelConduitDefinitionParser.java components/camel-cxf/src/main/resources/schema/configuration/camel.xsd. Files add. Thanks Willem for noticing that!. 
Sub-task,Willem Jiang,2007-12-06T08:40:22+0000,1196930422,,we have some tests in servicemix 4 to show how to use cxf camel transport to support ws-* feature in servicemix [1]http://svn.apache.org/repos/asf/servicemix/smx4/features/trunk/camel/servicemix-camel/src/test/java/org/apache/servicemix/camel/ws/security/WSSecurityTest.java [2]http://svn.apache.org/repos/asf/servicemix/smx4/features/trunk/camel/servicemix-camel/src/test/java/org/apache/servicemix/camel/ws/policy/WSPolicyTest.java in those tests  . camel cxf transport just use cxf transport api and can use camel supporting protocol as underlying protocol  for example we can use jetty which is supported by camel  instead of http transport from cxf. So far test for ws-security and ws-policy is done  test for ws-addressing and ws-rm is still in progress  seems we need complete back channel of camel cxf transport in apache camel project.. I just added an example to show how to set up a load balancer camel context for the camel transport through the spring configuration.. An example has been added.. Closed all 1.3 tickets. 
Improvement,Willem Jiang,2007-12-11T14:54:59+0000,1197384899,Idea is described here: http://www.nabble.com/Re%3A-Aggregator-strategies-%28again%29-p13588242.html  Currently splitter as a processor doesn't propagate out message at all so there is no way to use it in InOut scenario.  Patch attached lets you to specify aggregation strategy for splitter so returning messages are aggregated into one response.  Aggregation Strategy works the same way as in aggregator so if there is only one exchange returning then aggregation strategy is not executed at all and the result from that one exchange is used as a result of splitter.,The Patch is applied with thanks to Roman.. Closed all 1.3 tickets. 
Bug,Unassigned,2007-12-14T05:52:32+0000,1197611552,this patch  1. @override     protected boolean useIntrospectionOnEndpoint()  {         return false;     } to let parameter start with "soap." passed in soap endpoint  2. use WSDLServiceFactory factory = new WSDLServiceFactory(getBus()  getWsdlURL()  getServiceQName()); instead of WSDLServiceFactory factory = new WSDLServiceFactory(getBus()  getWsdlURL()  null); so that can pass in servicename to WSDLServiceFactory  in case that more than one service in the wsdl  we can specify the one we want  3. add wait response into CxfProducer  so that if the MEP is not oneway  we can waiting for the response in certain period  4. add more type convert for CxfSoapBinding and CxfBinding  so that we can handle message body more than InputStream .,In the attached patch the file CxfSoapBinding.java has a Eclipse auto generated catch block where exceptions is swallowed and reported to system err.  Isn't this a problem  exceptions should be handled and logged properly.. thanks for pointing out this problem  I will fix it in next patch. Added the affects and fix version. Closed all 1.3 tickets. 
Improvement,Guillaume Nodet,2007-12-15T17:53:40+0000,1197741220,I have used structure101 on camel and found some design tangles that are quite easy to resolve.  The first is in impl. Defaultcomponent contains a special case to handle ScheduledPollEndpoint. As they reference each other there is a dependency tangle. I have attached a screenshot from struture101 with current and suggested status. This is the current code: if (endpoint instanceof ScheduledPollEndpoint) {                 ScheduledPollEndpoint scheduledPollEndpoint = (ScheduledPollEndpoint)endpoint;                 scheduledPollEndpoint.configureProperties(parameters); } My suggestion is to add configureProperties to Endpoint and DefaultEndpoint. So any endpoint offers this useful method. The code is then simpler and the tangle is resolved: endpoint.configureProperties(parameters);  The second tangle is in components file. The package file and strategy reference each other heavily. I have attached screenshots of the tangle. This is because The strategies are configured directly in Endpoint (package file). My suggestion is to create a factory inside the package strategy. So there is only on dependency from file to strategy.  Another reason is that the FileProcessStrategy interface is in the strategy package. I think this interface belongs to the package file.  Using these two changes I managed to reduce the dependencies between strategy and file from 12/17 to 8/1. This makes the code much easier to grasp as you can understand the packages separately.  I have attached a patch and screenshots for both issues.   What do you think?,The patch uses absolute paths for the files instead of relative paths which makes it quite difficult to apply. Did you use svn diff on your source folder to create it ?. You can use `patch -p 3 < patch.txt` from the base dir of your local copy.. Patch with local pathnames. I used the diff from the Eclipse Subversion plugin. I have checked the config in Eclipse but did not find any option to use local path names. So I used svn diff on the command line to create the new patch like you suggested.. Sending camel-core/src/main/java/org/apache/camel/Endpoint.java Sending camel-core/src/main/java/org/apache/camel/component/file/FileConsumer.java Sending camel-core/src/main/java/org/apache/camel/component/file/FileEndpoint.java Adding camel-core/src/main/java/org/apache/camel/component/file/FileProcessStrategy.java Deleting camel-core/src/main/java/org/apache/camel/component/file/strategy/FileProcessStrategy.java Adding camel-core/src/main/java/org/apache/camel/component/file/strategy/FileProcessStrategyFactory.java Sending camel-core/src/main/java/org/apache/camel/component/file/strategy/FileProcessStrategySupport.java Sending camel-core/src/main/java/org/apache/camel/impl/DefaultComponent.java Sending camel-core/src/main/java/org/apache/camel/impl/DefaultEndpoint.java Sending components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfSoapEndpoint.java Sending pom.xml Transmitting file data .......... Committed revision 604966.. This seems to have broken (at least) DeleteFileStrategy. FileStrategySupport defines begin/commit using Endpoint  but the subclasses then define separate methods that use FileEndpoint. The end result is that FileStrategySupport takes the begin/commit calls  regardless of the subclass being used. Attached is a patch that changes the interface to use FileEndpoint and adds @Override annotations to ensure the compiler catches something like this next time.. Attached is a patch that causes FileDeleteRouteTest to poll every second while sleeping for 4 seconds before calling result.assertIsSatisfied(). This ensures the test will fail if the sent file isn't deleted.. Sending camel-core/src/main/java/org/apache/camel/component/file/FileProcessStrategy.java Sending camel-core/src/main/java/org/apache/camel/component/file/strategy/DeleteFileProcessStrategy.java Sending camel-core/src/main/java/org/apache/camel/component/file/strategy/FileProcessStrategySupport.java Sending camel-core/src/main/java/org/apache/camel/component/file/strategy/RenameFileProcessStrategy.java Sending camel-core/src/test/java/org/apache/camel/component/file/FileDeleteRouteTest.java Transmitting file data ..... Committed revision 605128.. Thanks for the fix. I overlooked this.. 
Improvement,Unassigned,2007-12-15T18:19:16+0000,1197742756,Most of the components (except bean and mock) below package components are not referenced from the rest of the camel code. So my suggestion is to move these into a separate maven project that could be called camel-components-standard. The new project will of course include camel_core but camel_core will not need to include the components.   The only components that are heavily referenced from the rest of the camel_core are bean and mock. These will have to stay in the maven core project of course.  The separation will make understanding the camel core code easier as it gets smaller.,-1  Then all the people need a lot of more dependent jars to work with Camel.  I would even argue that some of the camel-spring components should be in the core or camel-core and came-spring be merged. When you combine Camel and Spring gives you the outstanding power.. I don´t mean each component should be in it´s own package. But a package with the basic components could be easily separated from the core. The separation would make sure that no core class references a component class.. We will get complications with the build order in maven  as we use the current components extensively in unit testing camel-core itself.. 
Improvement,Claus Ibsen,2007-12-16T02:00:22+0000,1197770422,Currently spi.LifecycleStrategy depends on impl.RouteContext. This is bad because the spi is an interface package that should have no dependencies on implementation packages.  The solution is to rename RouteContext to RouteContextImpl  extract an interface class RouteContext from the implementation and put this interface into spi. So spi is self contained.  The other problem is that spi.InstrumentationAgent depends on management.CamelNamingStrategy. In this case I would suggest to simply remove the method getNamingStrategy from the IntrumentationAgent. Instead I add the naming strategy param to the constructor of InstrumentationLifecycleStrategy. So the dependency disappears. Of course this way the naming strategy is no longer part of the spi but I think it is an internal thing anyway. What do you think?  I will attach a patch for the issues.,I have added screenshots that show the dependencies before and after the patch. According to structure 101 the XS value of the tangle in the screenshot dropped from about 5900 to 5100.. My patch was defective. I have removed it. I will try to recreate the patch.. RouteContext should not have been in the impl package from the start but just in the camel package along side CamelContext and it should have been an interface.  Maybe a refactor could do to extract an interface for RouteContext and a class for DefaultRouteContext in the impl package. Then all spi classes is not dependent on any impl classes.. I tried to do the steps you advised but have some problems with my eclipse. I renamed RouteContext to DefaultRouteContext. Then I did refactor / extract Interface named it RoutceContext  selected all methods and hit Preview. After checking for preconditions I got the above error. Does this also happen to you?  I already tried to recreate the .project file  delete and rebuild my workspace aand reinstall eclipse. I even get this error when I start eclipse on linux instead of windows. Any idea how I can get ahead?. No I have not tried to do the refactor (yet). I assume you are running one of the latest Eclipse versions?  I am using IDEA when coding on the Camel project. I can try it out to see if it can do it.. I have used Eclipse 3.3 and Eclipse 3.4 M7. Both had the same problem. When I tried extract interface on a class with much less references it worked.. Discussing this on the dev forum for feedback if the plan is accepted.. I have done the refactoring in Netbeans and created a patch. I renamed impl.RouteContext to impl.DefaultRouteContext. Then I extracted the interface spi.RouteContext. The result is the spi does not depend on impl anymore. I think this is an improvement in any case.  While I analysed the dependencies deeper I realized that spi depends on model and model depends on impl. So spi is still not clean but we should try to solve this in subsequent changes. I would also advise to put the NamingStrategy problem in a separate change.. I have found one other problem in RouteContext. The method intercept uses the class Interceptor from processor. I think Interceptor should be an interface that should reside in spi. So we could avoid referencing the processor package from spi. What do you think?. When I look into the current Interceptor implementation I think the two main methods that need to be in the interface are process and proceed. Process can be inherited from Processor but proceed is only declared in the implementation class DelegateProcessor. So I tihnk the clean way to handle this would be to create an interface DelegateProcessor.  public interface DelegateProcessor extends Processor  { /** * Proceed with the underlying delegated processor */ public abstract void proceed(Exchange exchange) throws Exception; }  and an interface Interceptor  public interface Interceptor extends DelegateProcessor  { public abstract void process(Exchange exchange) throws Exception; public abstract Processor getInterceptorLogic(); public abstract void setInterceptorLogic(Processor interceptorLogic); }  When we put these to spi and use them instead of the implementations where possible the spi would not depend on processor anymore. As this is no trivial change I think this should be handled in a separate Jira issue. Should I open one?. Christian great findings.  Yes please open a new ticket for the process/proceed stuff.  I will try to get your patch in the SVN as agreed here: http://www.nabble.com/RouteContext-to-be-an-interface---CAMEL-264-td17288713s22882.html. CAMEL-264: Refactored RouteContext to avoid the spi package being dependent on impl package - thanks to Christian Schneider for the patch  Committed revision 659007.. Closing 1.4 issues. 
Task,Willem Jiang,2007-12-17T11:19:24+0000,1197890364,See http://activemq.apache.org/camel/cxf.html,Fancy trying to document what CXF support we have so far?. Done.. 
Improvement,Willem Jiang,2007-12-17T11:26:53+0000,1197890813,we should be able to easily throw an exception or a SOAP fault from inside a Camel route. e.g. something vaguely like..   from("foo").   filter().xquery("/foo/bar = 'abc').throwFault().xquery("<someFaultExpression/>").end().   to("success");,Fancy taking a stab?. Hi James   Here is a Unit test in camel-cxf component [1] which shows how to throw a soap fault from the processor. I don't know if it relate to this JIRA. Do we still need to support the DSL style throwFault() method ?  [1] https://svn.apache.org/repos/asf/activemq/camel/trunk/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfCustmerizedExceptionTest.java  Willem. I'd like to throwFault like this from("cxf:consumer").filter().xquery("/foo/bar = 'abc').throwFault("ExceptionMessage").end().to("success"); or SoapFault fault = new SoapFault(); //setting the fault message  from("cxf:consumer").filter().xquery("/foo/bar = 'abc').throwFault(fault).end().to("success");. The patch is applied into the svn repository.. Closed all 1.3 tickets. 
Bug,James Strachan,2007-12-17T17:41:57+0000,1197913317,The current Bean Expression mechanism doesn't support the use of a Predicate as the Bean/POJO.  The problem is that BeanInfo tries to use matches(Object) instead of matches(Exchange).  If you use the extra "methodName" hint  this happens because BeanInfo uses operations.get(name)  which will only return the most recently introspected method (potentially the Object one.)  If you don't  then BeanInfo will try to find a method based on the inbound message body type  ignoring methods that take Exchange as a parameter.  This may too esoteric to bother working around?  It's relatively easy to workaround for the common case (match the incoming body)  but it's still a little unexpected.  The only thing I can see this preventing is the use of Predicates that are looking at multiple messages at once (eg: comparing delta between in & out messages in an exchange.),CAMEL-320 may solve this issue (it makes the attached test pass  at any rate). Aaron.  Running latest camel trunk with your test case still fails. Hence I do not think CAMEL-320 fixed your issue.  ------------------------------------------------------------------------------- Test set: org.apache.camel.component.bean.PredicateAsBeanTest ------------------------------------------------------------------------------- Tests run: 1  Failures: 1  Errors: 0  Skipped: 0  Time elapsed: 0.531 sec <<< FAILURE! testSendMessage(org.apache.camel.component.bean.PredicateAsBeanTest)  Time elapsed: 0.375 sec  <<< FAILURE! junit.framework.ComparisonFailure: bean body: org.apache.camel.component.bean.PredicateAsBeanTest$MyPredicate@197a37c expected:<Wobble> but was:<null> 	at junit.framework.Assert.assertEquals(Assert.java:81) 	at org.apache.camel.component.bean.PredicateAsBeanTest.testSendMessage(PredicateAsBeanTest.java:43). I've just added the test case and a fix (to provide Type Converter methods for Predicate or Expression implementations to a Processor). Damm James that was clever - using the type converter to do the trick.. Good find! Thanks for looking into this.. Claus - you can use the Type Converter stuff do do all kinds of wacky stuff!   e.g. here's how we can invoke a JMS MessageListener as a bean in any Camel route...  https://svn.apache.org/repos/asf/activemq/trunk/activemq-core/src/test/java/org/apache/activemq/camel/converter/InvokeJmsMessageListenerTest.java  we could use a similar trick to integrate with any other 'messaging' API - whether its Servlets  Restlets  JBI  Mule or whatever. 
Bug,Hadrian Zbarcea,2007-12-18T14:16:34+0000,1197987394,apache-camel-1.2.jar's META-INF/services/org/apache/camel/TypeConverter file contained only "org.apache.camel.converter" The lastest apache-camel-1.3-SNAPSHOT.jar's file contains only "org.apache.camel.components.mail"  Apparently  the file should contain the concatenation of all of the sub-component TypeConverter files.  For more info see: http://www.nabble.com/apache-camel-1.3-SNAPSHOT.jar-TypeConverter-to14387417s22882.html,Closed all 1.3 tickets. 
Improvement,Willem Jiang,2007-12-18T14:58:43+0000,1197989923,I need to stop a RouteBuilder. A solution for this issue could be access to routeCollection property in RouteBuilder class.,The method is added in the svn repository.. Closed all 1.3 tickets. 
Bug,Unassigned,2007-12-19T13:50:23+0000,1198072223,Found an error in method contains of class org.apache.camel.util.ObjectHelper. If using an array instead of a collection.  Following line is wrong: Iterator iter = ObjectConverter.iterator(value);  It should be iterated over collectionOrArray variable. Correct line is: Iterator iter = ObjectConverter.iterator(collectionOrArray);   Complete new method is:  public static boolean contains(Object collectionOrArray  Object value) {     if (collectionOrArray instanceof Collection)  {         Collection collection = (Collection)collectionOrArray;         return collection.contains(value);     }  else {         Iterator iter = ObjectConverter.iterator(value);         while (iter.hasNext()) {             if (equal(value  iter.next()))  {                 return true;             }         }         return false;     } },This issue has been fixed with the CAMEL-290. Closed all 1.3 tickets. 
Bug,Unassigned,2007-12-19T18:36:15+0000,1198089375,In the CxfEndpointBeanDefinitionParser  the list elements being read are cast to com.sun.xml.bind.v2.schemagen.xmlschema.List class which is never true...  Why don't we just leave it as a object or atleast cast it to a java.util.List?  For getting the error just add the following configuration to a cxf endpoint:    <cxf:cxfEndpoint id="toEndpoint1"                     address="http://localhost:9091/GreeterContext/GreeterPort"                     serviceClass="demo.router.Greeter">       <cxf:features>           <cxfcore:logging/>       </cxf:features>   </cxf:cxfEndpoint>  cxfcore points to the "http://cxf.apache.org/core" namespace.  I have attached a patch for this problem & would appreciate if someone applied it.  Thanks  Balaji,Patch applied with thanks!. 
Improvement,Hadrian Zbarcea,2007-12-19T22:32:01+0000,1198103521,After my first smaller rework in issue camel-262 I now completely reworked the file component to remove any cyclic references and clean up the code.  The first thing I did was separating the FileComponent from the other classes in package file by moving them to a new package .impl. This way I was able to remove the cycle between the strategy package and the file package.  The second step was to move all config data from FileEndPoint to a new class FileEndPointConfig. This way I was able to remove the cycle between FileEndPoint  FileProducer and FileConsumer.  Next I removed FileMessage and FileExchange and instead relied on the default objects. The file is simply stored in DefaultMessage.body. There was even a comment in the code asking if FileExchange was necessary before. So I hope this is ok?  I had to adapt the tests to the new structure but only changed the tests where it was absolutely necessary. All tests run fine.  What do you think?,Christian  is the FileEndpointConfig class missing from the patch?. Hi Hadrian   sorry that I reply so late. I was on a conference last week and had a bad flue afterwards.  I have created the patchfile like described in the wiki. But I am not so sure it is correct. I have created a new directory impl and the patch looks not correct there. So I have also attached complete copies of the source files in components/file as well as the corresponding tests.  I have also updated my checkout before making the patch and copies so I hope there are no conflicts.  Best regards  Christian. I ended up not using the patch. I removed the tangle by loading the factory dynamically. The factory is now pluggable via a strategy.factory.class property.  Christian  thanks for spotting this!. Hadrian. Shouldn't we reuse the helper methods on ObjectHelper to load class  create a new instance and invoke methods. It already has the try .. catch handling etc.  ObjectHelper.loadClass ObjectHelper.newInstance ObjectHelper.invokeMethod. Fixed per Mr Hawk-Eye's request. Thanks!. 
Bug,Guillaume Nodet,2007-12-20T13:49:14+0000,1198158554,A workaround seems to be    delayer(constant(new Long(0))  3000),Sending camel-core/src/main/java/org/apache/camel/model/DelayerType.java Sending camel-core/src/main/java/org/apache/camel/model/ExpressionNode.java Sending camel-core/src/test/java/org/apache/camel/processor/DelayerTest.java Transmitting file data ... Committed revision 605931.. 
Bug,Hadrian Zbarcea,2007-12-24T13:11:51+0000,1198501911,Bug in AggregatorType which makes setBatchTimeout method unusable if setBatchSize is not set before.,Nice catch Przemyslaw!  You didn't grant ASF license to apply this patch. Do you mind doing it? Thanks a bunch!. Patch applied with thanks!. Closed all 1.3 tickets. 
Improvement,Unassigned,2007-12-25T08:27:20+0000,1198571240,when cxf bus init  all tranports module on the classpath should register itself to the bus automatically. cxf machenism for this is just add a spring bean to describe the transport id and transport factory class mapping per as below <beans xmlns="http://www.springframework.org/schema/beans"        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"        xmlns:foo="http://cxf.apache.org/configuration/foo"        xsi:schemaLocation="        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">      <bean class="org.apache.camel.component.cxf.transport.CamelTransportFactory" lazy-init="true">         <property name="bus" ref="cxf"/>         <property name="transportIds">             <list>               <value>http://cxf.apache.org/transports/camel</value>             </list>         </property>     </bean> </beans>,files affected  M src/test/java/org/apache/camel/component/cxf/transport/CamelDestinationTest.java M src/test/java/org/apache/camel/component/cxf/transport/CamelTestSupport.java M src/main/java/org/apache/camel/component/cxf/transport/CamelTransportFactory.java A src/main/resources/META-INF/cxf A src/main/resources/META-INF/cxf/cxf-extension-camel.xml A src/main/resources/META-INF/cxf/cxf.extension M src/main/resources/bus-extensions.xml. Sending camel-cxf/src/main/java/org/apache/camel/component/cxf/transport/CamelTransportFactory.java Adding camel-cxf/src/main/resources/META-INF/cxf Adding camel-cxf/src/main/resources/META-INF/cxf/cxf-extension-camel.xml Adding camel-cxf/src/main/resources/META-INF/cxf/cxf.extension Sending camel-cxf/src/main/resources/bus-extensions.xml Sending camel-cxf/src/test/java/org/apache/camel/component/cxf/transport/CamelDestinationTest.java Sending camel-cxf/src/test/java/org/apache/camel/component/cxf/transport/CamelTestSupport.java Transmitting file data ...... Committed revision 608777.. Closed all 1.3 tickets. 
New Feature,Hadrian Zbarcea,2007-12-25T16:24:04+0000,1198599844,New component proposal for dealing with streams (System.in System.err System.out). It might be very usable for testing/prototyping purposes eg.  to be able to get some input from System.in and pass it through the workflow  or maybe to "wiretap" some exchange to System.out in order to have some debug output on the console. Simple thing  but hopefully could enrich Camel components stack somehow,Patch has been applied with thanks to Przemyslaw.  BTW  Please use svn diff to generate the patch   there is a bug which will generate the different file twice in the svn tortoises if you create a patch for new added directory.. Przemyslaw  could you please grant ASF license to include this patch? I will let it in for now  but we'd have to back it out if this is not addressed. Thanks a lot and keep them coming!. ASF licence has been granted and I've attached the new version.. Patch applied with thanks!. I took a stab at some initial documentation...  http://cwiki.apache.org/CAMEL/stream.html  feel free to add improvements. How the stream header really works should be better documented  maybe with a java snippet example. I created a subtask for the doc improvements. I'm gonna look at it and add something soon. Closed all 1.3 tickets. 
Bug,Hadrian Zbarcea,2007-12-26T13:16:52+0000,1198675012,TheadType is missing in org/apache/camel/model/jaxb.index => JAXB don't know how to unmarshall thread.  Bug description found in Camel Users forum : http://www.nabble.com/Processor-thread-pool-td13212513s22882.html,Hi Jerome  could you please grant license to ASF for patch inclusion? Thanks!. since it was such a trivial fix  I just went ahead and added that string myself without using the patch. Closed all 1.3 tickets. 
Bug,Unassigned,2007-12-26T13:30:52+0000,1198675852,http\://activemq.apache.org/camel/schema/spring/camel-spring-1.1.xsd becomes http\://activemq.apache.org/camel/schema/spring/camel-spring-1.1.0.xsd http\://activemq.apache.org/camel/schema/spring/camel-spring-1.2.xsd becomes http\://activemq.apache.org/camel/schema/spring/camel-spring-1.2.0.xsd  There's no camel-spring-1.1.xsd and camel-spring-1.2.xsd under http://activemq.apache.org/camel/schema/spring/,Many thanks for the JIRA and patch. This was an easy fix so I fixed it without the patch.  Next time you submit a patch file could you please click on the "Grant license to ASF for inclusion in ASF work" button please?  Keep up the great work - thanks!. Closed all 1.3 tickets. 
Bug,Hadrian Zbarcea,2007-12-27T10:45:18+0000,1198752318,Issue described here: http://www.nabble.com/BeanProcessor-multiple-method-invocation-on-same-bean-to14506245s22882.html#a14506245,Applied the patch with thanks to Roman.. I was wondering if a neater solution would be that whenever we use code like this...  beanRef("someBeanName"  "someMethodName")   that we always use that method name - and ignore the header thats on the message. i.e. if someone really wants a foo method to be called in the DSL  we shouldn't magically call some other method just because there's a header (from maybe a previous message exchange or something).  Thoughts?. Hi James   I agree with you and just did a quick fix for this   it will be committed soon.  Willem.. Hello Guys!  Didn't we just came back to the very beginning of the issue with the patch that was applied? Because now we explicitly set the METHOD_NAME header in BeanProcessor so it affects further invocations and clears the current value of the header (title of this issue  ).  I agree with James that we should use the method name provided  but  setHeader(METHOD_NAME  constant("bar") .beanRef("someBeanName"  "foo") .beanRef("someBeanName")   should result (I think) with foo() invocation and then bar() (from header) while now the header seems to be overridden.  BTW I don't have any access to java on the computer I'm using right now  so it is hard to test it. If I'm wrong - just ignore it. I'm just looking at the mail that describes the latest commit.. Hi Roman   I think there are lots of place can change the Message header (the sender or the processor). If you treat the DSL rule as the first class citizen in camel   I think we need to let DSL override the message Header's METHOD_NAME.  Any thoughts?. I agree on the fact  that DSL could modify some header  and there is nothing wrong about it. I just think  that in a case I presented in my comment it shouldn't.  the question is: what is the intended behavior of  beanRef("someBean"  "fooMethod")   I think  that it is 'execute fooMethod() on someBean (and doesn't change current METHOD_NAME header)'  while it is not 'execute fooMethod() and overwrite METHOD_NAME so all next invocations will execute fooMethod()'.  Maybe it is my misunderstanding of the concept  but I believe  that from external point of view BeanProcessor shouldn't change METHOD_NAME header.  I assume that internally it could change this header  but I can imagine a bean that tries to use @Header(METHOD_NAME) annotation - should it be given it's own method name  or original value of METHOD_NAME header? I believe that the second answer is 'more' correct (but I'm not 100% convinced).  What I describe is only my thoughts - if we assume that it should work the way it does now  then let's document it and we are done. I just think  that it is not working in a way I would expect it to.. I think Roman's right. The effects of an invocation  beanRef("someBeanName"  "someMethodName"). beanRef("someBeanName")   should not extend beyond its scope. For the second call one should either explicitly define the method to be invoked or to rely on the request made by the caller via the METHOD_NAME header. I updated the code to reflect this behavior.. Roman  before I close this bug  could you please grant Apache license for inclusion of your patch (which Willem already applied). Thanks!. License granted.  But have in mind that this patch is my original proposal. It always looks at the METHOD_NAME header  while it should look there only if there is no method explicitily specified on an endpoint (see James comment at the very beginning). Roman  I was aware of that  thanks for pointing it out. Camel already behaves and James suggested. My last patch addresses your comment that there should be no side effects if a method name is explicitly defined as per James' comment. Please see my comment above. I think this issue can now be closed to everybody's satisfaction.. Closed all 1.3 tickets. 
New Feature,Unassigned,2007-12-28T08:32:06+0000,1198830726,I decided to get my hands dirty by taking https://issues.apache.org/activemq/browse/CAMEL-8  I had in mind a feature like this:  from("....").dynamicRouter(myRouter);  where myRouter is a class that implements some interface so that it provides a list of endpoints (or one endpoint as well) to send messages to. Of course it creates some room for further improvements like providing Drools integration or another sophisticated routing mechanism based on "rules" so to speak. The idea is to have message and depending on its content create destinations dynamically per flow.  Anyway when expressed by DSL it's quite nice to use (however still the same is doable playing with processors). What do you think about it? Does it make sense?,Great initiative!  I think we'll need to think a bit about this one. AFAIK  the intent behind CAMEL-8 is to support the following scenario:  client sends message to router (camel) camel processes and send to a server  server replies  but the response contains a service url (e.g. a 'createAccount' operation that returns the url for the newly created Account service). Now the issue is that the new url may be of no use to the client for quite a few reasons  for instance client may not support the protocol - but camel does - or the server may be behind a firewall  accessible to camel  but not to the client) camel creates new endpoint and deploys route to the new service  modifies the response to send its own url back to the client We can implement a control feature in camel to support dynamic creation and deployment of routes.  From looking at your patch  i am not sure how it's different than using a Processor. Do I miss something? How is your scenario different from CAMEL-8?  I'll be out for a week  but I'd be more than happy to tackle this one when back. Happy New Year!. Moving to 2.0. We already got it http://camel.apache.org/dynamic-router.html. 
Improvement,Claus Ibsen,2007-12-29T23:41:44+0000,1198971704,Prefer dependency on unbundled spring jars.  camel-core depends on spring-context camel-jms depends on spring-jms  Discussion at http://www.nabble.com/pom-dependency-on-%22spring%22-instead-of-%22spring-context%22-et-al.-td14475572s22882.html#a14531049,Steven  Its quite a work to find out exactly all the spring related dependencies in all the camel components.  There are 40 pom files using spring. So we need a patch that covers all those 40.. Resolved camel-core camel-jms  TODO: camel-groovy camel-ibatis camel-jpa camel-mail camel-osgi camel-ruby camel-script camel-spring camel-sql camel-stringtemplate camel-testng camel-uface camel-velocity camel-example-spring camel-example-spring-xquery camel-itest-spring-2.0. Renamed title and target this for 1.4. I got most of them covered now.. Some of the components depend on camel-spring  maybe we need to double check that this is really true.. First cut patch  there could still be some issues. Could Maven super freaks take a look.. I am OK for that patch . Claus   just a question. Why do you add dependency of the spring-aop and spring-tx in the camel-spring module?. Willem I think it was because camel-spring needs these to compile. We should take a 2nd look  maybe they are only used for testing. Try removing them and see what happens.. spring-tx is needed by camel-spring to compile  camel\components\camel-spring\src\main\java\org\apache\camel\spring\spi\TransactionInterceptor.java:[25 39] package org.springframework.transaction does not exist. And spring-aop is needed by the unit tests  Caused by: java.lang.NoClassDefFoundError: org/springframework/aop/framework/ProxyFactory. Committed to trunk at rev 647941. Willem fixed the problem with pom in came-bam.  Bamboo is also happy and it looks like it works. If anyone having trouble then reopen.. 
Improvement,Unassigned,2007-12-31T15:49:31+0000,1199116171,For a discussion see: http://www.nabble.com/spliting-iBatis-query-result-tp14499404s22882p14499404.html,Patch applied to support arrays or Collection objects being sent to the ibatis endpoint. 
Improvement,Willem Jiang,2008-01-05T14:02:28+0000,1199541748,The submitted patch have these improvements to the logger in deadletterchannel for delivery attempts  	outputs exchange id so we can correlate the lines in the log files. 	now also logs when the exchange could not be delivered and was handled by the failure processer (usually a deadletterchannel) 	minor issues with existing debug logging when sleeping (now also output millis) to be in line with other similar log lines in Camel    I have not outputted the exchange itself (exchange.toString()) when the delivery could not be delivered successfully since there could be sensitive data in the exchange (e.g. an invoice input message) that we do not want to be logged in our log.  But I think the logging of the exchange id is a good improvement and that they are aligned in the same position in the logline so it's easier to grep/find in the logs when you investigate and incident.,The patch.  I have faxed and signed the Apache CLA 2-3 years ago (my name is on the list  but I do not recall when the list is on the apache site).. And a sample of the logging I have tested with:  2008-01-05 15:00:41 140 [enerContainer-2] ERROR org.apache.camel.processor.DeadLetterChannel - Failed delivery for exchangeId: ID-claus-acer/2575-1199541640390/0-9. On delivery attempt: 0 caught: java.lang.IllegalArgumentException: Hey I forced this exception to test something  2008-01-05 15:00:42 187 [enerContainer-2] ERROR org.apache.camel.processor.DeadLetterChannel - Failed delivery for exchangeId: ID-claus-acer/2575-1199541640390/0-9. On delivery attempt: 1 caught: java.lang.IllegalArgumentException: Hey I forced this exception to test something  And now the new log line where we can see that its moved to the ActiveMQ deadletter channel  2008-01-05 15:00:42 218 [enerContainer-2] ERROR org.apache.camel.processor.DeadLetterChannel - Failed delivery for exchangeId: ID-claus-acer/2575-1199541640390/0-9. Handled by the failure processor: sendTo(Endpoint[activemq:queue:dead]). patch is applied with thanks.. 
Improvement,Willem Jiang,2008-01-08T09:48:06+0000,1199785686,Maybe with a screen shot of jconsole in action etc. e.g. like the ActiveMQ page...  http://activemq.apache.org/jmx.html,CAMEL-508 introduces a new feature for JMX - a system property to alter behavior of which MBeanServer to use. Added a wiki page http://cwiki.apache.org/CAMEL/camel-jmx.html. This is a really cool jmx page you have added Willem. However the jconsole image could use to be cropped so its size isn't so large.. done. It may need to wait a while to sync the wiki page.. 
New Feature,Unassigned,2008-01-08T09:52:06+0000,1199785926,So that we can browse the available messages such as on a message queue  in a file system  on a HTTP server etc Useful for management really,We have an optional BrowseableEndpoint interface that an Endpoint can implement now.  so you can browse the endpoints and their messages via this code  List<BrowsableEndpoint> list = CamelContextHelper.getSingletonEndpoints(context  BrowsableEndpoint.class);   then call the getExchanges() method.. Closed all 1.3 tickets. 
Bug,Willem Jiang,2008-01-11T17:08:07+0000,1200071287,When an endpoint is added between a cxf router and a cxf service endpoint the message exchange is interrupted by a NullPointerException.  Example code:  ----JAVA-BEGIN--------------------------------------------------------- //This code works from(StringUtils.join(cxfRouterURI)).to(StringUtils.join(cxfServiceURI));   // This code crashes (same problem with seda and log endpoints) String anyEndpoint = "activemq:someQueue"; ----JAVA-END---------------------------------------------------------  from(StringUtils.join(cxfRouterURI)).to(anyEndpoint).to(StringUtils.join(cxfServiceURI));   ----EXCEPTION-BEGIN----------------------------------- 09/01/2008 18:32:40 org.apache.cxf.phase.PhaseInterceptorChain doIntercept INFO: Interceptor has thrown exception  unwinding now org.apache.cxf.interceptor.Fault         at org.apache.camel.component.cxf.interceptors.RawMessageContentRedirectInterceptor.handleMessage(RawMessageContentRedirectInterceptor.java:43)         at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:207)         at org.apache.camel.component.cxf.invoker.CxfClient.invokeWithMessageStream(CxfClient.java:137)         at org.apache.camel.component.cxf.invoker.CxfClient.dispatch(CxfClient.java:89)         at org.apache.camel.component.cxf.CxfProducer.process(CxfProducer.java:202)         at org.apache.camel.component.cxf.CxfProducer.process(CxfProducer.java:152)         at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsynProcessorBridge.process(AsyncProcessorTypeConverter.java:44)         at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:73)         at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:143)         at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:87)         at org.apache.camel.processor.Pipeline.process(Pipeline.java:101)         at org.apache.camel.processor.Pipeline.process(Pipeline.java:85)         at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:40)         at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:44)         at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:68)         at org.apache.camel.component.cxf.CamelInvoker.invoke(CamelInvoker.java:71)         at org.apache.camel.component.cxf.interceptors.AbstractInvokerInterceptor.handleMessage(AbstractInvokerInterceptor.java:65)         at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:207)         at org.apache.camel.component.cxf.CxfMessageObserver.onMessage(CxfMessageObserver.java:83)         at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.serviceRequest(JettyHTTPDestination.java:284)         at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.doService(JettyHTTPDestination.java:240)         at org.apache.cxf.transport.http_jetty.JettyHTTPHandler.handle(JettyHTTPHandler.java:54)         at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:712)         at org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:211)         at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:139)         at org.mortbay.jetty.Server.handle(Server.java:313)         at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:506)         at org.mortbay.jetty.HttpConnection$RequestHandler.content(HttpConnection.java:844)         at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:726)         at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:211)         at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:381)         at org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:396)         at org.mortbay.thread.BoundedThreadPool$PoolThread.run(BoundedThreadPool.java:442) Caused by: java.lang.NullPointerException         at org.apache.commons.io.IOUtils.copyLarge(IOUtils.java:1025)         at org.apache.commons.io.IOUtils.copy(IOUtils.java:999)         at org.apache.camel.component.cxf.interceptors.RawMessageContentRedirectInterceptor.handleMessage(RawMessageContentRedirectInterceptor.java:39)         ... 32 more  ----EXCEPTION-END-----------------------------------  Known workaround:  Change the code like this:  ----JAVA-BEGIN---------------------------------------------------------         String anyEndpoint = "activemq:someQueue";          from(StringUtils.join(cxfRouterURI)).process(new Processor(){ 			public void process(Exchange exchange) throws Exception  { 				exchange.setOut(exchange.getIn()); 			}         }).to(anyEndpoint).to(StringUtils.join(cxfServiceURI)); ----JAVA-END---------------------------------------------------------,The patch has been committed to trunk.. Closed all 1.3 tickets. 
Task,Willem Jiang,2008-01-13T08:10:55+0000,1200211855,I just checked the kit of apache camel  found the pom.xml in the apach-camel module is missing some modules which were added few month ago. The missing modules are camel-csv  camel-groovy  camel-jcr  camel-jhc   ...,The patch is in the svn repository now.. Closed all 1.3 tickets. 
Improvement,Willem Jiang,2008-01-13T12:23:01+0000,1200226981,I have a use case   the router configuration could like this                 from("direct:a").multicast().to("direct:x"  "direct:y"  "direct:z");                              from("direct:x").process(new AppendingProcessor("x")).to("direct:aggregater");                from("direct:y").process(new AppendingProcessor("y")).to("direct:aggregater");                from("direct:z").process(new AppendingProcessor("z")).to("direct:aggregater");                              from("direct:aggregater").aggregator(header("cheese")  new BodyAggregatingStrategy()).                         completedPredicate(header("aggregated").isEqualTo(3)).to("mock:result");  Now I send the message to endpoint "direct:a" and I want to get the final result of the processors.  And this requirement  is much like the CAMEL-260.,We can get the out result by specifying aggregation strategy for multicast processor.. The patch is in the svn repository now.. Closed all 1.3 tickets. 
Task,Willem Jiang,2008-01-14T08:44:42+0000,1200300282,cxfEndpoint.xsd's the name space is http://activemq.apache.org/camel/schema/cxfEndpoint   we need to put it into this url. BTW you can find the cxfEndpoint.xsd here  https://svn.apache.org/repos/asf/activemq/camel/trunk/components/camel-cxf/src/main/resources/schema/cxfEndpoint.xsd,In Camel 1.2 we point to cxfEndpoint schema with this url[1] Now we need to update the schema file to this url[2]for automatic deploying  So we need to put the file into this two url[1][2] for supporting both the Camel 1.2 and 1.3  [1]http://activemq.apache.org/camel/schema/cxf/cxfEndpoint.xsd [2]http://activemq.apache.org/camel/schema/cxfEndpoint/camel-cxf.xsd. I just commit a python script which can copy the m2 snapshot xsd into the web site. Here is script url https://svn.apache.org/repos/asf/activemq/scripts/copy_camel_snapshot_xsd.py. I just committed a second version of python script that copy the snapshot xsd. Now we can call the python script from bash.. The script is working now. Closed all 1.3 tickets. 
Bug,Unassigned,2008-01-15T09:28:51+0000,1200389331,patch and summary explains everything,Roman  could you please grant license to ASF if you want the patch applied? Thanks!. Granted. Patch applied with thanks! Keep them coming.. Closed all 1.3 tickets. 
Improvement,Hadrian Zbarcea,2008-01-15T14:45:56+0000,1200408356,Probably it would be useful to have recipientList that in InOut mode doesn't work as a pipeline. I faced that problem  however InOnly is ok. It seems  in InOut it reminds of RoutingSlip. Optionally we could use MulticastProcessor to process "recipients". If you think it makes sense  attached patch enhances camel-core with such feature.,Great stuff - any chance you could remove and re-attach the patch clicking the "Grant to ASF" button so we can use this patch? e.g. see this page  its not granted. Granted. Sorry for inconvenience.. Przemyslav   I decided to not apply the patch and fix the RecipientList instead. The change is similar to your patch with the only notable change that I used multicast with a UseLatestAggregationStrategy to preserve the previous semantics. That is it works as expected for in only and as before for in/out(s) - last result is returned. Currently the strategy is hardcoded and I don't see a serious reason to make it pluggable as one could use multicast for that. If you disagree please reopen the issue and comment.  That said  you get credit both for spotting this and for the patch. Thanks and keep them coming!. Closed all 1.3 tickets. 
Improvement,Unassigned,2008-01-15T16:57:43+0000,1200416263,A RouteBuilder may need to create Java POJO Beans dynamically and register them in the registry to be accessed from a route using a bean:.. URI  the current Java DSL does not have a method to do so.,the references are typically to some external Registry such as JNDI or Spring.  However if a RouteBuilder wants to use its own bean inside the DSL just use the bean() method.  from("activemq:myQueue").bean(new MyBean()).to("activemq:anotherQueue");   or  from("activemq:myQueue").bean(MyBean.class).to("activemq:anotherQueue");   The main thing is  its not really that easy to register a new bean in  say  Spring - so am tempted to leave thing as they are. Would that be ok with you?. See if my explanation in my previous comment is acceptable - if not  let us know and we can reopen. Closing 1.4 issues. 
Bug,Hadrian Zbarcea,2008-01-16T21:14:13+0000,1200518053,Trying to get a simple example working where I move any message put on queue "A" to queue "B".     public void configure()  {        from("activemq:queue:Foo").to("activemq:queue:Bar");    }  My camel-context.xml file looks like the following:   <camelContext useJmx="true" xmlns="http://activemq.apache.org/camel/schema/spring">    <package>org.apache.camel.example.spring</package>  </camelContext>   <bean id="activemq" class="org.apache.camel.component.jms.JmsComponent">  <property name="connectionFactory">    <bean class="org.apache.activemq.ActiveMQConnectionFactory">      <property name="brokerURL" value="vm://localhost?broker.persistent=false"/>    </bean>  </property>  </bean>  I get the following error:  javax.management.MalformedObjectNameException: Could not create ObjectName from: org.apache.camel:context=j3g8zc1/camelContext group=routeBuilder routeType=routeType route=[activemq]queue:warwick.134923438 name=route. Reason: javax.management.MalformedObjectNameException: Invalid character ':' in value part of property        at org.apache.camel.management.CamelNamingStrategy.createObjectName(CamelNamingStrategy.java:213)        at org.apache.camel.management.CamelNamingStrategy.getObjectName(CamelNamingStrategy.java:142)        at org.apache.camel.management.InstrumentationLifecycleStrategy.onRoutesAdd(InstrumentationLifecycleStrategy.java:74)        at org.apache.camel.impl.DefaultCamelContext.addRoutes(DefaultCamelContext.java:312) ...,Already fixed in 1.3. Closed all 1.3 tickets. 
Improvement,Unassigned,2008-01-18T09:30:52+0000,1200648652,Which will dramatically improve JMS performance  while ensuring that we reuse JMS transactions by default  http://www.nabble.com/please-vote-for-SPR-3890-to-improve-Camel%27s-JMS-support-for-both-JMS-transactions-and-efficiency-to13210355s22882.html#a13210355,As this was a workaround for it.... Here's the spring issue thats now resolved in 2.5.1  http://jira.springframework.org/browse/SPR-3890?page=com.atlassian.jira.plugin.system.issuetabpanels:all-tabpanel. Closed all 1.3 tickets. 
Improvement,Hadrian Zbarcea,2008-01-18T09:32:24+0000,1200648744,e.g. something like   <camelContext ...>   <routeBuilderRef ref="someBean"/>   <routeBuilderRef ref="anotherBean"/>   ...,Have committed the code for this - though this test case still doesn't work. Am not totally sure why not   https://svn.apache.org/repos/asf/activemq/camel/trunk/components/camel-spring/src/test/java/org/apache/camel/spring/config/RouteBuilderRefTest.java. There were a couple of issues related to spring injection. JAXB was doing its job just fine.. Closed all 1.3 tickets. 
Bug,Hadrian Zbarcea,2008-01-18T12:40:53+0000,1200660053,When I run a build I see this...  Running org.apache.camel.example.spring.IntegrationTest [                          main] Main                           INFO  Apache Camel 1.3-SNAPSHOT starting [                          main] ClassPathXmlApplicationContext INFO  Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@9a0feb: display name [org.springframework.context.support.ClassPathXmlApplicationContext@9a0feb]; startup date [Fri Jan 18 12:34:29 GMT 2008]; root of context hierarchy [                          main] XmlBeanDefinitionReader        INFO  Loading XML bean definitions from file [/workspace/java/camel/examples/camel-example-spring/target/classes/META-INF/spring/camel-context.xml] [                          main] ClassPathXmlApplicationContext INFO  Bean factory for application context [org.springframework.context.support.ClassPathXmlApplicationContext@9a0feb]: org.springframework.beans.factory.support.DefaultListableBeanFactory@3864d9 [                          main] ClassPathXmlApplicationContext INFO  Bean 'mbeanServer' is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) [                          main] ClassPathXmlApplicationContext INFO  Bean 'mbeanServer' is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) [                          main] ClassPathXmlApplicationContext INFO  Bean 'org.apache.camel.example.spring.MyRouteBuilder' is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) [                          main] ClassPathXmlApplicationContext INFO  Bean 'camel' is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) [                          main] ClassPathXmlApplicationContext INFO  Bean 'camel' is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) [                          main] DefaultListableBeanFactory     INFO  Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@3864d9: defining beans [camel:beanPostProcessor camel jms agent mbeanServer registry serverConnector]; root of factory hierarchy [                          main] InstrumentationProcessor       WARN  Could not register CamelContext MBean javax.management.InstanceAlreadyExistsException: org.apache.camel:context=stracbook.local/camel name=context         at com.sun.jmx.mbeanserver.RepositorySupport.addMBean(RepositorySupport.java:452)         at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.internal_addObject(DefaultMBeanServerInterceptor.java:1410)         at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerObject(DefaultMBeanServerInterceptor.java:936)         at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerMBean(DefaultMBeanServerInterceptor.java:337)         at com.sun.jmx.mbeanserver.JmxMBeanServer.registerMBean(JmxMBeanServer.java:497)         at org.apache.camel.management.InstrumentationAgentImpl.registerMBeanWithServer(InstrumentationAgentImpl.java:186)         at org.apache.camel.management.InstrumentationAgentImpl.register(InstrumentationAgentImpl.java:119)         at org.apache.camel.management.InstrumentationAgentImpl.register(InstrumentationAgentImpl.java:102)         at org.apache.camel.management.InstrumentationLifecycleStrategy.onContextCreate(InstrumentationLifecycleStrategy.java:53)         at org.apache.camel.management.InstrumentationAgentImpl.doStart(InstrumentationAgentImpl.java:157)         at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:51)         at org.apache.camel.spring.SpringInstrumentationAgent.afterPropertiesSet(SpringInstrumentationAgent.java:39),Conflicting spring definitions in the example spring xml caused this error.. Closed all 1.3 tickets. 
Bug,Roman Kalukiewicz,2008-01-18T13:25:04+0000,1200662704,in following flow  from("direct:a") .setBody(constant("body")) .tryBlock() .process(new ExceptionThrower()) .handle(Exception.class) .setBody(constant("exception"));    the result of such invocation is "body" instead of "exception".,Patch for this issue attached.  (and for one simple typo in comment  ). Patch applied. But patch attached to this issue covers this issue and newly created CAMEL-309. Closed all 1.3 tickets. 
Improvement,Claus Ibsen,2008-01-19T16:22:55+0000,1200759775,Currently impl and impl.converter reference each other. If possible such cycles should be avoided.  When I looked into it I found that impl.converter references only a single class CachingInjector. No other class in camel-core seems to use this class. So my suggestion is to move CachingInjector to impl.converter. So the cycle i removed. As far as I can see this should cause no ther issues.,Should I append a patch for this?. Chrsitian by all means supply a patch and I would commit it.  This is well spotted and keeps the smell out of the core.. I currently have problems with my eclipse. Everytime I import a project eclipse just silently dies. Even reinstallation of eclipse didn´t work. If you have the project in your eclipse you simply need to move the class CachingInjector from impl to impl.converter and commit. I am trying to get my system working again but I can´t say when I can submit a patch.. Claus  I worked on this issue a while ago and the patch afair was incomplete. By now it's quite out of date  so the work would probably need to be redone. That aside as this incurs api changes I am not sure when would be the right time for it. Thoughts?. Hadrian  I do not think CachingInjector is a class that is used much by end users directly  isn't it mere an internal helper for the annotation styled type converters: AnnotationTypeConverterLoader? I do not think breaking API should be of much concern in this situation  I do think we should either: a) do as Christian suggests move it to the converter.impl sub package where its an internal helper for the annotations stuff only b') or move it to a generic util package such as org.apache.camel.util to let it be usable in other areas in Camel? Also when its in the package the API suggests that please use me. And thus now we should be more careful with API breakings. c) We could mark the original class as @deprecated and do either a or b  Any thoughts?. Claus  you're absolutely right  my bad. I would go with b). I don't think anybody would have used it so I wouldn't bother deprecating it.. 
Improvement,Claus Ibsen,2008-01-21T10:16:43+0000,1200910603,We might wanna double check the handling of other kinds of InputStream / Reader / ByteBuffer too...  If users want a TextMessage from the File they could always be explicit in the code...   from("file://foo/bar").convertBodyTo(String.class).to("activemq:SomeQueue");,What would be the configuration if my file contains binary data. In this case I probably don´t want a TextMessage. Is there any way to tell convertBodyTo to convert to byte[]?. A File would have to be assumed to be binary data really (I guess we could get clever and try and find the MIME type of the file possibly?) but by default I'd say File's should be trreated as binary; if you want it to be treated as text  then add the convertBodyTo(String.class) to the DSL. File  Reader and InputStream is now converted to a javax.jms.BytesMessage. Before they were not picked up and send as ObjectMessage.  Christian you can always use the .convertBodyTo(byte[].class) to force a conversion to byte array.. And java.nio.ByteBuffer is also handled.. Closing all 1.5.0 issues. 
Bug,Hadrian Zbarcea,2008-01-21T11:06:18+0000,1200913578,In the camel-spring module the osgi.export property is too greedy. Since the maven-bundle-plugin uses ANY resource even if it's a dependency  by specifying org.apache.camel.component* actually bundles everything under that package from any dependency in the POM  in this case camel-core.    <properties>     <camel.osgi.export.pkg>org.apache.camel.spring* org.apache.camel.component*</camel.osgi.export.pkg>   </properties>  It should be replaced to something like:    <properties>     <camel.osgi.export.pkg>org.apache.camel.spring* org.apache.camel.component.event* org.apache.camel.component.xslt* org.apache.camel.component.vali dator*</camel.osgi.export.pkg>   </properties>  —  The camel-stream component suffers from the same symptom.,A better solution actually would be leave the property as is  and modify the plugin definition in the main pom  so that it sets the "excludeDependencies" element to "true" or some configurable property. IMHO it should be set to true  since in a module bunlde you don't want the side effect of inclusion of classes outside the module.  <plugin> <groupId>org.apache.felix</groupId> <artifactId>maven-bundle-plugin</artifactId> <version>${felix-version}</version> <extensions>true</extensions> <configuration> <excludeDependencies>true</excludeDependencies> <instructions> <Bundle-Name>${artifactId}</Bundle-Name> <Bundle-SymbolicName>${camel.osgi.symbolic.name}</Bundle-SymbolicName> <Export-Package>${camel.osgi.export}</Export-Package> <Import-Package>${camel.osgi.import}</Import-Package> <Private-Package>${camel.osgi.private.pkg}</Private-Package> <Implementation-Title>Apache Camel</Implementation-Title> <Implementation-Version>${project.version}</Implementation-Version> </instructions> </configuration> </plugin>. Hadrian we should start considering doing anything with this. If we start cutting a RC of Camel 1.5 then I guess we should have the OSGi bundles sorted.. Agree. Looking into it now.. Closing all 1.5.0 issues. 
Improvement,Hadrian Zbarcea,2008-01-21T11:31:04+0000,1200915064,The build process is not merging spring.schemas and spring.handlers from the component modules  rendering some of the spring support useless. Due to this  for a while I've had to use the individual jars  and all the repetitive maven dependency exclusions in the POM are just insane!   Therefore I've replaced maven-bundle-plugin locally with maven-shade-plugin (now that beta-1 is released!) such as:              <plugin>                 <groupId>org.apache.maven.plugins</groupId>                 <artifactId>maven-shade-plugin</artifactId>                 <version>1.0-beta-1</version>                 <executions>                     <execution>                         <phase>package</phase>                         <goals>                             <goal>shade</goal>                         </goals>                         <configuration>                             <shadedGroupFilter>org.apache.camel</shadedGroupFilter>                             <shadedArtifactAttached>false</shadedArtifactAttached>                             <createSourcesJar>false</createSourcesJar>                             <promoteTransitiveDependencies>true</promoteTransitiveDependencies>                             <createDependencyReducedPom>true</createDependencyReducedPom>                             <transformers>                                 <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">                                     <resource>META-INF/spring.handlers</resource>                                 </transformer>                                 <transformer                                         implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">                                     <resource>META-INF/spring.schemas</resource>                                 </transformer>                             </transformers>                         </configuration>                     </execution>                 </executions>             </plugin>  and now it works properly (but now is not a osgi bundle!). I don't really know if the bundle plugin is able to append resources  but it'd be nice if we fixed this before 1.3 is released.,By adding a new transformer this also fixes CAMEL-268 issue:  <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer"> <resource>META-INF/services/org/apache/camel/TypeConverter</resource> </transformer>. Thanks for the pointer. Actually the bundle plugin was an old one.  As osgi bundles go. I got them all fixed  it's just the manifest of the uber jar that's not generated properly. I hope to get this fixed and get a 1.3.0 out this week.. Closed all 1.3 tickets. 
New Feature,Unassigned,2008-01-21T14:45:50+0000,1200926750,The HttpProducer checks if in the map of the message there is the property named "org.apache.camel.component.http.header". This property must contain a map of String  that will be added to the header of the message Http.  Then  in a component of Camel it will be possible to write:  public void process(Exchange exchange) throws Exception {     Map<String String> headerHttpMap = new HashMap<String String>();         exchange.getIn().setHeader("org.apache.camel.component.http.header"  headerHttpMap);      headerHttpMap.put("SOAPAction"  "testAction"); },This issue is very similar to CAMEL-254 we already have. The question is if we prefer just Camel headers as HTTP headers or your approach (specific Camel header holding HTTP headers map). My choice would be the first one (described in CAMEL-254) as we can easily use DSL to set those headers.. Could you look at the solution I made in CAMEL-254 and say if it is OK for you? We could have also your solution implemented (as by default in CAMEL-254 I skip all headers that start with 'org.apache.camel') but I think it could be too much  If it works for you  then lets close the issue.. In CAMEL-254 you add all headers except "org.apache.camel.component.http.query" in the HTTP Header. In this way it is more difficulty to exclude some headers. It is better perhaps to use a special map for these headings. Does thing think of it?. HttpBinding has features to evaulate if a header should be included or not. Also you can set a list of headers to ignore etc.  Donatello please see if this is not sufficient for your needs.. Roman we might need a addIgnoreHeader(key) for end users to easier adding their own headers to ignore instead of clearing the already default ignored ones.. And we would love a java snippet example how to exclude custom headers on the wiki component page. Hi Claus. I have given a glance to the HttpBinding and I believe whether to add a list of headers to ignore is not a bad idea. But I think that perhaps the choice to say what to ignore is not winning in many cases. For example  in my case I use the map of the message to exchange about ten information among a component to the other  while I would be wanting to send as header http only "SOAPAction."  Therefore instead of saying what to exclude is it would be better to say what to include is. Does thing think of it?. Donatello are ten information in your component specific to this component? Have you considered to store them on properties on the exchange itself and not on the in message itself. Properties on the exchange are ment for long lasting information.  See RomKals reponse in the thread: http://www.nabble.com/WebLogic-JMS-request-to-EJB-method-to-JMS-response-td16688628s22882.html  However your request for a reverse strattegy is a valid use-case and a good idea to include in Camel if that really helps your situation.  So something like:  setIncludeOnlyHeaders(Set<String> keys). I dont think this use case is needed.  Anyone have any thoughts of this one?. Please comment if you have any updates to this one  but currently we dont plan to do anything about this for camel 1.5. Closing old tickets. 
New Feature,Roman Kalukiewicz,2008-01-22T00:08:24+0000,1200960504,Currently there is no way to reset MockEndpoint. I believe it could be sometimes useful.,patch applied.. Closed all 1.3 tickets. 
Bug,Roman Kalukiewicz,2008-01-22T00:39:44+0000,1200962384,Description of the bug: http://www.nabble.com/Multithreaded-http-endpoint-to13646722s22882.html#a13646722,Patch applied. There are possible problems with not released connection to MultithreadedConnectionManager. Those problems are described in JUnit test associated.. Closed all 1.3 tickets. 
New Feature,Roman Kalukiewicz,2008-01-22T01:14:29+0000,1200964469,In order to test some business flow it could be good to redirect few endpoints to mock endpoints. Imagine such business flow  from("direct:input") .beanRef("myBusinessLogicBean") .to("direct:output");    Such business flow should be wired to external resources (direct:output) with another ProductionConfigurationRouteBuilder while in test case this could be wired with another flow like  from("direct:output").to("mock:output");    To have such ability our ContextTestSupport should allow us to specify many {{RouteBuilder}}s in our tests.,Resolved with commit to revision 614007. Closed all 1.3 tickets. 
Improvement,Unassigned,2008-01-22T08:40:22+0000,1200991222,Please see this thread: http://www.nabble.com/How-to-add-attachement-td14837954s22882.html,See this MimeMessageConsumeTest unit test how to use attachments for mails.  We will of course in due time add better documentation on the wiki how to use attachments with mails.. CAMEL-386 added the attachment stuff. there's a typo in the last comment: it's CAMEL-385  not CAMEL-386  that added the attachment stuff. Closing 1.4 issues. 
Bug,Claus Ibsen,2008-01-22T12:37:24+0000,1201005444,See this discussion for more detail : http://www.nabble.com/From-file-to-ftp-tp14921828s22882p15016618.html,Hadrian I am currently fighting with the File Component so I am taking over here  do you have any work in progress?  As I understand it Camel should delete any existing files for the rename strategy.. Commit to trunk. See added unit test: FileProducerRenameStrategyTest. Closing 1.4 issues. 
Test,Hadrian Zbarcea,2008-01-23T20:06:09+0000,1201118769,Could be added to the code or used on website as one of Spring integration examples. Typical Camel applications are usually not only simple RouteBuilders. There are many components like processors  beans woven in DSL. This piece of code shows how to make it cleaner using Spring features. The pattern is to have all (needed) pojos automatically scaned and registered in Camel-Spring context and injected to RouteBuilder avoiding initialization-hell.,Przemyslaw  I'll take a look at the patch later today  but you really need to grant license to apache for the patch to be included .. Granted.. Patch applied with thanks. I had to make a few modifications  such as adding the Apache License comments and moved it to a different package due to interference with other tests.. 
New Feature,Roman Kalukiewicz,2008-01-24T11:05:17+0000,1201172717,Ability to specify processor in a fashion we have in whenExchangeReceived()  but here we cannot specify a processor that should be used on every request.  If a processor is specified for given exchange then it should be chosen instead of generic processor registered with new method like whenAnyExchangeReceived().,Closed all 1.3 tickets. 
Bug,Unassigned,2008-01-28T14:41:24+0000,1201531284,OgnlExpression eagerly gets an Exchange's Out Message when it's processing an Exchange.  This causes Pipeline to propagate the non-null Out Message (with null headers/body ) even in cases where the intention is propagate the In Message.   eg:  <from uri="direct:start" /> <choice> <when> <ognl>request.header.foo == 'bar'</ognl> <to uri="mock:getsInMessage" /> <to uri="mock:getsOutMessage" /> </when> </choice>    The attached patch modifies OgnlExpression to avoid the eager fetch (the map being populated with the value seems unused anyway.)  Long term  maybe Pipeline should look at the Exchange's Pattern to determine which message it needs to propagate?,This fix applies to the camel-ognl component  but there was no such component in the listbox when I created this issue.. Patch applied with thanks! Good work  keep them coming!. Closed all 1.3 tickets. 
Task,Willem Jiang,2008-01-29T07:20:41+0000,1201591241,Refactoring the camel-cxf binding utils to leverage the camel type converter to convert the message body to stream objects for CXF to use.,The patch is in the svn repository.. Closed all 1.3 tickets. 
Task,Willem Jiang,2008-01-29T08:54:11+0000,1201596851,camel-cxf component supports to handle the message with different data formate  and it uses the phaseManager to setup the customerize  interceptors for the RAW_MESSAGE and PAYLOAD_MESSAGE.   Since the phaseManager is a low level API in CXF   we could not leverage the CXF ServerFactory to unify the CXF endpoint creation and we need to update the camel-cxf component code if the CXF internal API changed. I'd like to do some refactoring work on the camel-cxf component to use CXF ServerFactory API to create the different data formate CXF endpoints.,Done the refactoring work .. Closed all 1.3 tickets. 
New Feature,Unassigned,2008-01-29T16:23:18+0000,1201623798,Need to add support for security via a policy or interceptor.,Which security frameworks should we integrate with?  Spring Security JSecurity  But not many end users have requested this feature.. Hi Hadrian   I believe Willem has already committed a security policy for Spring Security in 2.4 and I have just submitted a security policy for Apache Shiro (JSecurity).  I believe these are very useful to secure camel routes and will be used by users more and more in the future.  Cheers   Ashwin.... We got 2 security frameworks integrated now using the policy feature.. Closing all resolved tickets from 2010 or older. 
Improvement,Willem Jiang,2008-01-30T08:21:52+0000,1201681312,both the cxf.version and jetty-version need updated since cxf 2.0.4 use jetty 6.1.6,Patch was applied with thank to Freeman.. Closed all 1.3 tickets. 
Bug,Hadrian Zbarcea,2008-02-01T01:02:28+0000,1201827748,FtpProducer/SftpProducer get their "In" Message bodies as InputStreams  which they then neglect to close.  This appears to cause a problem in Windows where Files that are processed in this manner have an exclusive lock placed upon them.  For more info  see this discussion thread: http://www.nabble.com/From-file-to-ftp-td14921828s22882.html,Added patch for camel-ftp for FtpProducer and SftpProducer. Added patch for camel-core  as it looks like UnmarshalProcessor might cause the same thing to happen.. Could there be other parts in Camel that have forgotten this?. Applied with thanks!. Closed all 1.3 tickets. 
Improvement,Hadrian Zbarcea,2008-02-01T18:43:16+0000,1201891396,The fact that there are output/fault/exception could be confusing and clutter the dsl  especially for components where there is no distinction between fault and exception.  We should merge the two and simplify the model.  See nabble thread: http://www.nabble.com/in-out-fault-messages-discussion-to14170013s22882.html#a14170013,Let's see if we can do anything about this one in 1.5.  I propose to:  not change the api deprecate faults consider faults outputs (not camel exception) and 1. faults are outputs of java.lang.Exception subtype always 2. fault are outputs of any type  but have a header (say "camel-fault" = true) to indicate their fault semantic 3. faults are of type exception and have the fault header on fault the pipeline is interrupted (faults do not get sent to next processor) keep the current mechanism - handleFault() - to handle faults as exceptions  in which case faults become exceptions and the error handler applies.  We could then remove the fault api in 2.0. I'd love some feedback on this one.. 3. faults are of type exception and have the fault header  +1 - I think it may just be confusing to the user if you can have any object be a fault. So  having the mandatory Exception type would be good. The fault header would be needed too I think since there wouldn't be another way of determining whether an output was a fault or not.  The rest of the proposal sounds good to me.. +1 to #3  I suggest to use a header without any minus or dot. We have trouble with these already. And we consider using a new pattern for Camel 2.0 that James suggested: "CamelFault" is a better header name.  BTW: We also have a throwFault DSL.. The only difference between #1 and #3 is the header. Assuming that normal outputs cannot be of java.lang.Exception type  which is I think pretty reasonable  there is no difference between the two. I have however an amendment for #3:  #4. faults are of type java.lang.Exception and a header CamelFaultOrigin=<url>.  The header's mere presence is equivalent with CamelFault=true  as proposed in #3  but also gives a hint of what endpoint produced the fault. We may need more details about the fault.. Hadrian  others  Do we want to do this? We havent started on this for 2.0.  Any thoughts?. We never got this addressed in Camel 2.0 timeframe.  If really needed we can address or look at it again in Camel 3.0 or later.. I think we should tackle this in 2.0. I will look at it again this weekend.. Hadrian  I think its very late  and unless the change have minimal impact on eg SMX then its possible otherwise I would like to leave as is.  If we remove fault all together there is quite some code that depends on it  and how does SMX handle this?  We are pushing the last must have for Camel 2.0 to get it done in due time  eg hopefully in 2-3 weeks.. Now that we will do a 2.0M2 we have more time to rework the FAULT stuff in Camel 2.0 API. Moving to future as we do not have time to get over this in Camel 2.x. We have opened this discussion again and looks like we agree on proposal #3 http://www.nabble.com/-DISCUSS--Faults-and-Exceptions-in-Camel-td24398169s22882.html  Hadrian I assume you can make the needed API changes related to Fault?. Fix committed  awaiting wiki updates.. Release Notes updated.. 
Bug,Hadrian Zbarcea,2008-02-04T16:15:17+0000,1202141717,We need a few more jars in the binary distro to really be able to use Camel. e.g. if you set the classpath to lib/*/.jar then you could be able to run the Java examples etc.,Closed all 1.3 tickets. 
Improvement,Unassigned,2008-02-04T16:51:36+0000,1202143896,,This issue seems fixed now - see the org.apache.camel.converter.JaxbTest. Closed all 1.3 tickets. 
New Feature,Roman Kalukiewicz,2008-02-04T17:45:49+0000,1202147149,Camel SQL component that lets to specify endpoints with sql expressions like:  from("sql:select a  b  c from d").to("sql:insert into t values :a  :c  :d");  Described in:  http://www.nabble.com/JdbcEndpoint---Consumer-to15183848s22882.html,Roman  is there any more to implement in this component?. The Consumer part is not done  maybe that would be nice for scheduled polls of a database?. Consumer  well you could just use a timer to tricker the scheduled poll and let it route to SQL component. Case closed.. You are right  that we could use timer as a way to pool a database. I believe that what we currently have is rather usable and everything can be done with it. We can close this issue  and create a new one for Producer side as it is just 'nice to have'.. 
Bug,Hadrian Zbarcea,2008-02-05T13:10:17+0000,1202217017,This is preventing BeanProcessor from using bean methods with a Message parameter  or bean methods not named "process" that have an Exchange as their parameter.  For example  to map to a Message the it tries using the ParameterExpression bodyAs(Message.class) instead of inmessageExpression().,Patch applied with thanks!. Closed all 1.3 tickets. 
New Feature,Willem Jiang,2008-02-07T17:10:16+0000,1202404216,,Closing 1.4 issues.. 
Improvement,Claus Ibsen,2008-02-08T13:04:10+0000,1202475850,See http://activemq.apache.org/camel/data-format.html - we might wanna do something like...   from("file://something").unmarshall().text("UTF-16").to("something"),Is related to this ticket also. I will reuse the existing string() dataformat to support charset encoding parameter.  Update wiki http://activemq.apache.org/camel/data-format.html  string() dataformat is not listed.. You can now do  from("direct:start").unmarshal().string("UTF-8").to("mock:unmarshal");  from("direct:start").marshal().string("UTF-8").process(new MyBookProcessor());   The parameter to string() is optional. If not provided Camel will use the JVM default charset (standard behavior of the JDK)   from("direct:start").unmarshal().string().to("mock:unmarshal");. 
Bug,Unassigned,2008-02-10T10:21:45+0000,1202638905,I downloaded the latest snapshot apache-camel-1.3-20080210.022044-67.zip from http://people.apache.org/repo/m2-snapshot-repository/org/apache/camel/apache-camel/1.3-SNAPSHOT/  The .zip file contains spring-2.5.1.jar twice \camel\lib \camel\lib\optional  Is Spring both mandatory and optional?  And btw it includes an old version of commons-logging-1.0.4.jar. v1.1 of commons logging is out.,Is there any reason we have two of these? If not  I say we jettison the optional copy.. Patch applied with thanks!. 
Bug,Gary Tully,2008-02-10T10:30:07+0000,1202639407,By default HttpBinding class copies all request header attributes from the request to the response including 'Content-Length'. So the consequence is that the response is declaring the same size as the request which can lead to serious truncation problems!   the workaround is simply to add the line: out.removeHeader("Content-Length");  in the writeResponse method of the httpbinding class allowing jetty to set the right value.,Hi Alex  I am having difficulty reproducing the behaviour you describe. In writeResponse[1] on trunk  the headers are correctly copied from the out message  not from the request. The out message defaults to an empty DefaultMessage which would have no headers.  Would it be possible to provide a test route or xml config fragment or some more detail?  Thanks  Gary.  http://svn.apache.org/viewvc/activemq/camel/trunk/components/camel-http/src/main/java/org/apache/camel/component/http/HttpBinding.java?view=markup. Sure  here is a route that reproduces the problem. This simply routes a java serialized  base64 encoded request (and returns the response back) to the echoService on a http channel:  from("direct:echoService").marshal().serialization().beanRef("base64Encoder") .to("http://localhost:8088/echoService").beanRef("base64Decoder").unmarshal().serialization();  from("jetty:http://localhost:8088/echoService").beanRef("base64Decoder") .unmarshal().serialization().to("bean:echoService").marshal().serialization().beanRef("base64Encoder");  I think the problem comes from the [un]marshall processor that copies the complete in message (with headers) to the out message before setting the [un]marshalled body in the out message. Here is the code:  Message in = exchange.getIn(); Object body = in.getBody();  // lets setup the out message before we invoke the dataFormat // so that it can mutate it if necessary Message out = exchange.getOut(true); out.copyFrom(in);  Thanks  Alex.. yea  it is the marshaller that does the copy  but going to any different exchange would do it.  One option is to add a .removeHeader("Content-Length") to your route rather than in the camel source. However I don't think this should be necessary  imho the Content-Length headers should never be copied/propagated from a HttpMessage.  I have posted to the dev list to get some feedback before I prepare a patch for this.. In CAMEL-254 there was similar problem described. The solution implemented there was to skip a set of headers while building the HTTP request  so headers was on Camel message  but were ignored by the endpoint.. This patch takes the lead from the jmsBinding and the fix for CAMEL-254. I pulled the skip code from HttpProducer into HttpBinding so it can be reused in the jetty component. The option to override the set of ignored headers is provided via the IgnoredHeaders accessors. Patch applied with thanks!. Closed all 1.3 tickets. 
New Feature,Hadrian Zbarcea,2008-02-11T12:22:10+0000,1202732530,It'd be nice to do something like   from("file://foo").   loop(100).   to("blah");    Or use some kinda expression that evaluates to an int.   from("file://foo").   loop().xpath("/iterations/@count").   to("blah");    To essentially add a loop inside a route. Testing is the main use case for this really. e.g. take a few production messages and generate zillions of test case messages   from("file://foo").   loop(100).   bean(MyRandomizerTransform.class).   to("blah");,Lowered priority from critical to major. Code committed  awaiting documentation.. Hadrian have a few comments. Nice feature BTW:  we need it in spring xml as well adding a TRACE log where the looping takes place would be great And it should be added at the 1.5 release notes as well. A few questions about the following code block:  from("file://foo"). loop().xpath("/something = 'abc'). to("blah");  What EXACTLY would this do? Would it keep on sending the message to endpoint "blah" WHILE the XPath evaluates to true? What exactly is fed back to the xpath condition to re-evaluate the looping condition after every iteration? I mean  when would this become false? I'm not sure if the semantics of this construct are clear. I mean  is the looping done UNTIL the XPath evaluates to true? Or does it loop WHILE the XPath evaluates to true?. The issue is not yet closed because the documentation is not done  so look for that.  In brief this feature is mostly using for testing/debugging (as the jira states). So the number of iterations is passed either as an int value as an argument to loop(int)  or as an expression. The expression must evaluate to an int  not a bool  which determines the iteration count (e.g. you could send the iteration count in a header). The test case should be self explanatory for now.  Keep in mind that the preconditions for the loop remain unchanged  that is the exchange for iteration n  would be the same as for iteration 0  but through the course of an iteration one may decide to do different things. I think it would be useful to add one or two properties on the exchange with the iteration index/count.  I hope this helps and thanks for the feedback!. Hadrian   Thanks for the insight. What actually confused me was the fact that the XPath expression in the code block that I copied above evaluates to a boolean  not to an int! Is this a typo in the code block?  Regards.. Ah  you're right  now I see it. You got the sample from the description of the jira. That is a mistake  you are correct. I'll fix it now. That is confusing indeed . Sorry about that.. Feature documented on the wiki.. Closing all 1.5.0 issues. 
New Feature,William Tam,2008-02-11T14:22:22+0000,1202739742,See http://sxc.codehaus.org/XPath  we could use it as a new language...  from(...).filter().sxpath("/foo/bar").to("something");  which all expressions within a scope could be evaluated via the same parse operation?,SXC seems like its not really maintained and very active. Lets try to reduce our tasks with Camel and close this one.. 
New Feature,Hadrian Zbarcea,2008-02-11T15:53:38+0000,1202745218,e.g. it'd be nice to be able to write a test case as something like...   from("something").to("mock:file://src/test/data");    Where the mock endpoint is smart enough to spot that its name is a URI - in which case it basically consumes messages from that URI and for each message it receives  it uses that as another assertion on the actual mock endpoint.  i.e. we can use a directory of expected messages as the assertion statements in a test case.  We might want to support some kinda XML message payload  so that we can make assertions on what kinda headers and payloads we expect on the messages. Or maybe we just have some kinda transform in between to strip out any headers we don't care about. Something like...   from("something").bean(RemoveSomeHeaders.class).to("mock:file://src/test/data");,Maybe we need to use another kind of endpoint - an 'expects' endpoint.  e.g. then we could do something like...  // setup the expectations from("file://src/test/data").unmarshall().jaxb().to("expects:foo");  // now the actual test case from("something").to("mock:foo");   So that the expects endpoint would look for the related mock endpoint and as a message arrives it'd add a new expectation to the mock?. Hmm  interesting. This would have to be synchronized somehow too.. Yeah good point  I guess we'd hope that the route to the expects endpoint was fast; I wonder if we need some way to say that its 'finished'.  Or maybe we use a kinda modified mock endpoint where input messages are stashed away in a List; then as the expectations arrive they are added to already received messages - or are stashed away for the future or something. i.e. coding the endpoint so that the actual and expected messages could arrive in any order. The only real timeout being that the expectations are met within some timeout value (for both actual and expects messages to be received).. See the test endpoint which pulls messages on startup until there are no more available. Closed all 1.3 tickets. 
New Feature,Unassigned,2008-02-12T12:02:57+0000,1202817777,,See the documentation : http://cwiki.apache.org/CAMEL/list.html. Closed all 1.3 tickets. 
Bug,Willem Jiang,2008-02-12T13:34:31+0000,1202823271,Please see the discussion below http://www.nabble.com/%22cxf%22-name-conflict-in-the-spring-context-td15427019s22882.html,Closed all 1.3 tickets. 
New Feature,Unassigned,2008-02-12T14:51:49+0000,1202827909,In the current version a conversion is attempted on a best effort basis.  An endpoint does not have knowledge about the data types supported by the previous or next endpoint in the route.  If an endpoint would publish what data types it supports  static analysis would be possible to determine if messages could be processed successfully or additional type converters are necessary.,In Apache Wicket there was a time where people thought adding Generics support would be great. In the end it became a nightmare.  This feature should add the possibility to static type data while keeping the current behaviour of best effort on convertions.  Two possibilities: annotations and generics.  IMO  annotations would be better  even though it wouldn't avoid dynamic types. But at least would better document endpoints/components  and also help runtime checks that could perform better than best effort convertions.. 
New Feature,Unassigned,2008-02-12T16:00:25+0000,1202832025,See the browsable endpoint feature for details of how it'd work,James have added the new camel-web console that has this feature.. Closing all 2.0M2 tickets. 
Improvement,Willem Jiang,2008-02-12T23:55:40+0000,1202860540,,CXF component currently does not support JAX WS WebServiceProvider service endpoint. This would give the ability to route all the data formats defined by specification through Camel.. Please find the patch for the changes I have made.. Patch file with full example showing the usage of the Webservice Provider with the client using JaxWS Dispatch API.. Patch is applied with thank to Aswani. Closed all 1.3 tickets. 
Improvement,Willem Jiang,2008-02-13T09:21:10+0000,1202894470,,Patch is applied with thank to Freeman.. Closed all 1.3 tickets. 
Bug,Unassigned,2008-02-13T09:41:22+0000,1202895682,,patch applied!. Closed all 1.3 tickets. 
Improvement,Claus Ibsen,2008-02-15T13:09:12+0000,1203080952,It should be possible to configure the behaviour of the mail component.   see thread: http://www.nabble.com/Problem-with-Camel-Mail-Component-in-Route-td15497818s12049.html#a15497818,Lars any suggestions for what kind of behavior you want?. Claus   what I would suppose for the camel mail is following:  configurable behaviour of what to do with a consumed mail (delete or leave) configurable behaviour of what to poll from the mail folder (only new messages or all messages etc.) attachment handling  I saw that there is already some flag for deleting or not deleting processed messages in the mailconfiguration class. But I do not know if it is settable from the DSL...at least there is nothing described at the mail component's web page.  Regards Lars. The idea is that individual components or endpoints can be configured; either via the URI  via Java code or Spring - then the DSL just routes between endpoints by URI or by reference. So configuring things like whether to delete mail or not or what to poll would ideally be configuration options on the mail component / endpoint.  Sometimes its easier to configure a component once then reuse that configuration for many endpoints (e.g. for mail or JMS for example you could configure the general behaviour - then have multiple endpoints for different mailboxes all sharing the same configuration).. James   I agree with you that the configuration is the correct point for that. Are there samples or some documentation which guides me how to configure the mail component?  Regards  Lars. Lars some of the missing options have been added. There is a option to set if a mail should be DELETED or SEEN. This option is of course already in Camel 1.2+.  But Camel is definitely missing some of the features you have stated here. We should try to get them in Camel 1.4. If anyone fancy submitting a patch we would greatly appreciate it.. Claus   recently I did an email binding component for the ServiceMix project. It already contains the features I spoke of. Maybe you want to have a look at the code there and try to adapt it for camel.  Regards  Lars. Lars   We / I would love that. If the code cant be shared at this JIRA you can mail it to my apache accout  davsclaus@apache.org. Claus   ServiceMix is an open source Apache project. Just have a look at the sources here: http://svn.apache.org/viewvc/servicemix/smx3/trunk/deployables/bindingcomponents/servicemix-mail/ or use your favourite IDE for subversion   If you have questions feel free to contact me at: lhein@apache.org  Regards Lars. Lars  Great I will look at ServiceMix and adapt it to Camel. The code looks really good and has some great ideas that Camel could use.  Also needed  Default port numbers for protocols DONE Alternative set of parameter for username in URI DONE. Claus   first I had a look at the camel-mail if it satisfies my needs  but it doesn't. So many things you will see in this component are very similar to the camel component as I took it as a base reference. So this uri syntax is mainly the same...I just extended it a bit. The default ports where useful as many mail servers are configured in a standard way regarding the port settings. So why bother the user to configure it if it's not really needed at all.  If I can help you in some way  just let me know.  Regards  Lars. Destinations to be configured as (more intuitive for email):  TO CC BCC. Protocol missing  imaps DONE. Attachment support added due to CAMEL-385. Setting subjects is only possible using message header. We need to document this on wiki. Camel mail should do better logging to aid end-user to identify problems DONE  Logging mails being sent from producer Logging mails received on consumer Each mail should log: exchange id  message id  from  to  subject  etc.. Added option for setting a fetch size when consuming mails DONE  fetchSize. Added option for setting the debugmode of the underlying mail framework DONE  debugMode. Add the properties configuration from ServiceMix to Camel to configure the underlying java mail framework with options for connection timeout etc. DONE. Lars thanks a lot for the great code from ServiceMix and help you provided here.. Claus   no problem. You did the job  not me   Regards  Lars. 
New Feature,James Strachan,2008-02-15T19:23:56+0000,1203103436,See http://code.google.com/p/hamcrest/ http://code.google.com/p/hamcrest/wiki/Tutorial  we could make this reuseable in our tests - see  http://activemq.apache.org/camel/spring-testing.html http://activemq.apache.org/camel/mock.html,Lowered priority from critical to major. I've started a little module with some helper methods. http://svn.apache.org/viewvc/activemq/camel/trunk/components/camel-hamcrest/  I was hoping we can harvest most of the code from ContextTestSupport and friends and add them to static helper methods or add new Matchers to hamcrest etc.. Moving to 2.0. 
Task,Unassigned,2008-02-16T17:17:04+0000,1203182224,The newest release of the maven-bundle-plugin from Apache Felix is 1.2.0. We should upgrade from 1.1-SNAPSHOT.,The tests pass when I upgraded to 1.2.0. Shall we go ahead with this?  By the way  I have an Apache process question: should I even attach patches for such stupidly simple things like this?. Patch applied with thanks! No need to post patches for such things .. Closed all 1.3 tickets. 
Sub-task,Willem Jiang,2008-02-17T04:46:57+0000,1203223617,We could use the cxf feature API to set the server interceptor for working with PAYLOAD and MESSAGE data fromat,The patch is in the svn repository. Closed all 1.3 tickets. 
Sub-task,Willem Jiang,2008-02-17T04:48:57+0000,1203223737,Need to add new method call for calling the stream message and configure the feature in the ClientFactoryBean.,the patch has be committed. Closed all 1.3 tickets. 
Bug,Willem Jiang,2008-02-17T16:54:37+0000,1203267277,See this thread: http://www.nabble.com/camel-mina-TCP-InOut-exchange-td15530602s22882.html  This builder does not support InOut when a client send a textline to localhost:8888. The client never receives a response.  url = "mina:tcp://localhost:8888?textline=true"; from(uri).process(new Processor() {                     public void process(Exchange e)  {                         String in = e.getIn().getBody(String.class);                         // append newline at end to denote end of data for textline codec                         e.getOut().setBody("Hello " + in + "\n");                     }                 });  Attached is a patch that fixes this by introducing a new parameter to the URL for fluent builder sync=true (ie is there a better name?)  Using this url instead and the patch then Camel will send a response back to the client: mina:tcp://localhost:8888?textline=true&sync=true,The patch. And the unit tests for the patch.  To demonstrate the original bug use this unit test. It is a test that uses a plain socket client to send a message to Camel and wait for the response.. Oh I forgot to add code tags.  url = "mina:tcp://localhost:8888?textline=true"; from(uri).process(new Processor() {     public void process(Exchange e) {         String in = e.getIn().getBody(String.class);          // append newline at end to denote end of data for textline codec         e.getOut().setBody("Hello " + in + "\n");     } });. fancy applying this patch before 1.3.0?. Applied the patch with thanks to Claus. 
Bug,Gary Tully,2008-02-21T20:21:35+0000,1203625295,Hi I'm using camel 1.3-SNAPSHOT. I don't get the aggregator to work as expected when messages come from a JMS endpoint and sent to a bean. I've tried the following configuration:   //private static final String ENDPOINT = "jms:myqueue";  private static final String ENDPOINT = "direct:myqueue";   from(ENDPOINT).aggregator(header("JMSCorrelationId") new MyAggregatorStrategy()).bean(new SomeBean());   With ENDPOINT = "jms:myqueue" I get:   [                      Thread-1] MyRouteBuilder                 INFO  Sending: message:1  [                      Thread-1] MyRouteBuilder                 INFO  Sending: message:2  [                      Thread-1] MyRouteBuilder                 INFO  Sending: message:3  [meBean@3c2797]] Polling Thread] MyRouteBuilder                 INFO  Received: message:2 (null)   End with ENDPOINT = "direct:myqueue" I get:   [                      Thread-1] MyRouteBuilder                 INFO  Sending: message:1  [                      Thread-1] MyRouteBuilder                 INFO  Sending: message:2  [                      Thread-1] MyRouteBuilder                 INFO  Sending: message:3  [meBean@3c2797]] Polling Thread] MyAggregatorStrategy           INFO  Strategy: message:1  message:2  [meBean@3c2797]] Polling Thread] MyAggregatorStrategy           INFO  Strategy: message:1  message:2  message:3  [meBean@3c2797]] Polling Thread] MyRouteBuilder                 INFO  Received: message:1  message:2  message:3 (null)   Only with ENDPOINT = "direct:myqueue" I get the expected behavior.   I've noticed the AggregatorStrategy even does not get called while using the JMS endpoit.   I upload the complete sample (sample.zip)   There is also a second issue I can not explain: on the sample I've tried to use a JMSCorrelationId but printing @Header(name="JMSCorrelationID") String correlationID I get "null".   PS: Same sample using 1.2.0  the AggregatorStrategy get called but I loose message 2  [                      Thread-1] MyRouteBuilder                 INFO  Sending: message:1  [                      Thread-1] MyRouteBuilder                 INFO  Sending: message:2  [                      Thread-1] MyRouteBuilder                 INFO  Sending: message:3  [meBean@2cfeb7]] Polling Thread] MyAggregatorStrategy           INFO  Strategy: message:1  message:3  [meBean@2cfeb7]] Polling Thread] MyRouteBuilder                 INFO  Received: message:1  message:3 (null)   Andrea,adding reference to timeout expiry being ignored issue which can occur with the sample code provided with this issue. There are a bunch of interesting issues with the sample:  first  as there is no completedPredicate for the aggregation strategy  the default strategy of reaching the batch size of 100 or the default timeout of 1 second needs to kick in. With 3 messages  the batch size will never get there so the 1 second timeout will be in effect. With the 5 second delay before sending messages and with the batchTimeout starting once the route is created  so it will already have expired 5 times  CAMEL-352 is sometimes coming in to play.  A workaround (till 352 is committed) is to add a larger batchTimeout interval to the route in the sample code so that the receive does not time out for the duration of the test scenario:  from(ENDPOINT).aggregator(header("JMSCorrelationID")  				new MyAggregatorStrategy()).batchTimeout(20000).bean(new SomeBean());   In this case  the message batch will be delivered every 20 seconds and can't have timedout before the messages have been submitted by the client.  second: with the default timeout  the vm broker seems to be re initialised  turning on jmx  I find that the jmx connection is dropped every time a batch is processed  as if the broker is being decommissioned. This needs some more investigation and may be part of the reason there is a jms and an activemq camel component. With new sessions/connections being created on each batch receive and with the default prefetch size of amq being 100  the first connection consumes all three messages and the next receive does not get any. Adding a sleep between sends of > 1 second  in the producer(client) and leaving the default batch timeoutOut of 1 second  will get reliable results also.  In camel-context.xml  it is possible to set the default fetch as a property:  <bean id="prefetchPolicy" class="org.apache.activemq.ActiveMQPrefetchPolicy">     <property name="queuePrefetch" value="1" />   </bean>        <!-- lets configure the default ActiveMQ broker URL -->   <bean id="jms" class="org.apache.camel.component.jms.JmsComponent">     <property name="connectionFactory">        <bean class="org.apache.activemq.ActiveMQConnectionFactory">          <property name="brokerURL" value="vm://localhost?broker.persistent=false&amp;broker.useJmx=true"/>          <property name="prefetchPolicy" ref="prefetchPolicy"/>        </bean>        </property>   </bean>   third: the code uses JMSCorrelationID and JMSCorrelationId  it needs to be JMSCorrelationID (note capital ID). all of the above relates to using the endpoint of the form jms:myqueue  with direct:myqueue  jms is totally out of the picture  the route interaction is through a java.util.Queue as you probably know.. Gary what is the status of this? CAMEL-352 has been committed.  Is there still a problem? Should it be postponed to be fixed in 1.4 or can we close it?. Claus  i think this can be closed as I don't think there is any issue here save CAMEL-352. Andrea should comment that all is ok though.. Hi Gary it was a first of all a problem due to my little knowledge on camel. The I also run into CAMEL-352. The explanation helped me to understand more on CAMEL. Thanks Andrea. 
Improvement,Unassigned,2008-02-25T09:25:46+0000,1203931546,Support URIs of the form   jms:tempQueue:foo    To refer to a named temporary destination,You can now use  jms:temp:queue:foo  to talk to a temporary queue or  jms:temp:topic:bar  to work with a temporary topic. Updated the documentation: http://cwiki.apache.org/CAMEL/jms.html. 
Bug,Roman Kalukiewicz,2008-02-26T11:22:57+0000,1204024977,There is an inconsistency in exchange properties propagation. To show few examples:    code test property value at mock:test   due to     from("direct:start")     .setProperty("test"  "inStart")     .to("direct:subflow")     .to("mock:test"); from("direct:subflow")     .setBody("test")     .setProperty("test"  "inSubflow");     inStart   properties are not propagated  back if they were set in super flow     from("direct:start")     .setProperty("test"  "inStart")     .to("direct:subflow")     .to("mock:test"); from("direct:subflow")     .setProperty("test"  "inSubflow")     .setBody("test");     inSubflow   property is set to new value as  pipeline sends original  exchange to first step of pipeline     from("direct:start")     .to("direct:subflow")     .to("mock:test"); from("direct:subflow")     .setBody("test")     .setProperty("test"  "inSubflow");     inSubflow   properties are propagated  back by default       I believe we should clearly define how properties should be propagated:  	should they be kept for the whole flow and every change is visible to sub/super flows  or 	should they be visible only in scope of current flow and interaction with sub-flows (invoked by and endpoint) should be done with headers.    I believe that first is easier for users as they have a way to hold some data for further processing (while they are not exposed as protocol specific headers).  If you have another ideas - please advice.,Properties are propagated back to super/sub flows. If property gets changed or removed in subflow it is also propagated back to original flow.. Closed all 1.3 tickets. 
Task,Unassigned,2008-02-26T17:41:10+0000,1204047670,,Patch applied with thanks!. Closed all 1.3 tickets. 
Task,Willem Jiang,2008-02-26T18:07:24+0000,1204049244,,Applied the patch with thanks to Jonathan.. Closed all 1.3 tickets. 
Bug,Roman Kalukiewicz,2008-02-26T23:29:22+0000,1204068562,In following code message should go to mock:invalid when invalid message is sent. Currently message is sent nowhere as exceptions in handle() clause are swallowed.   exception(ValidationException.class).to("mock:invalid");                  from("direct:start").tryBlock().process(validator).to("mock:valid")     .handle(ValidationException.class).process(validator);,Fix commited. 
Improvement,Unassigned,2008-02-27T06:41:03+0000,1204094463,They need to be explicitly enabled in JUEL - see http://juel.sourceforge.net/guide/advanced/index.html,patch applied. Closed all 1.3 tickets. 
Improvement,Unassigned,2008-02-27T08:26:46+0000,1204100806,e.g. setHeader("foo").header("bar"),fixed  see the test case org.apache.camel.processor.SetHeaderUsingDslExpressionsTest in camel-core. Closed all 1.3 tickets. 
New Feature,Unassigned,2008-02-28T17:56:29+0000,1204221389,,We have the Camel EL language already  the simple  which already can do this.. Closing all resolved tickets from 2010 or older. 
Bug,Unassigned,2008-02-29T21:10:49+0000,1204319449,FtpRouteTest fails (no messages received)  The reason is that the FtpConsumer.java [line:102] fails to properly retrieve the files from the ftp server  although i can see the file present on the filesystem.  Using listNames instead of listFiles  does return the names of the files present (as expected) but a subsequent listFiles(filename) would return again an empty array.  I did not check the IP packets to see where the problem comes from  but i suspect the issue is with the test server.,Hey man  this test works fine for me. I ran it on Windows XP on the command line and in Eclipse. How did you run this and on what platform?  On another note  I noticed that the MINA FtpServer that we're using is a snapshot version.. and its been a snapshot version for all previous camel releases. Yeah  I know. The funny thing is that it graduated (in Dec iirc) without having a release. There is still no release for it. For now  as it was blocking consistently for me I commented out the assert as it was blocking the 1.3 release.  I spend a couple of hours on it and didn't figure out what was wrong. I added my findings to the comment in the code. Did you uncomment the assertIsSatisfied() and it passed? Hopefully it was just a glitch on my system (so many weird things happened on it lately) and then we can reenable it.. Yep  I uncommented the assertion and it passed.. Since the issue was reported last Friday (29/02/2008)  it was probably caused by a leap year bug in commons-net (cfr. https://issues.apache.org/jira/browse/NET-188). We'll have to wait another 4 years for reproducing it. Closed all 1.3 tickets. 
Bug,Willem Jiang,2008-03-02T11:33:35+0000,1204457615,1) apache-camel/pom.xml Geronimo j2ee jacc spec is duplicated (2 of them)  2) root/pomx.ml httpcore-version>4.0-alpha6</httpcore-version httpcore has released a -beta1 version  3) root/pomx.ml And groovy is listed as  <version>1.1-beta-3</version> Groovy 1.5.4 has been released.  4) Hibernate has just released a new batch of GA versions  5) camel-http/pom.xml http-client has released a 3.1 final  the pom uses -rc1  camel-string/pom.xml stringtemplate has released v3.1 but Camel refers to 2.3b6,If not mistaking OGNL has also released a newer version than i pom.xml files in Camel. I just upgrade the httpcore to 4.0 beta1 and found there is no httpcore-niossl 4.0 beta1 component  also the latest stringtemplate in maven is v3.1b1. I will commit what I get at this moment.. #1 Fixed #2 Partly fixed #3 Fixed #5 Fixed  7) camel-mina/pom.xml Mina has released 1.1.6 (is in maven)  8) camel-amqp/pomx.ml Refers to and old version of mina 1.1.3. Can it be upgraded to 1.1.6?  9) camel-ognl/pom.xml OGNL has released 2.7.2 (it is in maven)  10) camel-script/pom.xml jython has released 2.2.1 (is in maven). ActiveMQ is set to v4.1.1  is there a reason it can not be upgraded to 5.0.0?. Fixed #7  #8  #9  #10 and upgraded ActiveMQ version to 5.0.0.. #11 In the root pom.xml line #1056 there is a single > char that doesn't seem to have a purpose.                        <classpath refid="etc.path"/>                     </whichresource>                     >                      <mkdir dir="${full.eclipse.workspace}/.metadata/.plugins/org.eclipse.core.runtime/.settings"/>. #12 In prereq we could bump maven to 2.0.8  #13 junit can be upgraded to 3.8.2  #14 easymock can maybe be upgraded to 2.3  #15 hsqldb can maybe be upgraded to 1.8.0.9  #16 apache derby has released 10.3.2.1  #17 commons-dbcp has released 1.2.2  #18 commons-pool is on release 1.4 now. Done #11 #13  #14  #16  #17  #18  #12  If there is a critical bug in maven 2.0.7 for camel build   I don't we need to upgrade the prerequisite's version of maven. #15  there is no hsqldb 1.8.0.9 in the maven repository. Fixed most of them   and created the CAMEL-403 to keep an eye on http-core upgrading.. 
Bug,Gary Tully,2008-03-03T14:13:07+0000,1204553587,The Batch processor behind the Aggregrator has a batch expiry timeout that governs the delivery of messages.  If the timeout expires during aggregration the resulting timeout value passed to PollingConsumer.receive will be negative. In the jms consumer case with the spring templates  a negative timeout != -1 is considered infinite/blocking.,fix that breaks out of the processBatch loop if the batchTimeout goes negative. Test case with jms component to validate and additional test case to the aggregrator to exercise the expiry code path.. Patch applied with thanks!. 
Bug,Willem Jiang,2008-03-04T01:59:55+0000,1204595995,The Distributions are missing this core tests jar. THe spring tests jar is included  but depends in turn of the core tests jar. This is due to the core tests dependency being set with test scope. Removing the scoping includes it correctly.   A patch is attached.  rgs   ste,Hi stephen   Can you grand the ASF licence for you patch? Or I can't apply it .  Thanks  Willem. What do you need for me to do? Is it enough for me to grant it here? If so  duly granted! If you need a new patch with some extras just shout.  thx  ste. Didn't see the selector the first time round. Good now.. conformed the issue and applied the patch.. Closed all 1.3 tickets. 
New Feature,Unassigned,2008-03-04T11:03:46+0000,1204628626,For example  define a DataSet of 10 000 000 messages and be able to send them to some endpoint and assert that they are all received by another endpoint...   from("dataset:foo").to("activemq:SomeQueue");  // lets assert that the data set is received again from("activemq:SomeQueue").to("dataset:foo");,Documentation is here : http://cwiki.apache.org/CAMEL/dataset.html. Please add info about since what version or camel features are available in the wiki.. The surce code sample (spring config) uses 10000 in size but the documentation text said 10 mio. Would be nice to align these numbers  eg change the text to 10000.. Thanks for your comments guys - I've updated the wiki page to reflect your comments - let me know what you think...  http://cwiki.apache.org/CAMEL/dataset.html. I think that the example on the wiki page doesn't clearly state how this magic test is performed.  Does it test that the message are received in the same order? Is it using a single thread to send the message or can you set concurrent users The reporting  is it timing only the executed time to consume the message or also the sending part? Could the wiki also have a sample of the logging reporting - (help as eye candy)  And for features. Maybe the recent added code for delay could be improved to allow random delay. JMeter and SoapUI have features for randomizing sending with  constant offset random delay that can be combined.. yes its testing that the messages are received in the same order (we don't yet support out-of-order messages  but am hopefully gonna add that soon  so we could use concurrent consumers) currently the test is using single thread to send and consume; ideally we'd have a way to do concurrent sending & consumption yes  just sending right now; we could patch the code to report the sending time too I guess? yeah  good idea  Also love the idea for randomizing the delay. We should have a plugin for 'delay' we can use in each side - anyone fancy submitting patch?. I've spun up a separate issue CAMEL-405 for future improvements. Closed all 1.3 tickets. 
Improvement,Willem Jiang,2008-03-04T14:20:57+0000,1204640457,See the currently disabled test case: BeanMethodWithMultipleParametersTest to see the problem.  Basically we currently filter only allowable methods (taking a single unannotated body argument). We need to be a bit smarter so that if the payload is an Object[] and the methodName is specified; then try to find a Method to invoke,This issue has been resolved in CAMEL-759. Closing all 1.5.0 issues. 
Improvement,Willem Jiang,2008-03-04T16:11:04+0000,1204647064,Camel MINA in synchronous mode (InOut exchange pattern) does not handle exception thrown from MINA. Currently MINA intercepts this and logs the exception at WARN level.  We should override the proper method in Mina and handle it so the end user can deal with it. Also it has been raisen on the forum that it does not propogate header and other properties. This should be raised in another ticket.  In the weekend I will work on a patch for Camel to fix this problem.,Okay got it sorted this morning at home. I will prepare at patch later this week.. Applied the patch with thanks.. The test of testReceiveNoResponseSinceOutBodyIsNull() and testReceiveNoResponseSinceOutBodyIsNullTwice() are failed in the linux box.  I just comment out this two test and reopen it.. Hmm the tests are failing because of the TCP port is already bound when the MinaConsumer is started.. Now it fails with another test for same problem. I guess camel or mina doesn't properly unbind the TCP listener. Maybe there should be some delays between the tests to allow some time for the unbind to settle in.  Anyone got a better clue. The tests runs with no problem on my XP box.  A workaround is to use a random port number each time but that is not what we really want is it?. Okay I am on track on something here. Inspired by the ReverseServer unit test in Camel. http://java.sun.com/j2se/1.5.0/docs/api/java/net/ServerSocket.html#setReuseAddress(boolean)  The reuse address is not set. I will create a patch for this  and hopfully the tests will blaze on the Bamboo box.. Okay MinaConsumer in camel was on a wrong foot with the configuration.  Apache Mina has distint configuration for acceptor and connector - in Camel this was the same configuration. We should split this into to config objects on the endpoint. Then we can have a acceptor config for the consumer that sets the reuse address configuration.  Also we could have a logger on the filer chain as the unit test does.  A patch is on the way before he end of the weekend.. Got it up and running except the UDP tests are failing.  Using the right configuration objects also fixed a lot of warnings from Mina  so we are on the right track.. Everything passes now.  There are a few other corners of the camel-mina component I would like to improve and polish before submitting a patch. And especially a few more unit tests is needed to cove the holes.  I added the synchronous mode for the UDP protocol as well.. The 2nd patch:  fixing all the unit tests so they should run UDP protocol now also supports synchronous mode added more unit tests to cover nearly 100% Mina configuration split into separate for acceptor and connector TCP protocol defaults to setReuseAddress(true) (UDP does this out-of-the-box from Mina). Should be fixed with the patch applied.  Please see CAMEL-375 instead. 
New Feature,Claus Ibsen,2008-03-04T19:44:10+0000,1204659850,The component list is now really long. Would like to document witch are part of the camel-core.jar and thus you don't need to look for the camel-XXX.jar that fits for the component.,Better eating your own dog food and do the wiki documentation myself as I was the requester. There are some TODO and some in the source component folder that is not on the wiki. See CAMEL-447. The only one missing is the MSMQ component.  Who knows anything about it?. Got the last piece of information.. 
Test,Willem Jiang,2008-03-04T20:11:55+0000,1204661515,I spent a good amount of time attempting to understand camel and spring (I know JMS reasonably well).  Though each component is easy in the end  everything put together was somewhat painful to put together.  I have created test cases for JMS transactions using camel in both Java DSL and using Spring XML.  These were initiated from:  	Martin Krasser's sample: http://www.nabble.com/JMS-Transactions---How-To-td15168958s22882.html#a15198803 	http://activemq.apache.org/camel/transactional-client.html    This work should be reviewed  perhaps with simple repackaging it is suitable to commit to the test hierarchy.  It may also be useful to point to from the doc page if it is in fact committed to the test hierarchy.,Hi Kevin   Could you grand the ASF license to the test case that you attached ? so I can go on to review and patch it.  Thanks  Willem. Apache License Granted.  Is that what you need? I signed a committer agreement for a different Apache Project so I am on record...  Please let me know if you need something different and I'll get it done.. No  it has nothing to do with your committer agreement. When you attach the files into the JIRA  you can grand the file with the ASF license. Here is the link[1] for management this JIRA's attachment. [1] https://issues.apache.org/activemq/secure/ManageAttachments.jspa?id=26576. Hi Kevin   If you check the link above there is a flag that means that your patch is not informational only and you allow ASF to use your contribution under its license. Committers in a project cannot contribute other people original work without the authors explicit consent.  Unfortunately  the way the gui works is that it does not offer that option if the patch is attached during the issue creation and the default is 'false'. So it has to be a 2 step process. First create the jira  then attach patch. Then you get a different screen that allows you to check that 'Grant License to ASF...' flag.. just re-added with the grant.. The Path is in the svn repository.. Closed all 1.3 tickets. 
Sub-task,Claus Ibsen,2008-03-05T10:51:59+0000,1204714319,The new CSV component (apache-csv) is lacking documentation on the wiki - ie its not listed on the component overview page.,My first shot at the documentation at http://cwiki.apache.org/confluence/x/ijgB We still need to add a link on the Data Formats pages afterwards – how about using the  {children}  macro to get it there automatically in the future?. Gert nice first stab at it.  Would it be possible to add samples to the wiki page of the input and output format. How does the salaries.csv file looks like and how is the bean method signature and what types are the map objects etc.. And a example how to do it the other way (marshal). Could you apply this patch first? It contains an additional unit test with a sample CSV file and some {{// START SNIPPET }} comments for adding the requested documentation.. CAMEL-359 patch applied with thanks to Gert (I love your daltons example). Claus   Could you rename two snippets for me (Confluence doesn't seem to like a - in the snippet name)?  marshal-result → marshalInput unmarshal-result → unmarshalResult  Thanks  Gert. Yes of course. Just committed: At revision 642157. Have just cleared the snippet cache to force the wiki to re-evaluate it (it usually takes an hour. Can we mark this issue as resolved now?. It need a link to it from the main dataformat page  http://activemq.apache.org/camel/data-format.html  Before it can be resolved. Done   http://cwiki.apache.org/CAMEL/data-format.html. 
Improvement,Unassigned,2008-03-05T12:44:04+0000,1204721044,The dependency on Spring Framework is defined as:     <dependency>       <groupId>org.springframework</groupId>       <artifactId>spring</artifactId>     </dependency> in camel-spring's pom.xml file.  Can you please replace this generic dependency with a set of dependencies on individual spring modules as recommended by Spring Framework team?  Thank you in advance!,Is a duplicate of CAMEL-281. Mikhail you are welcome to help us resolved witch of the individual spring jars we should use for each of the camel components.  There is a list of TODOs on the CAMEL-281. 
Bug,Willem Jiang,2008-03-05T13:37:19+0000,1204724239,,@Componet doesn't seem to matter. Same thing if I remove @Component. (Component was only there because I injected some spring stuff also)  My context looks like this:  <camelContext> <package>se.lantmateriet.origo</package> <endpoint id="receiptChannel" uri="mock:updateReceipt" /> <endpoint id="updateChannel" uri="file://src/test/data/EmptyChangeTransactionWithSoap.xml?noop=true" /> <endpoint id="updateServiceChannel" uri="bean:updateService" /> </camelContext>  and in se.lantmateriet.origo.service.internal.ServiceRoutes that extends SpringRouteBuilder  configure is called before and @EndpointInject's are injected.. wonder if you fancy taking a look at this?. Hi Magnus  Did you specify the <component-scan xmlns="http://www.springframework.org/schema/context" base-package="*** /> in you spring configuration file? You could take a look at the SpringComponentScanTest[1]  which is workable for injecting the @component.  [1]https://svn.apache.org/repos/asf/activemq/camel/trunk/components/camel-spring/src/test/java/org/apache/camel/spring/config/scan/SpringComponentScanTest.java  Willem. I'm not sure I understand.  Create a class that extends SpringRouteBuilder.  Add @EndpointInject to inject endpoints created in the camelcontext  as the xml above.  Now  SpringRouteBuilder.configure is called before @EndpointInject is populated  so it is not possible to refer to the endpoints when you configure the route.  Ok?  /Magnus. Hi Magnus   You need add @Autowired before the @EndpointInject(name = "yourEndpoint") . I just added a test to show that   please check out the MyRouteBuilder[1] for more information.  [1] https://svn.apache.org/repos/asf/activemq/camel/trunk/components/camel-spring/src/test/java/org/apache/camel/spring/config/scan/route/MyRouteBuilder.java  Willem. I wonder if we can avoid having to use @Autowired? Are you sure that @EndpointInject is even being used? (e.g. is it just @Autowired thats finding the Endpoint in the context?)  Is there some way to mark the @EndpointInject annotation so Spring knows its an injection point or something?. Hi James   I just traced the code and found only the CamelBeanPostProcessor is in charge of the @EndpointInject. But the builder is not the bean that is created by spring  so the CamelBeanPostProcessor can't work here. How can I touch the CamelBeanPostProcessor with the builder ?  Willem. So I guess the problem is if we use Camel's package scan  we're not using Spring to instantiate the RouteBuilder maybe? I wonder if we could use Spring to instantiate the RouteBuilder it'd invoke the CamelBeanPostProcessor? I wonder how we get Spring to invoke the BeanPostProcessor if a bean doesn't exist in the spring.xml?  I guess ultimately we should reuse Spring's @Component mechanism instead of the camel 'package' mechanism maybe?. The patch was committed into the trunk in Revision 656103  please check it out. 
Improvement,Hadrian Zbarcea,2008-03-05T15:58:45+0000,1204732725,In the current implementation with a mina component producer if the server is not up when we start Camel it fails. This is because the mina session creation is in the doStart method which is called when Camel starts. A simple solution is to optionally allow to lazily create the session just before sending the exchange in the Producer's process method.,I updated the wiki document for the Mina component. Closed all 1.3 tickets. 
Bug,Willem Jiang,2008-03-05T18:10:04+0000,1204740604,From: Willem Jiang To: camel-user@activemq.apache.org Subject: Re: camel-cxf throwing a fault Date: Wed  05 Mar 2008 16:26:41 +0800 Reply-To: camel-user@activemq.apache.org  Hi Marc   It looks like camel-cxf component's issue which can't deal with the  exception message in MESSAGE dataFormat. Could you fill a JIRA for it ? I will fix it later this week. As usual  you just need throw the exception from the processor   CXF  will try to marshal it into a soap fault.  Regards  Willem  Marc Giger wrote: > Hi  > > I'm trying to get the following camel route working where the > dataformat is MESSAGE. > > <from uri="cxf:bean:routerEndpoint?dataFormat=MESSAGE"/>             > <process ref="decryptProcessor"/>   > <choice> >     <when>   >     	<methodCall bean="endpointSelector" method="matches"/> > 	    <to uri="cxf:bean:serviceEndpoint?dataFormat=MESSAGE"/>   >     </when> >     <otherwise>   >     	<to uri="cxf:bean:localEndpoint?dataFormat=MESSAGE"/>    >     </otherwise> > </choice>   > > if the endpointSelector bean returns true the request is redirected to > a remote webservice. > otherwise the request is forwarded to a local cxf service (with > local-transport) > > Now  if I invoke the routerEndpoint and somewhere in the pipeline > happens an exception (in my case in the decryptProcessor)  I get the > following Exception in the outFault chain: > > Mar 4  2008 10:48:35 PM org.apache.cxf.phase.PhaseInterceptorChain > doIntercept INFO: Interceptor has thrown exception  unwinding now > org.apache.cxf.interceptor.Fault >         at > org.apache.camel.component.cxf.interceptors.RawMessageContentRedirectInterceptor.handleMessage(RawMessageContentRedirectInterceptor.java:43) > at > org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:208) > at > org.apache.cxf.interceptor.OutgoingChainInterceptor.handleMessage(OutgoingChainInterceptor.java:74) > at > org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:208) > at > org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:77) > at > org.apache.cxf.transport.servlet.ServletDestination.doMessage(ServletDestination.java:79) > at > org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:264) > at > org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:160) > at > org.apache.cxf.transport.servlet.AbstractCXFServlet.invoke(AbstractCXFServlet.java:170) > at > org.apache.cxf.transport.servlet.AbstractCXFServlet.doPost(AbstractCXFServlet.java:148) > at javax.servlet.http.HttpServlet.service(HttpServlet.java:727) at > javax.servlet.http.HttpServlet.service(HttpServlet.java:820) at > org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:487) > at > org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:362) > at > org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216) > at > org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:181) > at > org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:712) > at > org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:405) > at > org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:211) > at > org.mortbay.jetty.handler.HandlerCollection.handle(HandlerCollection.java:114) > at > org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:139) > at org.mortbay.jetty.Server.handle(Server.java:313) at > org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:506) > at > org.mortbay.jetty.HttpConnection$RequestHandler.content(HttpConnection.java:844) > at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:644) at > org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:211) at > org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:381) at > org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:396) > at > org.mortbay.thread.BoundedThreadPool$PoolThread.run(BoundedThreadPool.java:442) > Caused by: java.lang.NullPointerException at > org.apache.commons.io.IOUtils.copyLarge(IOUtils.java:1025) at > org.apache.commons.io.IOUtils.copy(IOUtils.java:999) at > org.apache.camel.component.cxf.interceptors.RawMessageContentRedirectInterceptor.handleMessage(RawMessageContentRedirectInterceptor.java:39) ... > 28 more > > This is because the InputStream is null in > RawMessageContentRedirectInterceptor: > > public void handleMessage(Message message) throws Fault { > >         InputStream is = message.getContent(InputStream.class); >         OutputStream os = message.getContent(OutputStream.class); >          >         try  {             >             IOUtils.copy(is  os); >             is.close(); >             os.flush(); >         }  catch (Exception e)  { >             throw new Fault(e); >         } >     } > > How can I return a custom soap-fault in a processor/filter? > > Thanks  > > Marc > >,The patch is committed  please check it out. Closed all 1.3 tickets. 
Bug,Unassigned,2008-03-06T06:04:57+0000,1204783497,Using the camel-mina component in synchronous mode (InOut exchange pattern) there is a potential bug if eg a processor throws an exception.  This is a failed delivery in camel. And out-of-the-box the default policy is to retry up till 6 times. And if still failing camel-mina will continue and return a response to the client. The respons is a duplicate of the in body.  A workaround is to set the out body to null immediately in your processor. If the body is null before the exception is thrown then camel-mina will no return a response.  To reproduce the bug see the MinaTcpWithInOutUsingPlainSocketTest and remove the setbody null code below and the test should fail.   else if ("force-exception".equals(in)) {                             // clear out before throwing exception                             e.getOut().setBody(null);                             throw new IllegalArgumentException("Forced exception");                         }    In MinaConsumer there is a TODO comment where the bug should be handled (from CAMEL-356),Requires this patch. See patch on CAMEL-375. Fixed with patch from CAMEL-375. 
New Feature,Jonathan Anstey,2008-03-06T09:47:03+0000,1204796823,http://www.enterpriseintegrationpatterns.com/RoutingTable.html,Hi   Isn't what you are referring to what Camel calls Pipes and Filters?? http://activemq.apache.org/camel/pipes-and-filters.html. (Leaving aside the fact that Pipes and Filters EIP is oriented towards breaking up large logic into smaller bits.... isn't the routing strategy the same?).  Im sorry if I got it all wrong..... I am a beginner in all this   – Raul.. The two patterns are similar in that they chain together several endpoints. The routing slip pattern is a bit more dynamic though since the endpoint list is defined at runtime in a message header.  For example  take a pipeline ala  from("direct:a").pipeline("direct:x"  "direct:y"  "direct:z"  "mock:result");   In order to route is this way using the routing slip pattern  you would create a route like  from("direct:a").routingSlip();   and send a message to direct:a with a routing slip header that contains the list of URIs (direct:x  direct:y  direct:z  and mock:result). You can't do this in the current build though  I'm still working on it. This patch adds the routing slip EIP to camel.. Patch applied with huge thanks Jon!   I guess we should add a little test case to the camel-spring module to check it works when using the XML version as well.  BTW fancy adding a wiki page to the EIP page?  http://activemq.apache.org/camel/enterprise-integration-patterns.html. Sure thing. I may get around to it over the weekend.. Here's some basic documentation : http://cwiki.apache.org/confluence/display/CAMEL/RoutingSlip. Just noticed that I specified an image file that doesn't exist in the NodeData class. The thumbnail for the routing slip is actually RoutingTableIcon.png not RoutingSlipIcon.png.  I attached a patch for this.. Jon I have applied you nodeData patch - thanks a lot for this great addition to Camel. Closed all 1.3 tickets. 
Improvement,Unassigned,2008-03-06T14:18:18+0000,1204813098,,Closing all resolved tickets from 2010 or older. 
Bug,Hadrian Zbarcea,2008-03-06T15:22:09+0000,1204816929,,Already fixed in a previous merge.. Closed all 1.3 tickets. 
Bug,Unassigned,2008-03-06T15:52:42+0000,1204818762,From: http://activemq.apache.org/camel/recipient-list.html       <to>       <uri>seda:b</uri>       <uri>seda:c</uri>       <uri>seda:d</uri>     </to>,Based on this forum entry  http://www.nabble.com/Help-with-WireTap-please%21-%28Noob%29-to15710292s22882.html#a15712739  it seems that the correct format for this kinda thing is    <route>     <from uri="seda:a"/>     <to uri="seda:b"/>     <to uri="seda:c"/>     <to uri="seda:d"/>   </route>   That said  the public xsd (http://activemq.apache.org/camel/schema/spring/camel-spring.xsd) is way behind the one that gets auto generated in the camel-spring component... anybody know if that is planned to be updated?. Just noticed that there was no test case for a static recipient list... attached is one using the DSL and one using Spring XML Extensions.. patch applied with thanks. Closed all 1.3 tickets. 
New Feature,Unassigned,2008-03-06T19:37:05+0000,1204832225,they should implement BrowsableEndpoint,patch applied - see BrowsableQueueTest in camel-jms. Closed all 1.3 tickets. 
Bug,Hadrian Zbarcea,2008-03-06T23:09:39+0000,1204844979,SftpConsumer does not connect to server due to patch for CAMEL-251.  The SftpConsumer also checks remote file modification timestamp against last poll timestamp but incorrectly converts seconds to milliseconds using integer math so the resulting conversion is always negative and will never retrieve file.  I will attach the fixes to this issue.,This patch fixes these issues and also reduces the log level on reconnects from WARN to INFO since this will happen on the first connection attempt every time and is normal behavior. I also removed the TODO comments about checking TZ on the remote server because the SSH FTP spec already specifies UTC.. Thanks Chris!. Closed all 1.3 tickets. 
Improvement,Unassigned,2008-03-07T05:11:45+0000,1204866705,Currently the camel mina producer (MinaProducer) defaults to have a 10 sec timeout.  This is currently not possible to configured eg from the URL parameters etc. Also we should documented on the wiki that 10 sec. is default.,Okay I got it now. Will prepare a patch later today/tomorrow. The 10 sec default is to short i think? I think it should be at least 30 or 60 sec.  Better to have a higher sensible default than having nasty surprises for end users that they will have a timeout just because the response could not be generated in less than 10 seconds.  Anyone got their opinion on this?. I think we could set it to 30 sec  since CXF's conduit's default time out is 30 sec and I do not get any complain about that. The timeout patch. Fixed and updated wiki documentation. 
Improvement,Willem Jiang,2008-03-07T13:28:17+0000,1204896497,Its such a common use case - using camel-jms should be transactional out of the box unless the user explicitly disables transactions. So defaulting the transactionManager property seems to make sense,Here is a question if the MessageExchangePattern is InOut  and there are two message queue share the same local transcation manager  the JMS endpoint can't be transcational . Please see CAMEL-959 for more information.. Now I don't think we should set the JMS endpoint to be true. If we have the rule like this   from("jms:queue:queueA?concurrentConsumers=4").to("jms:queue:queueB")  form("jms:queue:queueB?concurrentConsuers=4").to("mock:endpoint");   The upper 2 JMS endpoint will share a same JMSTransactionMananger if we set the transacted to be true and the CurrentConsumer=4  we can't not get the result message from jms:queue:queueB. So I don't think we need to make the JMS endpoint default to be transactional. Since it is so complicated when we write the queue to queue routing rules  to be make sure the rule can work without any additional configuration  I don't want to set the JMS endpoint to be trasactional by default. But if the user doesn't inject the transactionManager and set the transactioned to be true   we should create a JMSTransactionManager by default.. We still haven't figured out why reusing a transaction manager is bad - it should work across many threads & transactions.  FWIW setting the JMS endpoint to transactional by default only applies to InOnly. i.e. oneway JMS operations (which is the common use case).  For InOut we should not enable transacted by default - since its typically not what users want/expect.. Since current JMS endpoint (for producer) don't know if the exchange it processed is InOnly or InOut when it is created. And the exchange's exchange pattern can be changed any time in the route. I don't feel it is right to set the transacted default value to be true.. I committed a patch of create a JMSTransactionManager if there is no transaction manager specified for the Jms endpoint. http://svn.apache.org/viewvc?rev=728624&view=rev. Willem we can set the transacted option to true by default.  As CAMEL-1475 handles the rest  eg no need to explict declare a transacted error handler etc. Then its safe to change the transacted option from false to true.. Back to my comment  when the JMS endpoint is created we don't know the message exchange pattern of the message which the endpoint will process  and the JMS endpoint will get into trouble if the message exchange pattern is InOut and we set the trasacted option to be true by default. Maybe we should let the user have the choice.. Willem  Yeah I have been trying to change the defaults and I think the issue with from (jms) -> to (jms) with inOut in the same route will fireback end users.  So we can keep the option as disabled by default. Even though it would be unusual to use JMS without transaction in a real system.  Any thoughts from others?. Lets leave it as is.  The end user must set transacted=true to use JMS transactions. This is the best behavior as no other components like JDBC default to be transacted.. Closing all 2.0M2 tickets. 
Bug,Hadrian Zbarcea,2008-03-07T15:09:32+0000,1204902572,Give something like this:  [                          main] DeadLetterChannel              ERROR Failed delivery for exchangeId: ID-xxxxx/63907-1204902526306/0-1. On delivery attempt: 0 caught: org.apache.camel.RuntimeExpressionException: net.sf.saxon.trans.DynamicError: org.w3c.dom.DOMException: HIERARCHY_REQUEST_ERR: An attempt was made to insert a node where it is not permitted.  org.apache.camel.RuntimeExpressionException: net.sf.saxon.trans.DynamicError: org.w3c.dom.DOMException: HIERARCHY_REQUEST_ERR: An attempt was made to insert a node where it is not permitted.  	at org.apache.camel.component.xquery.XQueryBuilder.evaluate(XQueryBuilder.java:124),Patch applied  needs documentation.. Patch and documentation done. Closed all 1.3 tickets. 
Bug,Willem Jiang,2008-03-07T21:31:47+0000,1204925507,When writing out an Http response  the HttpBinding should check for the existing of the header HttpProducer.HTTP_RESPONSE_CODE and set it in the response if it's there.  This allows requests made via the http component to be output with the correct status code info.  If also allows processors in the flow to control the status code by setting the header themselves.,Hi David  Please grand your patch with Apache license  or I can't apply this patch. You can use the Manage Attachments link to do that .  Thanks  Willem. Patch applied with thanks to David. Closed all 1.3 tickets. 
Improvement,Unassigned,2008-03-08T13:41:52+0000,1204983712,This ticket holds reference to the various camel-mina improvments and bugfixes lately.,Many of the issues has been resolved. I will attach a new patch will all the fixes.. Patch fixing  subtask 1 subtask 2 CAMEL-364. Willem  you are doing a fine job merging and submitting the patch - this is good team work.. UDP bug we might as well get fixed also. 
Sub-task,Unassigned,2008-03-08T13:44:18+0000,1204983858,The TODO in the source code to let MinaConsumer give access to Mina IoSession in the MinaExchange holder object.  See the new unit test MinaExchangeTest for sample how you now can get access to various Mina information from its session.,
Sub-task,Unassigned,2008-03-08T13:50:27+0000,1204984227,The camel-mina code throws improper exceptions in various places:  	Exception 	RuntimeException 	IOException for invalid argument    Exception and RuntimeException is changed to CamelException and we now throw IllegalArgumentException for invalid arguments.  This is include in the patch for CAMEL-356,
Sub-task,Unassigned,2008-03-08T13:52:22+0000,1204984342,The TCP protocol already support this in CAMEL-356. Improve the code to support it for the UDP protocol as well.  Remember to update the wiki docs.,Is comitted with the patch from CAMEL-356. 
Bug,Willem Jiang,2008-03-09T08:12:11+0000,1205050331,On my laptop I nearly constantly get unit test failure in camel-core when testing from scratch.  The file is DirectoryCreateIssueTest that only sleeps for 2 sec  and it takes nearly 7 secs on my computer to generate the files for the unit test to pass with flying colors.  This patch increases the sleep to 10 sec.,Sorry for creating fuss  it seems that its much faster now since i did a brand new checkout. It runs within the 2 sec now. This issue can be closed.. 
Bug,Willem Jiang,2008-03-09T12:43:12+0000,1205066592,Using a CamelProducer to send bytes to a mina UDP listener fails.  This unit tests below fails Using: "Hello from bytes" as a plain string works fine.       public void testSendingByteMessages() throws Exception {         MockEndpoint endpoint = getMockEndpoint("mock:result");         endpoint.expectedMessageCount(1);          template.sendBody("mina:udp://127.0.0.1:4445"  "Hello from bytes".getBytes());         // sleeping for while to let the mock endpoint get all the message         Thread.sleep(1000);          assertMockEndpointsSatisifed();         List<Exchange> list = endpoint.getReceivedExchanges();         assertEquals("Hello from bytes"  list.get(0).getIn().getBody(String.class));     },I think I got a fix now. It is in the works of being tested.. The patch that fixes:  this bug with bytes improved unit testing the 2 removed codelines in MinaComponent that converts to ByteBuffer is already handled by the first line in the method (convertTo).. This patch is better as the unit tests is a bit better. The Patch is applied with thanks to Claus.. 
New Feature,Willem Jiang,2008-03-09T14:02:28+0000,1205071348,If sending string messages using a MinaProducer then the encoding configuration is not possible to configure.  Currently it is fixed as:                      encoder = Charset.defaultCharset().newEncoder();    It should be possible to configure this so we can have all those exotic kind of encodings to work.,In fact the TCP protocol has the same issue if using textline codec.. I got some prototype up and running at home. I will try to get a patch for it.. Okay it is a bit more tricky. The encoding now works for both TCP and UDP but not using the textline codec. It currently only works for the Mina default ObjectSerializationFactory.  There is a type conversion problem with the textline codec. I am debugging into this.. Should throw an IllegalArgumentException if configured with udp and textline=true as the textline is only supported for the TCP protocol.. UDP string with real UTF-8 chars is the only one failing now when doing assertMockEndpointSatisfied  since it will convert the receivedBody to a String using MinaConverter public static String toString(ByteBuffer buffer) and this one does not account for the encoding  so it does not know what encoding it should use.  We need something bigger here to support charset for type conversion from byte[] to String.  Notice that the MinaConsumer still works its only the mock endpoint that fails its assertions. So its just a minor issue. End users is not affected by this.. The problem is MinaConverter      public static String toString(ByteBuffer buffer) {         return IOConverter.toString(toByteArray(buffer));     }   It does not consider the encoding (eg UTF-8) when converting to string.. This patch to camel-core is to add equal check for byte arrays for easier unit testing using the mock endpoints.  The test comples on my laptop: Tests run: 294  Failures: 0  Errors: 0  Skipped: 0. The patch for camel-mina. Remember to update wiki docs with the new encoding parameter.. The title is a bit misleading. The encoding is for both TCP and UDP protocols.. Hi Claus   I just found you used the String(byte[] bytes  Charset charset) which is the new API in JDK1.6 in the MinaEncodingTest   and I got the build fail message with JDK1.5.  So I changed the code to use the String(byte[] bytes  String charsetName) API   which will make both JDK1.5 and JDK1.6 happy.  Regards   Willem. Willem   Well spotted. I will remember to use JDK1.5 to be safe not to use some of the new API's in the JDK1.6. Then we are safe in the future.. TODO before resolving this issue:  Update wiki documentation for the component with this new encoding option.. Added documentation to the wiki component page.  See unit tests for samples how to use the encoding parameter.. 
New Feature,Willem Jiang,2008-03-10T03:15:17+0000,1205118917,Current Camel-CXF producer do not support to send out request with JAXWS Dispatch API. We could build a DispatchImpl with the CxfEndpoint information  and invoke the service with low level message.,Willem  should this new feature be scheduled to 1.5  so we can start feature freeze and close in on a 1.4 release?. Can this be moved to 2.1?. I'd like to removed this issue  since we can use camel-http component to send the soap or xml message directly to CXF service. In this   user can have the full control of the message creation and transformation.. 
Bug,Willem Jiang,2008-03-12T16:18:36+0000,1205338716,Exchange.getOut() not returning (blocking till timeout) when ExchangePattern.InOut used. Additionally  message properties and exchange headers does not seem to be passed when using MINA TCP communication. In direct pojo or bean  everything seems working. I have attached the classes needed to resolve the issue. No modifications are made to interfaces (method signatures). Classes affected are: org/apache/camel/component/mina/MinaEndpoint.java org/apache/camel/component/mina/MinaProducer.java org/apache/camel/component/mina/MinaConsumer.java new class introduced: org/apache/camel/component/mina/MinaTransportObject.java  Junit test attached:  org\apache\camel\component\mina\MinaTcpExchangeTest.java,George  thanks for the code. I am currently looking into it now.. A patch with the following changes:  copyright headers for missing files removed an unused import new feature to transfer exchange objects using TCP protocol (transferExchange=true) see MinaTransferExchangeOptionTest how to use it  The new feature only works for the TCP protocol and for the default codec (= object). So do not use textline=true as option.. I think this ticket should be changed from bug to new feature.  Also anyone got a better name for the option (transferExchange)? I considered the option bodyOnly also but then I needed to make sure the defaults would be bodyOnly=true even when the parameter is not specified.. TODO: Remember to update wiki component documentation with the new option if patch is accepted.. Hi Claus   I just committed your patch. Here is one issue for the MinaTransferExchangeOptionTest  since we do not mashal or unmashal the exchange's exchangeId  so I comment out the process assertion for the exchangeId to pass the test .  BTW  the document for the transferExchange properties is highly demanded  and I like to use the transferExchange as the parameter name since it is more clear for the user   Regards   Willem.. Hi Willem  I am on vacation at my parents at the time being and there I have not access to the net. So its a bit challenge to work on Camel using maven in offline mode. I decided in last minute to remove the transfer of exchangeid  but I forgot to remove it in the unit tests that still could pass if the generated ids are the same.  Today I have access to the net for a few hours so I am trying to catch up on the mail and the camel commits to merge with a few changes in the mina component I have improved during the last 3 days.  I will update the wiki documents on sunday when I am back home. I am also working on providing a camel-mina-example sample for the distribution.. Basic documentation added to the mina component on the wiki.. Closed all 1.3 tickets. 
Bug,Willem Jiang,2008-03-12T18:48:11+0000,1205347691,Don't wrap a Fault in a Fault.,Hi Marc  I just applied your patch to the trunk by hand. Could you use "svn diff " to generate the patch? Since I am just use eclipse not IntelliJ .  Regards   Willem. Closed all 1.3 tickets. 
New Feature,Willem Jiang,2008-03-13T11:29:59+0000,1205407799,,I did a first shot of doing the attachment stuff. As a test I modified the camel-mail component to support attachments and changed a test case to use the logic.  Please make sure this patch is complete as I don't know camel that good.  Regards  Lars. Couldn't we think about solving this problem using message headers we already have? Adding explicit attachments support is very 'technology' specific — today we have headers  tomorrow attachments  then properties  flags  whatever appears in some technology.  I would rather assume  that message header is information that will be converted to technology-specific message if it meets some requirements (unlike properties that are used internally by Camel). One example of such requirement is the type of JMS properties that cannot be just an object.  Basically it is endpoint's responsibility to define what a body is and what a header is in terms of specific technology we integrate with. Then we can say  that in case of WS or JBI every header that is DataHandler is an attachment in this specific technology.  Such change is rather universal (suitable for attachments  and possibly other 'things' that might appear) and doesn't make our interface more complicated at all.. Roman   in my opinion a message is always made of the following three parts:  some message header values / properties the base message content data attachments  This is the structure the JBI message is using. Now putting for example binary attachments to a message header / property seems to be a "not so clean" workaround in my eyes. If doing so  every endpoint would have to implement some check logic if a header is an attachment or a property. Just compare the message properties with the property-files in some OS. It will always contain key = value pairs and no other things. These values will always be simple data types like String  Date etc.  Further I can not imagine that there is or will be another requirement than for these 3 parts.  Just my thoughts.  Regards  Lars. Hi Lars   Can you recreate the patch against the latest code? Some files in your patch are out of date.  Thanks   Willem. Willem   it has been quite some time since I did this patch. Let me have a look at home if I still have the sources available. If not then it's faster you adapt the patch to the actual sources for yourself.  I will put a comment again here about the state.  Regards Lars. Willem   sorry  but I already deleted the sources in my system. I would suggest manually applying this patch but unfortunately I haven't got the time for this right now.  Regards  Lars. Hi Lars   OK  I will manually apply this patch.  Regards  Willem. Applied patch with thanks to Lars.. Wouldn't it be better to reuse spring attachment support? http://static.springframework.org/spring/docs/2.5.x/reference/mail.html  Looks like they got a nice Helper for adding/handling attachment stuff.  Well at lest in the mail component that adds attachments and unit tests it. There is some low level attachment code that maybe we can get for free reusing Spring.. Claus   I am not a spring expert but this chapter only describes the mail handling in spring. I do not see something that could be used as attachment logic instead of what Willem applied now.  Btw. I am watching your progress in improving the mail component. Seems you got fun with it   Regards Lars. Lars   Yes its quite fun. There are a few gaps here and there that needs to be closed   I stumbled into this spring sample code that sends a image as attachment to a mail. For me this looks like we could reuse Spring code to do it for us. Espeically Springs Helper  MimeMessageHelper helper = new MimeMessageHelper(message  true);   Can easily add an attachment in a single line of code  helper.addAttachment("CoolImage.jpg"  file);   Here goes the entire Spring sample:  22.3.1.1. Attachments  The following example shows you how to use the MimeMessageHelper to send an email along with a single JPEG image attachment.  JavaMailSenderImpl sender = new JavaMailSenderImpl(); sender.setHost("mail.host.com");  MimeMessage message = sender.createMimeMessage();  // use the true flag to indicate you need a multipart message MimeMessageHelper helper = new MimeMessageHelper(message  true); helper.setTo("test@host.com");  helper.setText("Check out this image!");  // let's attach the infamous windows Sample file (this time copied to c:/) FileSystemResource file = new FileSystemResource(new File("c:/Sample.jpg")); helper.addAttachment("CoolImage.jpg"  file);  sender.send(message);. Lars   Oh I have been monitoring Spring from time to time since its 0.9 version. And I recall they have done quite some work to get all the mail attachement stuff to work in Lotus Notes  Outlook  Thunderbird etc. Especially Notes had some issues.  I do think Camel should reuse as much Spring stuff as possible instead of rolling our own. Spring is so well written and well tested framework that its 2nd to none.. Claus   to reuse these things for the mail attachment handling is absolute ok. But again  this is only the handling of mail attachments. This is not enabling camel messages to have attachments  and this is what Willem actually applied to the code. So feel free to improve the mail stuff with the spring helpers as it makes absolutly sense to me.  Regards  Lars. Is there a corresponding issue on ServiceMix Jira (3.2  3.3?) about upgrading the servicemix-camel component to Camel 1.4-SNAPSHOT so to implement the bidirectional mapping between JBI NormalizedMessage attachments and Camel Message attachments? Should I add one?. Marcello   it's not yet there or at least I don't know of it  Feel free to raise a JIRA for this.  Lars. Just added: SM-1348  I've also attached a patch with my implementation  if there's anybody enough adventurous to try it!. The patch was applied in the revision 651196.. 
Improvement,Willem Jiang,2008-03-14T05:01:50+0000,1205470910,If the real server through the soap fault with http response code 500   camel-cxf component need to pass it back to the client side. Here are some discussion about it http://www.nabble.com/mixing-dataFormat-in-camel-cxf-td16001871.html#a16001871,The patches are in the trunk now. Closed all 1.3 tickets. 
Improvement,Willem Jiang,2008-03-14T07:05:01+0000,1205478301,The dependency:    jsch:jsch  has been moved to:    com.jcraft:jsch,patch applied with thanks to Lars.. Closed all 1.3 tickets. 
Bug,Willem Jiang,2008-03-14T11:46:24+0000,1205495184,Requestor doesn't honor JmsConfiguration.useVersion102  Within createListenerContainer() it creates instance of SimpleMessageListenerContainer  however for 1.0.2 it have to create instance of SimpleMessageListenerContainer102 instead.,Like this?. Looks fine! Though I don't need is it possible for configuration to be null or not. I'm still struggling with setting up Camel project within my Eclipse - the reason why I didn't submit a patch myself. Thanks!. Patch applied with thanks. Please verify it when the new snapshot comes out.. Closed all 1.3 tickets. 
Improvement,Willem Jiang,2008-03-17T09:31:51+0000,1205746311,Adding the support of this user story  CXF Consumer -> Route ---> parallelly send messages and recieve responses ---> aggregate response --> further process ----> return  Here is more information about this story [1] http://www.nabble.com/Parallel-processing-route-td15642110.html#a15642110,The patch is in the SVN repository.. Closed all 1.3 tickets. 
Improvement,Hadrian Zbarcea,2008-03-18T15:55:19+0000,1205855719,See this thread... http://www.nabble.com/BeanFactoryAware-%28Spring%29-tp16122107s22882p16124218.html,I am not sure this is a valid issue yet. I suspect the xml is not correct but I only have briefly looked into it. If I understand correctly this is related to the use of refs.  It's ok for the xml doc to have one default namespace and than one element (<camelContext>) to redefine the default namespace to be something else. However  since we are dealing with qnames  the camelContext element should define a different namespace mapping (and a prefix) for the default namespace of the document (the spring namespace) and use that to qualify the element it refs  so that resolution can happen.  But then again  I may have misunderstood the issue completely. I'll look into it soon though.. I think this bug was raised to try help folks figure out issues caused by the xmlns being redeclared. e.g. something like this  <?xml version="1.0" encoding="UTF-8"?>  <beans xmlns="http://www.springframework.org/schema/beans"          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"          xsi:schemaLocation="         http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd        http://activemq.apache.org/camel/schema/spring http://activemq.apache.org/camel/schema/spring/camel-spring.xsd">           <camelContext id="camel" useJmx="false" mbeanServer="mbeanServer"                  xmlns="http://activemq.apache.org/camel/schema/spring">                  <package>org.apache.camel.example.spring</package>          </camelContext>           <!-- DOES THIS FAIL? -->         <bean id="foo" class="whatnot"/> </beans>   I can't remember if the xmlns redeclaration of the default namespace on the <camelContext/> disappears again after the </camelContext>. Does something like the above work? If not can we generate some kinda useful error message somehow?. Isn't camel-example-spring doing exactly this successfully?  The only difference is the beanServer="mbeanServer" missing. And there is obviously no element with the id:  {http://activemq.apache.org/camel/schema/spring}  mbeanServer".. you're right. I wonder if I was thinking of nested <bean> elements within the <camelContext/> - can't remember   lets just close this issue for now. not an issue AFAIK. Closing all 1.5.0 issues. 
Bug,Unassigned,2008-03-19T09:21:55+0000,1205918515,This is caused by this spring bug http://jira.springframework.org/browse/SPR-4599,Test case NamespacePrefixTest added along with a patch. Closed all 1.3 tickets. 
New Feature,Willem Jiang,2008-03-20T08:14:36+0000,1206000876,I'm granting it with ASF license   To: camel-user@activemq.apache.org Subject: Re: camel-cxf RawMessageInvokingContext Date: Thu  20 Mar 2008 09:48:21 +0800 Reply-To: camel-user@activemq.apache.org  Hi Marc   I am OK for this patch after I went though the patch. Please fill a JIRA with this patch and grand it with ASF license  then I  will put it into the repository.  Cheers   Willem  Marc Giger wrote: > Hi Willem  > > Attached is a patch for camel-cxf to copy all of the contents to > the new out message. > > An example use case: > A processor which has to decrypt the incoming request to decide > which route should be choosen. > Later in a cxf-interceptor you don't have decrypt the message again  > but use the stored one. > > All existing camel-cxf JUnit tests passes successful. > > What do you think? > > Thanks. > > Cheers  > > Marc,Willem  haven't you committed this patch to trunk?. The patch has been applied with thanks to Marc.. Closed all 1.3 tickets. 
Bug,Hadrian Zbarcea,2008-03-20T22:07:45+0000,1206050865,Aggregator when created connects itself directly to the endpoint it 'originates' - not to the last step of processing so in such case   from("seda:header").setHeader("visited"  constant(true)).aggregator(header("cheese")).to("mock:result");    at mock:result visited header is not set and in fact there are two different routes created that start from seda:header: one directly to aggregator  and the second one to setHeader().  In case of direct endpoint everything works because direct component invokes flows one-by-one so it will set the header  and then aggregate  but with seda it doesn't work.  Lets look at the test I added to AggregatorTest class to see the problem (_testAggregatorNotAtStart()). This test doesn't pass so far and I was unable to fix it  because I'm not good enough in DSL code. maybe someone could handle this. Another solution is to let to specify aggregator in RouteType so it could be used only just after from().,Enabled the test by introducing a direct endpoint before the BatchProcessor.. Hello Willem!  I see that you enabled the test and it passes by introducing another direct endpoint.  The problem is that it should pass (In my opinion) without introducing this new endpoint in the exact form it was previously.. This is a bit messy... I may have to move it to 2.0.. yes it actually is  I discovered this too when I was looking into the aggregator.  Great that you pick up the glove and we should get it sorted in camel 2.0.. Maybe we should write something to the release notes of 1.5 in the known issues section?. A patch to throw an exception if the route is configured wrong so end-users get this exception and can fix it  Later we can get it fixed properly (if possible without to much hazzle). I commited the patch that throws an exception if the route is not configued properly.. A patch for this is attached to CAMEL-1037. This is fixed by Martin's patch. Closing 2.0m1 tickets. 
Improvement,Claus Ibsen,2008-03-24T08:34:42+0000,1206347682,Currently camel-mina does not log using similar log classnames for a MinaProducer and MinaConsumer. This can be a bit misleading in the log files.  MinaConsumer uses an anonymous inner class to do the IoHandler where as MinaProducer does not. This renders the loglines such as  MinaConsumer$1 - XXX MinaProducer$RecieveHandler - XXX    MinaConsumer should use a non anonymous inner classes so logging is the same:  MinaConsumer$RecieveHandler - XXX MinaProducer$ResponseHandler - XXX,I think we should have an option on the component so it can easily turn on/off default Mina logging.  Otherwise it can be a bit of hassle out-of-the-box since Apache MINA logs everything at INFO level.. TODO: add wiki documentation for logger=true | logger=false option. Default is false.  This option turns Apache MINA logger on/off. It logs using slf4j at INFO level so it gets quite verbose  so its nice to turn it off.. The new logger option is named: minaLogger. Added wiki documentation and committed to trunk. camel-mina now also logs better information when it configures and creates MinaProducer and MinaConsumers. And when it stops a MinaProducer. And more.. 
Improvement,Claus Ibsen,2008-03-24T09:22:12+0000,1206350532,I was working on a camel-mina-example sample that starts a MinaProducer to send data to a TCP server. When my sample terminates the JVM it waits 60 seconds until the MINA worker threads times out (default 60 sec).  As a workaround using System.exit(0) will terminate my client JVM immediately.  And running my client as a JUnit tests will also in fact terminate the JVM immediately.  The code below demonstrates this: Running as JUnit runs within a few seconds. Run it as a standard java main app and it terminates after 60+ seconds The code is a test I am working on for the patch to fix it. (I got it fixed but I want a better unit test)   public class MinaProducerTest extends ContextTestSupport {      public static void main(String[] args) throws Exception {         MinaProducerTest test = new MinaProducerTest();         test.producerRunningFromMain();     }      private void producerRunningFromMain() throws Exception {         long start = System.currentTimeMillis();         System.out.println("+++ start +++");         context = new DefaultCamelContext();         context.addRoutes(createRouteBuilder());         context.start();         testProducer();         context.stop();         System.out.println("+++ stop +++");         long end = System.currentTimeMillis();         assertTrue("Should stop within 5 seconds"  end - start < 5000);         // TODO: add shutdown hook to verify that its stopped before 5 seconds  or mocks             }      private static final String uri = "mina:tcp://localhost:6321?textline=true";      protected RouteBuilder createRouteBuilder() {         return new RouteBuilder() {             public void configure() {                 from(uri).to("mock:result");             }         };     }     public void testProducer() throws Exception {         MockEndpoint mock = getMockEndpoint("mock:result");         mock.expectedBodiesReceived("Hello World");          Endpoint endpoint = context.getEndpoint(uri);         Producer producer = endpoint.createProducer();          Exchange exchange = endpoint.createExchange();         exchange.getIn().setBody("Hello World");          producer.start();         producer.process(exchange);         producer.stop();          assertMockEndpointsSatisifed();     }      // TODO: Test using mocks requires many codelines to mock all the producer  endpoints etc.  },This is a combined patch for CAMEL-394 and CAMEL-395 plus:  refactored camel-mina writing data using mina session.write will now wait for the operation to complete and check if the operation is a success. This is important to handle as we want the operation to complete before continuing our code. improved and polished some unit tests polished pom to use readable ident mvn exec:java to see the CAMEL-395 in action from java main better error reporting for mistyped uri configuration and whatnot I have done the last 7 or so days. Running mvn:exec java from this component will run a java main app that demonstrates that Camel is now able to shutdown MINA resources faster.  See the code in MinaProducer doStop that does the trick.. Fixed in trunk. 
New Feature,Claus Ibsen,2008-03-24T15:07:04+0000,1206371224,The timeout option on camel-mina is currently only used for sending and receiving over the wire.  When a MinaProducer is opening the connection it will use Apache MINA connector timeout (SocketConnectorConfig) that has a default value of 60 seconds. We might need to align this timeout value with our existing timeout option for one single option. Or introduce a new option to set a different timeout for establishing the connection.  This applies only for MinaProducer for TCP and UDP protocols.  I am inclined to set it to use the default camel-mina timeout of 30 seconds or the user provided option if anyone given. Any thoughts?,Camel is now using a default of 30 seconds for connecting. If user provides a timeout value then this value is used during connection as well. 
Bug,Willem Jiang,2008-03-25T18:42:19+0000,1206470539,Not sure why - but recent changes to fix the javadoc issue seems to have broken the assembly build. Does it still work for you on windows? Maybe if you trash your .m2/repository and try again it might not?  [INFO] ------------------------------------------------------------------------ [INFO] Building Camel :: Assembly [INFO]    task-segment: [clean  install] [INFO] ------------------------------------------------------------------------ [INFO] artifact org.apache.maven.plugins:maven-dependency-plugin: checking for updates from maven2-repository.dev.java.net [INFO] artifact org.apache.maven.plugins:maven-dependency-plugin: checking for updates from codehaus.repo [INFO] artifact org.apache.maven.plugins:maven-dependency-plugin: checking for updates from open.iona.m2 [INFO] artifact org.apache.camel:maven-camel-converters: checking for updates from apache.incubating.releases [INFO] artifact org.apache.camel:maven-camel-converters: checking for updates from maven2-repository.dev.java.net [INFO] artifact org.apache.camel:maven-camel-converters: checking for updates from codehaus.repo [INFO] artifact org.apache.camel:maven-camel-converters: checking for updates from open.iona.m2 [INFO] snapshot org.apache.camel:maven-camel-converters:1.3-SNAPSHOT: checking for updates from apache.incubating.releases [INFO] snapshot org.apache.camel:maven-camel-converters:1.3-SNAPSHOT: checking for updates from apache.snapshots [INFO] snapshot org.apache.camel:maven-camel-converters:1.3-SNAPSHOT: checking for updates from maven2-repository.dev.java.net [INFO] snapshot org.apache.camel:maven-camel-converters:1.3-SNAPSHOT: checking for updates from codehaus.repo [INFO] snapshot org.apache.camel:maven-camel-converters:1.3-SNAPSHOT: checking for updates from open.iona.m2 [INFO] [clean:clean] [INFO] Deleting directory /workspace/java/camel/apache-camel/target [INFO] [resources:resources] [INFO] Using default encoding to copy filtered resources. [WARNING] POM for 'org.iso_relax.verifier.jaxp.validation:isorelax-jaxp-bridge:pom:1.0:compile' is invalid. It will be ignored for artifact resolution. Reason: Not a v4.0.0 POM. for project org.iso_relax.verifier.jaxp.validation:isorelax-jaxp-bridge at /Users/jstrachan/.m2/repository/org/iso_relax/verifier/jaxp/validation/isorelax-jaxp-bridge/1.0/isorelax-jaxp-bridge-1.0.pom [INFO] snapshot org.apache.camel:camel-groovy:1.3-SNAPSHOT: checking for updates from apache.incubating.releases [INFO] snapshot org.apache.camel:camel-groovy:1.3-SNAPSHOT: checking for updates from apache.snapshots [INFO] snapshot org.apache.camel:camel-groovy:1.3-SNAPSHOT: checking for updates from open.iona.m2 [INFO] snapshot org.apache.camel:camel-groovy:1.3-SNAPSHOT: checking for updates from uface.m2 [INFO] snapshot org.apache.camel:camel-mina:1.3-SNAPSHOT: checking for updates from apache.incubating.releases [INFO] snapshot org.apache.camel:camel-mina:1.3-SNAPSHOT: checking for updates from apache.snapshots [INFO] snapshot org.apache.camel:camel-mina:1.3-SNAPSHOT: checking for updates from open.iona.m2 [INFO] snapshot org.apache.camel:camel-mina:1.3-SNAPSHOT: checking for updates from uface.m2 [INFO] snapshot org.apache.camel:camel-ftp:1.3-SNAPSHOT: checking for updates from apache.incubating.releases [INFO] snapshot org.apache.camel:camel-ftp:1.3-SNAPSHOT: checking for updates from apache.snapshots [INFO] snapshot org.apache.camel:camel-ftp:1.3-SNAPSHOT: checking for updates from open.iona.m2 [INFO] snapshot org.apache.camel:camel-ftp:1.3-SNAPSHOT: checking for updates from uface.m2 [INFO] snapshot org.apache.camel:camel-mail:1.3-SNAPSHOT: checking for updates from apache.incubating.releases [INFO] snapshot org.apache.camel:camel-mail:1.3-SNAPSHOT: checking for updates from apache.snapshots [INFO] snapshot org.apache.camel:camel-mail:1.3-SNAPSHOT: checking for updates from open.iona.m2 [INFO] snapshot org.apache.camel:camel-mail:1.3-SNAPSHOT: checking for updates from uface.m2 [INFO] snapshot org.apache.camel:camel-bam:1.3-SNAPSHOT: checking for updates from apache.incubating.releases [INFO] snapshot org.apache.camel:camel-bam:1.3-SNAPSHOT: checking for updates from apache.snapshots [INFO] snapshot org.apache.camel:camel-bam:1.3-SNAPSHOT: checking for updates from open.iona.m2 [INFO] snapshot org.apache.camel:camel-bam:1.3-SNAPSHOT: checking for updates from uface.m2 [INFO] snapshot org.apache.camel:camel-msv:1.3-SNAPSHOT: checking for updates from apache.incubating.releases [INFO] snapshot org.apache.camel:camel-msv:1.3-SNAPSHOT: checking for updates from apache.snapshots [INFO] snapshot org.apache.camel:camel-msv:1.3-SNAPSHOT: checking for updates from open.iona.m2 [INFO] snapshot org.apache.camel:camel-msv:1.3-SNAPSHOT: checking for updates from uface.m2 [INFO] snapshot org.apache.camel:camel-velocity:1.3-SNAPSHOT: checking for updates from apache.incubating.releases [INFO] snapshot org.apache.camel:camel-velocity:1.3-SNAPSHOT: checking for updates from apache.snapshots [INFO] snapshot org.apache.camel:camel-velocity:1.3-SNAPSHOT: checking for updates from open.iona.m2 [INFO] snapshot org.apache.camel:camel-velocity:1.3-SNAPSHOT: checking for updates from uface.m2 [INFO] snapshot org.apache.camel:camel-xmpp:1.3-SNAPSHOT: checking for updates from apache.incubating.releases [INFO] snapshot org.apache.camel:camel-xmpp:1.3-SNAPSHOT: checking for updates from apache.snapshots [INFO] snapshot org.apache.camel:camel-xmpp:1.3-SNAPSHOT: checking for updates from open.iona.m2 [INFO] snapshot org.apache.camel:camel-xmpp:1.3-SNAPSHOT: checking for updates from uface.m2 [INFO] snapshot org.apache.camel:camel-ibatis:1.3-SNAPSHOT: checking for updates from apache.incubating.releases [INFO] snapshot org.apache.camel:camel-ibatis:1.3-SNAPSHOT: checking for updates from apache.snapshots [INFO] snapshot org.apache.camel:camel-ibatis:1.3-SNAPSHOT: checking for updates from open.iona.m2 [INFO] snapshot org.apache.camel:camel-ibatis:1.3-SNAPSHOT: checking for updates from uface.m2 [INFO] snapshot org.apache.camel:camel-quartz:1.3-SNAPSHOT: checking for updates from apache.incubating.releases [INFO] snapshot org.apache.camel:camel-quartz:1.3-SNAPSHOT: checking for updates from apache.snapshots [INFO] snapshot org.apache.camel:camel-quartz:1.3-SNAPSHOT: checking for updates from open.iona.m2 [INFO] snapshot org.apache.camel:camel-quartz:1.3-SNAPSHOT: checking for updates from uface.m2 [INFO] snapshot org.apache.camel:camel-atom:1.3-SNAPSHOT: checking for updates from apache.incubating.releases [INFO] snapshot org.apache.camel:camel-atom:1.3-SNAPSHOT: checking for updates from apache.snapshots [INFO] snapshot org.apache.camel:camel-atom:1.3-SNAPSHOT: checking for updates from open.iona.m2 [INFO] snapshot org.apache.camel:camel-atom:1.3-SNAPSHOT: checking for updates from uface.m2 [INFO] snapshot org.apache.camel:camel-jetty:1.3-SNAPSHOT: checking for updates from apache.incubating.releases [INFO] snapshot org.apache.camel:camel-jetty:1.3-SNAPSHOT: checking for updates from apache.snapshots [INFO] snapshot org.apache.camel:camel-jetty:1.3-SNAPSHOT: checking for updates from open.iona.m2 [INFO] snapshot org.apache.camel:camel-jetty:1.3-SNAPSHOT: checking for updates from uface.m2 [INFO] snapshot org.apache.camel:camel-ognl:1.3-SNAPSHOT: checking for updates from apache.incubating.releases [INFO] snapshot org.apache.camel:camel-ognl:1.3-SNAPSHOT: checking for updates from apache.snapshots [INFO] snapshot org.apache.camel:camel-ognl:1.3-SNAPSHOT: checking for updates from open.iona.m2 [INFO] snapshot org.apache.camel:camel-ognl:1.3-SNAPSHOT: checking for updates from uface.m2 [INFO] snapshot org.apache.camel:camel-saxon:1.3-SNAPSHOT: checking for updates from apache.incubating.releases [INFO] snapshot org.apache.camel:camel-saxon:1.3-SNAPSHOT: checking for updates from apache.snapshots [INFO] snapshot org.apache.camel:camel-saxon:1.3-SNAPSHOT: checking for updates from open.iona.m2 [INFO] snapshot org.apache.camel:camel-saxon:1.3-SNAPSHOT: checking for updates from uface.m2 [INFO] snapshot org.apache.camel:camel-xmlbeans:1.3-SNAPSHOT: checking for updates from apache.incubating.releases [INFO] snapshot org.apache.camel:camel-xmlbeans:1.3-SNAPSHOT: checking for updates from apache.snapshots [INFO] snapshot org.apache.camel:camel-xmlbeans:1.3-SNAPSHOT: checking for updates from open.iona.m2 [INFO] snapshot org.apache.camel:camel-xmlbeans:1.3-SNAPSHOT: checking for updates from uface.m2 [INFO] snapshot org.apache.camel:camel-script:1.3-SNAPSHOT: checking for updates from apache.incubating.releases [INFO] snapshot org.apache.camel:camel-script:1.3-SNAPSHOT: checking for updates from apache.snapshots [INFO] snapshot org.apache.camel:camel-script:1.3-SNAPSHOT: checking for updates from open.iona.m2 [INFO] snapshot org.apache.camel:camel-script:1.3-SNAPSHOT: checking for updates from uface.m2 [INFO] snapshot org.apache.camel:camel-rmi:1.3-SNAPSHOT: checking for updates from apache.incubating.releases [INFO] snapshot org.apache.camel:camel-rmi:1.3-SNAPSHOT: checking for updates from apache.snapshots [INFO] snapshot org.apache.camel:camel-rmi:1.3-SNAPSHOT: checking for updates from open.iona.m2 [INFO] snapshot org.apache.camel:camel-rmi:1.3-SNAPSHOT: checking for updates from uface.m2 [INFO] snapshot org.apache.camel:camel-jcr:1.3-SNAPSHOT: checking for updates from apache.incubating.releases [INFO] snapshot org.apache.camel:camel-jcr:1.3-SNAPSHOT: checking for updates from apache.snapshots [INFO] snapshot org.apache.camel:camel-jcr:1.3-SNAPSHOT: checking for updates from open.iona.m2 [INFO] snapshot org.apache.camel:camel-jcr:1.3-SNAPSHOT: checking for updates from uface.m2 [INFO] snapshot org.apache.camel:camel-josql:1.3-SNAPSHOT: checking for updates from apache.incubating.releases [INFO] snapshot org.apache.camel:camel-josql:1.3-SNAPSHOT: checking for updates from apache.snapshots [INFO] snapshot org.apache.camel:camel-josql:1.3-SNAPSHOT: checking for updates from open.iona.m2 [INFO] snapshot org.apache.camel:camel-josql:1.3-SNAPSHOT: checking for updates from uface.m2 [INFO] snapshot org.apache.camel:camel-jxpath:1.3-SNAPSHOT: checking for updates from apache.incubating.releases [INFO] snapshot org.apache.camel:camel-jxpath:1.3-SNAPSHOT: checking for updates from apache.snapshots [INFO] snapshot org.apache.camel:camel-jxpath:1.3-SNAPSHOT: checking for updates from open.iona.m2 [INFO] snapshot org.apache.camel:camel-jxpath:1.3-SNAPSHOT: checking for updates from uface.m2 [INFO] snapshot org.apache.camel:camel-xstream:1.3-SNAPSHOT: checking for updates from apache.incubating.releases [INFO] snapshot org.apache.camel:camel-xstream:1.3-SNAPSHOT: checking for updates from apache.snapshots [INFO] snapshot org.apache.camel:camel-xstream:1.3-SNAPSHOT: checking for updates from open.iona.m2 [INFO] snapshot org.apache.camel:camel-xstream:1.3-SNAPSHOT: checking for updates from uface.m2 [INFO] snapshot org.apache.camel:camel-csv:1.3-SNAPSHOT: checking for updates from apache.incubating.releases [INFO] snapshot org.apache.camel:camel-csv:1.3-SNAPSHOT: checking for updates from apache.snapshots [INFO] snapshot org.apache.camel:camel-csv:1.3-SNAPSHOT: checking for updates from open.iona.m2 [INFO] snapshot org.apache.camel:camel-csv:1.3-SNAPSHOT: checking for updates from uface.m2 [INFO] snapshot org.apache.camel:camel-jdbc:1.3-SNAPSHOT: checking for updates from apache.incubating.releases [INFO] snapshot org.apache.camel:camel-jdbc:1.3-SNAPSHOT: checking for updates from apache.snapshots [INFO] snapshot org.apache.camel:camel-jdbc:1.3-SNAPSHOT: checking for updates from open.iona.m2 [INFO] snapshot org.apache.camel:camel-jdbc:1.3-SNAPSHOT: checking for updates from uface.m2 [INFO] snapshot org.apache.camel:camel-jing:1.3-SNAPSHOT: checking for updates from apache.incubating.releases [INFO] snapshot org.apache.camel:camel-jing:1.3-SNAPSHOT: checking for updates from apache.snapshots [INFO] snapshot org.apache.camel:camel-jing:1.3-SNAPSHOT: checking for updates from open.iona.m2 [INFO] snapshot org.apache.camel:camel-jing:1.3-SNAPSHOT: checking for updates from uface.m2 [INFO] snapshot org.apache.camel:camel-jhc:1.3-SNAPSHOT: checking for updates from apache.incubating.releases [INFO] snapshot org.apache.camel:camel-jhc:1.3-SNAPSHOT: checking for updates from apache.snapshots [INFO] snapshot org.apache.camel:camel-jhc:1.3-SNAPSHOT: checking for updates from open.iona.m2 [INFO] snapshot org.apache.camel:camel-jhc:1.3-SNAPSHOT: checking for updates from uface.m2 [INFO] snapshot org.apache.camel:camel-stringtemplate:1.3-SNAPSHOT: checking for updates from apache.incubating.releases [INFO] snapshot org.apache.camel:camel-stringtemplate:1.3-SNAPSHOT: checking for updates from apache.snapshots [INFO] snapshot org.apache.camel:camel-stringtemplate:1.3-SNAPSHOT: checking for updates from open.iona.m2 [INFO] snapshot org.apache.camel:camel-stringtemplate:1.3-SNAPSHOT: checking for updates from uface.m2 [INFO] snapshot org.apache.camel:camel-stream:1.3-SNAPSHOT: checking for updates from apache.incubating.releases [INFO] snapshot org.apache.camel:camel-stream:1.3-SNAPSHOT: checking for updates from apache.snapshots [INFO] snapshot org.apache.camel:camel-stream:1.3-SNAPSHOT: checking for updates from open.iona.m2 [INFO] snapshot org.apache.camel:camel-stream:1.3-SNAPSHOT: checking for updates from uface.m2 [INFO] snapshot org.apache.camel:camel-jaxb:1.3-SNAPSHOT: checking for updates from apache.incubating.releases [INFO] snapshot org.apache.camel:camel-jaxb:1.3-SNAPSHOT: checking for updates from apache.snapshots [INFO] snapshot org.apache.camel:camel-jaxb:1.3-SNAPSHOT: checking for updates from open.iona.m2 [INFO] snapshot org.apache.camel:camel-jaxb:1.3-SNAPSHOT: checking for updates from uface.m2 [INFO] snapshot org.apache.camel:camel-jpa:1.3-SNAPSHOT: checking for updates from apache.incubating.releases [INFO] snapshot org.apache.camel:camel-jpa:1.3-SNAPSHOT: checking for updates from apache.snapshots [INFO] snapshot org.apache.camel:camel-jpa:1.3-SNAPSHOT: checking for updates from open.iona.m2 [INFO] snapshot org.apache.camel:camel-jpa:1.3-SNAPSHOT: checking for updates from uface.m2 [INFO] snapshot org.apache.camel:camel-irc:1.3-SNAPSHOT: checking for updates from apache.incubating.releases [INFO] snapshot org.apache.camel:camel-irc:1.3-SNAPSHOT: checking for updates from apache.snapshots [INFO] snapshot org.apache.camel:camel-irc:1.3-SNAPSHOT: checking for updates from open.iona.m2 [INFO] snapshot org.apache.camel:camel-irc:1.3-SNAPSHOT: checking for updates from uface.m2 [INFO] snapshot org.apache.camel:camel-cxf:1.3-SNAPSHOT: checking for updates from apache.incubating.releases [INFO] snapshot org.apache.camel:camel-cxf:1.3-SNAPSHOT: checking for updates from apache.snapshots [INFO] snapshot org.apache.camel:camel-cxf:1.3-SNAPSHOT: checking for updates from open.iona.m2 [INFO] snapshot org.apache.camel:camel-cxf:1.3-SNAPSHOT: checking for updates from uface.m2 [INFO] [compiler:compile] [INFO] No sources to compile [INFO] [resources:testResources] [INFO] Using default encoding to copy filtered resources. [WARNING] POM for 'org.iso_relax.verifier.jaxp.validation:isorelax-jaxp-bridge:pom:1.0:compile' is invalid. It will be ignored for artifact resolution. Reason: Not a v4.0.0 POM. for project org.iso_relax.verifier.jaxp.validation:isorelax-jaxp-bridge at /Users/jstrachan/.m2/repository/org/iso_relax/verifier/jaxp/validation/isorelax-jaxp-bridge/1.0/isorelax-jaxp-bridge-1.0.pom [INFO] [compiler:testCompile] [INFO] Not compiling test sources [WARNING] POM for 'org.iso_relax.verifier.jaxp.validation:isorelax-jaxp-bridge:pom:1.0:compile' is invalid. It will be ignored for artifact resolution. Reason: Not a v4.0.0 POM. for project org.iso_relax.verifier.jaxp.validation:isorelax-jaxp-bridge at /Users/jstrachan/.m2/repository/org/iso_relax/verifier/jaxp/validation/isorelax-jaxp-bridge/1.0/isorelax-jaxp-bridge-1.0.pom [INFO] [surefire:test] [INFO] Tests are skipped. [WARNING] POM for 'org.iso_relax.verifier.jaxp.validation:isorelax-jaxp-bridge:pom:1.0:compile' is invalid. It will be ignored for artifact resolution. Reason: Not a v4.0.0 POM. for project org.iso_relax.verifier.jaxp.validation:isorelax-jaxp-bridge at /Users/jstrachan/.m2/repository/org/iso_relax/verifier/jaxp/validation/isorelax-jaxp-bridge/1.0/isorelax-jaxp-bridge-1.0.pom [INFO] [jar:jar] [INFO] Building jar: /workspace/java/camel/apache-camel/target/apache-camel-1.3-SNAPSHOT.jar [INFO] [dependency:unpack  {execution: unpack-camel-core-javadoc} ] [INFO] Configured Artifact: org.apache.camel:camel-core:javadoc:1.3-SNAPSHOT:jar [INFO] Unpacking /Users/jstrachan/.m2/repository/org/apache/camel/camel-core/1.3-SNAPSHOT/camel-core-1.3-SNAPSHOT-javadoc.jarto  /workspace/java/camel/apache-camel/target/javadoc/camel-core with Includes null and excludes:null [INFO] [dependency:unpack  {execution: unpack-camel-spring-javadoc} ] [INFO] Configured Artifact: org.apache.camel:camel-spring:javadoc:1.3-SNAPSHOT:jar Downloading: http://people.apache.org/repo/m2-incubating-repository/org/apache/camel/camel-spring/1.3-SNAPSHOT/camel-spring-1.3-SNAPSHOT-javadoc.jar Downloading: http://people.apache.org/repo/m2-snapshot-repository/org/apache/camel/camel-spring/1.3-SNAPSHOT/camel-spring-1.3-SNAPSHOT-javadoc.jar Downloading: http://repo.open.iona.com/maven2/org/apache/camel/camel-spring/1.3-SNAPSHOT/camel-spring-1.3-SNAPSHOT-javadoc.jar Downloading: http://uface.googlecode.com/svn/maven//org/apache/camel/camel-spring/1.3-SNAPSHOT/camel-spring-1.3-SNAPSHOT-javadoc.jar [INFO] ------------------------------------------------------------------------ [ERROR] BUILD ERROR [INFO] ------------------------------------------------------------------------ [INFO] Failed to resolve artifact.  GroupId: org.apache.camel ArtifactId: camel-spring Version: 1.3-SNAPSHOT  Reason: Unable to download the artifact from any repository  Try downloading the file manually from the project website.  Then  install it using the command:      mvn install:install-file -DgroupId=org.apache.camel -DartifactId=camel-spring -Dversion=1.3-SNAPSHOT -Dclassifier=javadoc -Dpackaging=jar -Dfile=/path/to/file  Alternatively  if you host your own repository you can deploy the file there:      mvn deploy:deploy-file -DgroupId=org.apache.camel -DartifactId=camel-spring -Dversion=1.3-SNAPSHOT -Dclassifier=javadoc -Dpackaging=jar -Dfile=/path/to/file -Durl=[url] -DrepositoryId=[id]     org.apache.camel:camel-spring:jar:1.3-SNAPSHOT  from the specified remote repositories:   central (http://repo1.maven.org/maven2)    apache.snapshots (http://people.apache.org/repo/m2-snapshot-repository)    uface.m2 (http://uface.googlecode.com/svn/maven/)    open.iona.m2 (http://repo.open.iona.com/maven2)    apache.incubating.releases (http://people.apache.org/repo/m2-incubating-repository),It doesn't work on my windows either.. The build error is caused by the camel-spring module do not pack the java doc. I just submitted a patch to fix this bug.. I get this error now. Looks like you want to get hold of 900megs  I am on JDK1.5.0_11  [WARNING] Warning building bundle org.apache.camel:camel-spring:bundle:1.3-SNAPSHOT : Did not find matching referal for !javax.xml.bind.annotation.adapters [INFO] [antrun:run  {execution: package}  ] [INFO] Executing tasks [echo] Deleting unwanted resources from the test-jar [delete] Deleting: D:\project\camel\components\camel-spring\target\test-classes\log4j.properties [INFO] Executed tasks [INFO] [javadoc:jar  {execution: package}  ] [WARNING] -top option is not supported on Java version < 1.6. Ignore this option. Error occurred during initialization of VM Could not reserve enough space for object heap [INFO] ------------------------------------------------------------------------ [ERROR] BUILD ERROR [INFO] ------------------------------------------------------------------------ [INFO] Error while creating archive:Exit code: 1 - Could not create the Java virtual machine.  Command line was:d:\jdk1.5.0_11\jre\..\bin\javadoc.exe -J-Xmx900m @options @packages  [INFO] ------------------------------------------------------------------------ [INFO] For more information  run Maven with the -e switch [INFO] ------------------------------------------------------------------------ [INFO] Total time: 1 minute 18 seconds [INFO] Finished at: Wed Mar 26 19:02:07 CET 2008 [INFO] Final Memory: 36M/65M. Reducing to 512mb in pom.xml works on my machine now  <maxmemory>512m</maxmemory>. This patch is in the svn repository.. Closed all 1.3 tickets. 
New Feature,Claus Ibsen,2008-03-26T09:25:08+0000,1206523508,Hi   It should be nice if in a next relase of Camel  it will be possible to map the content of a CSV file to a POJO using @annotation.  For the moment  I use an ArrayList + iterator (see code hereafter) to achieve the extraction of the content but I'm sure that we can simplify this code using @Annotation and the following action (.convertBodyTo(Order<List>) by example.  Current situation  Camel route  from("file:///c:/temp/test?noop=true") .unmarshal().csv() .to("bean:converter?methodName=TransformMessage"); --> should be replaced by something like .convertBodyTo(Order<List>)  Converter class          public void TransformMessage(Exchange in)  {                 process(in.getIn().getBody(List.class));         }          @SuppressWarnings("unchecked")         private void process(List messages) {                  // Iterate through the list of messages                 for (Iterator<ArrayList> it = messages.iterator(); it.hasNext()  {                          // Split the content of the message into field                         message = it.next();                         field = (String[]) message.toArray();                          order = new Order();                         order.setId(Integer.valueOf(field[0]).intValue());                         order.setBank(field[1]);                         order.setAmountFrom(Double.parseDouble(field[2]));                         order.setAmountTo(Double.parseDouble(field[3]));                         order.setOrderInstruction(field[4].trim());                         this.orderService.createOrder(order);                  }         }  Regards   Charles,Charles  I think this is possible today?  You can add your own type-converters that will be picked up automatically by camel: http://activemq.apache.org/camel/type-converter.html. Hi   I'm very proud to propose you the first version of Camel bindy component. The attachment contains a maven project.  1) Introduction  "bindy" Why  the idea behind this framework is to bind data to Java Bean using annotations. The framework in this first release allows a user to bind a CSV record to more than one POJOs and to convert the data according to the type of the java property (for more info  look to the folder org.apache.camel.bindy.model & model2 of folder src/test/java).  The annotation used to detect data field is :  @DataField : only the pos attribute is mandatory  patterns can be provided date  byte  float  double  integer  long  number and short format   The objects created can be link together in an one to one relation  @Link public Client client;  The CSV separator is defined through the @record annotation :  @Record(separator =" ")  2) Example  A) Model with 2 classes linked (Order has a reference to client)  @Record(separator =" ") public class Order {  @DataField(pos = 0) public int orderNr;  @Link public Client client;  @DataField(pos = 4) public String ISIN_Code;  @DataField(name = "Name"  pos = 5) public String Instrument_Name;  @DataField(pos = 6) public String Quantity;  @DataField(pos = 7) public String Currency;  @DataField(pos = 8  pattern="dd-MM-yyyy") public Date OrderDate;  public class Client {  @DataField(pos = 1) public String clientNr;  @DataField(pos = 2) public String FirstName;  @DataField(pos = 3) public String LastName;  B) CSV record  10 A1 Julia Roberts BE123456789 Belgium Ventage 10/12 150 USD 14-01-2009  where we have two model classes Order.class and Client.class linked (Order has a reference to client)  C) Objects generated  {org.apache.camel.bindy.model.Order=Model : org.apache.camel.bindy.model.Order : 10  150  BE123456789  Belgium Ventage 10/12  USD  Model : org.apache.camel.bindy.model.Client : A1  Julia  Roberts Wed Jan 14 16:30:30 CET 2009  org.apache.camel.bindy.model.Client=Model : org.apache.camel.bindy.model.Client : A1  Julia  Roberts}  Remarks :  Two camel junit tests have been added to test the marshalling and unmarshalling In the next step  it will be possible to bind also fixed length content (including header and footer).  Any remarks  comments are welcome  Charles. Hi Charles  Nice. I havent had the time to look much into it. This is just some thoughts. Some might already be fixed.  But could you package it in a sub folder (camel-bindy) so it creates this folder name Fix pom.xml to be aligned with the other camel component pom.xml files pom.xml dependencies for unit test should have scope test so the runtime dependencies are minimal use commons logging for logging use a log4j.properties in src/test/resources that is like the other log4j.properties from the other components use Apache license header remove @author or fix it as @author your name (note: we normally dont have @author in camel code)  You can run unit testing with cobertura to check for gaps  I think the command is: mvn cobertura:cobertura test  When I get done with my work on the Tracer then I have time to look some more.  And I am sure James would look as well.. Hi Claus   I will update my project according to your rermarks and coming back today with a new attachment.. @All   Here is a new attachement updated according to your remarks. Small modifications have been added to the camel-bindy component to avoid errors when a blnak line is present in the CSV file or empty fields. File compressed using zip format.. Comments on first impression  interfaces should always be fully javadoced (especially if others should use or implement em) the classloading should be changed to use Camel classes and be OSGi friendly dependency on camel-spring should only be scope for test (= unit testing) Would it not be nice that each POJO should be annoted at classlevel as well (Client.java does not have etc.) Why are the fields in the model objects public? We should support private fields and use getter/setter to access them LinkType? Doesnt hibernate have a similar feature and maybe there is a better name? ModelFactory if its a shared instance then it need locking for concurrent access (we can address this later) BindyDataFormat might be renamed to BindyCsvDataFormat (its nice when the classname has this important piece in its name) use Camel type converter to convert from String to byte[] as it will handle encoding as well (exch.getContext().getTypeConverter().convertTo(byte[].class  exch  exch) in BindyDataFormat In unmarshal we should use a java.util.Scanner if we for instance is reading a very big file and can reduce memory usage code needs to be polished a bit. If you use IDEA it reports  Well we get that later ModelFactory should probably have an interface and a DefaultModelFactory implementatiion format.impl is not a nice package name - just use format I dont think you should use threadlocal to store pattern formatters. Yes they are not thread safe (damm SUN). creating objects is not expensive anymore! ByteFormat - new Byte(String) is not the right one to use - use parseByte instead. We could probably use generics for the format  so the API is nicer (we can check that later). interfaces should always be fully javadoced (especially if others should use or implement em) >> I'm currently working on code documentation. My first release was not fully documented because I would like to have your feedback prior to do this job (depending on the modification requested and the refactory required  ..) the classloading should be changed to use Camel classes and be OSGi friendly. >> I will check how to use Camel ResolverUtil dependency on camel-spring should only be scope for test (= unit testing) >> ok. Removed form the pom.xml Would it not be nice that each POJO should be annoted at classlevel as well (Client.java does not have etc.) >> Client is not annoted at class level because it is a slave of order class. So  this is not required. Moreover  we need only one 'root class' where the separator is defined. Why are the fields in the model objects public? We should support private fields and use getter/setter to access them >> I will check this point again and adapt the code. I have changed from private to public due to introspection. LinkType? Doesnt hibernate have a similar feature and maybe there is a better name? >> I have discovered last week that Hibernate use the following annotation @OnetoMany concerning the link type. So maybe  we can follow this convention ? ModelFactory if its a shared instance then it need locking for concurrent access (we can address this later) >> IF my code is correct. Only one instance of the modelfactory is created for each Dataformat(packageName) instance created BindyDataFormat might be renamed to BindyCsvDataFormat (its nice when the classname has this important piece in its name) >> OK. Is the name that you propose not redundant with the fact that this class is in the package org.apache.camel.bindy.csv ? use Camel type converter to convert from String to byte[] as it will handle encoding as well (exch.getContext().getTypeConverter().convertTo(byte[].class  exch  exch) in BindyDataFormat >> ok In unmarshal we should use a java.util.Scanner if we for instance is reading a very big file and can reduce memory usage >> ok code needs to be polished a bit. If you use IDEA it reports Well we get that later >> I use Eclipse. What do you want that I do  use the camel formating style ? ModelFactory should probably have an interface and a DefaultModelFactory implementatiion >> Absolutely format.impl is not a nice package name - just use format >> ok I dont think you should use threadlocal to store pattern formatters. Yes they are not thread safe (damm SUN). creating objects is not expensive anymore! >> This code is coming from my colleague. It will be happy that he must change it ByteFormat - new Byte(String) is not the right one to use - use parseByte instead. >> same remark as before We could probably use generics for the format  so the API is nicer (we can check that later) >> If you have an example  this will help me ?  Question : What do you think about the hashmap (HashMap<String  Object> modelObjects = new HashMap<String  Object>() ? Do you think that this is a good idea to use hashmap and class name as key ?. Is it right for you if I create a version readme.txt file where I will put the changes made in the camel-bindy component and add it to the zip ?  remark : in this case  we will avoid to pollute too much this jira ticket.. I have added a new zip where some of your remarks have been implemented. See the readme.txt file concerning the points implemented.. v0.95 comments  methods in interface must also be fully javadoced  BindyFactory  throws Exception is pain to work with. But I can see we have this flaw in Camels DataFormat interface throws ClassNotFoundException should be removed as well. Nobody can recover from this one  why is createModel() as void? The name kinda expects it to return a Object as model or something? Find a better name if it should be void retrieveSeparator() maybe getSeparator is a better name? bind - consider using List<String> instead of String[] as arrays is pain to work with in Java if parameter objects is the same in bind/unbind then the parameter should have same name  eg: models  Format  T should be used a type in methods: public String format(T object) public T parse(String string)  BindyCsvFactory  Program against interface. Use Map x = new HashMap instead of HashMap x = new HashMap and your class attributes should be private and not public! Use ObjectHelper.notEmpty for testing if a String is not empty. Use ObjectHelper.notNull to test if a mandatory parameter is not null etc. use // for code comments inside methods and not /* */ blocks why are you using a sortedmap in unbind? You can use a LinkedHashMap then the order is preserved. That is the original insert order is the same order you can iterate unbind should not use a fixed comma as separator but from the getSeparator method getFormat would be nice to be moved into a FormatFactory so other implementation can reuse it  BindyCsvDataFormat  separator should be mandatory. So you can use ObjectHelper.notEmpty() to force it be be given. Better to fail due a missing separator than to just ignore it and not unmarshal anything. scanner close id one twice. only do it in the finally  NumberPattern is still using the threadlocal stuff  please remove it. See readme.txt file for modifications done. javadoc updated and /* */ removed. v0.96 review ==========  Maybe a bit overkill with byte char short data formats as they are kinda newer used CharacterFormat#format: Can you not just do: return object.toString(); to format it as a String? PatternFormat needs type as well: public interface PatternFormat<T> extends Format<T> Data pattern should use the Date as type public class DatePatternFormat implements PatternFormat<Date> The same for all xxxFormat they should add the type they are  eg Double public class DoubleFormat implements Format<Double> The PatternFormat: remember to test for pattern is not null ObjectHelper.notNull(pattern  "pattern") in the parse/format methods NumberPatternFormat could be abstract BigDecimal how do you set its scale and other parameters? BindyFactory: The model object Map<String  Object>. Please document what the key is? (= the string). And the value is the POJO BindyCsvFactory a) I still think you should not sort the keys in unbind. I think it should use the same order as the data is in the model map. You can use a LinkedHashMap for the model map then the data have the same order as its added b) In Unbind I dont see a newline anywhere. Should you not add a newline after each record?. v0.97 review ========== BindyCsvFactory  why not use a boolean for skipFirstLine instead of string. Its confusing to use y or n when its really a boolean getCsvRecordParameters() does no return anything. Please rename it to initCsvRecordParameters() all method is public. please use protected / private for methods that should not be exposed mapLinkField is never used (= no read from it  only put into it) findXX methods does not return anything. Consider renaming them to initXXX instead you are using this for empty test: data.get(pos).equals("") what if the string is an space? " " well that is hard to tell I guess if it should be consider empty or not? Ah we use field access for setting values. We should use setXXX instead. Dont worry Camel has such support org.apache.camel.util.IntrospectionSupport.setProperties You should use this class instead (we do this in Camel internally as well). This code is hard to read: format = FormatFactory.getFormat(field.getType()  dataField.pattern() != null ? dataField.pattern() : null  dataField.precision()); Consider getting the Pattern as a local variable first and call it as format = FormatFactory.getFormat(field.getType()  pattern  dataField.precision()); You are doing the notNull test in the while loop. You should do this outside (before) ObjectHelper.notNull(this.separator  "The separator has not been instantiated or property not defined in the @CsvRecord annotation"); This method throws 3 exceptions: When creating new instances of a class you can use org.apache.camel.util.ObjectHelper as it will handle all the nasty exception for you (we do that internally in Camel) You are using 999 as default for precision. Why not use 0? ObjectHelper.notNull(this.pattern  "No pattern defined."); Just set the text as "pattern" as the notNull method will add a text description that pattern is null. => otNull(this.pattern  "pattern");  Other  getDateFormat() you can just do: return new SimpleDateFormat(pattern); dont javadoc methods that is already javadoced at the interface (such as all the format and parse methods in all the xxxFormat classes) The class javadoc for BindyCsvDataFormat says its about XML ??? If you see the code from IDEA there are many hints for the code that can be fixed (doesnt Eclipse help you there? code that is not used  auto boxing  etc. etc.) use string equals for string comparision. you can not use == or != in java for strings. (result.get(firstPosition) != ""). Camel-bindy v0.98 is there. Thanks a lot to Charles Moulliard for donating this new great component to Camel.  Its committed to trunk. Committed revision 738783 to trunk. Closing 2.0m1 tickets. 
Bug,Hadrian Zbarcea,2008-03-26T10:40:46+0000,1206528046,handleAll() section in tryBlock() swallows exceptions even if they were not catched by some handle() section so intended behavior that should mimic finally keyword from java is not accomplished.,Patch applied.. just one thought: handleAll sounds like catch(Throwable) to me  to mimic the finally keyword I would expect a finallyBlock() that matches the tryBlock().. The patch for this issue breaks the build.  We should also clarify the semantics based on Gary's comment. Since handleAll could be achieved with a handle(Throwable)  the missing semantics would be that of a finally block  as Roman assumed  but then we should probably change the dsl from 'handleAll' to 'finally'.  I am going to do that if there's no objection  in addition to fixing the failing test.. Closed all 1.3 tickets. 
Improvement,Willem Jiang,2008-03-26T17:57:25+0000,1206554245,During some patches for came-mina (setting encoding option) I discovered that the camel type converters does not support a 2nd parameter such as a charset to be able to convert using bytes using a user set charset encoding.  Currently the JVM default encoding will most likely be used.,Remember to document it in the wiki. Updated the wiki.. 
Improvement,Unassigned,2008-03-26T21:50:52+0000,1206568252,Filtering on a header that contains a string with a hyphen  the following works:  from(file://temp).filter(header(FileComponent.HEADER_FILE_NAME).matchesRegex(".-.")).to("mock:result");  but contains is more natural and should also work.   from(file://temp).filter(header(FileComponent.HEADER_FILE_NAME).contains("-")).to("mock:result");  It does not as contains() is focused on collections and reduces to checking equality on single values. A string specialisation could use string.contains.,this fix adds a specialisation to ObjectHelper.contains to that the contains predicate will work with strings.. This patch has string-contains behavior only  when expression evaluates directly to String  while any other type is converted into collection/iterator and has collection-contains behavior. This is different than other such constructs when we implicitly convert things to string (or any other required type). In this case we cannot do it  because anything could be converted both into String (with toString()) and into Iterator (with single element). If we want to have string-contains functionality I would recommend to simply rename those methods somehow  so they are different like stringContains() and hasElement(). Then it would be clear what they do. The patch is OK  but then we can deprecate contains() method and prefer to use one  that explicitly defines if it tries to convert body into String or Collection.  Honestly saying I was fooled by this name once already and I thought it is string-contains - I had to look into the code to actually find what it does so I agree that it is an issue   My $0.02. on the patch  I figured a single String can be considered as a collection of characters so collection-contains behaviour is maintained.  Thanks for the feedback.. Patch applied with thanks!. 
Improvement,Unassigned,2008-03-27T12:32:31+0000,1206621151,see the discussion here : http://www.nabble.com/extract-xml-from-URL-and-save-to-file-tp16232121s22882p16308137.html,We actually already have it in 2.0 with the enrich and pollEnrich DSL. 
Improvement,Hadrian Zbarcea,2008-03-28T02:41:39+0000,1206672099,Current camel trunk 's httpcore-version is  <httpcore-version>4.0-alpha6</httpcore-version> httpcore has released a -beta1 version,Move the httpcore upgrade issue to this JIRA. I don't see a version of httpcore-niossl using that version - maybe wait for a newer release?. camel-jhc needs to be upgraded to the API changes in httpcore beta2. Hi Willem here is a pom.xml file with newer versions  that I have been used to track down what versions is avail now.. Doh this is the correct patch file for the pom. Closing all 1.5.0 issues. 
Bug,Claus Ibsen,2008-03-28T05:51:11+0000,1206683471,Get the javadoc warnings reported by the javadoc generator fixed.,And unused imports as well. Progress:  camel-core (301 warnings) fixed camel-cxf (11 warnings fixed) camel-http (1 warning fixed) camel-jms (17 warnings fixed) camel-mail (21 warnings fixed) camel-rmi (7 warnings fixed) camel-script (18 warnings fixed) camel-spring (5 warnings fixed) camel-xmpp (18 warnings fixed). Okay got the warnings.  However the javadoc could use an overhaul  leaving this for another ticket.. 
Sub-task,Unassigned,2008-03-28T06:36:39+0000,1206686199,,Moving to 2.0. DataSet is not that much used so we wont focus to much on improving it. Closing all resolved tickets from 2010 or older. 
Improvement,Unassigned,2008-03-28T08:46:23+0000,1206693983,Ensure we can generate the DOT files for multiple camel contexts,you can try this out by running  mvn clean camel:dot   on a clean checkout & build in the examples/camel-example-docs project which has multiple camelContext elements defined. Closed all 1.3 tickets. 
Bug,Unassigned,2008-03-28T10:56:00+0000,1206701760,I've defined an http endpoint by this code :         this.from("jetty:https://localhost:8193/SSLTest/")               .process(new Processor());  When I install my application in Tomcat 6.0.13 it throws this exception :  2008-03-18 20:05:42.998::WARN:  EXCEPTION java.security.UnrecoverableKeyException: Password must not be null         at sun.security.provider.JavaKeyStore.engineGetKey(JavaKeyStore.java:107)         at sun.security.provider.JavaKeyStore$JKS.engineGetKey(JavaKeyStore.java:38)         at java.security.KeyStore.getKey(KeyStore.java:763)         at com.sun.net.ssl.internal.ssl.SunX509KeyManagerImpl.<init>(SunX509KeyManagerImpl.java:113)         at com.sun.net.ssl.internal.ssl.KeyManagerFactoryImpl$SunX509.engineInit(KeyManagerFactoryImpl.java:48)         at javax.net.ssl.KeyManagerFactory.init(KeyManagerFactory.java:239)         at org.mortbay.jetty.security.SslSocketConnector.createFactory(SslSocketConnector.java:202)         at org.mortbay.jetty.security.SslSocketConnector.newServerSocket(SslSocketConnector.java:407)         at org.mortbay.jetty.bio.SocketConnector.open(SocketConnector.java:73)         at org.mortbay.jetty.AbstractConnector.doStart(AbstractConnector.java:272)         at org.mortbay.jetty.bio.SocketConnector.doStart(SocketConnector.java:147)         at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:39)         at org.apache.camel.component.jetty.JettyHttpComponent.connect(JettyHttpComponent.java:98)         at org.apache.camel.component.http.HttpEndpoint.connect(HttpEndpoint.java:80)         at org.apache.camel.component.http.HttpConsumer.doStart(HttpConsumer.java:50)         at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:51)         at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:64)         at org.apache.camel.impl.DefaultCamelContext.startRoutes(DefaultCamelContext.java:461)         at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:435)         at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:140)         at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:51)         at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:96)         at org.springframework.context.event.SimpleApplicationEventMulticaster$1.run(SimpleApplicationEventMulticaster.java:77)         at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:49)         at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:75)         at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:246)         at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:355)         at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:91)         at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:75)         at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:65)         at it.unibas.springfreesbee.ContextStartup.contextInitialized(ContextStartup.java:43)         at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:3827)         at org.apache.catalina.core.StandardContext.start(StandardContext.java:4334)         at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:791)         at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:771)         at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:525)         at org.apache.catalina.startup.HostConfig.deployDescriptor(HostConfig.java:626)         at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:511)         at org.apache.catalina.startup.HostConfig.check(HostConfig.java:1220)         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)         at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)         at java.lang.reflect.Method.invoke(Method.java:597)         at org.apache.tomcat.util.modeler.BaseModelMBean.invoke(BaseModelMBean.java:297)         at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:836)         at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:761)         at org.apache.catalina.manager.ManagerServlet.check(ManagerServlet.java:1458)         at org.apache.catalina.manager.ManagerServlet.deploy(ManagerServlet.java:820)         at org.apache.catalina.manager.ManagerServlet.doGet(ManagerServlet.java:354)         at javax.servlet.http.HttpServlet.service(HttpServlet.java:690)         at javax.servlet.http.HttpServlet.service(HttpServlet.java:803)         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)         at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:230)         at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:175)         at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:525)         at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128)         at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:104)         at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)         at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:261)         at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:844)         at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:581)         at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:447)         at java.lang.Thread.run(Thread.java:619) 2008-03-18 20:05:42.012::WARN:  failed SslSocketConnector@0.0.0.0:8193 java.io.IOException: Could not create JsseListener: java.security.UnrecoverableKeyException: Password must not be null         at org.mortbay.jetty.security.SslSocketConnector.newServerSocket(SslSocketConnector.java:446)         at org.mortbay.jetty.bio.SocketConnector.open(SocketConnector.java:73)         at org.mortbay.jetty.AbstractConnector.doStart(AbstractConnector.java:272)         at org.mortbay.jetty.bio.SocketConnector.doStart(SocketConnector.java:147)         at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:39)         at org.apache.camel.component.jetty.JettyHttpComponent.connect(JettyHttpComponent.java:98)         at org.apache.camel.component.http.HttpEndpoint.connect(HttpEndpoint.java:80)         at org.apache.camel.component.http.HttpConsumer.doStart(HttpConsumer.java:50)         at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:51)         at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:64)         at org.apache.camel.impl.DefaultCamelContext.startRoutes(DefaultCamelContext.java:461)         at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:435)         at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:140)         at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:51)         at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:96)         at org.springframework.context.event.SimpleApplicationEventMulticaster$1.run(SimpleApplicationEventMulticaster.java:77)         at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:49)         at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:75)         at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:246)         at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:355)         at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:91)         at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:75)         at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:65)         at it.unibas.springfreesbee.ContextStartup.contextInitialized(ContextStartup.java:43)         at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:3827)         at org.apache.catalina.core.StandardContext.start(StandardContext.java:4334)         at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:791)         at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:771)         at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:525)         at org.apache.catalina.startup.HostConfig.deployDescriptor(HostConfig.java:626)         at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:511)         at org.apache.catalina.startup.HostConfig.check(HostConfig.java:1220)         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)         at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)         at java.lang.reflect.Method.invoke(Method.java:597)         at org.apache.tomcat.util.modeler.BaseModelMBean.invoke(BaseModelMBean.java:297)         at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:836)         at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:761)         at org.apache.catalina.manager.ManagerServlet.check(ManagerServlet.java:1458)         at org.apache.catalina.manager.ManagerServlet.deploy(ManagerServlet.java:820)         at org.apache.catalina.manager.ManagerServlet.doGet(ManagerServlet.java:354)         at javax.servlet.http.HttpServlet.service(HttpServlet.java:690)         at javax.servlet.http.HttpServlet.service(HttpServlet.java:803)         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)         at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:230)         at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:175)         at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:525)         at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128)         at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:104)         at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)         at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:261)         at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:844)         at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:581)         at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:447)         at java.lang.Thread.run(Thread.java:619) ERROR [it.unibas.springfreesbee.ContextStartup - contextInitialized] - org.apache.camel.RuntimeCamelException: java.io.IOException: Could not create JsseListener: java.security.UnrecoverableKeyException: Password must not be null  I have follow all steps of jetty ssl configuration  but the error is the same with both keytool and openssl applications.  I think that problems are in routing because if I set only       this.from("jetty:https://localhost:8193/SSLTest/");  There aren't installation problems in Tomcat  when I access to the endpoint by browser it ask the acceptance of certificate. In this case there is another exception at runtime :  2008-03-26 18:56:14.933::WARN:  handle failed java.lang.NullPointerException         at org.mortbay.thread.BoundedThreadPool.isLowOnThreads(BoundedThreadPool.java:216)         at org.mortbay.jetty.bio.SocketConnector$Connection.run(SocketConnector.java:218)         at org.mortbay.jetty.security.SslSocketConnector$SslConnection.run(SslSocketConnector.java:620)         at org.mortbay.thread.BoundedThreadPool$PoolThread.run(BoundedThreadPool.java:450),I think this is now resolved in trunk - I'll spin up a separate JIRA for a test case once we've figured out how to get the certs & stuff working with maven/junit. I run the HttpRouteTest with https protocol  but receive the following error :  [junit] DEBUG [temp.TestHttpRoute - tearDown] - tearDown test: testHelloEndpoint [junit] ------------- ---------------- --------------- [junit] ------------- Standard Error ----------------- [junit] 2008-04-02 12:50:52.776::INFO: Logging to STDERR via org.mortbay.log.StdErrLog [junit] 2008-04-02 12:50:52.881::INFO: jetty-6.1.8 [junit] 2008-04-02 12:50:52.169::INFO: Started SslSocketConnector@0.0.0.0:18196 [junit] 2008-04-02 12:50:52.618::WARN: EXCEPTION [junit] javax.net.ssl.SSLHandshakeException: Received fatal alert: certificate_unknown [junit] at com.sun.net.ssl.internal.ssl.Alerts.getSSLException(Alerts.java:174) [junit] at com.sun.net.ssl.internal.ssl.Alerts.getSSLException(Alerts.java:136) [junit] at com.sun.net.ssl.internal.ssl.SSLSocketImpl.recvAlert(SSLSocketImpl.java:1657) [junit] at com.sun.net.ssl.internal.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:932) [junit] at com.sun.net.ssl.internal.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1096) [junit] at com.sun.net.ssl.internal.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1123) [junit] at com.sun.net.ssl.internal.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1107) [junit] at org.mortbay.jetty.security.SslSocketConnector$SslConnection.run(SslSocketConnector.java:615) [junit] at org.mortbay.thread.BoundedThreadPool$PoolThread.run(BoundedThreadPool.java:450) [junit] 2008-04-02 12:50:52.733::INFO: jetty-6.1.8 [junit] 2008-04-02 12:50:52.738::INFO: Started SslSocketConnector@0.0.0.0:18196 [junit] 2008-04-02 12:50:52.747::WARN: EXCEPTION [junit] javax.net.ssl.SSLHandshakeException: Received fatal alert: certificate_unknown [junit] at com.sun.net.ssl.internal.ssl.Alerts.getSSLException(Alerts.java:174) [junit] at com.sun.net.ssl.internal.ssl.Alerts.getSSLException(Alerts.java:136) [junit] at com.sun.net.ssl.internal.ssl.SSLSocketImpl.recvAlert(SSLSocketImpl.java:1657) [junit] at com.sun.net.ssl.internal.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:932) [junit] at com.sun.net.ssl.internal.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1096) [junit] at com.sun.net.ssl.internal.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1123) [junit] at com.sun.net.ssl.internal.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1107) [junit] at org.mortbay.jetty.security.SslSocketConnector$SslConnection.run(SslSocketConnector.java:615) [junit] at org.mortbay.thread.BoundedThreadPool$PoolThread.run(BoundedThreadPool.java:450) [junit] ------------- ---------------- --------------- [junit] [junit] Testcase: testEndpoint took 1 136 sec [junit] Caused an ERROR [junit] javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target [junit] org.apache.camel.RuntimeCamelException: javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target [junit] at org.apache.camel.util.ProducerCache.send(ProducerCache.java:86) [junit] at org.apache.camel.CamelTemplate.send(CamelTemplate.java:119) [junit] at org.apache.camel.CamelTemplate.sendBodyAndHeader(CamelTemplate.java:225) [junit] at org.apache.camel.CamelTemplate.sendBodyAndHeader(CamelTemplate.java:211) [junit] at it.unibas.icar.temp.TestHttpRoute.invokeHttpEndpoint(TestHttpRoute.java:59) [junit] at it.unibas.icar.temp.TestHttpRoute.testEndpoint(TestHttpRoute.java:27) [junit] Caused by: javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target [junit] at com.sun.net.ssl.internal.ssl.Alerts.getSSLException(Alerts.java:174) [junit] at com.sun.net.ssl.internal.ssl.SSLSocketImpl.fatal(SSLSocketImpl.java:1591) [junit] at com.sun.net.ssl.internal.ssl.Handshaker.fatalSE(Handshaker.java:187) [junit] at com.sun.net.ssl.internal.ssl.Handshaker.fatalSE(Handshaker.java:181) [junit] at com.sun.net.ssl.internal.ssl.ClientHandshaker.serverCertificate(ClientHandshaker.java:975) [junit] at com.sun.net.ssl.internal.ssl.ClientHandshaker.processMessage(ClientHandshaker.java:123) [junit] at com.sun.net.ssl.internal.ssl.Handshaker.processLoop(Handshaker.java:516) [junit] at com.sun.net.ssl.internal.ssl.Handshaker.process_record(Handshaker.java:454) [junit] at com.sun.net.ssl.internal.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:884) [junit] at com.sun.net.ssl.internal.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1096) [junit] at com.sun.net.ssl.internal.ssl.SSLSocketImpl.writeRecord(SSLSocketImpl.java:623) [junit] at com.sun.net.ssl.internal.ssl.AppOutputStream.write(AppOutputStream.java:59) [junit] at java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:65) [junit] at java.io.BufferedOutputStream.flush(BufferedOutputStream.java:123) [junit] at java.io.FilterOutputStream.flush(FilterOutputStream.java:123) [junit] at org.apache.commons.httpclient.methods.EntityEnclosingMethod.writeRequestBody(EntityEnclosingMethod.java:506) [junit] at org.apache.commons.httpclient.HttpMethodBase.writeRequest(HttpMethodBase.java:2110) [junit] at org.apache.commons.httpclient.HttpMethodBase.execute(HttpMethodBase.java:1088) [junit] at org.apache.commons.httpclient.HttpMethodDirector.executeWithRetry(HttpMethodDirector.java:398) [junit] at org.apache.commons.httpclient.HttpMethodDirector.executeMethod(HttpMethodDirector.java:171) [junit] at org.apache.commons.httpclient.HttpClient.executeMethod(HttpClient.java:397) [junit] at org.apache.commons.httpclient.HttpClient.executeMethod(HttpClient.java:323) [junit] at org.apache.camel.component.http.HttpProducer.process(HttpProducer.java:59) [junit] at org.apache.camel.util.ProducerCache.sendExchange(ProducerCache.java:147) [junit] at org.apache.camel.util.ProducerCache.send(ProducerCache.java:84) [junit] Caused by: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target [junit] at sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:285) [junit] at sun.security.validator.PKIXValidator.engineValidate(PKIXValidator.java:191) [junit] at sun.security.validator.Validator.validate(Validator.java:218) [junit] at com.sun.net.ssl.internal.ssl.X509TrustManagerImpl.validate(X509TrustManagerImpl.java:126) [junit] at com.sun.net.ssl.internal.ssl.X509TrustManagerImpl.checkServerTrusted(X509TrustManagerImpl.java:209) [junit] at com.sun.net.ssl.internal.ssl.X509TrustManagerImpl.checkServerTrusted(X509TrustManagerImpl.java:249) [junit] at com.sun.net.ssl.internal.ssl.ClientHandshaker.serverCertificate(ClientHandshaker.java:954) [junit] Caused by: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target [junit] at sun.security.provider.certpath.SunCertPathBuilder.engineBuild(SunCertPathBuilder.java:174) [junit] at java.security.cert.CertPathBuilder.build(CertPathBuilder.java:238) [junit] at sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:280) [junit] [junit] Testcase: testHelloEndpoint took 0 222 sec [junit] Caused an ERROR [junit] sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target [junit] javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target [junit] at com.sun.net.ssl.internal.ssl.Alerts.getSSLException(Alerts.java:174) [junit] at com.sun.net.ssl.internal.ssl.SSLSocketImpl.fatal(SSLSocketImpl.java:1591) [junit] at com.sun.net.ssl.internal.ssl.Handshaker.fatalSE(Handshaker.java:187) [junit] at com.sun.net.ssl.internal.ssl.Handshaker.fatalSE(Handshaker.java:181) [junit] at com.sun.net.ssl.internal.ssl.ClientHandshaker.serverCertificate(ClientHandshaker.java:975) [junit] at com.sun.net.ssl.internal.ssl.ClientHandshaker.processMessage(ClientHandshaker.java:123) [junit] at com.sun.net.ssl.internal.ssl.Handshaker.processLoop(Handshaker.java:516) [junit] at com.sun.net.ssl.internal.ssl.Handshaker.process_record(Handshaker.java:454) [junit] at com.sun.net.ssl.internal.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:884) [junit] at com.sun.net.ssl.internal.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1096) [junit] at com.sun.net.ssl.internal.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1123) [junit] at com.sun.net.ssl.internal.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1107) [junit] at sun.net.www.protocol.https.HttpsClient.afterConnect(HttpsClient.java:405) [junit] at sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.connect(AbstractDelegateHttpsURLConnection.java:166) [junit] at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:977) [junit] at sun.net.www.protocol.https.HttpsURLConnectionImpl.getInputStream(HttpsURLConnectionImpl.java:234) [junit] at java.net.URL.openStream(URL.java:1009) [junit] at it.unibas.icar.temp.TestHttpRoute.testHelloEndpoint(TestHttpRoute.java:47) [junit] Caused by: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target [junit] at sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:285) [junit] at sun.security.validator.PKIXValidator.engineValidate(PKIXValidator.java:191) [junit] at sun.security.validator.Validator.validate(Validator.java:218) [junit] at com.sun.net.ssl.internal.ssl.X509TrustManagerImpl.validate(X509TrustManagerImpl.java:126) [junit] at com.sun.net.ssl.internal.ssl.X509TrustManagerImpl.checkServerTrusted(X509TrustManagerImpl.java:209) [junit] at com.sun.net.ssl.internal.ssl.X509TrustManagerImpl.checkServerTrusted(X509TrustManagerImpl.java:249) [junit] at com.sun.net.ssl.internal.ssl.ClientHandshaker.serverCertificate(ClientHandshaker.java:954) [junit] Caused by: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target [junit] at sun.security.provider.certpath.SunCertPathBuilder.engineBuild(SunCertPathBuilder.java:174) [junit] at java.security.cert.CertPathBuilder.build(CertPathBuilder.java:238) [junit] at sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:280) [junit] [junit] Test it.unibas.icar.temp.TestHttpRoute FAILED. I run personalized HttpRouteTest with https protocol but I receive the following error :  [junit] DEBUG [temp.TestHttpsRoute - tearDown] - tearDown test: testHelloEndpoint [junit] ------------- ---------------- --------------- [junit] ------------- Standard Error ----------------- [junit] 2008-04-02 12:50:52.776::INFO: Logging to STDERR via org.mortbay.log.StdErrLog [junit] 2008-04-02 12:50:52.881::INFO: jetty-6.1.8 [junit] 2008-04-02 12:50:52.169::INFO: Started SslSocketConnector@0.0.0.0:18196 [junit] 2008-04-02 12:50:52.618::WARN: EXCEPTION [junit] javax.net.ssl.SSLHandshakeException: Received fatal alert: certificate_unknown [junit] at com.sun.net.ssl.internal.ssl.Alerts.getSSLException(Alerts.java:174) [junit] at com.sun.net.ssl.internal.ssl.Alerts.getSSLException(Alerts.java:136) [junit] at com.sun.net.ssl.internal.ssl.SSLSocketImpl.recvAlert(SSLSocketImpl.java:1657) [junit] at com.sun.net.ssl.internal.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:932) [junit] at com.sun.net.ssl.internal.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1096) [junit] at com.sun.net.ssl.internal.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1123) [junit] at com.sun.net.ssl.internal.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1107) [junit] at org.mortbay.jetty.security.SslSocketConnector$SslConnection.run(SslSocketConnector.java:615) [junit] at org.mortbay.thread.BoundedThreadPool$PoolThread.run(BoundedThreadPool.java:450) [junit] 2008-04-02 12:50:52.733::INFO: jetty-6.1.8 [junit] 2008-04-02 12:50:52.738::INFO: Started SslSocketConnector@0.0.0.0:18196 [junit] 2008-04-02 12:50:52.747::WARN: EXCEPTION [junit] javax.net.ssl.SSLHandshakeException: Received fatal alert: certificate_unknown [junit] at com.sun.net.ssl.internal.ssl.Alerts.getSSLException(Alerts.java:174) [junit] at com.sun.net.ssl.internal.ssl.Alerts.getSSLException(Alerts.java:136) [junit] at com.sun.net.ssl.internal.ssl.SSLSocketImpl.recvAlert(SSLSocketImpl.java:1657) [junit] at com.sun.net.ssl.internal.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:932) [junit] at com.sun.net.ssl.internal.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1096) [junit] at com.sun.net.ssl.internal.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1123) [junit] at com.sun.net.ssl.internal.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1107) [junit] at org.mortbay.jetty.security.SslSocketConnector$SslConnection.run(SslSocketConnector.java:615) [junit] at org.mortbay.thread.BoundedThreadPool$PoolThread.run(BoundedThreadPool.java:450) [junit] ------------- ---------------- --------------- [junit] [junit] Testcase: testEndpoint took 1 136 sec [junit] Caused an ERROR [junit] javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target [junit] org.apache.camel.RuntimeCamelException: javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target [junit] at org.apache.camel.util.ProducerCache.send(ProducerCache.java:86) [junit] at org.apache.camel.CamelTemplate.send(CamelTemplate.java:119) [junit] at org.apache.camel.CamelTemplate.sendBodyAndHeader(CamelTemplate.java:225) [junit] at org.apache.camel.CamelTemplate.sendBodyAndHeader(CamelTemplate.java:211) [junit] at it.unibas.icar.temp.TestHttpRoute.invokeHttpEndpoint(TestHttpRoute.java:59) [junit] at it.unibas.icar.temp.TestHttpRoute.testEndpoint(TestHttpRoute.java:27) [junit] Caused by: javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target [junit] at com.sun.net.ssl.internal.ssl.Alerts.getSSLException(Alerts.java:174) [junit] at com.sun.net.ssl.internal.ssl.SSLSocketImpl.fatal(SSLSocketImpl.java:1591) [junit] at com.sun.net.ssl.internal.ssl.Handshaker.fatalSE(Handshaker.java:187) [junit] at com.sun.net.ssl.internal.ssl.Handshaker.fatalSE(Handshaker.java:181) [junit] at com.sun.net.ssl.internal.ssl.ClientHandshaker.serverCertificate(ClientHandshaker.java:975) [junit] at com.sun.net.ssl.internal.ssl.ClientHandshaker.processMessage(ClientHandshaker.java:123) [junit] at com.sun.net.ssl.internal.ssl.Handshaker.processLoop(Handshaker.java:516) [junit] at com.sun.net.ssl.internal.ssl.Handshaker.process_record(Handshaker.java:454) [junit] at com.sun.net.ssl.internal.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:884) [junit] at com.sun.net.ssl.internal.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1096) [junit] at com.sun.net.ssl.internal.ssl.SSLSocketImpl.writeRecord(SSLSocketImpl.java:623) [junit] at com.sun.net.ssl.internal.ssl.AppOutputStream.write(AppOutputStream.java:59) [junit] at java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:65) [junit] at java.io.BufferedOutputStream.flush(BufferedOutputStream.java:123) [junit] at java.io.FilterOutputStream.flush(FilterOutputStream.java:123) [junit] at org.apache.commons.httpclient.methods.EntityEnclosingMethod.writeRequestBody(EntityEnclosingMethod.java:506) [junit] at org.apache.commons.httpclient.HttpMethodBase.writeRequest(HttpMethodBase.java:2110) [junit] at org.apache.commons.httpclient.HttpMethodBase.execute(HttpMethodBase.java:1088) [junit] at org.apache.commons.httpclient.HttpMethodDirector.executeWithRetry(HttpMethodDirector.java:398) [junit] at org.apache.commons.httpclient.HttpMethodDirector.executeMethod(HttpMethodDirector.java:171) [junit] at org.apache.commons.httpclient.HttpClient.executeMethod(HttpClient.java:397) [junit] at org.apache.commons.httpclient.HttpClient.executeMethod(HttpClient.java:323) [junit] at org.apache.camel.component.http.HttpProducer.process(HttpProducer.java:59) [junit] at org.apache.camel.util.ProducerCache.sendExchange(ProducerCache.java:147) [junit] at org.apache.camel.util.ProducerCache.send(ProducerCache.java:84) [junit] Caused by: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target [junit] at sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:285) [junit] at sun.security.validator.PKIXValidator.engineValidate(PKIXValidator.java:191) [junit] at sun.security.validator.Validator.validate(Validator.java:218) [junit] at com.sun.net.ssl.internal.ssl.X509TrustManagerImpl.validate(X509TrustManagerImpl.java:126) [junit] at com.sun.net.ssl.internal.ssl.X509TrustManagerImpl.checkServerTrusted(X509TrustManagerImpl.java:209) [junit] at com.sun.net.ssl.internal.ssl.X509TrustManagerImpl.checkServerTrusted(X509TrustManagerImpl.java:249) [junit] at com.sun.net.ssl.internal.ssl.ClientHandshaker.serverCertificate(ClientHandshaker.java:954) [junit] Caused by: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target [junit] at sun.security.provider.certpath.SunCertPathBuilder.engineBuild(SunCertPathBuilder.java:174) [junit] at java.security.cert.CertPathBuilder.build(CertPathBuilder.java:238) [junit] at sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:280) [junit] [junit] Testcase: testHelloEndpoint took 0 222 sec [junit] Caused an ERROR [junit] sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target [junit] javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target [junit] at com.sun.net.ssl.internal.ssl.Alerts.getSSLException(Alerts.java:174) [junit] at com.sun.net.ssl.internal.ssl.SSLSocketImpl.fatal(SSLSocketImpl.java:1591) [junit] at com.sun.net.ssl.internal.ssl.Handshaker.fatalSE(Handshaker.java:187) [junit] at com.sun.net.ssl.internal.ssl.Handshaker.fatalSE(Handshaker.java:181) [junit] at com.sun.net.ssl.internal.ssl.ClientHandshaker.serverCertificate(ClientHandshaker.java:975) [junit] at com.sun.net.ssl.internal.ssl.ClientHandshaker.processMessage(ClientHandshaker.java:123) [junit] at com.sun.net.ssl.internal.ssl.Handshaker.processLoop(Handshaker.java:516) [junit] at com.sun.net.ssl.internal.ssl.Handshaker.process_record(Handshaker.java:454) [junit] at com.sun.net.ssl.internal.ssl.SSLSocketImpl.readRecord(SSLSocketImpl.java:884) [junit] at com.sun.net.ssl.internal.ssl.SSLSocketImpl.performInitialHandshake(SSLSocketImpl.java:1096) [junit] at com.sun.net.ssl.internal.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1123) [junit] at com.sun.net.ssl.internal.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:1107) [junit] at sun.net.www.protocol.https.HttpsClient.afterConnect(HttpsClient.java:405) [junit] at sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection.connect(AbstractDelegateHttpsURLConnection.java:166) [junit] at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:977) [junit] at sun.net.www.protocol.https.HttpsURLConnectionImpl.getInputStream(HttpsURLConnectionImpl.java:234) [junit] at java.net.URL.openStream(URL.java:1009) [junit] at it.unibas.icar.temp.TestHttpRoute.testHelloEndpoint(TestHttpRoute.java:47) [junit] Caused by: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target [junit] at sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:285) [junit] at sun.security.validator.PKIXValidator.engineValidate(PKIXValidator.java:191) [junit] at sun.security.validator.Validator.validate(Validator.java:218) [junit] at com.sun.net.ssl.internal.ssl.X509TrustManagerImpl.validate(X509TrustManagerImpl.java:126) [junit] at com.sun.net.ssl.internal.ssl.X509TrustManagerImpl.checkServerTrusted(X509TrustManagerImpl.java:209) [junit] at com.sun.net.ssl.internal.ssl.X509TrustManagerImpl.checkServerTrusted(X509TrustManagerImpl.java:249) [junit] at com.sun.net.ssl.internal.ssl.ClientHandshaker.serverCertificate(ClientHandshaker.java:954) [junit] Caused by: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target [junit] at sun.security.provider.certpath.SunCertPathBuilder.engineBuild(SunCertPathBuilder.java:174) [junit] at java.security.cert.CertPathBuilder.build(CertPathBuilder.java:238) [junit] at sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:280) [junit] [junit] Test temp.TestHttpsRoute FAILED. for: Caused by: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target see a good explination @ http://blogs.sun.com/andreas/entry/no_more_unable_to_find  Essentially the problem is that the cert is self signed or does not use a hostname as the CN component. The blog post and referenced code should help.  For my test I used a a jetty client (which uses apache commons httpclient) and added a protocol handler that will not validate the servers cert. Configuring the default jdk httpClient is probably a little different.  return new RouteBuilder() { public void configure() {  Protocol easyhttps = new Protocol("https"  new EasySSLProtocolSocketFactory()  8080); Protocol.registerProtocol("https"  easyhttps);  from("jetty:https://localhost:8080/test").to("mock:a");  Processor proc = new Processor() { public void process(Exchange exchange) throws Exception  { exchange.getOut(true).setBody("<b>Hello World</b>"); }  }; from("jetty:https://localhost:8080/hello").process(proc); } };  where EasySSLProtocolSocketFactory is @ http://svn.apache.org/viewvc/httpcomponents/oac.hc3x/trunk/src/contrib/org/apache/commons/httpclient/contrib/ssl/EasySSLProtocolSocketFactory.java?view=markup  more doco for httpClient @ http://hc.apache.org/httpclient-3.x/sslguide.html  This is all to work around the use of a self-signed cert which is a little bogus.  The alternative is to use a real valid signed cert from one of the approved authorities and add it to the keystore.. James  I think is a good solution to set getter and setter methods for SslSocketConnector in JettyHttpComponent with which one can set (for example) the keystore path or anything else.  If you want to consider this suggestion I have attached file with this patch. I have uploaded the HttpsRouteTest to https://issues.apache.org/activemq/browse/CAMEL-409?focusedCommentId=42164#action_42164  I added an exception test that verifies a SocketException on access to the https endpoint via http which works as expected. I don't get a status 200 ok. This is from the jdk URLConnection  not from a camel consumer however. I need to try the camel consumer.. just added another test and resubmitted the patch to CAMEL-409. The camel consumer throws an exception as expected when a http endpoint is invoked from http.. Closed all 1.3 tickets. 
Sub-task,Jonathan Anstey,2008-03-28T12:49:04+0000,1206708544,Fancy improving the docs a little for this page...  http://cwiki.apache.org/CAMEL/routing-slip.html  many thanks!,Updated the wiki doc here http://cwiki.apache.org/confluence/display/CAMEL/Routing+Slip. We should state on the wiki doc that this is only avail from v1.4 onwards.. Good point. I've added an entry to this effect.. It did make it in the 1.3 after all. So I have changed the wiki documents.. Closed all 1.3 tickets. 
Sub-task,Gary Tully,2008-03-28T19:01:42+0000,1206730902,,jetty HttpsRouteTest - uses ssl attributes on JettyHttpComponent and system property for jsse client trust store configuration. The keystore  localhost.ks is binary so it is not part of this patch.. components\camel-jetty\src\test\resources\jsse\localhost.ks a binary keystore file.  the contents of this file were created with: keytool -genkey -alias server -keystore localhost.ks using passwords: changeit and name components with value: localhost  The cert is used by the https endpoint and made available to the clients via their truststore so that the server cert can be validated. The cert is self signed. This is a dummy cert that is useful only for testing. The use of localhost as the OU and CN allows the cert to pass spoofing validation as implemented by the jdk jsse implementation.. this patch superseeds the camel-409.patch file. It adds an additional negative test for camel http component calling https endpoint and expects an exception.. Gary thanks a lot for all the hard work creating such a patch. We will definitely add it to Camel.. Gary  I think is a good solution to set getter and setter methods for SslSocketConnector in JettyHttpComponent so that one can set (for example) the keystore path or anything else.  If you want to consider this suggestion I have attached file of jetty component with this patch implemented. Micky  yea  that is a far better idea than replicating all of the Ssl attributes on JettyHttpComponent. One thing to note is that in order for the jsse system properties to be picked up by the SssSocketConnector  a call to the setter methods is required  hense the default values of "" for the key and keystore passwords in the JettyHttpComponent. Without that we get the "no password" error. Best may be to lazily initialize the SslSocketConnector and call the setters if a user has not already provided an instance.. Gary could you provide a final patch with your and Mickys latest suggesting included.  I will then be able to commit the patch. It is a great addition to Camel.. adds sslsocketConnector accessor along with simple default sslPassword and sslKeyPassword that will solicit the default jetty behaviour of looking for jetty system properties or prompting the user. If your config needs are simple  the accessors will work  if they are more complex  the ability to set the sslsocketconnector should be used. added another test that uses the sslsocketconnector accesor. Comitted to trunk  CAMEL-409 Added unit tests for Jetty doing https. With huge thanks to Gary Tully and Micky Santomax for the patches. 
Bug,Claus Ibsen,2008-03-28T19:51:00+0000,1206733860,When you configure your route builder and say you want to configure two exceptions lets say: NullPointer and Exception.   Now say the bean you call as your end point throws a NullPointer  wouldn't you think the NullPointer policy would handle that exception?   Well I'm seeing sometimes it does and sometimes it doesn't due to the map not keeping the exceptions in any particular order.  Is there anyway this could be changed to a LinkedHashMap or a List?  Issue with class: org.apache.camel.processor.ErrorHandlerSupport,Dan could you re attach you patch with the license to ASF granted. We can not apply patches that we do not hold rights for.  When you attach a file to an existing ticket there is a tick box to grant this license.. Dan do you have a snippet of your camel context cofiguration where you have the exceåtions configured.  I would like to create a unit test that tests this problem.  Looking at the ErrorHandlerSupport code it would use the first found Exception that isInstanceof so it could potentially find a less specific type exception that was not the best suited.. That's the problem we are experiencing. The camel context configuration only encounters this problem sometimes. I would be more than happy to make a unit test to prove that this is a problem  but it seems to be...impossible since the IdentityHashMap is ignoring the hashcode method and is going directly to a native method to resolve the hashcode.  If you discover a way to test this and get it consistently to fail I would like to see how you did it.. Here is the unit test I was working on. It was consistently failing for me  but you may see different results. :0(. Thanks Dan for the unit test.  I was also looking for a camel context configuration eg. with the fluent builder (DSL) that demonstrates the use-case with configuration using several exceptions and an exchange between endpoints etc.  Dan if you have relevant parts of the camel context configuration in question that only encounters the problem sometimes  then please attach this material also.. Dan I can not get the unit test to fail on my system.  However I do think we need an example using the DSL configuration to see how the ExecptionType configures the DeadLetterChannel that extends the ErrorHandlerSupport. So this is why I am calling for your camel route configuration that only encounters this problem sometimes.. This is our base RouteBuilder that sets up the general error handling.. Dan  thanks for the new attachment. I can reproduce the bug here. Camel pick ups java.lang.Exception at first even though there is a exact match such as NPE.. I got something better now that finds the best suited exception type configured for the given thrown exception.  The code need a little polishing and some more testing.. Target for 1.3 release. I am introducing a strategy to resolve which is the best exception type to handle the thrown exception in questions. The default strategy will be to use the exception that is the closets match to the thrown exception.  eg. java.net.ConnectionException will match java.io.IOException eg. CamelExchangeException will match CamelException eg. MyBusinessException will match MyBaseBusinessException eg. NullPointerException will match Exception  Well you might get the picture.  A different strategy could be to use the ordering of how the exceptions was configured. Use the fist match that can handle it etc (top-down).. Moving it to 1.4 release.  1.3 is about to be released really soon.. Fixed in trunk now wtih wiki documentation at Error Handler and Dead Letter Channel.  See also the unit tests for details etc.. Closing 1.4 issues. 
Sub-task,Jonathan Anstey,2008-03-28T20:34:33+0000,1206736473,,Add routing slip test case to camel-spring. Also added snippet for the upcoming wiki doc.. Applied the patch with thanks. Closed all 1.3 tickets. 
Bug,Claus Ibsen,2008-03-29T15:04:28+0000,1206803068,Though the intent seemed to be there  the DotMojo does not skip conversion of the file if there is no value for <executable/> in the pom.xml.  The parameter was defaulted.  #. removed the default. #. added log message.,I've applied half of your patch - that if the executable property is empty or null then the generation is skipped.  BTW its maybe an idea not to reformat the code before sending patches in the future  its kinda hard to see what you really did   I'm not sure if we should remove the default executable name for DOT. Its up to users to use the plugin or not - you can also use maven profiles to only enable the plugin if its activated and so forth. So I like the idea of the plugin invoking "dot" on the path by default (as thats gonna work on most OSes).  Maybe to disable the use of dot we can just use another property? I've added a useDot property so folks can disable the running of dot - would that do the trick?. This ticket is a new solution to avoid using dot.exe (GraphicViz). Kevin have you seen the option to setup the executable at http://activemq.apache.org/camel/camel-dot-maven-goal.html where you can configure the DOT.exe to use (on windows).  And if patch is meant to be include then please provide a patch that doesn't change the current code style in Camel.. Claus  I'm aware of how to set the executable  I mention this in the description of the issue. I don't want it to execute any dot program  I just want the dot file to be generated so that I can view in Graphviz for Mac. It will automatically render for me when I choose to view it.  I think James has the right idea. If the doc page you referenced were updated to reflect the additional that James made  this could be resolved without further work or application of the patch.. James / Kevin  How do you actually configued the new option useDot to eg set it to false? I am not a super maven wizard and have tried with  mvn camel:dot Is what I used to start it  -DuseDot=false <useDot>false</useDot> in the pom.xml in the configuration tag.  But neither fails.  Also in the source code runCamelEmbedded() it has hardcoded useDot to true  mojo.setDotEnabled(true);  Shouldn't it honor the useDot option instead so it should be mojo.setDotEnabled(useDot);. To show this in use I've disabled the dot invocation in examples/camel-example-spring-xquery    <reporting>     <plugins>       <plugin>         <groupId>org.apache.camel</groupId>         <artifactId>camel-maven-plugin</artifactId>         <configuration>           <useDot>false</useDot>         </configuration>       </plugin>     </plugins>   </reporting>. I updated the wiki with James example. Closing 1.4 issues. 
New Feature,Unassigned,2008-03-29T16:31:12+0000,1206808272,For ease of unit testing  I separate distinct routes under different camel contexts.  Unit testing is then quite easy  but DOT generation is really not a good representation when seeking to view the system as a whole.  This is a patch to camel-spring (Main.java)  and the camel-maven-plugin.  It allows the optional pom.xml configuration parameter (as well as a new Main.java parameter) to allow routes to be aggregated for the purposes of DOT generation only.  Aggregation should have no impact on the runtime  and routes should not be started again.,Any chance you could re-cut the patches without reformatting all the code? Its really hard to see what you actually changed. Sorry  we have auto-format on save here  somewhat mandatory so we don't run into this exact situation (amongst our own team). I'll take a look and try to generate another patch.. Ok  I believe the new patches should be good. I replaced from the repo then copied over the changes and generated a new patch.. Patch applied  thanks!. Closed all 1.3 tickets. 
Test,Jonathan Anstey,2008-03-29T17:34:35+0000,1206812075,I forgot to add in a test for this when I updated the MockEndpoint recently...,Jon the patch has not been granted ASF rights. Could you reattach the patch with these rights so I can commit it to the trunk?. Jon if you fancy we have a better method on the ContextTextSupport to get hold of a MockEndpoint  resolveMandatoryEndpoint("mock:result"  MockEndpoint.class)   should be replaced with  getMockEndpoint("mock:result");. Oh yeah  getMockEndpoint is much nicer   Here is the updated patch. Thanks!. Applied patch with thanks to Jonathan. 
Bug,Claus Ibsen,2008-03-30T14:23:43+0000,1206887023,public MulticastType multicast(AggregationStrategy aggregationStrategy  boolean parallelProcessing) {         MulticastType answer = new MulticastType();         addOutput(answer);         answer.setAggregationStrategy(aggregationStrategy);         answer.setParallelProcessing(true);         return answer;     }    The parameter parallelProcessing is never used. setParallelProcessing is always true.,Fixed by  answer.setParallelProcessing(parallelProcessing);. 
Improvement,Claus Ibsen,2008-03-30T15:32:05+0000,1206891125,Upgraded dependencies  	Spring from 2.5.1 to 2.5.3 	OpenJPA 0.9.6-incubator to 1.0.2    Apache Felix has released v1.2.1 and v1.4.0 - we are running v1.2.0,There seems to be checksum errors on the repos  [WARNING] *** CHECKSUM FAILED - Checksum failed on download: local = 'db09de3099b694e88076052aaf428d5252 Downloading: http://repo1.maven.org/maven2//org/springframework/spring-test/2.5.2/spring-test-2.5.2.pom. Or Spring 2.5.3 when its about to be released.. Spring upgraded to 2.5.3. Open JPA fails to upgraded to 1.0.2  INFO] Executing tasks openjpa-1.0.0-r420667:568756 fatal user error> org.apache.openjpa.util.MetaDataException: MetaDataFactory could not be configured (conf.newMetaDataFactoryInstance() returned null). This might mean that no configuration properties were found. Ensure that you have a META-INF/persistence.xml file  tha it is available in your classpath  or that the properties file you are using for configuration is available. If you are using Ant  please see the <properties> or <propertiesFile> attributes of the task's nested <config> element. This can also occur if your OpenJPA distribution jars are corrupt  or if your security policy is overly strict. at org.apache.openjpa.meta.MetaDataRepository.initializeMetaDataFactory(MetaDataRepository.java:1520) at org.apache.openjpa.meta.MetaDataRepository.endConfiguration(MetaDataRepository.java:1513) at org.apache.openjpa.lib.conf.Configurations.configureInstance(Configurations.java:467). Upgraded to Spring 2.5.3. 
Improvement,Unassigned,2008-04-01T04:37:11+0000,1207024631,<groupId>com.jcraft</groupId>    <artifactId>jsch</artifactId>    <version>0.1.31</version>     jsch has released 0.1.37. The current version we have is getting older. Seems like they have improved quite a bit on the SFTP part so its relevant for Camel.  Can be a problem to find a newer version on a maven repo,We have fixed this by another ticket number. 
New Feature,Unassigned,2008-04-01T05:42:31+0000,1207028551,Folks have issues installing Graphviz  it'd be nice to see if we can do better using Eclipse / Zest / GEF...  See  http://www.eclipse.org/mylyn/zest.php http://wiki.eclipse.org/index.php/Mylar_Zest_Visualization,Thread that spawned this  http://www.nabble.com/Remote-images-not-resolving-in-camel-example-docs-td16373419s22882.html. This looks an interesting project; I've not been able to build it yet mind you  but it does look really promising!   http://www.nabble.com/an-camel-route-view-td18572319s22882.html. just moved to 1.5.0 in hope it happens that fast  we can always push it back if it doesn't get done in time. Moving to 2.0. Lets keep 3rd part to create visual tooling and stuff for Camel. We should focus on the core.. 
New Feature,Unassigned,2008-04-01T10:46:21+0000,1207046781,Scala appears to be a promising language for building DSLs and it integrates very well with Java.,Initial contribution  it just does basic routing/filter/pipeline/multicast for now.  There are two main DSL syntax variants:  a very short one that allows you to quickly specify from().to() a more elaborate one  that uses blocks and should be able to support all the other Java DSL features more easily. How about adding a page to the wiki to keep track of the DSL development progress and documenting it as we move along? I guess we could use JIRA sub-tasks as well  but the list might grow very long and it would probably just be cluttering JIRA and the mailing list.. Added a basic CBR implementation and test to this patch (which contains everything  so it supersedes the tarball). Patch applied with huge thanks - this is awesome!  BTW I applied the diff which is newer right?. James   Yes  the diff is newer than the tarball. How do you think we should track progress on the new DSL  using the wiki or rather do it all in JIRA (see earlier comments)?  Gert. What about both? I think we need jira  as this is the best way to ensure we don't drop the ball. A wiki page would be a better way to add coordinate the work and could link to jiras. My $0.02.. Closing 1.4 issues.. 
Bug,Claus Ibsen,2008-04-01T11:46:17+0000,1207050377,See this forum: http://www.nabble.com/FTP-to-FILE-td16354813s22882.html  Problems:  	Using ASCII you need to use convertBodyTo(String.class) to let it work out of the box Fixed 	Using BINARY we need some Type Converters to let it consume files from a FTP Server and store it as a File Fixed 	You have to set the filename using the header in the configuration otherwise the filename can be wrong Fixed,The binary transfer type could also be a problem.. The binary is failing out-of-the-box as we do not provide type converters. I got it working now with binary files.. Does camel FTP support using the remote FTP filename to use as filename when writing to a file if not configured to a fixed filename using the header propery                  String fileUrl = "file:target/ftptest/?noop=true";                 from(ftpUrl).setHeader(FileComponent.HEADER_FILE_NAME  constant("deleteme.jpg")).                         to(fileUrl  "mock:result");   Does it work with the setHeader? And use the remote filename from the FTP Server?  No it does not: camel tries to store the file using concatted filename as: java.io.FileNotFoundException: target\ftptest\localhost:\tmp4\camel\logo.jpeg (The filename  directory name  or volume label syntax is incorrect)  To culprint: FileProducer.createFileName(Message msg) is bogus. It does not handle remote filenames to well.. Comitted missing file converters to trunk so we can consume binary files (download binary files). We are changing a default option on the FTPConsumer in Camel 1.4.  Camel 1.3 setNames=false  Camel 1.4 setNames=true  The issue is tracked in CAMEL-420.  The issue is that Camel in v1.3 or below does not default to use the filenames from the downloaded files from the FTP Server. So you as the end user have to explicity set a filename if you want to eg. store the downaloded file directly to a local file etc using the File component.  An example (Camel 1.3)  String fileUrl = "file:target/ftptest/?append=false&noop=true"; String ftpUrl = "ftp://admin@localhost:21/tmp3/camel?password=admin&binary=false";  from(ftpUrl).setHeader(FileComponent.HEADER_FILE_NAME  constant("deleteme.txt")). convertBodyTo(String.class).to(fileUrl);   In the example above we have to set an filename using the setHeader option with the special key FileComponent.HEADER_FILE_NAME  If we just want to use the filename from the FTP Server we have to do this in Camel 1.3. Set the setNames option to true. So the ftpUrl is:  String ftpUrl = "ftp://admin@localhost:21/tmp3/camel?password=admin&binary=false&consume r.setNames=true";   In Camel 1.4 the default value of consumer.setNames is true as opposed to false in Camel 1.3  So in Camel 1.4 it works out of the box that Camel will use the filename from the FTP Server if you have not explicity set a new filename using the setHeader(FileComponent.HEADER_FILE_NAME  "mynewfilename.txt")  So the Camel 1.4 example is:  String fileUrl = "file:target/ftptest/?append=false&noop=true"; String ftpUrl = "ftp://admin@localhost:21/tmp3/camel?password=admin&binary=false";  from(ftpUrl).convertBodyTo(String.class).to(fileUrl);. Fix failing unit test on Bamboo. Most of the major problems is fixed now.  Unit test for the SFTP part would be nice but it requires some mocking as we do not have a SFTP java server at the moment.. 
Sub-task,Claus Ibsen,2008-04-01T11:50:39+0000,1207050639,The stream component documentation should be improved with:  	java examples using snippet tags 	how to use the stream:header,It also has a delay option. Need an option to set charset for text mode. Needs additional unit tests to cover the in part also and the existing unit test is not working correctly. It terminates and thus doesn't end junit test properly.. Okay improved the wiki and polished the code and added missing unit tests.  Marked the file and url stuff as @deprecated as such stuff is better supported by their respective components.. 
Bug,Roman Kalukiewicz,2008-04-01T19:47:35+0000,1207079255,problem shown in org.apache.camel.processor.ValidationWithErrorInHandleAndFinallyBlockTest,Closed all 1.3 tickets. 
Sub-task,Unassigned,2008-04-01T22:13:58+0000,1207088038,There are a number of jars not included in the binary distribution which are required to compile and run the samples.  To run these samples without maven  the following jars need to be added.  The cxf  jms-file  and spring samples have dependencies on activemq:      org/apache/activemq/activemq-core/4.1.1/activemq-core-4.1.1.jar     backport-util-concurrent/backport-util-concurrent/2.1/backport-util-concurrent-2.1.jar  The bam  and etl samples have dependencies on hibernate jars to compile/run:      javax/persistence/persistence-api/1.0/persistence-api-1.0.jar     org/apache/geronimo/specs/geronimo-jta_1.0.1B_spec/1.0/geronimo-jta_1.0.1B_spec-1.0.jar     org/hibernate/hibernate-annotations/3.2.1.ga/hibernate-annotations-3.2.1.ga.jar     org/hibernate/hibernate-entitymanager/3.2.1.ga/hibernate-entitymanager-3.2.1.ga.jar     org/hibernate/hibernate/3.2.1.ga/hibernate-3.2.1.ga.jar     antlr/antlr/2.7.6/antlr-2.7.6.jar     asm/asm/1.5.3/asm-1.5.3.jar     cglib/cglib/2.1_3/cglib-2.1_3.jar     dom4j/dom4j/1.6.1/dom4j-1.6.1.jar     hsqldb/hsqldb/1.8.0.7/hsqldb-1.8.0.7.jar     jboss/javassist/3.3.ga/javassist-3.3.ga.jar     jboss/jboss-archive-browsing/5.0.0alpha-200607201-119/jboss-archive-browsing-5.0.0alpha-200607201-119.jar  The etl example also has a dependency on:      de/odysseus/juel/juel/2.1.0/juel-2.1.0.jar  The samples use log4j for runtime logging:      log4j/log4j/1.2.12/log4j-1.2.12.jar  The docs  jms-file  and spring samples include a test class which requires junit to compile (could ignore these test classes rather than include junit):      junit/junit/3.8.1/junit-3.8.1.jar  Finally  the cxf sample depends on another 32 jars to generate code from its wsdl and run the sample:      org/apache/cxf/cxf-api/2.0.2-incubator/cxf-api-2.0.2-incubator.jar     org/apache/cxf/cxf-rt-core/2.0.2-incubator/cxf-rt-core-2.0.2-incubator.jar     org/apache/cxf/cxf-common-utilities/2.0.2-incubator/cxf-common-utilities-2.0.2-incubator.jar     org/apache/cxf/cxf-rt-bindings-soap/2.0.2-incubator/cxf-rt-bindings-soap-2.0.2-incubator.jar     org/apache/cxf/cxf-rt-databinding-jaxb/2.0.2-incubator/cxf-rt-databinding-jaxb-2.0.2-incubator.jar     org/apache/cxf/cxf-rt-frontend-jaxws/2.0.2-incubator/cxf-rt-frontend-jaxws-2.0.2-incubator.jar     org/apache/cxf/cxf-rt-frontend-simple/2.0.2-incubator/cxf-rt-frontend-simple-2.0.2-incubator.jar     org/apache/cxf/cxf-rt-transports-http-jetty/2.0.2-incubator/cxf-rt-transports-http-jetty-2.0.2-incubator.jar     org/apache/cxf/cxf-rt-transports-http/2.0.2-incubator/cxf-rt-transports-http-2.0.2-incubator.jar     org/apache/cxf/cxf-rt-transports-jms/2.0.2-incubator/cxf-rt-transports-jms-2.0.2-incubator.jar     org/apache/cxf/cxf-tools-common/2.0.2-incubator/cxf-tools-common-2.0.2-incubator.jar     org/apache/cxf/cxf-tools-wsdlto-core/2.0.2-incubator/cxf-tools-wsdlto-core-2.0.2-incubator.jar     org/apache/cxf/cxf-tools-wsdlto-frontend-jaxws/2.0.2-incubator/cxf-tools-wsdlto-frontend-jaxws-2.0.2-incubator.jar     org/apache/cxf/cxf-tools-wsdlto-databinding-jaxb/2.0.2-incubator/cxf-tools-wsdlto-databinding-jaxb-2.0.2-incubator.jar     org/apache/geronimo/specs/geronimo-annotation_1.0_spec/1.1.1/geronimo-annotation_1.0_spec-1.1.1.jar     org/apache/geronimo/specs/geronimo-servlet_2.5_spec/1.1-M1/geronimo-servlet_2.5_spec-1.1-M1.jar     org/apache/geronimo/specs/geronimo-ws-metadata_2.0_spec/1.1.1/geronimo-ws-metadata_2.0_spec-1.1.1.jar     javax/xml/ws/jaxws-api/2.0/jaxws-api-2.0.jar     javax/xml/soap/saaj-api/1.3/saaj-api-1.3.jar     velocity/velocity/1.4/velocity-1.4.jar     velocity/velocity-dep/1.4/velocity-dep-1.4.jar     commons-lang/commons-lang/2.3/commons-lang-2.3.jar     wsdl4j/wsdl4j/1.6.1/wsdl4j-1.6.1.jar     xml-resolver/xml-resolver/1.2/xml-resolver-1.2.jar     org/apache/ws/commons/schema/XmlSchema/1.2/XmlSchema-1.2.jar     org/apache/neethi/neethi/2.0.2/neethi-2.0.2.jar     org/mortbay/jetty/jetty-util/6.0.1/jetty-util-6.0.1.jar     org/mortbay/jetty/jetty/6.0.1/jetty-6.0.1.jar     org/codehaus/woodstox/wstx-asl/3.2.1/wstx-asl-3.2.1.jar     javax/xml/jaxb-api/2.0/jaxb-api-2.0.jar     com/sun/xml/bind/jaxb-impl/2.0.5/jaxb-impl-2.0.5.jar     com/sun/xml/bind/jaxb-xjc/2.0/jaxb-xjc-2.0.jar  Note the last 3 jars... the version of cxf used by the demo in the latest distribution (cxf 2.0.2) works with jaxb 2.0.5... a different version of jaxb than the one currently in the camel distribution.  With these 49 jars  the samples could all be compiled and run without relying on maven to download dependencies in the binary distribution.,We also need the following for camel-example-spring-xquery:  net/sf/saxon/saxon/8.7/saxon-8.7.jar net/sf/saxon/saxon-dom/8.7/saxon-dom-8.7.jar. Are you sure this is really necessary? You might get 90% of what you're looking for simply by including Ant build files with commented-out declarations instructing the user precisely which versions of which products they would need to download  something like:  <property name="cxf.libs" value="  {place location of CXF 2.0.4/lib here}  "/>  Such a design would be nicely self-documenting  letting Ant users know which versions are being used and which JARs are precisely needed for each sample (and later  their own work) without them needing to learn Maven. The version information in the build.xml files can be easily updated along with updates to the POM's.  My main concerns about including these JARs:  1.) Anyone not wishing to manually download all those JARs can use Maven anyway. If the concern is (1) that some people don't want to manually download JARs  but (2) do not know how to use Maven  I don't think that has much validity because the skills needed to work with Maven is much less than the skills needed to work intelligently with Camel  ActiveMQ and CXF. (i.e.  saying "I know how to develop web services and work with message queues but can't work with Maven" is kind of like saying "I know calculus but can't understand algebra." You don't need to worry about such people  because they almost don't exist.)  2.) Camel can branch in endless directions (for example  future support for Glassfish Metro and Jersey and...)  and can easily become overburdened with maintaining 75 or more JARs. Camel is not like ActiveMQ or CXF  each of which have a more or less finite number of needed libs. Rather  because of all the ways it can grow  Camel is similar to Apache Ant  so what Ant does might be instructive for Camel here: they include a core set of JARs  but then precisely list the optional JARs[1] you must manually download if you want to run extended tasks.  3.) It will be confusing and perplexing to the Ant user  because they will not know which of the 50 or so JARs are needed and which aren't when using Camel  also  which libs are needed when running particular functions (CXF or ActiveMQ  for example) with Camel. They'll start including all 50 JARs when running any process with Camel  not knowing the subset they need. Even if I personally were not to use Maven but just use Ant instead  I would still rather just have explicit declarations of which versions of which products I need to download in the Ant build files. Creating a bulky download of 50-75 JARs will not tell me which JARs I need for my production work.  Regards  Glen  [1] http://ant.apache.org/manual/install.html#librarydependencies. I would also say -1 to this. The distribution would become unnecessarily large and confusing.. I agree  it's much better to set up the sample ant build files to accept something like a cxf.home  a hibernate.home or an activemq.home to pick up the majority of these jars  and just add a comment in the readmes to let the user know.. For ant build.xml files to work  will require users to install dependencies. e.g.  For the cxf demo  update the readme to explain that to run that demo with ant  users must install cxf. Then the camel-example-cxf build.xml file will pick up required jars from an environment variable or property set by the user.. Closing 1.4 issues. 
Improvement,Claus Ibsen,2008-04-02T04:25:33+0000,1207110333,The wiki documentation for FTP usage could be improved with:  	java code examples (snippets in unit test classes) 	that you need the convertTo(String.class) for ASCII file transfer 	The FTP component is an extension of the File component so it inherits behaviour  features and options from file. State precise witch options a FTPProducer and FTPConsuer can use. 	Consuming using FTP there are special header key/values for the remote filename etc. that could be of interest for the end users (Maybe for the producer as well),FTPConsumer has an option: setNames(boolean). The remote message has these headers  map.put("file.remote.host"  hostname); map.put("file.remote.name"  fullFileName);. ASCII conversion to string is now out-of-the-box so no need for convertBodyTo(String.class). Removed webdav as scheme/protocol from the FTP component as there was no code for it after all. And it belongs more naturally in a HTTP component.. Added missing properties  wrote about the "consumer." prefix and added a sample how to download files. etc.. 
Improvement,Willem Jiang,2008-04-02T04:30:42+0000,1207110642,Typos fixed for the Camel/CXF sample.,patch applied with thanks to Glen. Closed all 1.3 tickets. 
Improvement,Roman Kalukiewicz,2008-04-02T11:11:25+0000,1207134685,Ability to have  from("direct:parallel").splitter(body().tokenize(" ")  true).to("mock:result");   where true parameter to splitter should behave like in multicast() — processing is done in separate threads for each 'part'.,Functionality added by refactoring MulticastProcessor. Roman  remember to update the wiki with the new "true" parameter. We need the wiki documentation to shine and that users will be able to see what features and options Camel really has.. Its fixed in Camel 1.4 actually.. Closing old tickets. 
Improvement,Claus Ibsen,2008-04-02T11:55:34+0000,1207137334,Found a few more typos.,Glenn. Could you re attach the patch file with granting ASF rights to the patch. (there should be a Apache icon next to the file).  JIRA only shows the tick box when you attach the file after the ticket has been created (not during creation  to my knowledge).. Done.. Applied patch with thanks to Glen Mazza. Closed all 1.3 tickets. 
Improvement,Willem Jiang,2008-04-02T14:19:02+0000,1207145942,I find I often just wanna rebuild  say camel-core when running tests from maven. However it now takes a long time to make just a jar as we make the javadoc stuff when running 'mvn install'.  I wonder could we make it easy to avoid this step in the build if we wanna?,The patch is in the trunk now.. I've just patched the assembly to also use the release profile too. Closed all 1.3 tickets. 
Improvement,Unassigned,2008-04-02T14:37:00+0000,1207147020,,patch applied. This is the wiki police   James remember to update the wiki for the mock component if you have added new options etc.. Closed all 1.3 tickets. 
Bug,Claus Ibsen,2008-04-02T19:20:26+0000,1207164026,In org/apache/camel/example/etl/EtlRoutes.java  the following line:       from("jpa:org.apache.camel.example.etl.CustomerEntity?consumeDelete=false?consumer.delay=3000&consumeLockEntity=false")         .setHeader(FileComponent.HEADER_FILE_NAME  el("${in.body.userName}.xml"))         .to("file:target/customers?append=false");    seems to successfully dump the database entries to files in the target/customers directory.  Unless I'm misunderstanding the sample  the consumeDelete=false is meant to ensure that the dump of the database does not delete the entries from the database.  However  when running the etl sample querying the customer table in the database  the list is empty.  I suspect the consumeDelete=false isn't working.,A few other options hasnt been documented  flushOnSend (default = true) maximumResults (default = -1). It was just a mistyped URI in the sample.  The JPA component works fine. I will spin off a new task for the missing options in the wiki. committed a fix to trunk. Closed all 1.3 tickets. 
Improvement,Claus Ibsen,2008-04-03T04:53:48+0000,1207198428,Really minor--typos I found for the last four Camel examples.,Applied patch with thanks to Glen. Closed all 1.3 tickets. 
Improvement,Claus Ibsen,2008-04-03T05:24:41+0000,1207200281,There are two options missing from the wiki documentation  flushOnSend (default = true) maximumResults (default = -1),consumeLockEntity was also missing. 
Improvement,Claus Ibsen,2008-04-03T05:27:11+0000,1207200431,During the hunt for a bug in the JPA sample (etl) the bug was that the uri configuration was mistyped and there was two ? markers  so one option was actually skipped during initialization.  This is a bit serious  so we should add validation to the core code to throw somekind of exception when there are two ? markers in the uri etc.,It was CAMEL-430 that had the two ? markers. DefaultComponent has the endpoint uri code that should have better validation. Implemented validation in camel-core so Camel will throw a ResolveEndpointFailedException if there are parameters left overs. It also validates if you have & in the uri but no ? marker.  See the wiki http://activemq.apache.org/camel/writing-components.html for how to resolve this as a component writer (you must removed parameters you support).. Use the new getAndRemoveParameter methods in all our components. camel-mina DONE. camel-stream DONE. camel-spring (xslt component) DONE. spring-jms DONE. Okay no more components uses parameters.remove directly. 
Improvement,Willem Jiang,2008-04-03T13:25:28+0000,1207229128,The camel:run and camel:embeddable operations use META-INF/spring/*.xml as the default for the Spring ApplicationContext.  It should be possible to change this through the plugin configuration.,Here is the example <!-- Allows the routes to be run via 'mvn camel:run' --> <plugin> <groupId>org.apache.camel</groupId> <artifactId>camel-maven-plugin</artifactId> <configuration> <applicationContextUri>camel-context.xml</applicationContextUri> </configuration> </plugin>. Williem  Please update the wiki also: http://activemq.apache.org/camel/camel-maven-plugin.html. The wiki is also updated.. Does the URI take all the usual Spring styles? i.e classpath:/ paths and *.xml expressions? Can you specify more than one file?. The URI will be split by ";" and feed to the ClassPathXmlApplicationContext as a construction parameter.       protected AbstractApplicationContext createDefaultApplicationContext() {         String[] args = getApplicationContextUri().split(";");         return new ClassPathXmlApplicationContext(args);     }   so if you want to specfiy more than one file  it could be "META-INF/spring/*.xml;file-in-the-class.file". 
Improvement,Unassigned,2008-04-03T15:06:45+0000,1207235205,We should be able to patch the code so that it still works; just without the queue browsing support,Issue resolved; see tests/camel-itest-spring-2.0 for the integration test. Closed all 1.3 tickets. 
Improvement,Willem Jiang,2008-04-04T05:05:36+0000,1207285536,Still doing this trivial stuff while learning the codebase...,patch for camel-cxf package.. Patch applied with thank to Glen.. 
Bug,Claus Ibsen,2008-04-04T07:34:55+0000,1207294495,See the user form http://www.nabble.com/Some-questions-about-a-simple-setHeader-test-td16467528s22882.html  Attached is a unit tests that demonstrates some problems.  Created this ticket to investigate to see if there is a bug/problem in Camel. And not forget about it.,At first glance it doesnt look like to be a problem in Camel.  However the interceptor documentation could be wrong  how its meant to be used.. Not a problem in Camel.  However we need better documentation how interceptors works. See CAMEL-442. 
New Feature,Unassigned,2008-04-04T09:30:42+0000,1207301442,Currently a component using the Axis (not Axis2) framework is not available in Camel. many projects use Axis for web services integration  thus it will be very useful to have this component. Currently web service component in Camel is Camel CXF.,I doubt there is any easy hooks into Axis 1.x.  See the Axis tutorial we have where you can kinda nice integrate with Axis. http://camel.apache.org/tutorial-axis-camel.html. 
Bug,Willem Jiang,2008-04-04T19:49:05+0000,1207338545,The assertResultType method In org.apache.camel.language.jxpath.JXPathExpression throws a null pointer exception if the result parameter is null.  A null test in that method or in the evaluate method in that class is needed.,Added a unit test and the check to assertResultType.. patch applied with thanks to Art.. 
Sub-task,Claus Ibsen,2008-04-05T07:44:26+0000,1207381466,Wiki documentation 	Code snippets in wiki    Start from this wiki page: http://activemq.apache.org/camel/error-handler.html,Updated wiki for both Error Handler and Dead Letter Channel.. 
Improvement,Unassigned,2008-04-05T15:20:13+0000,1207408813,Add wiki documentation for the missing core component: RefComponent. It should be on the component list.  Would also be nice with a java sample for what it can be useful for.,
Improvement,Unassigned,2008-04-05T15:22:42+0000,1207408962,The documentation how to use the interceptor features is scattered in the current wiki documentation.  Interceptor should be have its own page and be linked from the Architecture page. We should also provide some better java examples as the current are quite testish,Some documentation here http://activemq.apache.org/camel/dsl.html  Also write that you can add your own java code interceptor code logic with addInterceptorXXX() on the context itself.. 
Improvement,Claus Ibsen,2008-04-05T16:40:43+0000,1207413643,I have added two missings options and then I discovered a few more missing so I am created this ticket so we get this done.  The File Component has several options we haven't documented on the wiki yet. Also its javadoc should be improved. And we should provide some better java samples on the wiki.,Improved javadoc  added missing properties to wiki and added a snippet how to write files.. 
Sub-task,Claus Ibsen,2008-04-06T08:57:02+0000,1207472222,The FTPConsumer seems in the unit tests not to properly close.  We get these WARN in the logs  [ Thread: 1 RemoteFileComponent] ScheduledPollConsumer          WARN  Caught: org.apache.commons.net.ftp.FTPConnectionClosedException: Connection closed without indication. org.apache.commons.net.ftp.FTPConnectionClosedException: Connection closed without indication.         at org.apache.commons.net.ftp.FTP.__getReply(FTP.java:267)         at org.apache.commons.net.ftp.FTP.sendCommand(FTP.java:460)         at org.apache.commons.net.ftp.FTP.sendCommand(FTP.java:520)         at org.apache.commons.net.ftp.FTP.cwd(FTP.java:745)         at org.apache.commons.net.ftp.FTPClient.changeWorkingDirectory(FTPClient.java:725)         at org.apache.camel.component.file.remote.FtpConsumer.pollDirectory(FtpConsumer.java:101)         at org.apache.camel.component.file.remote.FtpConsumer.poll(FtpConsumer.java:77)         at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:63)         at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:417)         at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:280)         at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:135)         at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:65)         at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:142)         at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:166)         at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650)         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675)         at java.lang.Thread.run(Thread.java:595),Hmmm the FTP Component doesn't have nice house keeping when its stopping. The WARN above is logged when the consumer is stopped such as stopping Camel or a unit test.. Resolution is to shutdown unit testing in correct order to avoid these WARNs. 
Sub-task,Claus Ibsen,2008-04-07T04:41:49+0000,1207543309,,Ported fixes from FTP to SFTP manly due a bug in the build directory code. 
Sub-task,Claus Ibsen,2008-04-07T04:42:07+0000,1207543327,,Hard to get a mock library for SFTP protocol.. 
Task,Claus Ibsen,2008-04-07T12:08:02+0000,1207570082,In camel components is registered using auto discovery of special files in the META-INF folder.  We are missing some of these files on the wiki that are used as the protocol prefix in the URI configuration. eg. in camel-mail we have also pop3s and smtps that are not on the wiki.  Do this for all the components one by one.,camel-core: bean dataset direct file list log mock pojo queue ref seda timer vm  camel-amqp: amqp  camel-atom: atom  camel-bam: Is not a component  camel-csv: Is not a component  camel-cfx: cfx soap  camel-ftp: ftp sftp webdav  camel-groovy: Is not a component  camel-http: http  camel-ibatis: ibatis  camel-irc: irc  camel-jaxb: Is not a component  camel-jcr: jcr  camel-jdbc: jdbc  camel-jetty: jetty  camel-jhc: jhc  camel-jing: rnc rng  camel-jms: jms  camel-josql: Is not a component  camel-jpa: jpa  camel-juel: Is not a component  camel-jxpath: Is not a component  camel-mail: imap nntp pop3 pop3s smtp smtps  camel-mina: mina  camel-msv: msv  camel-ognl: Is not a component  camel-osgi: Is not a component  camel-quartz: quartz  camel-rmi: rmi  camel-ruby: Is not a component  camel-saxon: xquery  camel-scala: Is not a component  camel-script: Is not a component  camel-spring: test validator xslt  camel-sql: sql  camel-stream: stream  camel-stringtemplate: string-template  camel-supercsv: Is not a component  camel-swing: swing  camel-testng: Is not a component  camel-uface: swing uface  camel-velocity: velocity  camel-xmlbeans: Is not a component  camel-xmpp: xmpp  camel-xstream: Is not a component. Edit the wiki from ths page:  http://cwiki.apache.org/confluence/display/CAMEL/Component+List. I have created tickets for the missing components that should be documented. 
Improvement,Claus Ibsen,2008-04-07T18:52:18+0000,1207594338,OpenJPA in release 1.0 and onwards requires a change in the ant build in the pom.xml  It now requires a persistance.xml file to use.,Commited a patch to trunk.  Open-jpa from v1.0.0 requires a persistance.xml file in its enhancer:  The tasks in ant now have included a reference to the persistence.xml fil <config propertiesFile="${basedir}/src/main/resources/META-INF/persistence.xml"/>                  <openjpac directory="${basedir}/target/jpa-classes">                   <classpath refid="cp"/>                   <fileset dir="${basedir}/target/classes">                     <include name="org/apache/camel/processor/**/M*.class"/>                   </fileset> 				  <config propertiesFile="${basedir}/src/main/resources/META-INF/persistence.xml"/>                 </openjpac>                 <openjpac directory="${basedir}/target/jpa-test-classes">                   <classpath refid="cp"/>                   <fileset dir="${basedir}/target/test-classes">                     <include name="org/apache/camel/examples/*.class"/>                   </fileset> 				  <config propertiesFile="${basedir}/src/main/resources/META-INF/persistence.xml"/>                 </openjpac>. OpenJPA / JPA experts please review the open-jpa component on trunk. Closing for now.. 
Improvement,Claus Ibsen,2008-04-07T19:04:20+0000,1207595060,We should upgrade Apache Felix to either 1.4.0 or 1.2.1  We are currently running 1.2.0. Apache Felix 1.4 should be all that 1.2 is but much better.  We opt for 1.4 but should verift that it builds on peoples machines. 1.4 works on my local XP laptop.,Lets see if Bamboo works tomorrow.. Bamboo is happy with build 112. 
Bug,Unassigned,2008-04-07T22:19:02+0000,1207606742,Running the JMS-file example[1] using Maven from a command window is raising an error stack (http://issues.apache.org/activemq/browse/AMQ-1132).  ActiveMQ has an apparent bug in that it is trying to log to a hardcoded directory that doesn't exist on most machines.  [1] http://svn.apache.org/viewvc/activemq/camel/trunk/examples/camel-example-jms-file/,Isn't this bug a ActiveMQ bug  and thus should be fixed in ActiveMQ?  I am not keen on creating a workaround in Camel for a bug in ActiveMQ where the workaround would be ugly.. Glen I can not reproduce it at my local machine.  When I run mvn compile exec:java I do not get any ERROR level logging. This is using the log4j.properties from the trunk.. I stand corrected – I wasn't able to duplicate it off trunk either. Never mind – this issue is invalid. Sorry about that.. 
New Feature,Claus Ibsen,2008-04-08T04:34:19+0000,1207629259,camel-atom is not documented at all on our wiki.  It should be documented with  	added to the component list 	own page with documentation of the component with uri syntax  options and java examples 	link to the Apache abdera project,Added a long sample and documented how to use it Now its in pretty good shape.. 
New Feature,Unassigned,2008-04-08T04:37:36+0000,1207629456,camel-jhc is not documented at all on our wiki.  It should be documented with  	added to the component list 	own page with documentation of the component with uri syntax  options and java examples 	link to the Jakarta Commons HTTP projects,this component is @deprecated and is to be removed. 
New Feature,Roman Kalukiewicz,2008-04-08T04:43:56+0000,1207629836,camel-sql is not documented at all on our wiki.  It should be documented with  	added to the component list 	own page with documentation of the component with uri syntax  options and java examples 	link to the underlying Spring JDBC that is used to do the actual query,http://cwiki.apache.org/confluence/display/CAMEL/SQL+Component. 
New Feature,Unassigned,2008-04-08T04:46:36+0000,1207629996,camel-swing and camel-uface is not documented at all on our wiki.  It should be documented with  	added to the component list 	own page with documentation of the component with uri syntax  options and java examples 	link to the underlying projects,These components is @deprecated and will be removed in the future. 
Improvement,Willem Jiang,2008-04-09T01:15:04+0000,1207703704,Since CXF 2.0.5 released for a while   we need to upgrade it in Camel.,Willem is there more work to be done than upgrading the pom files?. There are just some bugs fixing in the CXF 2.0.5. We may need to do more than updating pom thing for the coming up CXF 2.1.. This patch is in the SVN repository.. 
Bug,Jonathan Anstey,2008-04-09T15:48:03+0000,1207756083,The apache-camel jar in the binary distribution misses a lot of files  including class and schema files (12k in size compared to the 1.9M released jar).,Here's a patch to fix this issue.  Basically  the shaded jar (i.e. the larger one) was being generated after the assemblies were created and so was not being included. The simple fix would have been to change the ordering in the pom... when I tried to do this  the shade plugin messed up the environment such that the assembly plugin didn't work anymore. Try it for yourself  it was quite wonky  Anyway  the solution was to separate out the shade portion to a submodule.. Awesome. Thanks a lot Jon.. 
Bug,Claus Ibsen,2008-04-10T08:04:27+0000,1207814667,Consider a Camel route that involves an xslt component. When Camel sets up the route  the XsltBuilder ignores any errors coming from the xerces xml parser and continues constructing the route even though the xslt transformer is not initialized.   Later when the route is executed Camel correctly checks if the transformer is initialized and raises an error if not: java.lang.IllegalArgumentException: No transformer configured!  However in case of a parse error in the xslt file  the whole route becomes unusable and the setup routine that constructs the route should fail with an appropriate error message. A sanity check needs to be added in method org.apache.camel.builder.xml.XsltBuilder.setTransformerSource(javax.xml.transform.Source).,JUnit testcase. JUnit testcase. See included README.txt. proposed patch. Torsten  thanks a lot for the patch. Torsten the bug must be a ServiceMix only.  In pure Camel I do get a compile stylesheet error during creating of the routes.  Using this simple unit route builder where invalid.xsl is your xsl file with no changes.      protected RouteBuilder createRouteBuilder() throws Exception {         return new RouteBuilder() {             public void configure() throws Exception {                 from("seda:a").to("xslt:org/apache/camel/component/xslt/invalid.xsl");             }         };     }  ERROR:  'line 35: Variable or parameter 'datetimemod' is undefined.' FATAL ERROR:  'Could not compile stylesheet'  org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: xslt:org/apache/camel/component/xslt/invalid.xsl due to: javax.xml.transform.TransformerConfigurationException: Could not compile stylesheet 	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:260) 	at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:52) 	at org.apache.camel.model.RouteType.resolveEndpoint(RouteType.java:92) 	at org.apache.camel.impl.RouteContext.resolveEndpoint(RouteContext.java:95) 	at org.apache.camel.impl.RouteContext.resolveEndpoint(RouteContext.java:104) 	at org.apache.camel.model.ToType.resolveEndpoint(ToType.java:78) 	at org.apache.camel.model.ToType.createProcessor(ToType.java:72) 	at org.apache.camel.model.ProcessorType.makeProcessor(ProcessorType.java:1385) 	at org.apache.camel.model.ProcessorType.addRoutes(ProcessorType.java:93) 	at org.apache.camel.model.RouteType.addRoutes(RouteType.java:189) 	at org.apache.camel.model.RouteType.addRoutes(RouteType.java:83) 	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:438) 	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:430) 	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:47) 	at org.apache.camel.ContextTestSupport.startCamelContext(ContextTestSupport.java:108) 	at org.apache.camel.ContextTestSupport.setUp(ContextTestSupport.java:81) 	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:40) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) 	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:90) Caused by: javax.xml.transform.TransformerConfigurationException: Could not compile stylesheet 	at com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl.newTemplates(TransformerFactoryImpl.java:824) 	at com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl.newTransformer(TransformerFactoryImpl.java:619) 	at org.apache.camel.builder.xml.XsltBuilder.setTransformerSource(XsltBuilder.java:204) 	at org.apache.camel.builder.xml.XsltBuilder.setTransformerInputStream(XsltBuilder.java:234) 	at org.apache.camel.component.xslt.XsltComponent.createEndpoint(XsltComponent.java:66) 	at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:71) 	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:236) 	... 33 more. Applied the patch to trunk with thanks to Torsten. Closing 1.4 issues. 
Task,Willem Jiang,2008-04-12T10:48:11+0000,1207997291,In the script component: camel-script the unit tests has been disabled.  There seems to be some problem with using the javax.script API on JDK1.5 or lower.,The commented tests now are enabled within fixing of CAMEL-655.. I think there is still a problem with these:  INFO: Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@269101: defining beans [camel:beanPostProcessor camel]; root of factory hierarchy Tests run: 2  Failures: 0  Errors: 2  Skipped: 0  Time elapsed: 2.062 sec <<< FAILURE! Running org.apache.camel.language.script.JavaScriptLanguageTest Tests run: 1  Failures: 0  Errors: 1  Skipped: 0  Time elapsed: 0.447 sec <<< FAILURE! Running org.apache.camel.builder.script.JavaScriptExpressionTest Tests run: 2  Failures: 0  Errors: 2  Skipped: 0  Time elapsed: 0.663 sec <<< FAILURE! Running org.apache.camel.builder.script.Jsr223Test Tests run: 1  Failures: 0  Errors: 1  Skipped: 0  Time elapsed: 0.059 sec <<< FAILURE! Running org.apache.camel.builder.script.RubyExpressionTest Tests run: 2  Failures: 0  Errors: 2  Skipped: 0  Time elapsed: 0.651 sec <<< FAILURE! Running org.apache.camel.builder.script.PythonExpressionTest Tests run: 2  Failures: 0  Errors: 2  Skipped: 0  Time elapsed: 0.651 sec <<< FAILURE!  All of them fail with an error of the following type: ------------------------------------------------------------------------------- Test set: org.apache.camel.builder.script.Jsr223Test ------------------------------------------------------------------------------- Tests run: 1  Failures: 0  Errors: 1  Skipped: 0  Time elapsed: 0.069 sec <<< FAILURE! testLanguageNames(org.apache.camel.builder.script.Jsr223Test) Time elapsed: 0.017 sec <<< ERROR! java.lang.UnsupportedClassVersionError: Bad version number in .class file at java.lang.ClassLoader.defineClass1(Native Method) at java.lang.ClassLoader.defineClass(ClassLoader.java:675) at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:124) at java.net.URLClassLoader.defineClass(URLClassLoader.java:260) at java.net.URLClassLoader.access$100(URLClassLoader.java:56) at java.net.URLClassLoader$1.run(URLClassLoader.java:195) at java.security.AccessController.doPrivileged(Native Method) at java.net.URLClassLoader.findClass(URLClassLoader.java:188) at java.lang.ClassLoader.loadClass(ClassLoader.java:316) at java.lang.ClassLoader.loadClass(ClassLoader.java:306) at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:280) at java.lang.ClassLoader.loadClass(ClassLoader.java:251) at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:374) at java.lang.Class.forName0(Native Method) at java.lang.Class.forName(Class.java:242) at sun.misc.Service$LazyIterator.next(Service.java:271) at javax.script.ScriptEngineManager.initEngines(ScriptEngineManager.java:109) at javax.script.ScriptEngineManager.access$000(ScriptEngineManager.java:37) at javax.script.ScriptEngineManager$1.run(ScriptEngineManager.java:80) at java.security.AccessController.doPrivileged(Native Method) at javax.script.ScriptEngineManager.init(ScriptEngineManager.java:78) at javax.script.ScriptEngineManager.<init>(ScriptEngineManager.java:51) at org.apache.camel.builder.script.Jsr223Test.testLanguageNames(Jsr223Test.java:29). Hi Hadrain   Can you clean up your maven repository and try again ? It could be wrong version of engine classes.  Willem. Oh  I did. Fresh m2 local repo  fresh svn local copy.. Hadrian you are on mac right? Willem and I are on XP. Could there be a platform specific problem?  It runs fine on my laptop right now Results :  Tests run: 11  Failures: 0  Errors: 0  Skipped: 0  [INFO] [bundle:bundle] [WARNING] Warning building bundle org.apache.camel:camel-script:bundle:1.4-SNAPSHOT : Did not [INFO] [install:install] [INFO] Installing D:\project\camel\components\camel-script\target\camel-script-1.4-SNAPSHOT.ja [INFO] [bundle:install] [INFO] Parsing file:/C:/Documents%20and%20Settings/Claus%20Ibsen/.m2/repository/repository.xml [INFO] Installing org/apache/camel/camel-script/1.4-SNAPSHOT/camel-script-1.4-SNAPSHOT.jar [INFO] Writing OBR metadata [INFO] ------------------------------------------------------------------------ [INFO] BUILD SUCCESSFUL [INFO] ------------------------------------------------------------------------ [INFO] Total time: 31 seconds [INFO] Finished at: Tue Jul 08 18:20:55 CEST 2008 [INFO] Final Memory: 12M/23M [INFO] ------------------------------------------------------------------------. FYI This also passes on Linux.. I am on osx 10.5.4  indeed. It runs fine with java6  but not with java5 for some reason. Still looking into it.  I have both java5 and 6 installed on my box  but my env points to java5 and is almost identical with James' env. I know of one mac box that builds fine  which does not have have java6 installed at all.. Looks like a Mac specific issue. When Java 1.6.0 is installed in osx 10.5 it overwrites /System/Library/Java/Extensions/AppleScriptEngine.jar with a 1.6 specific one.  When the ScriptEngineManager gets initialized if finds it and well  not hard to guess the rest. Moving it and the jnilib somewhere else fixes the problem.. 
Task,Willem Jiang,2008-04-13T02:36:37+0000,1208054197,Soap component just leverage the soap message interceptors of CXF  there are lots of difference between the soap component and CXF component.,Willem I have moved this ticket to 1.5. Willem what is this? Something you need to do? Can it be closed?. As we got ride of the cxfsoap component in CAMEL-2535  so I resolved this issue with Won't fix.. Closing all resolved tickets from 2010 or older. 
Test,Willem Jiang,2008-04-14T00:43:50+0000,1208133830,,I added a test case for the spring xml intercept feature... which seems to have uncovered an error... figured I'd submit this patch now to bump up the visibility of the problem.  I basically followed the schema to see how to get this  <route>   <intercept>     <choice>       <when>         <xpath>$foo = 'bar'</xpath>         <to uri="mock:b"/>       </when>       <otherwise>         <proceed/>       </otherwise>     </choice>   </intercept> </route> <route>   <from uri="direct:start"/>   <to uri="mock:a"/> </route>   from this  intercept().choice().when(header("foo").isEqualTo("bar")).to("mock:b").otherwise().proceed();  from("direct:start").to("mock:a");   Seems to be valid syntax except that the routes loaded up in the DSL are nothing like the Spring XML ones  I think this will involve a deeper code dive!. Oh yeah  don't forget to uncomment createCamelContext() in SpringInterceptTest to see the failing test.. Jon  that syntax wouldn't work or at least not the way you would expect. The two <route>(s) are independent and the first route containing the <intercept> would not have the semantics of 'intercept applies to all routes'. It's easy to fix  but we would first need agree on a syntax. Maybe having the <intercept> under the <camelContext> ?  A few +1s or better ideas appreciated.. I agree the we need the syntax of putting the the <intercept> under the <camelContext>. But we need find a way to combine the RoutesType and RouteType with the CamelContextFactoryBean.  BTW InterceptType also not support take the predicate from XML  if I put a ChoiceType member in the interceptType   I will create a Cycle dependency between the InterceptType and ChoiceType.  Please show some light to me to find a way to resolve it.. What if the spring xml is combined in one route? That would be in line with the java DSL use-case. Note: I haven't checked if the syntax/order of elements is valid according to the XSD.  <route>   <intercept>     <choice>       <when>         <xpath>$foo = 'bar'</xpath>         <to uri="mock:b"/>       </when>       <otherwise>         <proceed/>       </otherwise>     </choice>   </intercept>   <from uri="direct:start"/>   <to uri="mock:a"/> </route>. Thanks Hadrian for the insight into this problem. I thought though that a statement in the Java DSL would map to a route. So  this  from(foo:bar1).to(foo:bar2); from(foo:bar2).to(foo:bar3);   would be equivalent to  <route>   <from uri="foo:bar1"/>   <to uri="foo:bar2"/> </route> <route>   <from uri="foo:bar2"/>   <to uri="foo:bar3"/> </route>   Is this incorrect?  Anyways  it would make sense to have a intercept feature at a higher level up  +1 to your idea.. Jon  that is correct  but that's not what the example above suggested. intercept() is not a route and hence the intercept() in the snipped below:  intercept().to("log:foo").proceed();  from(foo:bar1).to(foo:bar2); from(foo:bar2).to(foo:bar3);   would not translate into:  <route>   <intercept>   [...]   </intercept> </route>   Something like this may better reflect the requirement:  <camelContext> <intercept>   <to uri="log:foo"/>   <proceed/> </intercept> <route>   <from uri="foo:bar1"/>   <to uri="foo:bar2"/> </route> <route>   <from uri="foo:bar2"/>   <to uri="foo:bar3"/> </route> </camelContext>   Note: the <proceed> will disappear after i'm done with camel-481.  Willem said it right in a mail  we have to figure out how to model RoutesType in the xml dsl.. Yeah  makes sense. I think I was momentarily confused by Claus's comment (intercept statement and route all in one <route/>). I just commit a patch with supporting the below configuration  <camelContext id="camel" xmlns="http://activemq.apache.org/camel/schema/spring">     <intercept>       <to uri="mock:middle1"/>     </intercept>     <route>       <from uri="direct:start"/>       <to uri="mock:end"/>     </route>   </camelContext>. Great stuff Willem! Looks like we can close this issue now?. Willem  can you do the proceed in spring also? This is useable for those log all steps kind of interceptors?  <intercept>       <to uri="log:mylogger"/>      <proceed/> </intercept>. Hi Jonathan   We still have the issue of  " InterceptType also not support take the predicate from XML  if I put a ChoiceType member in the interceptType   I will create a Cycle dependency between the InterceptType and ChoiceType."  Maybe I need open a new JIRA for it.  Willem. Claus  Hadrian did some work in CAMEL-481  so we do need to specify the <proceed> for the log any more.. Willem  ah I forgot that proceed is now default  so its the other one that might be missing - stop(). In java DSL you can use .stop()  is this supported in the spring XML as well?  <intercept>       <to uri="bean:myspeicalbean"/>      <stop/> </intercept>. Claus  I just did a quick test  current camel does not support <stop/> in spring as the DSL .stop(). I think we could fill a new JIRA for this issue.. Willem  I noticed this as well. I'll work on a fix for this in another JIRA.. Jonathan has a master ticket for all the gaps in spring XML vs the java DSL. The jira can be added as a subtask of that one. Oops! I'll link the new JIRA to that one then. See https://issues.apache.org/activemq/browse/CAMEL-878. Created CAMEL-879 for the issue with predicates that Willem mentioned. Closing this JIRA.. Closing all 1.5.0 issues. 
Bug,Claus Ibsen,2008-04-14T04:02:54+0000,1208145774,The wiki logging example does not work out of the box http://activemq.apache.org/camel/dsl.html  It has been discussed on the forum: http://www.nabble.com/interceptors---something-is-terrible-wrong-td16661322s22882.html  Jonathan was so kind to provide a patch.,Jonathans patch. Updated wiki as well.. intercept().to("log:foo").proceed();   Works. 
Bug,Unassigned,2008-04-14T04:26:57+0000,1208147217,Working on the previous issue with the intercept to log every step failed I discovered that using the seda queues on some unit tests I got more messages than expected.       intercept().to("log:foo").proceed();      from("seda:foo").to("seda:bar");     from("seda:bar").to("seda:baz");     from("seda:baz").to("mock:result");    Will sometimes result in 3 messages incoming to mock:result.   java.lang.AssertionError: mock:result Received message count. Expected: <1> but was: <3> 	at org.apache.camel.component.mock.MockEndpoint.fail(MockEndpoint.java:658),Requires this patch. 
Task,Gert Vanthienen,2008-04-14T10:26:11+0000,1208168771,Work on the Scala DSL started with CAMEL-419  but it still requires a lot of work to have it support every EIP the Java DSL does.  http://cwiki.apache.org/confluence/pages/pageinfo.action?pageId=82603 gives a list of all the EIPs to be implemented.  We should make sure to add an example for every EIP as we move along to make sure the entire DSL gets documented properly.,Patch with some aesthetic changes to the code  but more important: SNIPPET comment to start documenting the Scala DSL on the wiki. Patch is applied with thanks to Gert.. If that's OK for you guys  I would like to keep this issue open while I work on this. Let's close it when we've got the bulk of the work done and follow up on improvement/new features with new issues  otherwise we will end up with a very long list of issues.. Adding support for splitter EIP.. Patch applied with many thanks!. This patch includes the dynamic recipient list and some refactorings to remove duplicate code.. Adding content enricher and multicast. Applied patch 03 with thanks to Gert  Committed revision 653987.  However I do get this WARN from the scala compiler  [INFO] IO error while decoding D:\project\camel\components\camel-scala\src\test\scala\org\apache\camel\scala\dsl\ContentEnricherTest.scala with UTF-8   Could maybe be because of non ASCII chars in the string names used for testing. Claus   I probably made a mistake in the encoding while making the patch. Feel free to either properly encode the source file in UTF-8 or (just for once  ) spell belgië as belgie to get rid of the warning.  Gert. Gert  got it fixed now. Sorry Belgium becomes Belgie. And the .vm file needed to remove its new line to let the assertions pass.. http://svn.apache.org/viewvc?view=rev&revision=657874 adds support for load balancer/throttler/delayer. Some refactorings in http://svn.eu.apache.org/viewvc?view=rev&revision=677842. http://svn.eu.apache.org/viewvc?view=rev&revision=679291 adds an aggregator. http://svn.eu.apache.org/viewvc?view=rev&revision=690484 add the try-catch-finally handling. Moving to 2.0. I added a rollback defintion the other day. So it might need to be added to Scala as well.. Gertv  the WireTap have been improved with CAMEL-908  maybe the Scala need some sugar for that.. http://svn.apache.org/viewvc?view=revision&revision=895588 adds a few more things to the Scala DSL:  intercept  interceptFrom  interceptTo threads Camel's AOP support explicit keywords for filter  transform and pipeline ... and a few improvements to the existing bits. Adding a few more things:  http://svn.apache.org/viewvc?view=revision&revision=1021301 adds support for route id and the log() DSL method http://svn.apache.org/viewvc?view=revision&revision=1021302 adds support for the pollEnrich() DSL method http://svn.apache.org/viewvc?view=revision&revision=1021305 adds support for the validate() DSL method http://svn.apache.org/viewvc?view=revision&revision=1021306 adds support for the sort() DSL method. Added additional Camel expression languages. You can now specify an exchange pattern in the to and --> in the DSL. The Scala DSL now uses 'camel case' to be consistent and aligned with Java DSL. It also makes the DSL a bit more readable.. The Scala DSL is up to date. So lets close this ticket.. I would like to see support for routePolicy in scala DSL.. 
Sub-task,Willem Jiang,2008-04-14T15:43:29+0000,1208187809,Need to update the wiki when the Spring Integration component is ready.,Added spring-integration component's wiki page[1] [1]http://cwiki.apache.org/confluence/display/CAMEL/SpringIntegration. 
Sub-task,Willem Jiang,2008-04-14T15:47:05+0000,1208188025,Using the Spring Integration 's channel API to implement the Camel component API. So the camel endpoint  and Spring Integration endpoint can talk to each other.,The patch is in the chuck now.. 
Bug,Jonathan Anstey,2008-04-14T16:31:16+0000,1208190676,If you don't do a "mvn clean" before generating the apache-camel distribution you may get an error that looks like:  Embedded error: duplicate entry: org/apache/camel/component/mina/MinaComponent$1$1.class  Folk have seen several other duplicate entries popping up here as well... it is the maven-shade-plugin thats barfing.,Patch to fix the issue.. Patch applied with huge thanks!. Closing 1.4 issues. 
Improvement,Hadrian Zbarcea,2008-04-16T01:49:48+0000,1208310588,Unfortunately IBM MQ transforms user passed correlation ID to its own format  which makes using user generated correlation ID to correlate a call flow (request/reply  etc) impossible.   The attached patch enables Camel to use JMS message ID as request/reply correlation ID without the need for a JMS Consumer with selector per request.  This patch also address a small issue in cross brokers routing. In request/reply scenario  when request flows say from ActiveMQ into IBM MQ the ActiveMQ message gets a reply destination set on it that belongs to IBM MQ. This does not work. A configuration variable is introduced to force a message copy  which solves this issue.,Is fixed by CAMEL-469. Thanks Hadrian. 
Sub-task,Claus Ibsen,2008-04-16T19:10:36+0000,1208373036,It has a lot of missing options etc. See MailConfiguration for options.,Missing options added.  Could use some java samples using the fluent API etc.. How to set mail subject documented. Documented CAMEL-492 (To  CC and BCC). Documented how to send a mail with a file attachment.. Much better now. Closing.. 
Improvement,Unassigned,2008-04-17T01:08:55+0000,1208394535,IBM MQ provides dynamic with with persistent and non-persistent delivery mode QoS. if a dynamic queue with non-persistent delivery model is used to send a reply the broker will reject any messages sent with persistent delivery mode.   The patch allows jms  component to set delivery mode for producer for replyTo destination independently of producer for request destination.  Generally speaking it would make sense to allow independent JmsConfiguration instances for JmsProducer and JmsConsumer that inherit their values off configuration that belongs to JmsEndpoint . This way producer's and consumer's QoS can differ and be independently configured.  This is a cumulative patch with work done for https://issues.apache.org/activemq/browse/CAMEL-467,Awsome. Keep them coming. Thanks Marat!. Could the wiki documentation be updated with any new features/options etc. that this patch introduces?  http://activemq.apache.org/camel/jms.html. Thanks Hadrian  Claus. 
New Feature,Unassigned,2008-04-17T04:56:42+0000,1208408202,A user should be able to discriminate between permanent (its always gonna fail the same way) vs transient (the host might be back next time  you might not get a dead lock etc) errors and retries should only be attempted for the latter.,Moving to 2.0. We have added a retryUntil predicate you can attach a onException to determine if retry should happen or not  See section: retryUntil http://camel.apache.org/exception-clause.html. Closing 2.0m1 tickets. 
Task,Willem Jiang,2008-04-18T15:35:15+0000,1208532915,The first tutorial now has a working code example.  It was suggested on the mailing list this should be placed in svn  so that code examples do not get out of date.  This example can then form part of an integration test.  The example is already attached to the wiki but I have uploaded it here as well in case of any licensing issues.  Once the code is committed I will then update the tutorial to link to the files.,Hi Martin   The files that you attached in this JIRA is not grant with the Apache license. You can reedit it by click the ManageAttachments link below the File Attachments. We can't apply your patch unless you grand it with the Apache license.  Willem.. Corrected licesnse agreement.. Thanks for the patch! It needed some minor changes such as changing the package names to be consistent with the other examples. Looks like most of it was done by Willem. I changed the dependency from activemq-all to activemq-core and enabled it in the build.  We also need a README.txt and the documentation updated before closing this issue.. Now the readme is in the trunk.. 
Task,Claus Ibsen,2008-04-18T15:38:27+0000,1208533107,Replace code examples in the turorial with links to files included in CAMEL-471,Is it possible to assign this task to me? I do not seem to have the power.. AFAIK   the JIAR can be assigned to you if you are the developer of Camel in JIRA. James has the right to add you as the project developer.. Martin the code is in SVN now  do you need any help with this?  With links I assume you mean the snippet feature of the wiki that it can autoinclude source code from real source files in the SVN?. Add snippet tags in the source code and let the wiki use real code. SNIPPET tags is now in the source.. See CAMEL-590 that is the ticket for updating the wiki itself.. Closing 1.4 issues. 
Bug,Unassigned,2008-04-20T14:28:51+0000,1208701731,Constant is misspelled.,Hi Glen   I just checked the patch has been committed into the repository in 6th April. please update your code base   Willem. OK. Never mind.. 
Bug,Unassigned,2008-04-21T04:49:30+0000,1208753370,Currently in request/reply scenarios a temporary replyTo destination is created and is shared among all Producers that were created from a given named JMS Component instance. If those Producers are then uses to correlate message flows among endpoints that are part of the same call flow using component generated or user provided correlation ID (not message ID)  then there is a guaranteed reply loss:  client -> jsm1.producer1 -> corrId -> jsm1.consumer1 -> jsm1.producer2 -> corrId -> jsmX.consumer                jsm1.producer1 (@) <- corrId <- jsm1. consumer1 <- jsm1.producer2 <- corrId <- reply  @ - point of reply message being dropped due to the fact that jsm1.producer2 has already consumed a reply message with the same corrId and has disposed of outstanding request entry mapped to the same corrID  Note that while this configuration breaks under outlined conditions it's an optimum way of correlating call flow when messageID is used as correlationID.  Hence a way to fix this would be to keep the current strategy while allowing to configure the component to create a temporary replyTo destination per Producer instance  insulating producers from competing for reply messages correlated on the same id  I'll probably take care of this one shortly.,There is a patch attached to http://issues.apache.org/activemq/browse/CAMEL-490 that addresses this issue.  One can now configure the affinity between producer and temporary destination used for receiving replies. Note that this variable only applies to temporary replyTo destinations. For persistent replyTo destination this property is ignored.  This configuration property "replyToTempDestinationAffinity" can can have these values: "component"  "endpoint"  "producer". The default value is "endpoint"  component - a single temp queue is shared among all producers for a given component instance endpoint - a single temp queue is shared among all producers for a given endpoint instance producer - a single temp queue is created per producer. Fixed by CAMEL-490. Thanks Willem  Claus. 
Improvement,Willem Jiang,2008-04-21T12:52:38+0000,1208782358,setOutBody support is still being worked on in CAMEL-201. When this is done  setBody should be added.,Jonathan  do you fancy submitting a patch? Then the new feature will be added in both java and spring DSL in Camel 1.4  We have plenty of gaps in the spring DSL  and we need to close this gap.. Sure  why not   I should be able to get to this over the next few days.. Usage for setting the in body is:  <setBody>    <simple>${in.body} World!</simple> </setBody>   Where the <simple> expression could be any of the available expressions.. Path applied with thanks to Jonathan  and the revision is 664441.. Jonathan  thanks a lot as always a great patch from you with unit test and care of details. Much appreciated.. 
Improvement,Hadrian Zbarcea,2008-04-21T19:13:46+0000,1208805226,,CAMEL-122 is the real ticket for this.. 
New Feature,Willem Jiang,2008-04-23T09:22:50+0000,1208942570,,We can create Type Converter methods to auto-swizzle them  so things just work. Added the channel   message convert methods.. Closing 1.4 issues.. 
New Feature,Willem Jiang,2008-04-23T09:24:18+0000,1208942658,e.g. folks use SI annotations on their beans  but inject Camel endpoints  adapted to the SI APIs,The patch is in the trunk now  so we need to add some document to show how to use the CamelSourceAdpater and CamelTargetAdpater.. 
Improvement,Willem Jiang,2008-04-23T17:36:17+0000,1208972177,This patch allows for POST/PUT/INFO/DELETE/GET to be specified via a header setHeader(HttpMethods.HTTP_METHOD  HttpMethods.PUT)  .   It also fixes an issue with the original headers being lost when routing through an http exchange.    It also fixes an issue of asynchronously handled http request by forcing the inputstream to be read and closed.  This last bit   might be wrong for some (in the cases of sending very large files reading them into memory could be an issue)  .,made asf compatible.. Applied patch with thanks to Justin.. Not to be the rude person always asking for documentation. But never the less should there be any updates to the HTTP component documentation on the wiki for this new patch?  Justin  or others if you are up for it please feel free to contribute the needed documentation as well. It is even possible to add special snippet marker tags in java unit test code to let it be populate on the documentation page.. 
Bug,Claus Ibsen,2008-04-23T18:32:34+0000,1208975554,I have installed jaxb-api 2.1 via the endorsed mechanism  as is necessary for compiling camel. Now the camel-example-docs depends on the corresponding implementation  but its missing in the pom file.  To have  mvn camel:dot do what it should  I had to add  <dependency>   <groupId>com.sun.xml.bind</groupId>   <artifactId>jaxb-impl</artifactId> </dependency>  to  camel-1.3.0/examples/camel-example-docs/pom.xml,Alex you are compiling and running using JDK6 only?  And then the problem is AFAIR JDK6 ships with JAXB-2.0 in the core rt.jar and thus the endorsed mechanism is needed to upgrade to JAXB-2.1.  Alex  can you try the other examples to see if they also need an dependency on jaxb? running camel:dot?. SUN have finally included JAXB 2.1 in JDK6 update 4.  Alex so your issue is resolved by upgrading to newer version of JDK and then the endorsed hack is not needed.. 
Improvement,Hadrian Zbarcea,2008-04-24T20:31:53+0000,1209069113,intercept().to(...) should proceed by default  without and explicit .proceed().  To stop processing after intercept use the following syntax: intercept(false).to(intercept-endpoint)  View nabble thread: http://www.nabble.com/interceptors---something-is-terrible-wrong-td16661322s22882.html#a16661322,Remember to update the wiki at:  http://activemq.apache.org/camel/dsl.html. I think my proposal above is not very good because of the intercept(Predicate predicate) flavor. I think a stop() would be more appropriate.  One more aspect. In the following scenario  what would be the expected default behavior assuming an implicit proceed?  intercept(header("foo").isEqualTo("bar")).to("mock:b");  from("direct:start").to("mock:a");   Clearly the "mock:b" endpoint will only receive the message if header("foo") equals "bar"  but what about "mock:a"  should it be invoked anyway  or only if the predicate didn't fire? My mild preference would be to only invoke "mock:a" if the predicate did not fire.. My mild preference would be to only invoke "mock:a" if the predicate did not fire.  This is intuitive. I like it. +1 on what is intuitive.  But the intercept() has been documented in the wiki that it's like a AOP logger. That it can be used to track "what is going on". But nevertheless James has added some new debug feature that might be used for such scenarios. We could enhance the debug feature or something similar for the "AOP logger" feature. It is rather useful on a more low-level basis to track how message exchanges is flying around in Camel. Hadrian  I have scheduled this for 1.5  hope you don't mind   Would be good to have a clear path and be able to cut a new RC for 1.4 this week.. I think I'll be done with this today. There is only one issue planned for 1.4 and then I'll cut the kit.. Hadrian   Just noticed the fix for this issue fails to compile on AIX. I'm attaching a fix for this.  Cheers  Jon. Patch applied with thanks! I redid the 1.4.0 kit just for this. Sorry for the extra work man  Thanks!. 
Bug,Hadrian Zbarcea,2008-04-24T21:30:28+0000,1209072628,With the RouteBuilder defining more than one route  the intercept() will actually have one instance of the interceptor shared among routes which causes the odd behavior of proceeding to a destination in all routes.  For instance in the example below  sending a message to "direct:foo" will cause both "mock:one" and "mock:two" to receive a message.       protected RouteBuilder createRouteBuilder() throws Exception {         return new RouteBuilder() {             public void configure() throws Exception {                 intercept().to("log:foo").proceed();                  from("direct:foo").to("mock:one");                 from("direct:bar").to("mock:two");             }         };     },I am disabling InterceptorLogTest pending fix for this issue (code above is a modified version of this test). Must be reenabled and working when this is resolved.. I think this is exactly the same bug reported by CAMEL-462. The complication with this is that the interceptType (with its proceed)  is added to both routes  so the proceed block ends up proceeding on both routes when a message is sent to any of the from endpoints. Some cloning/proxying and replacing of outputs has to go on and i didn't get it right in all scenarios yet.. 
Bug,James Strachan,2008-04-25T12:29:52+0000,1209126592,,Works now in Camel 1.4  ------------------------------------------------------------------------------- Test set: org.apache.camel.component.jms.TransactedJmsRouteTest ------------------------------------------------------------------------------- Tests run: 4  Failures: 0  Errors: 0  Skipped: 0  Time elapsed: 40.297 sec. Closing 1.4 issues. 
Improvement,Unassigned,2008-04-27T07:46:26+0000,1209282386,The options for all the components are documented in one big table. We should either add a new column to state if the option is only for producer or consumer or both etc.,
Task,Willem Jiang,2008-04-28T04:31:15+0000,1209357075,All the consumer components extends ScheduledPollConsumer that have special consumer options for delay etc. This should be more clearly documented as most components have a consumer side as well.,Components using this  file atom ftp jpa mail spring-integration. All done except spring-integration. Need to talk with Willem about this one.. Willem will take care of the spring-integration part.  BTW: the flatpack also has these options  but they have already been documented.. Finished the Spring-Integration part.. 
Improvement,Unassigned,2008-04-28T13:32:10+0000,1209389530,It has been requested a number of times on the mailing list that it be possible to specify the exchange pattern when routing to an endpoint. This would allow for drop offs into a JMS whilst still allowing a client using InOut to receive a response.  See: http://www.nabble.com/Put-to-queue-and-continue-processing-td16850731s22882.html http://www.nabble.com/Request-Reponse-with-Camel-td16326382s22882.html,Please correct the description. Moving to 2.0 as we want to look at the MEP stuff later. see the example documentation here...  Request Reply Event Message. Applied the patches into trunk and camel-1.x branch.. Closing 2.0m1 tickets. 
Task,Willem Jiang,2008-05-01T08:30:42+0000,1209630642,To show how to set response back for the camel-cxf consumer   and how to set the request parameters for the camel-cxf provider.,Added the description in the CXF component page[1] [1]http://cwiki.apache.org/confluence/display/CAMEL/CXF. 
New Feature,Willem Jiang,2008-05-01T08:37:19+0000,1209631039,CXF client provides calling the web service with wrapped parameters  we may need an option for the camel-cxf provider to invoke the service with wrapped parameters.,The patch is committed into the repository.. 
Bug,Claus Ibsen,2008-05-02T01:25:00+0000,1209691500,For CXF usage  the exchange body needs to be an array list (or list of strings) to hold the Web service request's parameters.  However file components are failing if that is the datatype of the Exchange message.  The source file at the bottom runs fine  giving this output:  i is: 0 i is: 1 i is: 2 This was called - Body: 0 In file's process This was called - Body: 1 In file's process This was called - Body: 2 In file's process  However  if I change the one line of code below marked "----->"  with "params" instead of "Hello!"  this is the output:  i is: 0 This was called - Body: 0 i is: 1 i is: 2 This was called - Body: 1 This was called - Body: 2  The "In file's process" never appears  because for some reason the file component cannot handle the fact that the Exchange body is a list array.  It appears that either the Camel code needs to be changed to allow arraylists for file components  or some exception should be raised--it presently just runs quietly  not giving the user the feedback that an invalid body type is given.  Source file:  package com.mycompany.camel;  import java.util.ArrayList; import java.util.List;  import javax.jms.ConnectionFactory;  import org.apache.activemq.ActiveMQConnectionFactory; import org.apache.camel.CamelContext; import org.apache.camel.CamelTemplate; import org.apache.camel.component.cxf.CxfConstants; import org.apache.camel.Exchange; import org.apache.camel.Processor; import org.apache.camel.builder.RouteBuilder; import org.apache.camel.component.jms.JmsComponent; import org.apache.camel.impl.DefaultCamelContext;  /**  * Hello world!  *   */ public class CamelSample2 {    private CamelSample2() {    }     public static void main(String[] args) {       CamelSample2 cs = new CamelSample2();       try {          cs.run();       } catch (Exception e) {       }    }     private void run() throws Exception {       CamelContext context = new DefaultCamelContext();              ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(             "vm://localhost?broker.persistent=false");       context.addComponent("test-jms"  JmsComponent             .jmsComponentAutoAcknowledge(connectionFactory));        context.addRoutes(new RouteBuilder() {          public void configure() {              from("test-jms:queue:test.queue").process(new Processor() {                public void process(Exchange e) {                    System.out.println("This was called - Body: " + e.getIn().getBody(String.class));                    final List<String> params = new ArrayList<String>();                    params.add(e.getIn().getBody(String.class)); ---->            e.getOut().setBody("Hello");  // params);                  }                            }).to("file://testfile.txt").process(new Processor() {               public void process(Exchange e) {                  System.out.println("In file's process");                 }                });            }       });                    CamelTemplate template = new CamelTemplate(context);       context.start();       for (int i = 0; i < 3; i++) {          System.out.println("i is: " + i);          template.sendBody("test-jms:queue:test.queue"  "" + i);       }       Thread.sleep(60000 * 3);         context.stop();    } },Added code block in description. Hi Glen   I think you could add another process between camel-cxf endpoint and camel-file endpoint  this process could turn the list into the common object which could be consumed by camel-file endpoint.  Regards   Willem. Yes  I probably could do that. But I don't think that fixes the real problem here – should Camel really just quietly ignore the problem and keep running without giving the needed "In file's process" output? I would think that if Camel can't process the type  either it (a) goes ahead and prints "In file's process" anyway or (b) throws an exception listing the problem so the user can understand why he's not getting that message--IllegalStateException  perhaps.. I have reproduced the problem as a unit test. I do think its because there is no type converter that converts the list of string to something that can be streamed to the file.. I agree with Glen that Camel should have thrown somekind of error when producing the file as it could not generate the content.. Yes  the type converter will return null if there is no right convert method to be called. I agree we could add some check point in the file producer to throw the exception when it can't generate the file content. It could also be the common scenario for the other endpoints.. If this is really the case then I do think the type converter system should handle it and throw a exception since it could not convert it. Dont we have a ticket for this already?. It is the problem with type converters. But in Glens use-case the DeadLetterChannel will handle the problem and Camel does indeed report an error on this  2008-05-05 06:09:59 234 [main           ] ERROR DeadLetterChannel              - Failed delivery for exchangeId: ID-claus-acer/1882-1209960593968/0-0. On delivery attempt: 5 caught: org.apache.camel.InvalidPayloadException: No in body available of type: java.io.InputStream but has value: [Hello World] of type: java.util.ArrayList on: FileMessage: issue489 on the exchange: Exchange[FileMessage: issue489] org.apache.camel.InvalidPayloadException: No in body available of type: java.io.InputStream but has value: [Hello World] of type: java.util.ArrayList on: FileMessage: issue489 on the exchange: Exchange[FileMessage: issue489] 	at org.apache.camel.util.ExchangeHelper.getMandatoryInBody(ExchangeHelper.java:127)   Glen you should check your log files for such kind of error message as above InvalidPayloadException. The exchange is moved to the default error queue (see wiki documentation elsewhere on the DeadLetterChannel).  Glen if you need to be able to stream an array of String to a file then you can add your own converter that does the needed conversion for the FileProducer      @Converter     public static InputStream toString(List<String> params) {         StringBuffer sb = new StringBuffer();         for (String s : params) {             sb.append(s).append("\n");         }         return IOConverter.toInputStream(sb.toString());     }. CAMEL-84 is the ticket for the error reporting of no type converters found.  However the problem is that camel-core and all now is used to the fact that some conversions should return null. I am working on a patch. See CAMEL-84. Quote: "Glen you should check your log files for such kind of error message as above InvalidPayloadException."  Where are my "log files"? I'm not explicitly configuring any logging here-does anyone have any simple samples of configuring logging? The camel page[1]  just provides generic links to commons-logging and log4J  which isn't very convenient or helpful. (Also  there seems to be something wrong with the website on the DeadLetterChannel[2] (and other pages as well)-code is no longer being shown  it just says: "An error occurred: Connection refused. The system administrator has been notified.")  [1] http://activemq.apache.org/camel/how-do-i-change-the-logging.html [2] http://activemq.apache.org/camel/dead-letter-channel.html. Glen we are in bad luck recently. The Apache infrastructure changed hardware for the SVN server. So I guess it has the influence of the wiki pages not showing code snippets from the source files.  To enable logging you could do as I (I prefer log4j anytime over Java Util Logging).  Add log4j.jar to your classpath copy a log4j.properties to the root folder where your compiler have generated the .class files of your source code (lo4j.properties must be on the classpath) You can grap a log4j.properties from the Camel distributions from the examples folder such as: \examples\camel-example-bam\src\main\resources  In the log4j.properties file you can change the log levels from INFO to DEBUG to get much more verbose logging. But the error should be reported at ERROR level so you should see it anyway.. The code snippets for the DeadLetterChannel can be viewed using SVN viewer (viewvc)  http://svn.apache.org/viewvc/activemq/camel/trunk/camel-core/src/test/java/org/apache/camel/builder/ErrorHandlerTest.java?view=markup. Glen if you are able to see the ERROR in the log files / system out console etc.  Then you should try adding the type converter shown above the does the conversions from List<String> to InputStream as the FileComponent expects. Then the ERROR should be gone and you are good.. If I understand you correctly  CAMEL-84 (whenever it's fixed) will throw an exception when it cannot find the correct converter type. That will allow newbies like me to be able to visually see this error from a command-line terminal window without first needing to configure logging. That sounds good. If so  this issue can be closed or marked as a duplicate of CAMEL-84. Also  I updated the logging page with your instructions above so others can quickly reference it. Thanks!. The user had a difficulty identify the problem. CAMEL-84 would provided better user feedback.. Hi Glenn  Glad you got it working with the logging. And nice addition to the wiki - thanks   I have closed this as wont fix as it is basically you as the end user that uses a custom object type on the body. The resolution is to provide your own conversion using the annotation tags etc.. 
Improvement,Willem Jiang,2008-05-03T01:39:19+0000,1209778759,Currently if there is a two way route using jms component replies are collected via a temporary destination. However it is also desirable to be able to have a persistent queue to be used as replyTo destination.   The attached patch address this requirement.  in order to have a persistent replyTo destination used in your route the route should look like this:  from("amq-1:queue:foo?replyTo=fooReply").to(...)  There are two strategies for correlating requests and replies when the replyTo destination is a persistent one.  1. This is the same strategy that used when used with temporary replyTo destination. Either JMSCorrelationID or MessageID are used. No changes are needed to have JMSCorrelationID to correlate request with reply and useMessgeIDAsCorrelationID=true needs to be passed into the route URI or via configuration for using MessageID as correlation id.   For example: "amq-1:queue:foo?useMessgeIDAsCorrelationID=true&replyTo=queue:fooReply"  However because this is a persistent replyTo destination and a shared resource the implementation has to dynamically update the consumer's selector waiting on possible replies in order to avoid consuming someone else's messages. This is very inefficient in JMS.   So to deal with this issues a second strategy is introduced.  2. The second strategy is to use a well known selector name that you provide at configuration time. This selector will then be used to create a reply awaiting consumer with a unique value for each of those consumer instances. To pass the selector name use this configuration property "replyToDestinationSelectorName".    For example: "amq-1:queue:foo?replyToDestinationSelectorName=replySelector&replyTo=queue:fooReply"  This selector will be available in the Exchange's incoming message header in your ultimate destination processor or as a String property in JMSMessage. You will need to copy this property back into the reply message so that the reply consumer will have its selector match the reply's message selector value and receive the message  This is a cumulative patch that address this Jira as well: https://issues.apache.org/activemq/browse/CAMEL-474,Applied patch with thanks to Marat.. Thanks Willem.. 
Sub-task,Claus Ibsen,2008-05-03T06:35:06+0000,1209796506,Created this subtask to spin off work from CAMEL-335  ServiceMix 3 has support for secure protocols. Lars pointed to the code we could use for inspiration. Camel should support these schemes  	pop3s 	imaps 	smtps,Camel has support for these protocols out-of-the-box as the underlying framework has this support such as the SUN mail framework v1.4.  However having a mocked unit test with SSL is a bit difficult as the current mock framework does not support SSL.. Added documentation to wiki DONE. Add the extended security stuff from ServiceMix to use a dummy trust manager. Got Camel to poll my gmail box so imaps is working fine. Will add it to wiki for SSL sample. Added dummyTrustManager option and wiki documentation. 
Sub-task,Claus Ibsen,2008-05-03T06:36:08+0000,1209796568,,Destinations to be configured as (more intuitive for email):  TO CC BCC. 
New Feature,Unassigned,2008-05-04T07:31:50+0000,1209886310,The camel mail component registers nntp as a supported protocol but there is no javacode or documentation how to use it. It is currently not support out-of-the-box in Camel. This feature has been requested by an end-user by private mail correspondence.,Is somebody working on this issue or is it planned an nntp protocol support?  It will be good to know since we like to add this feature but don't like to duplicate work efforts.. Sebastian.  Nobody has started working on this yet. However the person from the private mail said he would like to give it a go and maybe contribute it back to Camel.  We love contributions. And if you supply a patch granted Apache license rights then I has a very high chance that it will be accepted and committed. http://activemq.apache.org/camel/contributing.html  I took a quick glimpse to look for a good NNTP open source library to use under the covers and only found Apache Commons Net. Is there a better option or is it the best candidate to use? What feature should the NNTP support have? What are your requirements Sebastian?  And btw voting for the tickets will give people a better chance to work on the more popular ones than not.. Claus   I am aware of:  Apache Commons Net Topcoders nntp client: http://software.topcoder.com/catalog/c_component.jsp?comp=5800322&ver=1 JScape: http://www.jscape.com/inetfactory/nntp.html  But I think apache commons is the way to go.  IMHO the Camel component basic features must include:  Caching: Retrieving only new articles from server and save them locally Stateful: For each routing configuration it can remember the messages already received.  I don't know if it's too ventured to say this  but I think search engines like Nutch must migrate to an ESB/EIP concept  so if you want to build an nntp search engine you just connect your nntp connector to a system indexer.. Sorry I dont see currently a demand for this ticket.  We love contributions so if anyone in the community want to step up and create such a component  then that would be great.. 
Bug,Claus Ibsen,2008-05-05T14:07:00+0000,1209996420,Because CamelBeanPostProcessor.setCamelContext(SpringCamelContext) takes the class SpringCamelContext as its parameter  bean initialization fails if SpringCamelContext is proxied.  The error is as follows:   org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'camelContext:beanPostProcessor': Initialization of bean failed; nested exception is org.springframework.beans.TypeMismatchException: Failed to convert property value of type [$Proxy61] to required type [org.apache.camel.spring.SpringCamelContext] for property 'camelContext'; nested exception is java.lang.IllegalArgumentException: Cannot convert value of type [$Proxy61] to required type [org.apache.camel.spring.SpringCamelContext] for property 'camelContext': no matching editors or conversion strategy found    In my project's Spring conf  we declare <aop:aspectj-autoproxy/>  which causes all Spring beans to be proxied.  This triggers the problem shown above.  The problem should be reproducible by adding <aop:aspectj-autoproxy/> to any Spring config that uses <camel:camelContext>.  The fix will be to separate the interface and class for SpringCamelContext  and use the interface where appropriate.,Added code blocks.  Dean  Can you whirl together a small sample / preferred unit test that demonstrates this bug? Would aid much during the fixing of the bug.. Dan what version of Spring are you using?. Dan I have refined a sample in camel trunk that uses the aop autoproxy stuff and I can not reproduce the bug you have reported.  The sample is the camel-example-jms-spring.  Can you give any hints how to reproduce the bug? Have you tried with a Camel 1.4 version? There is a RC here:  Please find a first release candidate of apache-camel-1.4.0 here: http://people.apache.org/~hadrian/apache-camel-1.4.0-RC1/maven2/. Or if using maven try the 1.4-SNAPSHOT version instead.. Thanks very much  Claus  for looking at this. I'm sorry I didn't find time to submit an example. I was using Camel 1.3.0. I'll try with 1.4. I haven't been able to find camel-example-jms-spring; could you point me to it?. Its in svn trunk.  However I can attach it to this jira as a .zip file later if you rather would like this  instead of having to checkout the code from svn.. I did check out https://svn.apache.org/repos/asf/activemq/camel/trunk. Unfortunately  I am stuck trying to get it to compile in maven:  [INFO] ------------------------------------------------------------------------ [INFO] Building Camel :: CXF [INFO] task-segment: [install] [INFO] ------------------------------------------------------------------------ Downloading: http://repo1.maven.org/maven2//com/sun/xml/fastinfoset/FastInfoset/1.2.2/FastInfoset-1.2.2.pom Downloading: http://people.apache.org/repo/m2-incubating-repository/com/sun/xml/fastinfoset/FastInfoset/1.2.2/FastInfoset-1.2.2.pom Downloading: http://repo.open.iona.com/maven2/com/sun/xml/fastinfoset/FastInfoset/1.2.2/FastInfoset-1.2.2.pom Downloading: http://uface.googlecode.com/svn/maven//com/sun/xml/fastinfoset/FastInfoset/1.2.2/FastInfoset-1.2.2.pom Downloading: http://repo1.maven.org/maven2/com/sun/xml/fastinfoset/FastInfoset/1.2.2/FastInfoset-1.2.2.pom [INFO] [cxf-codegen:wsdl2java  {execution: generate-test-sources}  ] [INFO] [resources:resources] [INFO] Using default encoding to copy filtered resources. [INFO] [compiler:compile] [INFO] Compiling 23 source files to C:\java\apache-camel-svn\camel\components\camel-cxf\target\classes [INFO] ------------------------------------------------------------------------ [ERROR] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Compilation failure C:\java\apache-camel-svn\camel\components\camel-cxf\target\generated\org\apache\camel\wsdl_first\PersonService.java:[67 20] cannot find symbol symbol : method getPort(javax.xml.namespace.QName java.lang.Class<org.apache.camel.wsdl_first.Person> javax.xml.ws.WebServiceFeature[]) location: class javax.xml.ws.Service  I got as far as downloading the JAXWS package manually and trying to follow its installation process  but so far I'm stuck there. I am assuming maven doesn't install that package automatically because it thinks of it as built into the JDK  but Sun doesn't install it automatically because it is javax (and hence an add-on)?  I did review the Camel 1.4.0 source code to see if the problem appears to have been fixed  and it does not appear to have been. The fundamental problem  if I am following the code correctly  is that org.apache.camel.spring.CamelBeanPostProcessor.java is being placed into the spring configuration as a bean. It has a method setCamelContext(SpringCamelContext)  which is being driven from the Spring configuration also. However  SpringCamelContext is a class  not an interface. This means that if the SpringCamelContext is proxied by <aop:aspectj-autoproxy/>  the resulting proxy is not a SpringCamelContext. So the attempt to invoke CamelBeanPostProcessor.setCamelContext(the proxy) fails.  I assume the test you added was examples/camel-example-spring-jms/src/main/resources/META-INF/spring/camel-server-aop.xml. I find myself wondering whether the <aop:aspectj-autoproxy/> declaration in that file applies to the beans in the previously included <import resource="camel-server.xml"/>. Perhaps you have to either move the <aop:aspectj-autoproxy/> up above the <import resource="camel-server.xml"/>  or else do the <aop:aspectj-autoproxy/> in the same file as the  <camel:camelContext id="camel"> <camel:package>org.apache.camel.example.server</camel:package> </camel:camelContext>  ?. I am sure I had them in one file to start with. But then I changed to two files to cater for two kind of servers (with and without AOP) in the example.  Do you do anything special to proxy the camel bean?  I am sure we can extract and interface and let Camel use this but I would like to have a unit test that demonstrates the bug before starting the refactoring. Okay I gotta jump into the bed.. Here is the Spring configuration file in which the problem occurs. Note that the portion of the XML that actually declares the <camel:camelContext> (and thus triggers the problem) is commented out with a reference to this issue.. Hi Dean  Thanks for your spring file. I can see that the aspectj autoproxy declaration is in line 660 in your file.  I dont suppose you do some fancy magic in this file that is relevant for this bug? <import resource="spring-magic.xml"/>  And in your file the Camel XSD reference is Camel 1.2. What version are you exactly using of Camel?. Dean I have tried a single file and can not reproduce the bug.  However I noticed this answer that has been there all the time  ClassPathXmlApplicationContext INFO  Bean 'camel' is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)   That means that the CamelBeanPostProcessor that is being created during post processing is not auto proxied. Dean do you see this INFO logging from Spring?  This is from the spring 2.5.3 source  in its AbstractApplicationContext  		public Object postProcessAfterInitialization(Object bean  String beanName) { 			if (!(bean instanceof BeanPostProcessor) && 					this.beanFactory.getBeanPostProcessorCount() < this.beanPostProcessorTargetCount) { 				if (logger.isInfoEnabled()) { 					logger.info("Bean '" + beanName + "' is not eligible for getting processed by all " + 							"BeanPostProcessors (for example: not eligible for auto-proxying)"); 				} 			} 			return bean; 		}   But I am running the example with Spring 2.5.4. What version of Spring are you using?. I tried the example-spring-jms with Camel 1.3.0 and it also works out-of-the-box  D:\project\camel\examples\camel-example-spring-jms>mvn clean compile exec:java -PCamelServer494 [INFO] Scanning for projects... [INFO] Searching repository for plugin with prefix: 'exec'. [INFO] ------------------------------------------------------------------------ [INFO] Building Camel :: Example :: Spring :: JMS [INFO]    task-segment: [clean  compile  exec:java] [INFO] ------------------------------------------------------------------------ [INFO] [clean:clean] [INFO] Deleting directory D:\project\camel\examples\camel-example-spring-jms\target [INFO] [resources:resources] [INFO] Using default encoding to copy filtered resources. [INFO] [compiler:compile] [INFO] Compiling 6 source files to D:\project\camel\examples\camel-example-spring-jms\target\classes [INFO] Preparing exec:java [INFO] No goals needed for project - skipping [INFO] [exec:java] [pache.camel.spring.Main.main()] Main                           INFO  Apache Camel 1.3.0 starting [pache.camel.spring.Main.main()] ClassPathXmlApplicationContext INFO  Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@19fe451: display name [org.springframework.context.support.ClassPathXmlApplicationContext@19fe451]; startup date [Tue Jun 10 06:38:16 CEST 2008]; root o f context hierarchy [pache.camel.spring.Main.main()] XmlBeanDefinitionReader        INFO  Loading XML bean definitions from class path resource [META-INF/spring/camel-494.xml] [pache.camel.spring.Main.main()] ClassPathXmlApplicationContext INFO  Bean factory for application context [org.springframework.context.support.ClassPathXmlApplicationContext@19fe451]: org.springframework.beans.factory.support.DefaultListableBeanFactory@1757337 [pache.camel.spring.Main.main()] ClassPathXmlApplicationContext INFO  Bean 'org.apache.camel.example.server.ServerRoutes' is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) [pache.camel.spring.Main.main()] ClassPathXmlApplicationContext INFO  Bean 'Claus' is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) [pache.camel.spring.Main.main()] ClassPathXmlApplicationContext INFO  Bean 'Claus' is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) [pache.camel.spring.Main.main()] DefaultListableBeanFactory     INFO  Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@1757337: defining beans [multiplier org.springframework.context.annotation.internalRequiredAnnotationProcessor org.springframewor k.context.annotation.internalAutowiredAnnotationProcessor Claus:beanPostProcessor Claus AuditTracker AuditStore jms org.apache.activemq.xbean.XBeanBrokerService#0 org.springframework.aop.config.internalAutoProxyCreator]; root of factory hierarchy [pache.camel.spring.Main.main()] BrokerService                  INFO  Using Persistence Adapter: MemoryPersistenceAdapter [pache.camel.spring.Main.main()] BrokerService                  INFO  ActiveMQ 5.1.0 JMS Message Broker (localhost) is starting [pache.camel.spring.Main.main()] BrokerService                  INFO  For help or more information please see: http://activemq.apache.org/ [pache.camel.spring.Main.main()] TransportServerThreadSupport   INFO  Listening for connections at: tcp://claus-acer:61616 [pache.camel.spring.Main.main()] TransportConnector             INFO  Connector tcp Started [pache.camel.spring.Main.main()] BrokerService                  INFO  ActiveMQ JMS Message Broker (localhost  ID:claus-acer-2460-1213072701953-0:0) started [pache.camel.spring.Main.main()] TransportConnector             INFO  Connector vm://localhost Started. Thanks for all of your hard work on this  Claus! I am enclosing the "spring-magic.xml" file that you asked about.. Claus  I think I should take the next step on this end. If you are able to help me get unstuck and take it  that would be great. But in any case  I need to reproduce my problem on a small test case.  Since I was unable to compile the project in maven (as I reported above)  I decided to try to use maven to generate an IntelliJ IDEA project. That failed too:  Downloading: http://people.apache.org/repo/m2-incubating-repository/org/apache/camel/maven-html-to-pdf/1.4-SNAPSHOT/maven-html-to-pdf-1.4-SNAPSHOT.jar Downloading: http://people.apache.org/repo/m2-snapshot-repository/org/apache/camel/maven-html-to-pdf/1.4-SNAPSHOT/maven-html-to-pdf-1.4-SNAPSHOT.jar Downloading: http://download.java.net/maven/2/org/apache/camel/maven-html-to-pdf/1.4-SNAPSHOT/maven-html-to-pdf-1.4-SNAPSHOT.jar Downloading: http://repository.codehaus.org//org/apache/camel/maven-html-to-pdf/1.4-SNAPSHOT/maven-html-to-pdf-1.4-SNAPSHOT.jar Downloading: http://repo.open.iona.com/maven2/org/apache/camel/maven-html-to-pdf/1.4-SNAPSHOT/maven-html-to-pdf-1.4-SNAPSHOT.jar [INFO] ------------------------------------------------------------------------ [ERROR] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] A required plugin was not found: Plugin could not be found - check that the goal name is correct: Unable to download the artifact from any repository  Try downloading the file manually from the project website.  Then  install it using the command: mvn install:install-file -DgroupId=org.apache.camel -DartifactId=maven-html-to-pdf -Dversion=1.4-SNAPSHOT -Dpackaging=maven-plugin -Dfile=/path/to/file  Alternatively  if you host your own repository you can deploy the file there: mvn deploy:deploy-file -DgroupId=org.apache.camel -DartifactId=maven-html-to-pdf -Dversion=1.4-SNAPSHOT -Dpackaging=maven-plugin -Dfile=/path/to/file -Durl=[url] -DrepositoryId=[id]  org.apache.camel:maven-html-to-pdf:maven-plugin:1.4-SNAPSHOT  from the specified remote repositories: apache.snapshots (http://people.apache.org/repo/m2-snapshot-repository)  codehaus.repo (http://repository.codehaus.org/)  open.iona.m2 (http://repo.open.iona.com/maven2)  apache.incubating.releases (http://people.apache.org/repo/m2-incubating-repository)  maven2-repository.dev.java.net (http://download.java.net/maven/2)  central (http://repo1.maven.org/maven2)  org.apache.camel:maven-html-to-pdf:maven-plugin:1.4-SNAPSHOT  from the specified remote repositories: apache.snapshots (http://people.apache.org/repo/m2-snapshot-repository)  codehaus.repo (http://repository.codehaus.org/)  open.iona.m2 (http://repo.open.iona.com/maven2)  apache.incubating.releases (http://people.apache.org/repo/m2-incubating-repository)  maven2-repository.dev.java.net (http://download.java.net/maven/2)  central (http://repo1.maven.org/maven2)  If you are able to help with either a native Maven compile or a Maven -> Idea conversion  that would be great. Otherwise  I'll try porting your test case to ant to see it it works or breaks for me.. Dean.  If you follow the instructions from: http://activemq.apache.org/camel/building.html you should be able to build the source from SVN checkout.  If you are still having problems then you could build only what you need:  cd camel-core mvn clean install -Dtest=false  cd .. cd components mvn clean install -Dtest=false  cd .. cd examples mvn clean install -Dtest=false. And you should be able to generate the idea project files for the example  cd examples cd camel-examples-spring-jms mvn idea:idea. Dean you can also try the camel 1.4.0 release candidate  Please find a first release candidate of apache-camel-1.4.0 here: http://people.apache.org/~hadrian/apache-camel-1.4.0-RC1/maven2/  It doesn't include all the latest AOP changes to the example but you could try with Camel 1.4.0 on your existing project.. mvn package of the camel-example-spring-jms example.  Need to find all the jars needed on the CP yourself.. Dean any update on this? We are homing into a Camel 1.4 release and want to either fix it asap or reschedule it for 1.5 or later.. Yikes – thanks for the heads up! I like the ASAP option . Do I still have a couple of days to jump on this? I don't know whether I can work on it tomorrow  but I'm fairly sure I can on Thursday.. Hi Dean  Any updates? I am sorry but I can not reproduce the problem with Camel 1.4 and Spring 2.5.4.. No updates yet. I'm trying very hard to get back to this  but we have done a new beta release of our own software that has required "all hands". If Camel 1.4 has to ship with no further work in this area  I understand. At the same time  I'm holding out hope that I can return to this issue this week. Thank you  Claus  for your diligent and well-chosen work to help isolate this issue.. One other thought on this: Any class that is intended as a Spring bean really should make its functionality available through an interface. Proxying class interfaces in Spring is possible in many cases  but is certainly not the norm or the recommended approach. Although I agree  Claus  that the best first approach was to create a unit test that would fail  would you consider creating an interface for SpringCamelContext just as a matter of good general Spring practice  and just verifying that the existing unit tests still work?. Sorry  my choice of language was confusing. I should say "proxying class APIs in Spring is possible...but not the norm".. Hi Dean  I agree that Camel should prefer to use interfaces  However I do think at current time its to late to refactor the code in the 1.4 timeframe.  I will schedule this for 1.5 and could you please try out the 1.4 distro when its released.. Dean any update on this? Have you tried with the new Camel 1.4 release?  I am about to close it as Cannot Reproduce.. Sadly  I don't have time to focus on this for a while. Because of this problem  we ended up using RMI for our message instead of Camel/ActiveMQ. I would still like to integrate Camel sometime; I think it will have many benefits. But you can close this for now  and I will report a new ticket if I have problems when we try it again. Thanks for your work on this! Camel seems like it will be a great package for us one day.. Dean I am sorry it didn't work out-of-the-box for you.  Yes by all means if you have time later and still have issues then open a new ticket.. Closing old tickets. 
Sub-task,Claus Ibsen,2008-05-08T07:42:01+0000,1210232521,I should add some validation logic in the endpoint when an consumer is created to scan for smtp that is invalid. (Added on my ticket list now),
Sub-task,Claus Ibsen,2008-05-08T07:49:22+0000,1210232962,,Consuming mails (polling) with minimal out-of-the-box settings is invoked to often. We should probably add a sensitive delay default of etc. 60 seconds  to not exhaust the mail server.. Default delay for MailConsumer is now 60 seconds (instead of 500 millis).  End user can of course override this value with a value in consumer.delay URI parameter. Updated wiki with this new default. 
Task,Willem Jiang,2008-05-08T08:52:06+0000,1210236726,Since CXF 2.0.6 released for a while   we need to upgrade the CXF to 2.0.6.,The patch is committed into the svn repository.. 
Bug,James Strachan,2008-05-08T09:09:35+0000,1210237775,,Fix applied - see test MoveFilesToDirectoryWithNoopTest. 
Bug,Jonathan Anstey,2008-05-08T17:24:17+0000,1210267457,camel-core/src/main/java/org/apache/camel/model/ProcessorType.java:[871 12] inconvertible types  found   : org.apache.camel.model.ProcessorType<Type>  required: org.apache.camel.model.InterceptType  camel-core/src/main/java/org/apache/camel/model/ProcessorType.java:[872 39] inconvertible types  found   : org.apache.camel.model.ProcessorType<Type>  required: org.apache.camel.model.InterceptType  camel-core/src/main/java/org/apache/camel/model/ProcessorType.java:[884 12] inconvertible types  found   : org.apache.camel.model.ProcessorType<Type>  required: org.apache.camel.model.InterceptType  camel-core/src/main/java/org/apache/camel/model/ProcessorType.java:[885 38] inconvertible types  found   : org.apache.camel.model.ProcessorType<Type>  required: org.apache.camel.model.InterceptType,Fixes the compile error and doesn't change functionality. Applied the patch with thanks.. Closing 1.4 issues. 
Bug,Willem Jiang,2008-05-10T17:17:43+0000,1210439863,Typo in StickyLoadBalanceStrategy causes class member loadBalancerType not getting initialized.    public StickyLoadBalanceStrategy(ExpressionType expressionType  LoadBalancerType loadBalancerTyep) {,Applied patch with thanks to William.. 
Improvement,Jonathan Anstey,2008-05-11T08:06:50+0000,1210493210,ScheduledPollConsumer.run() swallows any exception thrown from a polling consumer.       /**      * Invoked whenever we should be polled      */     public void run() {         LOG.debug("Starting to poll");         try {             poll();         } catch (Exception e) {             LOG.warn("Caught: " + e  e);         }     }    See this forum http://www.nabble.com/Re%3A-svn-commit%3A-r654414---in--activemq-camel-trunk-components-camel-mail-src%3A-main-java-org-apache-camel-component-mail--test-java-org-apache-camel-component-mail--td17121927s22882.html#a17122075,Fix in revision 696845.. 
Task,Claus Ibsen,2008-05-12T12:30:35+0000,1210595435,org.springframework.jms.listener.serversession.ServerSessionFactory   	@deprecated as of Spring 2.5  in favor of DefaultMessageListenerContainer 	and JmsMessageEndpointManager. To be removed in Spring 3.0.    We should change Camel to use the new classes before Spring 3.0 starts rolling out so we can be compatible with Spring.,davsclaus jstrachan - as I read CAMEL-502 I see it as we "just" need to remove the consumer type ServerSessionPool since Spring's DefaultMessageListenerContainer is now a super duper general purpose JMS listener 14:37 jstrachan agreed. Removed spring-jms code that was marked as @deprecated in Spring. Also removed some methods marked as @deprecated in Camel.  Do NOT backport this to Camel 1.x branch. as it removes code in Camel.. Closing 2.0m1 tickets. 
Bug,Hadrian Zbarcea,2008-05-12T13:55:54+0000,1210600554,Currently  the camel-cxf pom declares dependencies on two test JARs without specifying their scope:    <dependency>       <groupId>org.apache.camel</groupId>       <artifactId>camel-core</artifactId>       <type>test-jar</type>     </dependency>      <dependency>       <groupId>org.apache.camel</groupId>       <artifactId>camel-spring</artifactId>       <type>test-jar</type>           </dependency>  This means that the scope defaults to "compile"  and those test JARs are included with every compile  although they aren't really needed.  The fix would be to add a <scope>test</scope> element to both of these dependencies.,Willem this is your territory. Andri  nice spot! Thanks!. 
Bug,Claus Ibsen,2008-05-12T14:00:11+0000,1210600811,The AtomProducer that creates the feed does not set all needed entries such as author and other fields.  There is a TODO in the code: // TODO categories  authors etc  Also we need an unit test that covers the producing part. We now only have the consuming.,I refactored the atom component:  removed the producer as it does make sense currently improved the consumer to add options on the uri configuration added unit tests  Now it needs documentation on the wiki - there is a ticket for this. Oh I forgot to set a sensible default for the AtomConsumer as it will now consume every 500 millis and that is to fast.  We should set a default of one poll pr. 60 seconds.. Refactored and added a default poll interval of 60 seconds.. 
Improvement,Claus Ibsen,2008-05-12T15:16:46+0000,1210605406,right now its a bit tricky creating Endpoint instances in a spring XML using the <bean><property> mechanism.  It'd be nice to be able to configure them more easily as...   <bean id="foo" class="org.apache.camel.component.file.FileEndpoint">   <property name="foo" value="bar"/>     ...    type stuff and have folks Spring IDE's smart complete stuff etc,See comments here: http://www.nabble.com/Re%3A-Camel-1.4---Improved-URI-validation---%28Component-Writers-pay-attention%29---Feedback-please-p17209308s22882.html  we have a test for the file endpoint now  SpringFileRouteTest.java. http://svn.apache.org/repos/asf/activemq/camel/trunk/components/camel-spring/src/test/java/org/apache/camel/component/file/SpringFileRouteTest.java  the spring XML is here http://svn.apache.org/repos/asf/activemq/camel/trunk/components/camel-spring/src/test/resources/org/apache/camel/component/file/SpringFileRouteTest-context.xml. Moving to 2.0. JmsEndpoint can now be created nicely in a Spring XML or Java Config...  https://svn.apache.org/repos/asf/activemq/camel/trunk/components/camel-jms/src/test/resources/org/apache/camel/component/jms/config/JmsEndpointWithCustomDestinationTest-context.xml  see the definition of customJmsEndpoint. James I will take over this tedious work as part of my next focus in Camel 2.0.  Then you can lookup at the dont copy to much the exchange  please. camel-core DONE camel-jms DONE camel-ftp DONE camel-mail DONE camel-mina DONE camel-http DONE camel-jdbc DONE camel-sql DONE camel-atom DONE camel-rss DONE camel-freemarker DONE came-velocity DONE camel-quartz DONE camel-xmpp DONE came-jpa DONE camel-rmi DONE  camel-jetty (Need to be created with component) camel-restlet (Need to be created with component). To allow setting cosumer scheduler options from spring bean (delay  initialDelay etc.) DONE  You can do it like this:          <property name="consumerProperties">             <map key-type="java.lang.String">                 <entry key="initialDelay" value="2000"/>             </map>         </property>. Not all components will be done  only the most important. That are a few not often used that is a bit of a hazzle to get working such as the test component.. Its easier to fix when the endpoint is not so dependt on component working.. Okay got nearly all component fixed. I guess there might be a single rarely used component out there. If so and some end users wanted it as spring bean style then we can ticket for it later.. Closing 2.0m1 tickets. 
Improvement,Unassigned,2008-05-12T16:12:44+0000,1210608764,e.g. doing things like   <fileEndpoint directory="/foo/bar" noop="true"/> <jmsEndpoint destination="foo.bar"/>,Moving to 2.0. James I do not think we should go this way.  Looking at Mule and SI you need to add a ton of XML namespace wrabble which a lot of people forget to do correct and you get poor errors at start what the real cause is.  And the Spring XML is really good as is. So often you do not need to configure endpoints in the XML. And if needed the regular bean style works.. We dont want to go down that road. 
Improvement,Hadrian Zbarcea,2008-05-12T16:14:41+0000,1210608881,They don't add any value and are just a PITA . We zapped the generics on Processor and we should do the same for Expression & Predicate,test case applied along with a patch - many thanks!. Whoops - I closed the wrong JIRA  please ignore my previous comment. Done. Closing 2.0m1 tickets. 
Bug,Willem Jiang,2008-05-12T19:59:44+0000,1210622384,In InstrumentationAgentImpl.doStart()  the method createMBeanServer() is never get invoked if mbean server  is not injected because the getMBeanServer() always return non-null (the getMBeanServer() method always returns the platform mbean server)           if (getMBeanServer() == null)  {              // The MBeanServer was not injected             createMBeanServer();          }  A few side effects if not calling the createMBeanServer() method. 1. users always get platform mbean server 2. system properties processing in createMBeanServer() is bypassed 3. jmx connector is not created as it is created indirectly by the createMBeanServer() metthod.  I propose to invoke createMBeanServer() inside getMBeanServer() and update createMBeanServer() to read a property to determine when platform mbean should be use. (see attached patch),I propose the system property is named with org.apache.camel or similar name to indicate its a system property for Camel.  We should also remember to add this feature to a JMX wiki page whenever we get one up. There is already a ticket for the documentation.. I think the system property named with org.apache.camel.jmx as prefix is OK   I will head on the JMX wiki document right now .. 
Bug,Hadrian Zbarcea,2008-05-12T20:58:18+0000,1210625898,,Patch applied with many thanks!. 
Bug,Claus Ibsen,2008-05-13T03:43:12+0000,1210650192,There is a race condition in the test that both in/out aggregators are aggregating the output.  It looks like the InAggregator should to make a copy of the exchange.  The attached patch also gets rid of a unused method.,Applied patch with thanks to William Tam. Closing 1.4 issues. 
New Feature,Unassigned,2008-05-14T04:26:49+0000,1210739209,Currently the validation that certain properties is mandatory / optional and that they value is validated is handled ad-hoc by each endpoint or component. There should be somekind of support from camel-core that creates these objects that it has a callback method to allow the programmer of the component/endpoint to do some programmatic validation that the endpoint is in a validate state before its let's loose on the playground.  In spring this method is named afterPropertiesSet() AFAIR. We could have a similar callback method in camel-core for this.  We could also start to use somekind of annotations to mark what properties the endpoint/component support and which is mandatory/optional - kinda like the stuff for the Camel DSL. I think there is a ticket for this already.,the fix for this problem is for an Endpoint to just implement the org.apache.camel.Service interface - then it will have a standard start() / stop() method invoked?. Ah excellent sometimes the answer is already there.  Something to streamline for Camel 2.0 is that our components does property validation using the Service interface and we can improve the error feedback to the end-user why this component couldn't be started.. 
Task,Willem Jiang,2008-05-14T09:14:40+0000,1210756480,Current CamelContextFactoryBean do not handle the jmxAgent creation and we can't configure the JMX agent through the spring configuration file. We need add this feature in the feature release of Camel.,The patch is in the svn repository.. 
New Feature,Guillaume Nodet,2008-05-14T09:26:06+0000,1210757166,,Sending camel-spring/pom.xml Sending camel-spring/src/main/java/org/apache/camel/spring/handler/CamelNamespaceHandler.java Transmitting file data .. Committed revision 656177.. 
Improvement,Claus Ibsen,2008-05-14T12:20:54+0000,1210767654,Yes I think we need to document it much better how Camel handles this file/folder stuff when its  	consuming files 	producing files    It's a bit confusing when Camel uses the unique message id for filename instead of the path from the URI.,
Bug,Claus Ibsen,2008-05-15T04:07:43+0000,1210824463,The bean component doesn't seem to copy headers from the message and exchange across.  See forum topic: http://www.nabble.com/Missing-Headers-in-pipline-with-bean-components-td17234481s22882.html  First we should have a junit test that demonstrates the bug before digging into fixing it. Anyone feel free to contribute the unit test.,See the unit test: http://svn.apache.org/viewvc/activemq/camel/trunk/camel-core/src/test/java/org/apache/camel/component/bean/BeanPipelineTest.java?view=markup. 
Bug,Unassigned,2008-05-15T23:23:02+0000,1210893782,In the servicemix/conf/log4j.xml file if I don't set the org.apache.servicemix log level to DEBUG I get SAXParseExceptions.  For example  if I leave the log level to INFO as specified below      <logger name="org.apache.servicemix">         <!-- To enable debug logging  replace the INFO by DEBUG -->         <level value="INFO"/>     </logger>  I get the following:  11:24:14 008 | ERROR | pool-flow.seda.servicemix-camel-thread-1 | DeadLetterChannel        | .apache.camel.processor.Logger  143 | Failed delivery for exchangeId: ID-SLCWD04TY51/3277-1210699406563/0-0. On delivery attempt: 0 caught: org.apache.camel.RuntimeCamelException: org.xml.sax.SAXParseException: Premature end of file. org.apache.camel.RuntimeCamelException: org.xml.sax.SAXParseException: Premature end of file. 	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:326) 	at org.apache.camel.impl.converter.InstanceMethodTypeConverter.convertTo(InstanceMethodTypeConverter.java:50) 	at org.apache.camel.impl.converter.DefaultTypeConverter.convertTo(DefaultTypeConverter.java:64) 	at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:52) 	at org.apache.camel.builder.xml.XPathBuilder.getDocument(XPathBuilder.java:537) 	at org.apache.camel.builder.xml.XPathBuilder.evaluateAs(XPathBuilder.java:420) 	at org.apache.camel.builder.xml.XPathBuilder.matches(XPathBuilder.java:98) 	at org.apache.camel.builder.xml.XPathBuilder.matches(XPathBuilder.java:63) 	at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:47) 	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsynProcessorBridge.process(AsyncProcessorTypeConverter.java:44) 	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:146) 	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:90) 	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:40) 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:44) 	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:68) 	at org.apache.servicemix.camel.CamelJbiEndpoint.processInOut(CamelJbiEndpoint.java:73) 	at org.apache.servicemix.common.endpoints.ProviderEndpoint.process(ProviderEndpoint.java:109) 	at org.apache.servicemix.common.AsyncBaseLifeCycle.doProcess(AsyncBaseLifeCycle.java:538) 	at org.apache.servicemix.common.AsyncBaseLifeCycle.processExchange(AsyncBaseLifeCycle.java:490) 	at org.apache.servicemix.common.BaseLifeCycle.onMessageExchange(BaseLifeCycle.java:46) 	at org.apache.servicemix.jbi.messaging.DeliveryChannelImpl.processInBound(DeliveryChannelImpl.java:610) 	at org.apache.servicemix.jbi.nmr.flow.AbstractFlow.doRouting(AbstractFlow.java:172) 	at org.apache.servicemix.jbi.nmr.flow.seda.SedaFlow.doRouting(SedaFlow.java:167) 	at org.apache.servicemix.jbi.nmr.flow.seda.SedaQueue$1.run(SedaQueue.java:134) 	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907) 	at java.lang.Thread.run(Thread.java:619) Caused by: org.xml.sax.SAXParseException: Premature end of file. 	at org.apache.xerces.parsers.DOMParser.parse(Unknown Source) 	at org.apache.xerces.jaxp.DocumentBuilderImpl.parse(Unknown Source) 	at org.apache.camel.converter.jaxp.XmlConverter.toDOMSourceFromStream(XmlConverter.java:370) 	at org.apache.camel.converter.jaxp.XmlConverter.toDOMSource(XmlConverter.java:205) 	at org.apache.camel.converter.jaxp.XmlConverter.toDOMNode(XmlConverter.java:415) 	at org.apache.camel.converter.jaxp.XmlConverter.toDOMDocument(XmlConverter.java:523) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) 	at java.lang.reflect.Method.invoke(Method.java:597) 	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:322) 	... 26 more 11:24:15 006 | ERROR | pool-flow.seda.servicemix-camel-thread-1 | DeadLetterChannel        | .apache.camel.processor.Logger  143 | Failed delivery for exchangeId: ID-SLCWD04TY51/3277-1210699406563/0-0. On delivery attempt: 1 caught: org.apache.camel.RuntimeCamelException: org.xml.sax.SAXParseException: Premature end of file. org.apache.camel.RuntimeCamelException: org.xml.sax.SAXParseException: Premature end of file. 	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:326) 	at org.apache.camel.impl.converter.InstanceMethodTypeConverter.convertTo(InstanceMethodTypeConverter.java:50) 	at org.apache.camel.impl.converter.DefaultTypeConverter.convertTo(DefaultTypeConverter.java:64) 	at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:52) 	at org.apache.camel.builder.xml.XPathBuilder.getDocument(XPathBuilder.java:537) 	at org.apache.camel.builder.xml.XPathBuilder.evaluateAs(XPathBuilder.java:420) 	at org.apache.camel.builder.xml.XPathBuilder.matches(XPathBuilder.java:98) 	at org.apache.camel.builder.xml.XPathBuilder.matches(XPathBuilder.java:63) 	at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:47) 	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsynProcessorBridge.process(AsyncProcessorTypeConverter.java:44) 	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:146) 	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:90) 	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:40) 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:44) 	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:68) 	at org.apache.servicemix.camel.CamelJbiEndpoint.processInOut(CamelJbiEndpoint.java:73) 	at org.apache.servicemix.common.endpoints.ProviderEndpoint.process(ProviderEndpoint.java:109) 	at org.apache.servicemix.common.AsyncBaseLifeCycle.doProcess(AsyncBaseLifeCycle.java:538) 	at org.apache.servicemix.common.AsyncBaseLifeCycle.processExchange(AsyncBaseLifeCycle.java:490) 	at org.apache.servicemix.common.BaseLifeCycle.onMessageExchange(BaseLifeCycle.java:46) 	at org.apache.servicemix.jbi.messaging.DeliveryChannelImpl.processInBound(DeliveryChannelImpl.java:610) 	at org.apache.servicemix.jbi.nmr.flow.AbstractFlow.doRouting(AbstractFlow.java:172) 	at org.apache.servicemix.jbi.nmr.flow.seda.SedaFlow.doRouting(SedaFlow.java:167) 	at org.apache.servicemix.jbi.nmr.flow.seda.SedaQueue$1.run(SedaQueue.java:134) 	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907) 	at java.lang.Thread.run(Thread.java:619) Caused by: org.xml.sax.SAXParseException: Premature end of file. 	at org.apache.xerces.parsers.DOMParser.parse(Unknown Source) 	at org.apache.xerces.jaxp.DocumentBuilderImpl.parse(Unknown Source) 	at org.apache.camel.converter.jaxp.XmlConverter.toDOMSourceFromStream(XmlConverter.java:370) 	at org.apache.camel.converter.jaxp.XmlConverter.toDOMSource(XmlConverter.java:205) 	at org.apache.camel.converter.jaxp.XmlConverter.toDOMNode(XmlConverter.java:415) 	at org.apache.camel.converter.jaxp.XmlConverter.toDOMDocument(XmlConverter.java:523) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) 	at java.lang.reflect.Method.invoke(Method.java:597) 	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:322) 	... 26 more 11:24:16 019 | ERROR | pool-flow.seda.servicemix-camel-thread-1 | DeadLetterChannel        | .apache.camel.processor.Logger  143 | Failed delivery for exchangeId: ID-SLCWD04TY51/3277-1210699406563/0-0. On delivery attempt: 2 caught: org.apache.camel.RuntimeCamelException: org.xml.sax.SAXParseException: Premature end of file. org.apache.camel.RuntimeCamelException: org.xml.sax.SAXParseException: Premature end of file. 	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:326) 	at org.apache.camel.impl.converter.InstanceMethodTypeConverter.convertTo(InstanceMethodTypeConverter.java:50) 	at org.apache.camel.impl.converter.DefaultTypeConverter.convertTo(DefaultTypeConverter.java:64) 	at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:52) 	at org.apache.camel.builder.xml.XPathBuilder.getDocument(XPathBuilder.java:537) 	at org.apache.camel.builder.xml.XPathBuilder.evaluateAs(XPathBuilder.java:420) 	at org.apache.camel.builder.xml.XPathBuilder.matches(XPathBuilder.java:98) 	at org.apache.camel.builder.xml.XPathBuilder.matches(XPathBuilder.java:63) 	at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:47) 	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsynProcessorBridge.process(AsyncProcessorTypeConverter.java:44) 	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:146) 	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:90) 	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:40) 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:44) 	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:68) 	at org.apache.servicemix.camel.CamelJbiEndpoint.processInOut(CamelJbiEndpoint.java:73) 	at org.apache.servicemix.common.endpoints.ProviderEndpoint.process(ProviderEndpoint.java:109) 	at org.apache.servicemix.common.AsyncBaseLifeCycle.doProcess(AsyncBaseLifeCycle.java:538) 	at org.apache.servicemix.common.AsyncBaseLifeCycle.processExchange(AsyncBaseLifeCycle.java:490) 	at org.apache.servicemix.common.BaseLifeCycle.onMessageExchange(BaseLifeCycle.java:46) 	at org.apache.servicemix.jbi.messaging.DeliveryChannelImpl.processInBound(DeliveryChannelImpl.java:610) 	at org.apache.servicemix.jbi.nmr.flow.AbstractFlow.doRouting(AbstractFlow.java:172) 	at org.apache.servicemix.jbi.nmr.flow.seda.SedaFlow.doRouting(SedaFlow.java:167) 	at org.apache.servicemix.jbi.nmr.flow.seda.SedaQueue$1.run(SedaQueue.java:134) 	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907) 	at java.lang.Thread.run(Thread.java:619) Caused by: org.xml.sax.SAXParseException: Premature end of file. 	at org.apache.xerces.parsers.DOMParser.parse(Unknown Source) 	at org.apache.xerces.jaxp.DocumentBuilderImpl.parse(Unknown Source) 	at org.apache.camel.converter.jaxp.XmlConverter.toDOMSourceFromStream(XmlConverter.java:370) 	at org.apache.camel.converter.jaxp.XmlConverter.toDOMSource(XmlConverter.java:205) 	at org.apache.camel.converter.jaxp.XmlConverter.toDOMNode(XmlConverter.java:415) 	at org.apache.camel.converter.jaxp.XmlConverter.toDOMDocument(XmlConverter.java:523) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) 	at java.lang.reflect.Method.invoke(Method.java:597) 	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:322) 	... 26 more 11:24:16 129 | ERROR | pool-flow.seda.servicemix-camel-thread-2 | DeadLetterChannel        | .apache.camel.processor.Logger  143 | Failed delivery for exchangeId: ID-SLCWD04TY51/3277-1210699406563/0-1. On delivery attempt: 0 caught: org.apache.camel.RuntimeCamelException: org.xml.sax.SAXParseException: Premature end of file. org.apache.camel.RuntimeCamelException: org.xml.sax.SAXParseException: Premature end of file. 	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:326) 	at org.apache.camel.impl.converter.InstanceMethodTypeConverter.convertTo(InstanceMethodTypeConverter.java:50) 	at org.apache.camel.impl.converter.DefaultTypeConverter.convertTo(DefaultTypeConverter.java:64) 	at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:52) 	at org.apache.camel.builder.xml.XPathBuilder.getDocument(XPathBuilder.java:537) 	at org.apache.camel.builder.xml.XPathBuilder.evaluateAs(XPathBuilder.java:420) 	at org.apache.camel.builder.xml.XPathBuilder.matches(XPathBuilder.java:98) 	at org.apache.camel.builder.xml.XPathBuilder.matches(XPathBuilder.java:63) 	at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:47) 	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsynProcessorBridge.process(AsyncProcessorTypeConverter.java:44) 	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:146) 	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:90) 	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:40) 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:44) 	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:68) 	at org.apache.servicemix.camel.CamelJbiEndpoint.processInOut(CamelJbiEndpoint.java:73) 	at org.apache.servicemix.common.endpoints.ProviderEndpoint.process(ProviderEndpoint.java:109) 	at org.apache.servicemix.common.AsyncBaseLifeCycle.doProcess(AsyncBaseLifeCycle.java:538) 	at org.apache.servicemix.common.AsyncBaseLifeCycle.processExchange(AsyncBaseLifeCycle.java:490) 	at org.apache.servicemix.common.BaseLifeCycle.onMessageExchange(BaseLifeCycle.java:46) 	at org.apache.servicemix.jbi.messaging.DeliveryChannelImpl.processInBound(DeliveryChannelImpl.java:610) 	at org.apache.servicemix.jbi.nmr.flow.AbstractFlow.doRouting(AbstractFlow.java:172) 	at org.apache.servicemix.jbi.nmr.flow.seda.SedaFlow.doRouting(SedaFlow.java:167) 	at org.apache.servicemix.jbi.nmr.flow.seda.SedaQueue$1.run(SedaQueue.java:134) 	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907) 	at java.lang.Thread.run(Thread.java:619) Caused by: org.xml.sax.SAXParseException: Premature end of file. 	at org.apache.xerces.parsers.DOMParser.parse(Unknown Source) 	at org.apache.xerces.jaxp.DocumentBuilderImpl.parse(Unknown Source) 	at org.apache.camel.converter.jaxp.XmlConverter.toDOMSourceFromStream(XmlConverter.java:370) 	at org.apache.camel.converter.jaxp.XmlConverter.toDOMSource(XmlConverter.java:205) 	at org.apache.camel.converter.jaxp.XmlConverter.toDOMNode(XmlConverter.java:415) 	at org.apache.camel.converter.jaxp.XmlConverter.toDOMDocument(XmlConverter.java:523) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) 	at java.lang.reflect.Method.invoke(Method.java:597) 	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:322) 	... 26 more 11:24:17 018 | ERROR | pool-flow.seda.servicemix-camel-thread-1 | DeadLetterChannel        | .apache.camel.processor.Logger  143 | Failed delivery for exchangeId: ID-SLCWD04TY51/3277-1210699406563/0-0. On delivery attempt: 3 caught: org.apache.camel.RuntimeCamelException: org.xml.sax.SAXParseException: Premature end of file. org.apache.camel.RuntimeCamelException: org.xml.sax.SAXParseException: Premature end of file. 	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:326) 	at org.apache.camel.impl.converter.InstanceMethodTypeConverter.convertTo(InstanceMethodTypeConverter.java:50) 	at org.apache.camel.impl.converter.DefaultTypeConverter.convertTo(DefaultTypeConverter.java:64) 	at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:52) 	at org.apache.camel.builder.xml.XPathBuilder.getDocument(XPathBuilder.java:537) 	at org.apache.camel.builder.xml.XPathBuilder.evaluateAs(XPathBuilder.java:420) 	at org.apache.camel.builder.xml.XPathBuilder.matches(XPathBuilder.java:98) 	at org.apache.camel.builder.xml.XPathBuilder.matches(XPathBuilder.java:63) 	at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:47) 	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsynProcessorBridge.process(AsyncProcessorTypeConverter.java:44) 	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:146) 	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:90) 	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:40) 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:44) 	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:68) 	at org.apache.servicemix.camel.CamelJbiEndpoint.processInOut(CamelJbiEndpoint.java:73) 	at org.apache.servicemix.common.endpoints.ProviderEndpoint.process(ProviderEndpoint.java:109) 	at org.apache.servicemix.common.AsyncBaseLifeCycle.doProcess(AsyncBaseLifeCycle.java:538) 	at org.apache.servicemix.common.AsyncBaseLifeCycle.processExchange(AsyncBaseLifeCycle.java:490) 	at org.apache.servicemix.common.BaseLifeCycle.onMessageExchange(BaseLifeCycle.java:46) 	at org.apache.servicemix.jbi.messaging.DeliveryChannelImpl.processInBound(DeliveryChannelImpl.java:610) 	at org.apache.servicemix.jbi.nmr.flow.AbstractFlow.doRouting(AbstractFlow.java:172) 	at org.apache.servicemix.jbi.nmr.flow.seda.SedaFlow.doRouting(SedaFlow.java:167) 	at org.apache.servicemix.jbi.nmr.flow.seda.SedaQueue$1.run(SedaQueue.java:134) 	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907) 	at java.lang.Thread.run(Thread.java:619) Caused by: org.xml.sax.SAXParseException: Premature end of file. 	at org.apache.xerces.parsers.DOMParser.parse(Unknown Source) 	at org.apache.xerces.jaxp.DocumentBuilderImpl.parse(Unknown Source) 	at org.apache.camel.converter.jaxp.XmlConverter.toDOMSourceFromStream(XmlConverter.java:370) 	at org.apache.camel.converter.jaxp.XmlConverter.toDOMSource(XmlConverter.java:205) 	at org.apache.camel.converter.jaxp.XmlConverter.toDOMNode(XmlConverter.java:415) 	at org.apache.camel.converter.jaxp.XmlConverter.toDOMDocument(XmlConverter.java:523) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) 	at java.lang.reflect.Method.invoke(Method.java:597) 	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:322) 	... 26 more 11:24:17 127 | ERROR | pool-flow.seda.servicemix-camel-thread-2 | DeadLetterChannel        | .apache.camel.processor.Logger  143 | Failed delivery for exchangeId: ID-SLCWD04TY51/3277-1210699406563/0-1. On delivery attempt: 1 caught: org.apache.camel.RuntimeCamelException: org.xml.sax.SAXParseException: Premature end of file. org.apache.camel.RuntimeCamelException: org.xml.sax.SAXParseException: Premature end of file. 	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:326) 	at org.apache.camel.impl.converter.InstanceMethodTypeConverter.convertTo(InstanceMethodTypeConverter.java:50) 	at org.apache.camel.impl.converter.DefaultTypeConverter.convertTo(DefaultTypeConverter.java:64) 	at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:52) 	at org.apache.camel.builder.xml.XPathBuilder.getDocument(XPathBuilder.java:537) 	at org.apache.camel.builder.xml.XPathBuilder.evaluateAs(XPathBuilder.java:420) 	at org.apache.camel.builder.xml.XPathBuilder.matches(XPathBuilder.java:98) 	at org.apache.camel.builder.xml.XPathBuilder.matches(XPathBuilder.java:63) 	at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:47) 	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsynProcessorBridge.process(AsyncProcessorTypeConverter.java:44) 	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:146) 	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:90) 	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:40) 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:44) 	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:68) 	at org.apache.servicemix.camel.CamelJbiEndpoint.processInOut(CamelJbiEndpoint.java:73) 	at org.apache.servicemix.common.endpoints.ProviderEndpoint.process(ProviderEndpoint.java:109) 	at org.apache.servicemix.common.AsyncBaseLifeCycle.doProcess(AsyncBaseLifeCycle.java:538) 	at org.apache.servicemix.common.AsyncBaseLifeCycle.processExchange(AsyncBaseLifeCycle.java:490) 	at org.apache.servicemix.common.BaseLifeCycle.onMessageExchange(BaseLifeCycle.java:46) 	at org.apache.servicemix.jbi.messaging.DeliveryChannelImpl.processInBound(DeliveryChannelImpl.java:610) 	at org.apache.servicemix.jbi.nmr.flow.AbstractFlow.doRouting(AbstractFlow.java:172) 	at org.apache.servicemix.jbi.nmr.flow.seda.SedaFlow.doRouting(SedaFlow.java:167) 	at org.apache.servicemix.jbi.nmr.flow.seda.SedaQueue$1.run(SedaQueue.java:134) 	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907) 	at java.lang.Thread.run(Thread.java:619) Caused by: org.xml.sax.SAXParseException: Premature end of file. 	at org.apache.xerces.parsers.DOMParser.parse(Unknown Source) 	at org.apache.xerces.jaxp.DocumentBuilderImpl.parse(Unknown Source) 	at org.apache.camel.converter.jaxp.XmlConverter.toDOMSourceFromStream(XmlConverter.java:370) 	at org.apache.camel.converter.jaxp.XmlConverter.toDOMSource(XmlConverter.java:205) 	at org.apache.camel.converter.jaxp.XmlConverter.toDOMNode(XmlConverter.java:415) 	at org.apache.camel.converter.jaxp.XmlConverter.toDOMDocument(XmlConverter.java:523) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) 	at java.lang.reflect.Method.invoke(Method.java:597) 	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:322) 	... 26 more 11:24:18 016 | ERROR | pool-flow.seda.servicemix-camel-thread-1 | DeadLetterChannel        | .apache.camel.processor.Logger  143 | Failed delivery for exchangeId: ID-SLCWD04TY51/3277-1210699406563/0-0. On delivery attempt: 4 caught: org.apache.camel.RuntimeCamelException: org.xml.sax.SAXParseException: Premature end of file. org.apache.camel.RuntimeCamelException: org.xml.sax.SAXParseException: Premature end of file. 	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:326) 	at org.apache.camel.impl.converter.InstanceMethodTypeConverter.convertTo(InstanceMethodTypeConverter.java:50) 	at org.apache.camel.impl.converter.DefaultTypeConverter.convertTo(DefaultTypeConverter.java:64) 	at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:52) 	at org.apache.camel.builder.xml.XPathBuilder.getDocument(XPathBuilder.java:537) 	at org.apache.camel.builder.xml.XPathBuilder.evaluateAs(XPathBuilder.java:420) 	at org.apache.camel.builder.xml.XPathBuilder.matches(XPathBuilder.java:98) 	at org.apache.camel.builder.xml.XPathBuilder.matches(XPathBuilder.java:63) 	at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:47) 	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsynProcessorBridge.process(AsyncProcessorTypeConverter.java:44) 	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:146) 	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:90) 	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:40) 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:44) 	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:68) 	at org.apache.servicemix.camel.CamelJbiEndpoint.processInOut(CamelJbiEndpoint.java:73) 	at org.apache.servicemix.common.endpoints.ProviderEndpoint.process(ProviderEndpoint.java:109) 	at org.apache.servicemix.common.AsyncBaseLifeCycle.doProcess(AsyncBaseLifeCycle.java:538) 	at org.apache.servicemix.common.AsyncBaseLifeCycle.processExchange(AsyncBaseLifeCycle.java:490) 	at org.apache.servicemix.common.BaseLifeCycle.onMessageExchange(BaseLifeCycle.java:46) 	at org.apache.servicemix.jbi.messaging.DeliveryChannelImpl.processInBound(DeliveryChannelImpl.java:610) 	at org.apache.servicemix.jbi.nmr.flow.AbstractFlow.doRouting(AbstractFlow.java:172) 	at org.apache.servicemix.jbi.nmr.flow.seda.SedaFlow.doRouting(SedaFlow.java:167) 	at org.apache.servicemix.jbi.nmr.flow.seda.SedaQueue$1.run(SedaQueue.java:134) 	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907) 	at java.lang.Thread.run(Thread.java:619) Caused by: org.xml.sax.SAXParseException: Premature end of file. 	at org.apache.xerces.parsers.DOMParser.parse(Unknown Source) 	at org.apache.xerces.jaxp.DocumentBuilderImpl.parse(Unknown Source) 	at org.apache.camel.converter.jaxp.XmlConverter.toDOMSourceFromStream(XmlConverter.java:370) 	at org.apache.camel.converter.jaxp.XmlConverter.toDOMSource(XmlConverter.java:205) 	at org.apache.camel.converter.jaxp.XmlConverter.toDOMNode(XmlConverter.java:415) 	at org.apache.camel.converter.jaxp.XmlConverter.toDOMDocument(XmlConverter.java:523) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) 	at java.lang.reflect.Method.invoke(Method.java:597) 	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:322) 	... 26 more 11:24:18 125 | ERROR | pool-flow.seda.servicemix-camel-thread-2 | DeadLetterChannel        | .apache.camel.processor.Logger  143 | Failed delivery for exchangeId: ID-SLCWD04TY51/3277-1210699406563/0-1. On delivery attempt: 2 caught: org.apache.camel.RuntimeCamelException: org.xml.sax.SAXParseException: Premature end of file. org.apache.camel.RuntimeCamelException: org.xml.sax.SAXParseException: Premature end of file. 	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:326) 	at org.apache.camel.impl.converter.InstanceMethodTypeConverter.convertTo(InstanceMethodTypeConverter.java:50) 	at org.apache.camel.impl.converter.DefaultTypeConverter.convertTo(DefaultTypeConverter.java:64) 	at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:52) 	at org.apache.camel.builder.xml.XPathBuilder.getDocument(XPathBuilder.java:537) 	at org.apache.camel.builder.xml.XPathBuilder.evaluateAs(XPathBuilder.java:420) 	at org.apache.camel.builder.xml.XPathBuilder.matches(XPathBuilder.java:98) 	at org.apache.camel.builder.xml.XPathBuilder.matches(XPathBuilder.java:63) 	at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:47) 	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsynProcessorBridge.process(AsyncProcessorTypeConverter.java:44) 	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:146) 	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:90) 	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:40) 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:44) 	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:68) 	at org.apache.servicemix.camel.CamelJbiEndpoint.processInOut(CamelJbiEndpoint.java:73) 	at org.apache.servicemix.common.endpoints.ProviderEndpoint.process(ProviderEndpoint.java:109) 	at org.apache.servicemix.common.AsyncBaseLifeCycle.doProcess(AsyncBaseLifeCycle.java:538) 	at org.apache.servicemix.common.AsyncBaseLifeCycle.processExchange(AsyncBaseLifeCycle.java:490) 	at org.apache.servicemix.common.BaseLifeCycle.onMessageExchange(BaseLifeCycle.java:46) 	at org.apache.servicemix.jbi.messaging.DeliveryChannelImpl.processInBound(DeliveryChannelImpl.java:610) 	at org.apache.servicemix.jbi.nmr.flow.AbstractFlow.doRouting(AbstractFlow.java:172) 	at org.apache.servicemix.jbi.nmr.flow.seda.SedaFlow.doRouting(SedaFlow.java:167) 	at org.apache.servicemix.jbi.nmr.flow.seda.SedaQueue$1.run(SedaQueue.java:134) 	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907) 	at java.lang.Thread.run(Thread.java:619) Caused by: org.xml.sax.SAXParseException: Premature end of file. 	at org.apache.xerces.parsers.DOMParser.parse(Unknown Source) 	at org.apache.xerces.jaxp.DocumentBuilderImpl.parse(Unknown Source) 	at org.apache.camel.converter.jaxp.XmlConverter.toDOMSourceFromStream(XmlConverter.java:370) 	at org.apache.camel.converter.jaxp.XmlConverter.toDOMSource(XmlConverter.java:205) 	at org.apache.camel.converter.jaxp.XmlConverter.toDOMNode(XmlConverter.java:415) 	at org.apache.camel.converter.jaxp.XmlConverter.toDOMDocument(XmlConverter.java:523) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) 	at java.lang.reflect.Method.invoke(Method.java:597) 	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:322) 	... 26 more 11:24:19 030 | ERROR | pool-flow.seda.servicemix-camel-thread-1 | DeadLetterChannel        | .apache.camel.processor.Logger  143 | Failed delivery for exchangeId: ID-SLCWD04TY51/3277-1210699406563/0-0. On delivery attempt: 5 caught: org.apache.camel.RuntimeCamelException: org.xml.sax.SAXParseException: Premature end of file. org.apache.camel.RuntimeCamelException: org.xml.sax.SAXParseException: Premature end of file. 	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:326) 	at org.apache.camel.impl.converter.InstanceMethodTypeConverter.convertTo(InstanceMethodTypeConverter.java:50) 	at org.apache.camel.impl.converter.DefaultTypeConverter.convertTo(DefaultTypeConverter.java:64) 	at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:52) 	at org.apache.camel.builder.xml.XPathBuilder.getDocument(XPathBuilder.java:537) 	at org.apache.camel.builder.xml.XPathBuilder.evaluateAs(XPathBuilder.java:420) 	at org.apache.camel.builder.xml.XPathBuilder.matches(XPathBuilder.java:98) 	at org.apache.camel.builder.xml.XPathBuilder.matches(XPathBuilder.java:63) 	at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:47) 	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsynProcessorBridge.process(AsyncProcessorTypeConverter.java:44) 	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:146) 	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:90) 	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:40) 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:44) 	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:68) 	at org.apache.servicemix.camel.CamelJbiEndpoint.processInOut(CamelJbiEndpoint.java:73) 	at org.apache.servicemix.common.endpoints.ProviderEndpoint.process(ProviderEndpoint.java:109) 	at org.apache.servicemix.common.AsyncBaseLifeCycle.doProcess(AsyncBaseLifeCycle.java:538) 	at org.apache.servicemix.common.AsyncBaseLifeCycle.processExchange(AsyncBaseLifeCycle.java:490) 	at org.apache.servicemix.common.BaseLifeCycle.onMessageExchange(BaseLifeCycle.java:46) 	at org.apache.servicemix.jbi.messaging.DeliveryChannelImpl.processInBound(DeliveryChannelImpl.java:610) 	at org.apache.servicemix.jbi.nmr.flow.AbstractFlow.doRouting(AbstractFlow.java:172) 	at org.apache.servicemix.jbi.nmr.flow.seda.SedaFlow.doRouting(SedaFlow.java:167) 	at org.apache.servicemix.jbi.nmr.flow.seda.SedaQueue$1.run(SedaQueue.java:134) 	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907) 	at java.lang.Thread.run(Thread.java:619) Caused by: org.xml.sax.SAXParseException: Premature end of file. 	at org.apache.xerces.parsers.DOMParser.parse(Unknown Source) 	at org.apache.xerces.jaxp.DocumentBuilderImpl.parse(Unknown Source) 	at org.apache.camel.converter.jaxp.XmlConverter.toDOMSourceFromStream(XmlConverter.java:370) 	at org.apache.camel.converter.jaxp.XmlConverter.toDOMSource(XmlConverter.java:205) 	at org.apache.camel.converter.jaxp.XmlConverter.toDOMNode(XmlConverter.java:415) 	at org.apache.camel.converter.jaxp.XmlConverter.toDOMDocument(XmlConverter.java:523) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) 	at java.lang.reflect.Method.invoke(Method.java:597) 	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:322) 	... 26 more 11:24:19 045 | ERROR | pool-flow.seda.servicemix-camel-thread-1 | DeadLetterChannel        | .apache.camel.processor.Logger   69 | Exchange[Message: javax.xml.transform.stream.StreamSource@1c192c8] 11:24:19 045 | ERROR | pool-flow.seda.servicemix-camel-thread-1 | DeadLetterChannel        | .apache.camel.processor.Logger  106 | Failed delivery for exchangeId: ID-SLCWD04TY51/3277-1210699406563/0-0. Handled by the failure processor: RecipientList[log:org.apache.camel.DeadLetterChannel?level=error] 11:24:19 061 | ERROR | pool-flow.seda.servicemix-camel-thread-3 | JmsComponent             | ervicemix.common.BaseLifeCycle   48 | Error processing exchange InOut[   id: ID:166.29.99.171-119e34d4895-7:0   status: Done   role: consumer   service:  {urn:com.lmco.isgs.bais} interfaceRules   endpoint: camel166-29-99-171-119e34d4895-28-0   operation:  {urn:com.lmco.isgs.bais} operationInOut   in: Unable to display: org.xml.sax.SAXParseException: Premature end of file.   out: null ] javax.xml.stream.XMLStreamException: Trying to write END_DOCUMENT when document has no root (ie. trying to output empty document). 	at com.ctc.wstx.sw.BaseStreamWriter.throwOutputError(BaseStreamWriter.java:1473) 	at com.ctc.wstx.sw.BaseStreamWriter.reportNwfStructure(BaseStreamWriter.java:1502) 	at com.ctc.wstx.sw.BaseStreamWriter.finishDocument(BaseStreamWriter.java:1663) 	at com.ctc.wstx.sw.BaseStreamWriter.writeEndDocument(BaseStreamWriter.java:585) 	at org.apache.servicemix.soap.marshalers.SoapWriter.writeSimpleMessage(SoapWriter.java:130) 	at org.apache.servicemix.soap.marshalers.SoapWriter.write(SoapWriter.java:92) 	at org.apache.servicemix.jms.DefaultJmsMarshaler.toJMS(DefaultJmsMarshaler.java:79) 	at org.apache.servicemix.jms.DefaultJmsMarshaler.toJMS(DefaultJmsMarshaler.java:106) 	at org.apache.servicemix.jms.AbstractJmsProcessor.fromNMSResponse(AbstractJmsProcessor.java:200) 	at org.apache.servicemix.jms.multiplexing.MultiplexingConsumerProcessor.process(MultiplexingConsumerProcessor.java:112) 	at org.apache.servicemix.common.AsyncBaseLifeCycle.doProcess(AsyncBaseLifeCycle.java:538) 	at org.apache.servicemix.common.AsyncBaseLifeCycle.processExchange(AsyncBaseLifeCycle.java:512) 	at org.apache.servicemix.common.BaseLifeCycle.onMessageExchange(BaseLifeCycle.java:46) 	at org.apache.servicemix.jbi.messaging.DeliveryChannelImpl.processInBound(DeliveryChannelImpl.java:610) 	at org.apache.servicemix.jbi.nmr.flow.AbstractFlow.doRouting(AbstractFlow.java:172) 	at org.apache.servicemix.jbi.nmr.flow.seda.SedaFlow.doRouting(SedaFlow.java:167) 	at org.apache.servicemix.jbi.nmr.flow.seda.SedaQueue$1.run(SedaQueue.java:134) 	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907) 	at java.lang.Thread.run(Thread.java:619) 11:24:19 061 | ERROR | pool-flow.seda.servicemix-camel-thread-3 | JmsComponent             | ervicemix.common.BaseLifeCycle   60 | Error setting exchange status to ERROR java.lang.IllegalStateException: component is not owner when trying to set error: javax.xml.stream.XMLStreamException: Trying to write END_DOCUMENT when document has no root (ie. trying to output empty document). 	at org.apache.servicemix.jbi.messaging.MessageExchangeImpl.setError(MessageExchangeImpl.java:264) 	at org.apache.servicemix.common.BaseLifeCycle.onMessageExchange(BaseLifeCycle.java:57) 	at org.apache.servicemix.jbi.messaging.DeliveryChannelImpl.processInBound(DeliveryChannelImpl.java:610) 	at org.apache.servicemix.jbi.nmr.flow.AbstractFlow.doRouting(AbstractFlow.java:172) 	at org.apache.servicemix.jbi.nmr.flow.seda.SedaFlow.doRouting(SedaFlow.java:167) 	at org.apache.servicemix.jbi.nmr.flow.seda.SedaQueue$1.run(SedaQueue.java:134) 	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907) 	at java.lang.Thread.run(Thread.java:619) Caused by: javax.xml.stream.XMLStreamException: Trying to write END_DOCUMENT when document has no root (ie. trying to output empty document). 	at com.ctc.wstx.sw.BaseStreamWriter.throwOutputError(BaseStreamWriter.java:1473) 	at com.ctc.wstx.sw.BaseStreamWriter.reportNwfStructure(BaseStreamWriter.java:1502) 	at com.ctc.wstx.sw.BaseStreamWriter.finishDocument(BaseStreamWriter.java:1663) 	at com.ctc.wstx.sw.BaseStreamWriter.writeEndDocument(BaseStreamWriter.java:585) 	at org.apache.servicemix.soap.marshalers.SoapWriter.writeSimpleMessage(SoapWriter.java:130) 	at org.apache.servicemix.soap.marshalers.SoapWriter.write(SoapWriter.java:92) 	at org.apache.servicemix.jms.DefaultJmsMarshaler.toJMS(DefaultJmsMarshaler.java:79) 	at org.apache.servicemix.jms.DefaultJmsMarshaler.toJMS(DefaultJmsMarshaler.java:106) 	at org.apache.servicemix.jms.AbstractJmsProcessor.fromNMSResponse(AbstractJmsProcessor.java:200) 	at org.apache.servicemix.jms.multiplexing.MultiplexingConsumerProcessor.process(MultiplexingConsumerProcessor.java:112) 	at org.apache.servicemix.common.AsyncBaseLifeCycle.doProcess(AsyncBaseLifeCycle.java:538) 	at org.apache.servicemix.common.AsyncBaseLifeCycle.processExchange(AsyncBaseLifeCycle.java:512) 	at org.apache.servicemix.common.BaseLifeCycle.onMessageExchange(BaseLifeCycle.java:46) 	... 7 more 11:24:19 139 | ERROR | pool-flow.seda.servicemix-camel-thread-2 | DeadLetterChannel        | .apache.camel.processor.Logger  143 | Failed delivery for exchangeId: ID-SLCWD04TY51/3277-1210699406563/0-1. On delivery attempt: 3 caught: org.apache.camel.RuntimeCamelException: org.xml.sax.SAXParseException: Premature end of file. org.apache.camel.RuntimeCamelException: org.xml.sax.SAXParseException: Premature end of file. 	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:326) 	at org.apache.camel.impl.converter.InstanceMethodTypeConverter.convertTo(InstanceMethodTypeConverter.java:50) 	at org.apache.camel.impl.converter.DefaultTypeConverter.convertTo(DefaultTypeConverter.java:64) 	at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:52) 	at org.apache.camel.builder.xml.XPathBuilder.getDocument(XPathBuilder.java:537) 	at org.apache.camel.builder.xml.XPathBuilder.evaluateAs(XPathBuilder.java:420) 	at org.apache.camel.builder.xml.XPathBuilder.matches(XPathBuilder.java:98) 	at org.apache.camel.builder.xml.XPathBuilder.matches(XPathBuilder.java:63) 	at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:47) 	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsynProcessorBridge.process(AsyncProcessorTypeConverter.java:44) 	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:146) 	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:90) 	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:40) 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:44) 	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:68) 	at org.apache.servicemix.camel.CamelJbiEndpoint.processInOut(CamelJbiEndpoint.java:73) 	at org.apache.servicemix.common.endpoints.ProviderEndpoint.process(ProviderEndpoint.java:109) 	at org.apache.servicemix.common.AsyncBaseLifeCycle.doProcess(AsyncBaseLifeCycle.java:538) 	at org.apache.servicemix.common.AsyncBaseLifeCycle.processExchange(AsyncBaseLifeCycle.java:490) 	at org.apache.servicemix.common.BaseLifeCycle.onMessageExchange(BaseLifeCycle.java:46) 	at org.apache.servicemix.jbi.messaging.DeliveryChannelImpl.processInBound(DeliveryChannelImpl.java:610) 	at org.apache.servicemix.jbi.nmr.flow.AbstractFlow.doRouting(AbstractFlow.java:172) 	at org.apache.servicemix.jbi.nmr.flow.seda.SedaFlow.doRouting(SedaFlow.java:167) 	at org.apache.servicemix.jbi.nmr.flow.seda.SedaQueue$1.run(SedaQueue.java:134) 	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907) 	at java.lang.Thread.run(Thread.java:619) Caused by: org.xml.sax.SAXParseException: Premature end of file. 	at org.apache.xerces.parsers.DOMParser.parse(Unknown Source) 	at org.apache.xerces.jaxp.DocumentBuilderImpl.parse(Unknown Source) 	at org.apache.camel.converter.jaxp.XmlConverter.toDOMSourceFromStream(XmlConverter.java:370) 	at org.apache.camel.converter.jaxp.XmlConverter.toDOMSource(XmlConverter.java:205) 	at org.apache.camel.converter.jaxp.XmlConverter.toDOMNode(XmlConverter.java:415) 	at org.apache.camel.converter.jaxp.XmlConverter.toDOMDocument(XmlConverter.java:523) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) 	at java.lang.reflect.Method.invoke(Method.java:597) 	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:322) 	... 26 more 11:24:20 137 | ERROR | pool-flow.seda.servicemix-camel-thread-2 | DeadLetterChannel        | .apache.camel.processor.Logger  143 | Failed delivery for exchangeId: ID-SLCWD04TY51/3277-1210699406563/0-1. On delivery attempt: 4 caught: org.apache.camel.RuntimeCamelException: org.xml.sax.SAXParseException: Premature end of file. org.apache.camel.RuntimeCamelException: org.xml.sax.SAXParseException: Premature end of file. 	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:326) 	at org.apache.camel.impl.converter.InstanceMethodTypeConverter.convertTo(InstanceMethodTypeConverter.java:50) 	at org.apache.camel.impl.converter.DefaultTypeConverter.convertTo(DefaultTypeConverter.java:64) 	at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:52) 	at org.apache.camel.builder.xml.XPathBuilder.getDocument(XPathBuilder.java:537) 	at org.apache.camel.builder.xml.XPathBuilder.evaluateAs(XPathBuilder.java:420) 	at org.apache.camel.builder.xml.XPathBuilder.matches(XPathBuilder.java:98) 	at org.apache.camel.builder.xml.XPathBuilder.matches(XPathBuilder.java:63) 	at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:47) 	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsynProcessorBridge.process(AsyncProcessorTypeConverter.java:44) 	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:146) 	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:90) 	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:40) 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:44) 	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:68) 	at org.apache.servicemix.camel.CamelJbiEndpoint.processInOut(CamelJbiEndpoint.java:73) 	at org.apache.servicemix.common.endpoints.ProviderEndpoint.process(ProviderEndpoint.java:109) 	at org.apache.servicemix.common.AsyncBaseLifeCycle.doProcess(AsyncBaseLifeCycle.java:538) 	at org.apache.servicemix.common.AsyncBaseLifeCycle.processExchange(AsyncBaseLifeCycle.java:490) 	at org.apache.servicemix.common.BaseLifeCycle.onMessageExchange(BaseLifeCycle.java:46) 	at org.apache.servicemix.jbi.messaging.DeliveryChannelImpl.processInBound(DeliveryChannelImpl.java:610) 	at org.apache.servicemix.jbi.nmr.flow.AbstractFlow.doRouting(AbstractFlow.java:172) 	at org.apache.servicemix.jbi.nmr.flow.seda.SedaFlow.doRouting(SedaFlow.java:167) 	at org.apache.servicemix.jbi.nmr.flow.seda.SedaQueue$1.run(SedaQueue.java:134) 	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907) 	at java.lang.Thread.run(Thread.java:619) Caused by: org.xml.sax.SAXParseException: Premature end of file. 	at org.apache.xerces.parsers.DOMParser.parse(Unknown Source) 	at org.apache.xerces.jaxp.DocumentBuilderImpl.parse(Unknown Source) 	at org.apache.camel.converter.jaxp.XmlConverter.toDOMSourceFromStream(XmlConverter.java:370) 	at org.apache.camel.converter.jaxp.XmlConverter.toDOMSource(XmlConverter.java:205) 	at org.apache.camel.converter.jaxp.XmlConverter.toDOMNode(XmlConverter.java:415) 	at org.apache.camel.converter.jaxp.XmlConverter.toDOMDocument(XmlConverter.java:523) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) 	at java.lang.reflect.Method.invoke(Method.java:597) 	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:322) 	... 26 more 11:24:21 135 | ERROR | pool-flow.seda.servicemix-camel-thread-2 | DeadLetterChannel        | .apache.camel.processor.Logger  143 | Failed delivery for exchangeId: ID-SLCWD04TY51/3277-1210699406563/0-1. On delivery attempt: 5 caught: org.apache.camel.RuntimeCamelException: org.xml.sax.SAXParseException: Premature end of file. org.apache.camel.RuntimeCamelException: org.xml.sax.SAXParseException: Premature end of file. 	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:326) 	at org.apache.camel.impl.converter.InstanceMethodTypeConverter.convertTo(InstanceMethodTypeConverter.java:50) 	at org.apache.camel.impl.converter.DefaultTypeConverter.convertTo(DefaultTypeConverter.java:64) 	at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:52) 	at org.apache.camel.builder.xml.XPathBuilder.getDocument(XPathBuilder.java:537) 	at org.apache.camel.builder.xml.XPathBuilder.evaluateAs(XPathBuilder.java:420) 	at org.apache.camel.builder.xml.XPathBuilder.matches(XPathBuilder.java:98) 	at org.apache.camel.builder.xml.XPathBuilder.matches(XPathBuilder.java:63) 	at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:47) 	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsynProcessorBridge.process(AsyncProcessorTypeConverter.java:44) 	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:146) 	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:90) 	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:40) 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:44) 	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:68) 	at org.apache.servicemix.camel.CamelJbiEndpoint.processInOut(CamelJbiEndpoint.java:73) 	at org.apache.servicemix.common.endpoints.ProviderEndpoint.process(ProviderEndpoint.java:109) 	at org.apache.servicemix.common.AsyncBaseLifeCycle.doProcess(AsyncBaseLifeCycle.java:538) 	at org.apache.servicemix.common.AsyncBaseLifeCycle.processExchange(AsyncBaseLifeCycle.java:490) 	at org.apache.servicemix.common.BaseLifeCycle.onMessageExchange(BaseLifeCycle.java:46) 	at org.apache.servicemix.jbi.messaging.DeliveryChannelImpl.processInBound(DeliveryChannelImpl.java:610) 	at org.apache.servicemix.jbi.nmr.flow.AbstractFlow.doRouting(AbstractFlow.java:172) 	at org.apache.servicemix.jbi.nmr.flow.seda.SedaFlow.doRouting(SedaFlow.java:167) 	at org.apache.servicemix.jbi.nmr.flow.seda.SedaQueue$1.run(SedaQueue.java:134) 	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907) 	at java.lang.Thread.run(Thread.java:619) Caused by: org.xml.sax.SAXParseException: Premature end of file. 	at org.apache.xerces.parsers.DOMParser.parse(Unknown Source) 	at org.apache.xerces.jaxp.DocumentBuilderImpl.parse(Unknown Source) 	at org.apache.camel.converter.jaxp.XmlConverter.toDOMSourceFromStream(XmlConverter.java:370) 	at org.apache.camel.converter.jaxp.XmlConverter.toDOMSource(XmlConverter.java:205) 	at org.apache.camel.converter.jaxp.XmlConverter.toDOMNode(XmlConverter.java:415) 	at org.apache.camel.converter.jaxp.XmlConverter.toDOMDocument(XmlConverter.java:523) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) 	at java.lang.reflect.Method.invoke(Method.java:597) 	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:322) 	... 26 more 11:24:21 135 | ERROR | pool-flow.seda.servicemix-camel-thread-2 | DeadLetterChannel        | .apache.camel.processor.Logger   69 | Exchange[Message: javax.xml.transform.stream.StreamSource@14b1d80] 11:24:21 135 | ERROR | pool-flow.seda.servicemix-camel-thread-2 | DeadLetterChannel        | .apache.camel.processor.Logger  106 | Failed delivery for exchangeId: ID-SLCWD04TY51/3277-1210699406563/0-1. Handled by the failure processor: RecipientList[log:org.apache.camel.DeadLetterChannel?level=error] 11:24:21 151 | ERROR | pool-flow.seda.servicemix-camel-thread-1 | JmsComponent             | ervicemix.common.BaseLifeCycle   48 | Error processing exchange InOut[   id: ID:166.29.99.171-119e34d4895-7:1   status: Done   role: consumer   service:  {urn:com.lmco.isgs.bais} interfaceRules   endpoint: camel166-29-99-171-119e34d4895-28-0   operation:  {urn:com.lmco.isgs.bais} operationInOut   in: Unable to display: org.xml.sax.SAXParseException: Premature end of file.   out: null ] javax.xml.stream.XMLStreamException: Trying to write END_DOCUMENT when document has no root (ie. trying to output empty document). 	at com.ctc.wstx.sw.BaseStreamWriter.throwOutputError(BaseStreamWriter.java:1473) 	at com.ctc.wstx.sw.BaseStreamWriter.reportNwfStructure(BaseStreamWriter.java:1502) 	at com.ctc.wstx.sw.BaseStreamWriter.finishDocument(BaseStreamWriter.java:1663) 	at com.ctc.wstx.sw.BaseStreamWriter.writeEndDocument(BaseStreamWriter.java:585) 	at org.apache.servicemix.soap.marshalers.SoapWriter.writeSimpleMessage(SoapWriter.java:130) 	at org.apache.servicemix.soap.marshalers.SoapWriter.write(SoapWriter.java:92) 	at org.apache.servicemix.jms.DefaultJmsMarshaler.toJMS(DefaultJmsMarshaler.java:79) 	at org.apache.servicemix.jms.DefaultJmsMarshaler.toJMS(DefaultJmsMarshaler.java:106) 	at org.apache.servicemix.jms.AbstractJmsProcessor.fromNMSResponse(AbstractJmsProcessor.java:200) 	at org.apache.servicemix.jms.multiplexing.MultiplexingConsumerProcessor.process(MultiplexingConsumerProcessor.java:112) 	at org.apache.servicemix.common.AsyncBaseLifeCycle.doProcess(AsyncBaseLifeCycle.java:538) 	at org.apache.servicemix.common.AsyncBaseLifeCycle.processExchange(AsyncBaseLifeCycle.java:512) 	at org.apache.servicemix.common.BaseLifeCycle.onMessageExchange(BaseLifeCycle.java:46) 	at org.apache.servicemix.jbi.messaging.DeliveryChannelImpl.processInBound(DeliveryChannelImpl.java:610) 	at org.apache.servicemix.jbi.nmr.flow.AbstractFlow.doRouting(AbstractFlow.java:172) 	at org.apache.servicemix.jbi.nmr.flow.seda.SedaFlow.doRouting(SedaFlow.java:167) 	at org.apache.servicemix.jbi.nmr.flow.seda.SedaQueue$1.run(SedaQueue.java:134) 	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907) 	at java.lang.Thread.run(Thread.java:619) 11:24:21 151 | ERROR | pool-flow.seda.servicemix-camel-thread-1 | JmsComponent             | ervicemix.common.BaseLifeCycle   60 | Error setting exchange status to ERROR java.lang.IllegalStateException: component is not owner when trying to set error: javax.xml.stream.XMLStreamException: Trying to write END_DOCUMENT when document has no root (ie. trying to output empty document). 	at org.apache.servicemix.jbi.messaging.MessageExchangeImpl.setError(MessageExchangeImpl.java:264) 	at org.apache.servicemix.common.BaseLifeCycle.onMessageExchange(BaseLifeCycle.java:57) 	at org.apache.servicemix.jbi.messaging.DeliveryChannelImpl.processInBound(DeliveryChannelImpl.java:610) 	at org.apache.servicemix.jbi.nmr.flow.AbstractFlow.doRouting(AbstractFlow.java:172) 	at org.apache.servicemix.jbi.nmr.flow.seda.SedaFlow.doRouting(SedaFlow.java:167) 	at org.apache.servicemix.jbi.nmr.flow.seda.SedaQueue$1.run(SedaQueue.java:134) 	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907) 	at java.lang.Thread.run(Thread.java:619) Caused by: javax.xml.stream.XMLStreamException: Trying to write END_DOCUMENT when document has no root (ie. trying to output empty document). 	at com.ctc.wstx.sw.BaseStreamWriter.throwOutputError(BaseStreamWriter.java:1473) 	at com.ctc.wstx.sw.BaseStreamWriter.reportNwfStructure(BaseStreamWriter.java:1502) 	at com.ctc.wstx.sw.BaseStreamWriter.finishDocument(BaseStreamWriter.java:1663) 	at com.ctc.wstx.sw.BaseStreamWriter.writeEndDocument(BaseStreamWriter.java:585) 	at org.apache.servicemix.soap.marshalers.SoapWriter.writeSimpleMessage(SoapWriter.java:130) 	at org.apache.servicemix.soap.marshalers.SoapWriter.write(SoapWriter.java:92) 	at org.apache.servicemix.jms.DefaultJmsMarshaler.toJMS(DefaultJmsMarshaler.java:79) 	at org.apache.servicemix.jms.DefaultJmsMarshaler.toJMS(DefaultJmsMarshaler.java:106) 	at org.apache.servicemix.jms.AbstractJmsProcessor.fromNMSResponse(AbstractJmsProcessor.java:200) 	at org.apache.servicemix.jms.multiplexing.MultiplexingConsumerProcessor.process(MultiplexingConsumerProcessor.java:112) 	at org.apache.servicemix.common.AsyncBaseLifeCycle.doProcess(AsyncBaseLifeCycle.java:538) 	at org.apache.servicemix.common.AsyncBaseLifeCycle.processExchange(AsyncBaseLifeCycle.java:512) 	at org.apache.servicemix.common.BaseLifeCycle.onMessageExchange(BaseLifeCycle.java:46) 	... 7 more  <?xml version="1.0" encoding="UTF-8"?>  <beans  	xmlns="http://www.springframework.org/schema/beans" 	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd http://activemq.apache.org/camel/schema/spring http://activemq.apache.org/camel/schema/spring/camel-spring-1.3.0.xsd" 	xmlns:fn="http://www.w3.org/2005/02/xpath-functions">  	<camelContext id="camelInterfaceRules" xmlns="http://activemq.apache.org/camel/schema/spring"> 		<route> 			<from uri="jbi:service:urn:com.a.b.c:testRules"/> 			<choice> 				<when> 					<xpath>//*[local-name() = 'testMsg1']</xpath> 					<to uri="jbi:service:urn:com.a.b.c:Service1"/>					 				</when> 				<when> 					<xpath>//*[local-name() = 'testMsg2']</xpath> 					<to uri="jbi:service:urn:com.a.b.c:Service2"/> 				</when> 			</choice>	      	 		</route> 	</camelContext> </beans>  Thanks.,Mike can you  attach a zip file with your sample project that fails. what version of ServiceMix are you using? and how do you start your sample and see the bug  It would get us much faster up to speed how to see the bug. This issue has been split into two issues: CAMEL-519 and CAMEL-520. Closing 1.4 issues. 
Bug,Claus Ibsen,2008-05-16T03:58:22+0000,1210910302,The javadoc could use to be polished for eg. summaries statis the Apache license instead of a short brief summary what the class/package does etc.  It's all the javadoc also for the components.,Add Ref as a Component DONE Remove duplicated javadoc in classes that should use the javadoc from the interface DONE Prefer to have javadoc on interfaces rather than impl classes DONE. Add missing summaries for Exceptions in Camel DONE. Fix layput problems on the published javadoc DONE Add missing class javadoc for public classes in Camel core DONE. Remove unused imports DONE. consider renaming InstrumentationAgentImpl to DefaultInstrumentationAgent DONE look for other xxxImpl could be renamed to a more appropriate name DONE  only InstrumentationAgentImpl exists. XPathLanguage should be moved to language package and not the builder.xml package as now. XPathAnnotationExpressionFactory  DefaultAnnotationExpressionFactory  AnnotationExpressionFactory should be moved from the bean component to a better suited package. ListPollingConsumer on the SEDA component is not used - marked as @deprecated but we should consider deleting it DONE. ReportingTypeConverterLoader and the likes has been marked as @deprecated (not used at all) No used by camel maven plugin Out.class from the util package has been removed (not used at all) DONE. Damm for some obsure reason someone is using Out in camel-jms.  Fixed by adding Out.java as ValueHolder.java and updated camel-jms DONE. track down Eclipse non javadoc to see if it can be removed: (non-Javadoc) DONE. @Claus  The Reporting* classes are used by the camel-maven-plugin!. Thanks Hadrian I have removed the @deprecations. Fixed loggers to be transient and commons-logging DONE. Pheeevv no more javadoc polishing for ... a while. 
Bug,Claus Ibsen,2008-05-16T04:38:19+0000,1210912699,nntp is reserved for future implementation in camel-mail. Camel registers this protocol as supported by the autoscan of the META-INF files.  We should throw an exception to the end-user stating its not implemented yet. Link to ticket that has the request for NNTP protocol support.,
Bug,Unassigned,2008-05-16T05:58:15+0000,1210917495,,Fixed in http://svn.apache.org/viewvc?view=rev&revision=658131 and http://svn.apache.org/viewvc?view=rev&revision=658240. 
Bug,Willem Jiang,2008-05-16T06:19:01+0000,1210918741,The dead letter channel will retry to send the same message multiple times  so the message content should be stream-cached before trying to process it the first time.,The current fix handles an InputStream being sent as the message body correctly  but I think we should also handle other kinds of streaming data (StaxSource  Reader  ...). How about using the same as the interceptor logic from the StreamCachingInterceptor? We still have to find a way to reset the stream between redelivery attempts (adding a reset() method to the StreamCache interface perhaps?). Added the unit test to show how the Source  Read  InputStream can be cached with StreamCache.. Closing all 1.5.0 issues. 
Task,Willem Jiang,2008-05-16T13:14:07+0000,1210943647,Need to add an example to show use camel with spring integration,Update the Spring Integration wiki page[1] with the spring configuration examples. [1]http://cwiki.apache.org/CAMEL/springintegration.html. 
Bug,Claus Ibsen,2008-05-16T13:35:45+0000,1210944945,I've encountered a problem with the scanning of jar files with the @Converter annotation if the Jars are loaded with the webstart classloader. Because the URL starts with http: the conversion to a file fails in ResolverUtil.  I've attached a patch that uses an UrlResource if the url starts with http: and this works if the jar-resource has the version information added to the jar file in the JNLP-file (like <jar href="camel-core-1.4-SNAPSHOT.jar"/>). But if the version is added separately (like <jar href="activemq-core.jar" version="5.1.0"/>) it fails because the classloader returns the name of the jar-file without the version information (like http://....../activemq-core.jar) and this file does not exist.   I'm currently trying if it is possible to check whether the application is started via webstart (there is a class Tool that should only exist in the webstart classloader) and in this case I'll check if the filename of the jar-file is returned correctly. If yes maybe we can provide another patch to get rid of the problem described above.,Good work Andreas.  Could be an idea to look how Spring does loading jars. I know Juergen has done tremendous work to get Spring to work with all kind of strange behaviors in various version of WebSphere  WebLogic  JBoss  and even AFIAR on the AS400 platform maybe also from webstart.. While searching for a solution I stumbled over the following pages (http://jdevelopment.nl/java/jdk6-web-start-cache-location/ and http://java.sun.com/javase/6/docs/technotes/guides/javaws/enhancements6.html) and now I'm not sure if the behaviour is different on JDK5 and JDK6 because I've tested only with JDK6 (I forgot to list that in the environment...).. See CAMEL-537 for an example of log errors. The patch resolves the issue with url based JAR locations. I use the webstart-maven-plugin to generate the jnlp and I had to specify the JARs that contain the converters as jarResources with a specific version number because in this case the JAR is referenced in the url with the version number added and not in a separate version attribute. Specified this way the location of the jar returned by the classloader is correct and the scan proceeds.  pom.xml   <plugin>   <groupId>org.codehaus.mojo.webstart</groupId>   <artifactId>webstart-maven-plugin</artifactId>   .....   <configuration>     .....     <jnlpFiles>       <jnlpFile>       <templateFilename>jnlpTemplate.vm</templateFilename>         <outputFilename>appl.jnlp</outputFilename>         <jarResources>           <jarResource>             <groupId>org.apache.camel</groupId>             <artifactId>camel-core</artifactId>             <version>${camel-version}</version>             <!-- set the outputJarVersion to false appends the version to the jar filename in the href -->             <outputJarVersion>false</outputJarVersion>           </jarResource>           <jarResource>             <groupId>org.apache.activemq</groupId>             <artifactId>activemq-core</artifactId>             <version>${activemq-version}</version>             <outputJarVersion>false</outputJarVersion>           </jarResource>           .....         </jarResources>       <jnlpFile>     <jnlpFiles>     .....   <configuration> <plugin>  appl.jnlp   <jnlp .....>   .......   <resources>     .......     <jar href="camel-core-1.4.01.jar"/>     <jar href="activemq-core-5.2-SNAPSHOT.jar"/>     .......     <jar href="spring-core.jar" version="2.5.5"/>   </resources> </jnlp>. We need a patch that is not dependent on spring-core. The current attached patch uses spring.. Okay I think I got it without dependency to spring .jars. Andreas do you mind posting some parts of the .vm template you use for creating the output .jnlp file?  I would like to add a wiki page how to get Camel working with webstart and how to generate the jnlp using maven. Maybe if you have the ideas how such a wiki page could be please feel free to post it here.  I will test the patch a bit more before commiting.. Andreas can you resubmit the patch with the ASF license granted. There is a bullet in the attach file wizard to grant license.  And can you load .jars over the HTTPS protocol as well? If so I think we should also test for "https:" as well.. Updated patch with AFS license. Claus  a good description is under http://mojo.codehaus.org/webstart/webstart-maven-plugin/ (and a copy under http://coffeebreaks.org/tmp/maven-staging/webstart/site/).  This is almost the default jnlpTemplate.vm. The properties in the resources tag are not required  they just show how to set properties that can be used in the spring configuration....  jnlpTemplate.vm $explicitTimestamp <?xml version="1.0" encoding="utf-8"?> <jnlp     spec="$jnlpspec"     codebase="$$codebase"     context="$$context"     href="$$name">   <information>     <title>$project.Name $project.Version</title>     <vendor>$project.Organization.Name</vendor>     <description>$project.Description</description> 	<icon href="images/mylogo.gif" width="64" height="64"/> 	<icon kind="splash" href="images/mysplash.gif"/> #if($offlineAllowed)     <offline-allowed/> #end   </information> #if($allPermissions)   <security>      <all-permissions/>   </security> #end   <resources>     <j2se version="$j2seVersion" max-heap-size="448m" />     <property name="remoteSite" value="https://$$hostname:32463"/>     <property name="amq.broker.url" value="failover:tcp://$$hostname:32935"/>     $dependencies   </resources>   <application-desc main-class="$mainClass"/> </jnlp>. TODO: Update wiki with how to use Camel with webstart. Thanks Andreas a lot for the help.  I added the webstart to the FAQ: http://cwiki.apache.org/confluence/display/CAMEL/How+do+I+run+Camel+using+Java+WebStart. Closing all 1.5.0 issues. I am using camel 2.0.0 and the application works ok when the codebase attribute starts with "http://..." However it fails when codebase attribute value starts with "https...." In the resources section I am putting jar names along with version. e.g.  <jar href="camel-core-2.0.0.jar"/> <jar href="camel-csv-2.0.0.jar"/> <jar href="camel-ftp-2.0.0.jar"/> <jar href="camel-mvel-2.0.0.jar"/> <jar href="camel-quartz-2.0.0.jar"/> <jar href="camel-spring-2.0.0.jar"/>  As said earlier with "https" I can see following exception in log file. 2009-11-03 12:00:36 406 [ApplicationMain] WARN efaultPackageScanClassResolver - Could not read entries in url: jar:https://localhost:8443/tabernus/despatchnotegenerator/camel-ftp-2.0.0.jar!/org/apache/camel/component/file/remote java.io.FileNotFoundException: https:\localhost:8443\tabernus\despatchnotegenerator\camel-ftp-2.0.0.jar (The filename  directory name  or volume label syntax is incorrect) at java.io.FileInputStream.open(Native Method) at java.io.FileInputStream.<init>(Unknown Source) at org.apache.camel.impl.DefaultPackageScanClassResolver.find(DefaultPackageScanClassResolver.java:250) at org.apache.camel.impl.DefaultPackageScanClassResolver.find(DefaultPackageScanClassResolver.java:178) at org.apache.camel.impl.DefaultPackageScanClassResolver.findAnnotated(DefaultPackageScanClassResolver.java:98) at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.load(AnnotationTypeConverterLoader.java:62) at org.apache.camel.impl.converter.DefaultTypeConverter.checkLoaded(DefaultTypeConverter.java:359) at org.apache.camel.impl.converter.DefaultTypeConverter.doConvertTo(DefaultTypeConverter.java:153) at org.apache.camel.impl.converter.DefaultTypeConverter.mandatoryConvertTo(DefaultTypeConverter.java:113) at org.apache.camel.impl.converter.DefaultTypeConverter.mandatoryConvertTo(DefaultTypeConverter.java:107) at org.apache.camel.util.IntrospectionSupport.convert(IntrospectionSupport.java:270) at org.apache.camel.util.IntrospectionSupport.setProperty(IntrospectionSupport.java:226) at org.apache.camel.util.IntrospectionSupport.setProperties(IntrospectionSupport.java:193) at org.apache.camel.util.EndpointHelper.setProperties(EndpointHelper.java:151) at org.apache.camel.impl.DefaultComponent.setProperties(DefaultComponent.java:213) at org.apache.camel.component.file.GenericFileComponent.createEndpoint(GenericFileComponent.java:65) at org.apache.camel.component.file.GenericFileComponent.createEndpoint(GenericFileComponent.java:35) at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:79) at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:394) at org.apache.camel.spring.CamelEndpointFactoryBean.createEndpoint(CamelEndpointFactoryBean.java:108) at org.apache.camel.spring.CamelEndpointFactoryBean.getObject(CamelEndpointFactoryBean.java:54) at org.springframework.beans.factory.support.FactoryBeanRegistrySupport$1.run(FactoryBeanRegistrySupport.java:121) at java.security.AccessController.doPrivileged(Native Method) at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.doGetObjectFromFactoryBean(FactoryBeanRegistrySupport.java:116) at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.getObjectFromFactoryBean(FactoryBeanRegistrySupport.java:98) at org.springframework.beans.factory.support.AbstractBeanFactory.getObjectForBeanInstance(AbstractBeanFactory.java:1288) at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:217) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:185) at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:168) at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:884) at org.apache.camel.spring.spi.ApplicationContextRegistry.lookup(ApplicationContextRegistry.java:41) at org.apache.camel.impl.DefaultRouteContext.lookup(DefaultRouteContext.java:124) at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:111) at org.apache.camel.model.FromDefinition.resolveEndpoint(FromDefinition.java:72) at org.apache.camel.impl.DefaultRouteContext.getEndpoint(DefaultRouteContext.java:74) at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:432) at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:126) at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:569) at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:924) at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:901) at org.apache.camel.spring.SpringCamelContext.maybeDoStart(SpringCamelContext.java:165) at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:160) at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:52) at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:816) at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:99) at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:119) at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:469) at org.springframework.context.event.SimpleApplicationEventMulticaster$1.run(SimpleApplicationEventMulticaster.java:78) at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:49) at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:76) at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:274) at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:736) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:383) at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:139) at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:83) at com.thehutgroup.despatchnotegenerator.GuernseyDespatchNoteGenerator.main(Unknown Source) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) at java.lang.reflect.Method.invoke(Unknown Source) at com.sun.javaws.Launcher.executeApplication(Unknown Source) at com.sun.javaws.Launcher.executeMainClass(Unknown Source) at com.sun.javaws.Launcher.doLaunchApp(Unknown Source) at com.sun.javaws.Launcher.run(Unknown Source) at java.lang.Thread.run(Unknown Source)  Any help is welcome!  Regards  Sameer. Sameer please do not reopen old tickets.  Create a new ticket and link to this one.  Reopening old tickets messes with the changelogs and release notes. And you issue is just a sub issue of this.  Can you try with latest code from trunk (e.g. Camel 2.1-SNAPSHOT). I have added additional TRACE logging.  And then enable TRACE logging for org.apache.camel.impl.DefaultPackageScanClassResolver That can help identify the issue and help fix it. 
Improvement,Willem Jiang,2008-05-16T16:43:49+0000,1210956229,Please see TODO in ConvertersMojo.java  converters-report creates a URLClassLoader with whatever is in ${project.testClasspathElements}  reason why we don't see all converters in the report. First we need a list of classpath elements the user could customize via plugin configuration  and elements of that list be added to the URLClassLoader. This should also be factored out into a utility class.,Closing ticket which isnt been worked on or in demand.. Closing all resolved tickets from 2010 or older. 
Bug,Willem Jiang,2008-05-16T21:04:12+0000,1210971852,The InstrumentationLifeCycleStrategy inserts an InstrumentationProcessor interceptor at the end of a route which is intercepted after the processing has been done.  The InstrumentationProcessor does not actually record the time spent on the route.  It is fixed by inserting InstrumentationProcessor at the beginning of the route and wrapping all the outputs.  There two MBeans (ManagedRoute and PerformanceCounter) registered for each route eventhough ManagedRoute already extends PerformanceCounter.  We probably only need to expose one MBean.  The ManagedRoute MBean shows performance attributes and operations (since it extends PerformanceCoutner) but these performance related stuffs don't really work.  This is fixed by registering only the ManagedRoute MBean and making the performance related attributes and operations functional.  This patch supports exposing all processors within a route as PerformanceCounter MBeans so that users are possible to monitor performance at the processor's level.  With this patch  the org.apache.camel.spi package no longer depends CamelNamingStrategy of the org.apache.camel.management.management package.  It follows the suggestion mentioned in https://issues.apache.org/activemq/browse/CAMEL-264.  Another update is to following the JMX spec convention of including a "type" property in the ObjectName (replacing the current "groups" property).  This patch also simplify the ManagedRoute's ObjectName a bit by removing builder and group properties.  If for some reasons  they need to be in the ObjectName  please add them back.,Here's how the tree will look in JConsole. Great spot William and very nice screenshot.  Willem (the assignee) now we should get the JMX page stuff added to the wiki - its great eye candy to see your routes on the jconsole and get some metrics.  I guess these metrics also could be read by Hyperic or some similar monitoring agents  that would be sweet to have it alerts if the routes starts to process more slowly. Okay sorry this topic is for the miss-timing.. patch applied with thanks to William.. 
Bug,Claus Ibsen,2008-05-17T03:38:09+0000,1210995489,For that attached code  if I use the correct component URI prefix "test-jms" that I have registered  Camel runs fine:             from("test-jms:queue:test.queue").process(new Processor() { ...  [Registration done via:       context.addComponent("test-jms"  JmsComponent.jmsComponentAutoAcknowledge(connectionFactory)); ]  But if I misspell the component prefix (here  "test-jms4")  Camel halts with no output or feedback to the user informing him of the problem:             from("test-jms4:queue:test.queue").process(new Processor() { ...  No feedback about the problem is given in the log files either.    I think in the from() and to() methods  Camel should be changed to throw an exception whenever it cannot resolve the component (i.e.  if the user uses "test-jms4" instead of "test-jms"  "cfx" instead of "cxf"  etc.)  not just halt silently.,Test file.. pom file used to run sample.. Glen  Do you not get a NoSuchEndpointException. The code below throws this fatal exception on me.  org.apache.camel.NoSuchEndpointException: No endpoint could be found for: mistyped://hello  public class Issue525Test extends ContextTestSupport {      public void testXXX() throws Exception {         Thread.sleep(1000);     }      protected RouteBuilder createRouteBuilder() throws Exception {         return new RouteBuilder() {             public void configure() throws Exception {                 from("mistyped://hello").to("mock:result");             }         };     } }. I tried your code in the camel-jms component and also got the exception  org.apache.camel.NoSuchEndpointException: No endpoint could be found for: test-jms4:queue:test.queue 	at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:54)   public class Issue5252Test extends TestCase {      public void testXXX() throws Exception {         CamelContext context = new DefaultCamelContext();          ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(             "vm://localhost?broker.persistent=false");         context.addComponent("test-jms"  JmsComponent.jmsComponentAutoAcknowledge(connectionFactory));          context.addRoutes(new RouteBuilder() {             public void configure() {                  from("test-jms4:queue:test.queue").process(new Processor() {                     public void process(Exchange e) {                         System.out.println("This was called - Body: " + e.getIn().getBody(String.class));                     }                  });             }         });          CamelTemplate template = new CamelTemplate(context);         context.start();         for (int i = 0; i < 3; i++) {             System.out.println("i is: " + i);             template.sendBody("test-jms:queue:test.queue"  "" + i);         }         Thread.sleep(60000);         context.stop();     }  }. Damm the anwser is right before my eyes.  Glenn you swallow the exception yourself in your run method()     public static void main(String[] args) {       CamelSample2 cs = new CamelSample2();       try {          cs.run();       } catch (Exception e) {       }    }   You should remove the catch block     public static void main(String[] args) throws Exception {       CamelSample2 cs = new CamelSample2();      cs.run();    }. It is not a bug in Camel. End-user swallows the exception.. Oh heavens! I did not take that into account. Sorry about that...  Glen. Closing 1.4 issues. 
Improvement,Unassigned,2008-05-17T05:52:06+0000,1211003526,CAMEL-385 added attachment support to camel 1.4 but it requires the JAF jar on the classpath for camel-core even though end users does not use the attachment support at all.  We should try to avoid this dependency and let somekind of delegate/lazy init determine of the JAF jar is on the classpath or not - As AXIS 1.x does and logs that activation is not supported since class XXX was not found on the classpath  See more on the forum: http://www.nabble.com/Attachment-support-in-camel-core-depends-on-JAF-but-where-is-it-td16931910s22882.html,Not possible. Camel 1.4 is also nearly out of the door with this dependency.. 
Improvement,Hadrian Zbarcea,2008-05-17T23:05:32+0000,1211065532,Currently there is a dependency cycle between camel and camel.impl. While I think there is no problem when impl uses camel the other direction should not occur. Luckily there ist only one case where this happens. The class CamelTemplate from camel uses ServiceSupport from impl.   As a solution I would suggest to move ServiceSupport and Service to util. ServiceHelper is already in util and Service as well as ServiceSupport do not need any other classes. This would help to break the dependency cycle and at the same time move some classes out of the already quite big camel package.,Perhaps this was a little short sighted of me. I thought the util package would be self contained. It seems util uses camel and even camel.impl. So putting the classes there would be no good idea.  So my suggestion is to move ServiceSupport and ServiceHelper to camel this brings some more bloat to camel but at least it removes the cycle.. I have added a patch that moves ServiceHelper and ServiceSupport to the camel package like described before.. Christian  why should ServiceHelper be moved to the camel package? Why cant it stay in camel.util as all the other helper classes does?. The problem with ServiceHelper is that ServiceSupport uses ServiceHelper. So we get a new dependency between camel and util. Currently there are 12 references from camel to util and 245 references from util to camel. So I think util needs camel but we have a chance to cut the other direction. 2 of the 12 references from camel to util come from ServiceSupport the other 10 come from CamelTemplate. So I thought we could start with ServiceHelper and solve the problem with CamelTemplate in a new issue.  The alternative would be to try to move the whole Service thing to util. This would be ServiceHelper  ServiceSupport and Service. The problem with this is that Service is referenced from many classes in Camel. So we would make the cycle between camel and util even worse.  I think the problem with all this is that we need a util package that does not depend on camel. Somthing like base utils. Then we could move utility classes like ServiceSupport ... to this package. Our current util is to much dependent from Camel that we can hope to make it standalone.  Btw. I am using structure101 to analyse the dependencies. Do you also use this or another tool already? Normally the tool costs about 600$ but as Camel is an open source project we can get it free. If you are interested in the tool I can give you the contact from headway where I got my license. See http://activemq.apache.org/camel/acknowledgment.html. fwiw  I don't think moving ServiceSupport and ServiceHelper to oac is a good idea.  My S101 shows 76 deps from impl->util and 13  from util->impl  so impl should depend on util I guess. In that case the dependency between ServiceHelper and ServiceSupport is ok the way it is.. I have another idea how to solve the cycle. The references from camel to impl go from CamelTemplate to ServiceSupport. So we could move CamelTemplate to impl. Perhaps it would be a good idea to also create an interface for CamelTemplate in camel and a way to retrieve the CamelTemplate without knowing the concrete implementation. This part would solve the cycle between camel and impl.  ServiceSupport is also referenced from util.ProducerCache. As util should not reference impl we should move ProducerCache to impl. As ProducerCache is currently only referenced from CamelTemplate and the processor package this should be ok.  What do you think about this change? Is impl a good place for CamelTemplate? I am not sure about it myself as CamelTemplate is visible to Camel users. If we create an interface for CamelTemplate I think it should be ok.. That would work. I took care of that  but there are a few others to sort out. I think we can remove language >> component  model >> component and model >> language. I am not sure what we can do with camel >> model because of RouteType.. CamelTemplate already have an interface = ProducerTemplate in the org.apache.camel package. So what is needed is how the end-users retrieve an instance of the ProducerTemplate?  CamelTemplate is however much used in the documentation and examples how to use Camel so if its changed to ProducerTemplate then it can also confuse people  even though ProducerTemplate is what CamelTemplate is used for - to easily produce and send exchanges.. Christian  I would like to get the license for the great product s101. You can get in touch with my by email if you do not want to discuss on this public form  davsclaus at apache dot org. @Hadrian: I have also seen the other cycles and thought to address them one after the other in jira issues. Do you think this is a good idea or should we rather make a plan first?  About the ProducerTemplate: For me ProducerTemplate looks great. I also have an idea how to create it. What about a factory method in CamelContext?  Like: ProducerTemplate pt = camelContext.createProducerTemplate();  Inside the unit tests it seems there are only a few places where CamelTemplate is used directly. I think it is a good idea to stay with the name ProducerTemplate as it cleary states what you can do with it. CamelTemplate is too general.  We could then rename CamelTemplate to DefaultProducerTemplate and move it to impl. It will then be referenced only from DefaultCamelContext.. @Christian  I really like your plan with the CamelTemplate moving and renaming and the factory on the CamelContext. This is +1 from me. We should just rememeber to update all the wiki documentation that shows you can use CamelTemplate - especially the quick start guides etc. And I do think we should start on a Camel 1.4 release notes where we state some of these new refactorings.. @Claus  Having a plan is good  for now I only went after the low hanging fruits.  I like the ProducerTemplate factory idea. Not sure about renaming CamelTemplate. I think I'd leave it as CamelContext as people may be used to it by now.. Move CamelTemplate to impl and rename it to DefaultProducerTemplate. Add a factory method createProducerTemplate to CamelContext. Make DefaultProducertTemplate private so it can´t be instantiated from outside impl. Change the Tests so they use the new factory method instead of diectly instantiating CamelTemplate.. I have added a patch for the CamelTemplate stuff. I think it should work out quite well. The CamelTemplate is gone in this patch this of course means people have to adapt their code. But even if we only had moved CamelTemplate they would have to change their code as the import is from a different package. I think this way it is much cleaner and the implementation is much better encapsulated. If we document this step well it should be no big problem for people. I think the idea of decribing what we changed in Release notes and wiki is a very important thing.. We could mark CamelTemplate as @deprecated and remove it in Camel 1.5?  Christian have you compiled all the components as well to check if they use CamelTemplate - in eg. their unit tests? Otherwise the patch looks good.. I have only checked and compiled camel-core. There I changed all references to CamelTemplate. If you say you want to keep CamelTemplate does this mean you want to keep a copy of the DefaultProducertTemplate in camel named CamelTemplate and mark this class as deprecated? I think this could be a good thing. We could describe in the comments of the deprecated class how to get a ProducerTemplate from CamelContext so people learn how they should chaange their code.. Yes I would leave it as it and remove it in a future release (either Camel 1.5 or Camel 2.0).  We just need to make sure that we change all the components code as well to use ProducerTemplate and not the @deprecated CamelTemplate so when its due time it can be safely deleted from the code base.. Sounds good to me. I added a draft for the release notes http://cwiki.apache.org/confluence/display/CAMEL/Camel+1.4.0+Release  We should state here the change of the @deprecatation of CamelTemplate and ProducerTemplate should be used instead  also with a small code sample how to get hold of a ProducerTemplate using the new method from CamelContext.. I am currently working on the ProducerTemplate patch  testing it before comitting it.  I have marked the old CamelTemplate as @deprecated and hinted to use ProducerTemplate instead that can be fetch using the CamelContext.. I do even think we could delegate all method calls from CamelTemplate to DefaultProducerTemplate as CamelContext requires a CamelContext in its constructors. Then we can ensure that the codebase is not duplicated.. Sending camel-core\src\main\java\org\apache\camel\CamelContext.java Sending camel-core\src\main\java\org\apache\camel\EndpointInject.java Sending camel-core\src\main\java\org\apache\camel\impl\CamelTemplate.java Sending camel-core\src\main\java\org\apache\camel\impl\DefaultCamelContext.java Adding camel-core\src\main\java\org\apache\camel\impl\DefaultProducerTemplate.java Sending camel-core\src\test\java\org\apache\camel\ContextTestSupport.java Sending camel-core\src\test\java\org\apache\camel\component\file\DirectoryCreateIssueTest.java Sending camel-core\src\test\java\org\apache\camel\component\vm\VmRouteTest.java Sending camel-core\src\test\java\org\apache\camel\impl\StringDataFormatTest.java Sending camel-core\src\test\java\org\apache\camel\processor\SetOutBodyTest.java Sending camel-core\src\test\java\org\apache\camel\processor\TryProcessorHandleTest.java Sending camel-core\src\test\java\org\apache\camel\processor\aggregator\AlbertoAggregatorTest.java Sending components\camel-jms\src\test\java\org\apache\camel\component\jms\JmsRouteRequestReplyTest.java Transmitting file data ............. Committed revision 662986.. Hi   I think this kind of changes have a big impact on other projects using camel  such as activemq and servicemix. Not only code changes are required in these projects  but their ability to work with different versions of camel. This has a cascading effect on users of such projects who may have to consider updating to camel 1.4 too.  I would suggest asking their opinion in the future before making such changes.  My $0.02  Hadrian. Any idea how to organize this? A mail to the respective developer lists? Which projects would you suggest to ask when we propose architectural changes that affect other projects? As soon as we know who to ask we could document this in the wiki for the future.. Not sure. I know we impacted activemq and servicemix. What I'd suggest is to send a message on the users mailing list  assuming that those who use camel and may be impacted subscribed to that list  send urls to the jiras related to refactoring and ask them to subscribe to those jiras if they want to and shout if they think what we do impacts them in a negative way.  I will send such a mail later today if no one objects.. Good idea Hadrian.  Myabe some of the bigger changes should be target for Camel 2.0? To cater for ActiveMQ and SericeMix being able to work with less hazzle from us. Maybe we could also get some feedback what the impacts was in ActiveMQ and/or SerivceMix?. Hadrian  if the breaking API was the we moved CamelTemplate to impl package  we could move it back again?. I think moving the CamelTemplate back could be a good idea. So people do not have to change right now. But we leave it deprecated so people know it will disappear soon.. Hadrian has moved it back.. Hadrian  should we close this ticket now that CamelTemplate is moved back and we have fixed a few tangles that hopefully doesn't cause trouble for ServiceMix and ActiveMQ?  There are lot of other patches from Christian that we could potentially use  or postpone to Camel 2.0?. Wow  forgot to add a comment after committing the patch. Sorry and thanks Claus!  I actually removed the use of CamelTemplate from our code too and made CamelTemplate extend from DefaultProducerTemplate vs just being a copy.  I think we can close this  yes  there are no other tangles now. This was a big chunk of work  thanks everybody!. As per Claus proposal  this can be closed  we have at least to other issues where we can continue the untangling work.. Closing 1.4 issues. 
Bug,Claus Ibsen,2008-05-18T04:40:00+0000,1211085600,I am seeing MailFetchSizeTest failing on my windows box.  After taking a look at the mock mailbox code  I think it is because mock mailbox (org.jvnet.mock_javamail.Mailbox) is not threadsafe.  If I add a half second sleep before checking mailbox.size() (see attached patch)  it does not fail on my box anymore.  It is still not a guaranteed fix though.  I think we could remove the mailbox size checks if the "sleep" trick does not work because mock mailbox does not seem to support our testcase and we already verify messages on the receiving mock endpoint.,CAMEL-528: Applied patch with thanks to William Tam. Closing 1.4 issues. 
Improvement,James Strachan,2008-05-19T16:58:27+0000,1211216307,when using UI tooling we might wanna add extra metadata to the model. e.g. we might wanna specify x/y coords or descriptions or extra validation rules or documentation or whatnot.  So having an optional ID attribute on routes & nodes in the DSL would make it easy for us to have separate UI tooling metadata that links to the Camel model,added an optional id attribute on all nodes along with an optional <description> element. 
Improvement,Willem Jiang,2008-05-20T00:42:12+0000,1211244132,The CXF component throws an NPE if the serviceClass option is missing for data types PAYLOAD and MESSAGE.  This change will throw a basic Camel exception explaining the problem instead.,Patch applied with thanks to Glen.. 
New Feature,Unassigned,2008-05-20T18:19:28+0000,1211307568,,Just committed a Debugger InterceptStrategy which can be added to a DefaultCamelContext via .addInterceptStrategy() or via the Spring Main via -d parameter.  The interceptor doesn't do heaps yet other than provide a log of exchanges sent to each step. We should remember to document this on the wiki before 1.4 is released.  Maybe when we get a seperate page for the intercept concept this new feature could be added there also.. See the documentation http://cwiki.apache.org/CAMEL/debugger.html. 
Improvement,Willem Jiang,2008-05-21T04:03:50+0000,1211342630,The Camel-CXF documentation[1] says the "serviceClass" option is not required when you are using CXF as a consumer (SOAP client).  (Slightly differently  FUSE's documentation[2] is saying that the "serviceClass" is not required if you provide the wsdlURL  the portName  and the serviceName.) I believe the following CXF_URI should work then even if I exclude the serviceClass:     private static final String JAXWS_SERVER_ADDRESS = "http://localhost:8080/doubleit/services/doubleit";    private static final String CXF_URI = "cxf://" + JAXWS_SERVER_ADDRESS      + "?wsdlURL=http://localhost:8080/doubleit/services/doubleit?wsdl"      + "&serviceClass=com.mycompany.webservice.service.DoubleItPortTypeImpl"      + "&portName= {http://www.example.org/DoubleIt} DoubleItPort"      + "&serviceName= {http://www.example.org/DoubleIt} DoubleItService";  ...        context.addRoutes(new RouteBuilder() {          public void configure() {              from("test-jms:queue:test.queue").process(new Processor() {                public void process(Exchange e)  {                    System.out.println("This was called - Body: " + e.getIn().getBody(String.class));                    e.getIn().setHeader(CxfConstants.OPERATION_NAME "DoubleIt");                    final List<String> params = new ArrayList<String>();                    params.add(e.getIn().getBody(String.class));                    e.getOut().setBody(params);                  }            }).to(CXF_URI).to("file://testfile").process(new Processor() {               public void process(Exchange e)  {                  System.out.println("In process"); //  + e.getIn().getBody(String.class));                  List<String> abc = e.getIn().getBody(ArrayList.class);                  System.out.println("This was called - in File list: " + abc.get(0));                 }                });            }       });      ...  But the problem is that the serviceClass seems to be always required  even if I supply the wsdlURL  portName  and serviceName as I did here.  When I remove the serviceClass from the code above  I get a NPE in the CXF code in both of these scenarios:  1.)  If I keep the wsdlURL  portName  and serviceName in the string above:  java.lang.NullPointerException         at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.initializeWSDLOperations(ReflectionServiceFactoryBean.java:447)         at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.buildServiceFromWSDL(ReflectionServiceFactoryBean.java:274)         at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.initializeServiceModel(ReflectionServiceFactoryBean.java:360)         at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.create(ReflectionServiceFactoryBean.java:156)         at org.apache.cxf.frontend.AbstractWSDLBasedEndpointFactory.createEndpoint(AbstractWSDLBasedEndpointFactory.java:74)         at org.apache.cxf.frontend.ClientFactoryBean.create(ClientFactoryBean.java:51)         at org.apache.camel.component.cxf.CxfProducer.createClientFormClientFactoryBean(CxfProducer.java:165)         at org.apache.camel.component.cxf.CxfProducer.<init>(CxfProducer.java:66)  2.)  If I just keep the wsdlURL  and remove portName and serviceName also:  java.lang.NullPointerException         at org.apache.cxf.service.factory.DefaultServiceConfiguration.getServiceNamespace(DefaultServiceConfiguration.java:168)         at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.getServiceNamespace(ReflectionServiceFactoryBean.java:1383)         at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.getServiceQName(ReflectionServiceFactoryBean.java:1338)         at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.buildServiceFromWSDL(ReflectionServiceFactoryBean.java:268)         at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.initializeServiceModel(ReflectionServiceFactoryBean.java:360)         at org.apache.cxf.service.factory.ReflectionServiceFactoryBean.create(ReflectionServiceFactoryBean.java:156)         at org.apache.cxf.frontend.AbstractWSDLBasedEndpointFactory.createEndpoint(AbstractWSDLBasedEndpointFactory.java:74)         at org.apache.cxf.frontend.ClientFactoryBean.create(ClientFactoryBean.java:51)         at org.apache.camel.component.cxf.CxfProducer.createClientFormClientFactoryBean(CxfProducer.java:165)         at org.apache.camel.component.cxf.CxfProducer.<init>(CxfProducer.java:66) ...   If I'm correct  that serviceClass is required no matter what  I think we need to update our Camel documentation to clarify that.  Also  to modify CxfProducer to throw a clear exception ("serviceClass is required") if the serviceClass is missing  instead of the user just getting the NPE somewhere deep in the CXF code.  Glen  [1] http://activemq.apache.org/camel/cxf.html [2] http://open.iona.com/docs/router/1.3/deploy_guide/FMRC.CXFComp.html,http://svn.apache.org/viewvc?rev=685098&view=rev. Closing all 1.5.0 issues. 
Bug,Unassigned,2008-05-21T04:38:35+0000,1211344715,I have an ActiveMQ Queue and a Spring Bean.  The bean is set to throw an IllegalStateException on 1/3 of all invocations.  The message publisher sets the JMSReplyTo destination  and there's a listener on the reply queue.  If I configure a route in XML <from uri="activemq:queue:Test"/><to uri="bean:MyBean:doSomething" /> then when the exception is thrown  the bean is invoked a second time.  (I can tell as the JMS Message ID is annotated into an argument to the doSomething method).  The reply queue gets exactly one response for every request  regardless of the number of exceptions thrown (I can tell as the JMSCorrelationID on the response is set to the incoming JMSMessageID using an @OutHeaders annotated argument).  If I drop the XML route and instead use @MessageDriven(uri="activemq:queue:Test") then when the exception comes up  the message silently disappears.  There is no error emitted by Camel  and the reply queue just never gets a message for those requests where the bean threw an exception.  This is unexpected – I would have thought the configured routing and @MessageDriven routing had exactly the same behavior when the route was the same.,Got a test case you could contribute?. I tried this again in 1.4 and it seems to have been fixed.  Specifically  with the default "activemq" component  when the bean throws an exception I see a stack trace in the console (below) and the message is not redelivered. If I use a custom ActiveMQ component with transactions enabled  I see the same stack trace and then the message is redelivered.  [aultMessageListenerContainer-7] EndpointMessageListener WARN Endpoint[customJMS:topic:AnnotationTest] consumer caught an exception while processing JMS message: ActiveMQTextMessage {commandId = 5  responseRequired = false  messageId = ID:hagrid.chariotsolutions.com-50882-1219076163784-0:2:1:1:1  originalDestination = null  originalTransactionId = null  producerId = ID:hagrid.chariotsolutions.com-50882-1219076163784-0:2:1:1  destination = topic://AnnotationTest  transactionId = null  expiration = 0  timestamp = 1219076164434  arrival = 0  brokerInTime = 1219076164434  brokerOutTime = 1219076164434  correlationId = null  replyTo = null  persistent = false  type = null  priority = 4  groupID = null  groupSequence = 0  targetConsumerId = null  compressed = false  userID = null  content = null  marshalledProperties = org.apache.activemq.util.ByteSequence@63676602  dataStructure = null  redeliveryCounter = 0  size = 0  properties =  {console=Wii  game=Dance Dance Revolution}    readOnlyProperties = true  readOnlyBody = true  droppable = false  text = message text} org.apache.camel.RuntimeCamelException: java.lang.IllegalStateException: This exception is just to see what happens. at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:77) at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:531) at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:466) at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:435) at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:316) at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:235) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:887) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:822) at java.lang.Thread.run(Thread.java:637) Caused by: java.lang.IllegalStateException: This exception is just to see what happens. at training.spring.AnnotationTest.doSomething(AnnotationTest.java:20) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.apache.camel.component.bean.MethodInfo.invoke(MethodInfo.java:124) at org.apache.camel.component.bean.MethodInfo$1.proceed(MethodInfo.java:68) at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:110) at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:68) ... 8 more [aultMessageListenerContainer-7] efaultMessageListenerContainer WARN Execution of JMS message listener failed org.apache.camel.RuntimeCamelException: java.lang.IllegalStateException: This exception is just to see what happens. at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:77) at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:531) at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:466) at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:435) at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:316) at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:235) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:887) at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:822) at java.lang.Thread.run(Thread.java:637) Caused by: java.lang.IllegalStateException: This exception is just to see what happens. at training.spring.AnnotationTest.doSomething(AnnotationTest.java:20) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.apache.camel.component.bean.MethodInfo.invoke(MethodInfo.java:124) at org.apache.camel.component.bean.MethodInfo$1.proceed(MethodInfo.java:68) at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:110) at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:68) ... 8 more. Closing old tickets. 
Bug,Willem Jiang,2008-05-21T07:53:03+0000,1211356383,http://www.nabble.com/camel-mina-udp-throws-exception-%22Already-released-buffer%22-td17342374.html#a17343387,This issue is caused by the type converter does not acquire the ByteBuffer when it coverts it into ByteArray.. The patch is in the revision 658580.. 
New Feature,Willem Jiang,2008-05-21T08:17:08+0000,1211357828,We could add a full featured loan broker example from Gregor's EIP book[1] to show how to use camel to implement the EIP.  [1] http://www.enterpriseintegrationpatterns.com/ComposedMessagingExample.html,I have had the same idea about a much better sample and the one from the integration bible must be the best example.. Finished the sub tasks.. 
Bug,Willem Jiang,2008-05-21T09:13:29+0000,1211361209,For POJO data formats the CxfProducer currently invokes the following method to invoke on a target server result = client.invoke(operation  parameters.toArray()); This fails to setup the Request and Response contexts for the out (request) message and in (response) message. It should instead be copying the relevant data from the consumer and invoking the following operation on the Client interface Object[] invoke(BindingOperationInfo oi    Object[] params   Map<String  Object> context) throws Exception;  Likewise the PAYLOAD and MESSAGE data formats are not setting up their contexts before they call the dispatch operation. In fact there is comments in the current codebase...                 // invoke the message prepare the context                 Map<String  Object> context = new HashMap<String  Object>();                 Map<String  Object> requestContext = new HashMap<String  Object>();                 Map<String  Object> responseContext = new HashMap<String  Object>();                 // TODO Get the requestContext from the CamelExchange                 context.put(CxfClient.REQUEST_CONTEXT  requestContext);                 context.put(CxfClient.RESPONSE_CONTEXT  responseContext);  The fix should also include a fix for all three data format types,Yes  we can get the context from exchange header or the in Message. I will do a quick fix for it.. The patch is in the revision 659468. Also update the CXF wiki page[1]  [1]http://cwiki.apache.org/confluence/display/CAMEL/CXF. Here is the Unit Test for it https://svn.apache.org/repos/asf/activemq/camel/trunk/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfProducerContextTest.java. 
Bug,Unassigned,2008-05-21T10:31:12+0000,1211365872,I found this link:  http://mail-archives.apache.org/mod_mbox/geronimo-servicemix-commits/200704.mbox/%3C20070407083556.0AFFC1A983A@eris.apache.org%3E  which led me to belief it is a bug in Camel.   Here are the errors I got:  ERROR - Could not search jar file 'http:\82.110.65.157\jsp-examples\lib\camel\camel-fix-1.3.6.0-fuse.jar' for classes matching criteria: annotated with @Converterdue to an IOException: http:\82.110.65.157\jsp-examples\lib\camel\camel-fix-1.3.6.0-fuse.jar (The filename  directory name  or volume label syntax is incorrect)  ERROR - Could not search jar file 'http:\82.110.65.157\jsp-examples\lib\camel\camel-ftp-1.3.6.0-fuse.jar' for classes matching criteria: annotated with @Converterdue to an IOException: http:\82.110.65.157\jsp-examples\lib\camel\camel-ftp-1.3.6.0-fuse.jar (The filename  directory name  or volume label syntax is incorrect)  ERROR - Could not search jar file 'http:\82.110.65.157\jsp-examples\lib\camel\camel-artixds-1.3.6.0-fuse.jar' for classes matching criteria: annotated with @Converterdue to an IOException: http:\82.110.65.157\jsp-examples\lib\camel\camel-artixds-1.3.6.0-fuse.jar (The filename  directory name  or volume label syntax is incorrect)  ERROR - Could not search jar file 'http:\82.110.65.157\jsp-examples\lib\camel\camel-mina-1.3.6.0-fuse.jar' for classes matching criteria: annotated with @Converterdue to an IOException: http:\82.110.65.157\jsp-examples\lib\camel\camel-mina-1.3.6.0-fuse.jar (The filename  directory name  or volume label syntax is incorrect)  ERROR - Could not search jar file 'http:\82.110.65.157\jsp-examples\lib\camel\camel-jhc-1.3.6.0-fuse.jar' for classes matching criteria: annotated with @Converterdue to an IOException: http:\82.110.65.157\jsp-examples\lib\camel\camel-jhc-1.3.6.0-fuse.jar (The filename  directory name  or volume label syntax is incorrect)  ERROR - Could not search jar file 'http:\82.110.65.157\jsp-examples\lib\camel\camel-core-1.3.6.0-fuse.jar' for classes matching criteria: annotated with @Converterdue to an IOException: http:\82.110.65.157\jsp-examples\lib\camel\camel-core-1.3.6.0-fuse.jar (The filename  directory name  or volume label syntax is incorrect)  ERROR - Could not search jar file 'http:\82.110.65.157\jsp-examples\lib\camel\camel-jaxb-1.3.6.0-fuse.jar' for classes matching criteria: annotated with @Converterdue to an IOException: http:\82.110.65.157\jsp-examples\lib\camel\camel-jaxb-1.3.6.0-fuse.jar (The filename  directory name  or volume label syntax is incorrect)  ERROR - Could not search jar file 'http:\82.110.65.157\jsp-examples\lib\camel\camel-xmlbeans-1.3.6.0-fuse.jar' for classes matching criteria: annotated with @Converterdue to an IOException: http:\82.110.65.157\jsp-examples\lib\camel\camel-xmlbeans-1.3.6.0-fuse.jar (The filename  directory name  or volume label syntax is incorrect)  ERROR - Could not search jar file 'http:\82.110.65.157\jsp-examples\lib\camel\camel-mail-1.3.6.0-fuse.jar' for classes matching criteria: annotated with @Converterdue to an IOException: http:\82.110.65.157\jsp-examples\lib\camel\camel-mail-1.3.6.0-fuse.jar (The filename  directory name  or volume label syntax is incorrect)  ERROR - Could not search jar file 'http:\82.110.65.157\jsp-examples\lib\camel\camel-xmlbeans-1.3.6.0-fuse.jar' for classes matching criteria: annotated with @Converterdue to an IOException: http:\82.110.65.157\jsp-examples\lib\camel\camel-xmlbeans-1.3.6.0-fuse.jar (The filename  directory name  or volume label syntax is incorrect)  ERROR - Could not search jar file 'http:\82.110.65.157\jsp-examples\lib\camel\camel-http-1.3.6.0-fuse.jar' for classes matching criteria: annotated with @Converterdue to an IOException: http:\82.110.65.157\jsp-examples\lib\camel\camel-http-1.3.6.0-fuse.jar (The filename  directory name  or volume label syntax is incorrect)  ERROR - Could not search jar file 'http:\82.110.65.157\jsp-examples\lib\activemq\activemq-core-5.0.0.13-fuse.jar' for classes matching criteria: annotated with @Converterdue to an IOException: http:\82.110.65.157\jsp-examples\lib\activemq\activemq-core-5.0.0.13-fuse.jar (The filename  directory name  or volume label syntax is incorrect)  ERROR - Could not search jar file 'http:\82.110.65.157\jsp-examples\lib\camel\camel-jcr-1.3.6.0-fuse.jar' for classes matching criteria: annotated with @Converterdue to an IOException: http:\82.110.65.157\jsp-examples\lib\camel\camel-jcr-1.3.6.0-fuse.jar (The filename  directory name  or volume label syntax is incorrect),See CAMEL-522. Divan please continue on CAMEL-522 for the problem as we already had a ticket for this bug/problem in Camel. Thanks Claus. 
New Feature,Hadrian Zbarcea,2008-05-21T16:13:29+0000,1211386409,Fault semantics is limited to a few protocols/technologies  such as the ones based on wsdl or jbi. We should be able to handle faults within a route as they were exceptions by adding something like handleFault() to the dsl.,Closing 1.4 issues.. 
Improvement,Roman Kalukiewicz,2008-05-21T16:42:35+0000,1211388155,In heavy load environment XSLT transformations have very bad performance.  I propose to use javax.xml.transform.Templates object to produce separate Transformers for every execution.,patch applied. I had to remove two methods from XsltBuilder so it could use Templates. Unfortunately I couldn't find a way to transform Transformer into Template so I couldn't leave xslt(Transformer) and <init>(Transformer) methods.  If there is someone who knows how to do it  lets advice. I don't think they are very crucial  but it is nice to have backward compatibility. Closing 1.4 issues. 
Task,Claus Ibsen,2008-05-22T04:15:32+0000,1211429732,Camel uses Spring 2.0 XSD schemes. This should be upgraded to 2.5.  See: http://www.nabble.com/SpringBeans-2.5-XSD-instead-of-2.0--td17272061s22882.html,
Improvement,Claus Ibsen,2008-05-22T08:49:09+0000,1211446149,I have found one other problem in RouteContext. The method intercept uses the class Interceptor from processor. I think Interceptor should be an interface that should reside in spi or camel. So we could avoid referencing the processor package from spi.  When I look into the current Interceptor implementation I think the two main methods that need to be in the interface are process and proceed. Process can be inherited from Processor but proceed is only declared in the implementation class DelegateProcessor. So I think the clean way to handle this would be to create an interface DelegateProcessor and a spearate DefaultDelegateProcessor.  public interface DelegateProcessor extends Processor  {  /** * Proceed with the underlying delegated processor */  public abstract void proceed(Exchange exchange) throws Exception;  }  and an interface Interceptor  public interface Interceptor extends DelegateProcessor {  public abstract void process(Exchange exchange) throws Exception; public abstract Processor getInterceptorLogic(); public abstract void setInterceptorLogic(Processor interceptorLogic);  }  When we put these to spi and use them instead of the implementations where possible the spi would not depend on processor anymore.,Create interfaces for Interceptor and DelegateProcessor and move the interfaces to spi. The implementation classes are renamed to DefaultInterceptor and DefaultDelegateProcessor. All classes that reference these are changed to use only the interfaces where possible.. Hadrian has committed some parts of this to the trunk as of CAMEL-547.  Christian I do think you should do a fresh start to see how we are with the tangles and create new patches.. Fixed a bad tangle in spi. This package is now clean.  Committed revision 748992.. Closing 2.0m1 tickets. 
Task,Unassigned,2008-05-22T14:22:44+0000,1211466164,Currently build from the source requires Java 1.5 only.   Sometime in the future we should be able to build using 1.6 - eg. when 1.6 is mainstream on the mac's,On my machine  Camel now builds with Java 1.6 after this change (http://svn.apache.org/viewvc/activemq/camel/trunk/components/camel-jxpath/src/test/java/org/apache/camel/language/jxpath/SpringJXPathFilterTest.java?r1=659263&r2=659262&pathrev=659263)  Multiple test classes that use the same Spring XML file when extending AbstractJUnit38SpringContextTests are not independent of each other. In this case  the mock endpoint still 'remembers' the messages from this test when it arrives at the SpringJXPathFilterNonMatchingTest – causing the latter one to fail. This problem doesn't occur in Java 1.5 because the tests are being executed in a different order (the non-matching test precedes the matching test).. 
Improvement,Hadrian Zbarcea,2008-05-23T13:58:05+0000,1211551085,,Hadrian  isnt this done already?  <cxf-version>2.1</cxf-version> is in pom.xml. I just found camel-example-cxf fail with this change  the update need more than change the cxf-version. I am working on it now.. Found the cause of the issue that I comment(CAMEL-561)  it is not relate to the CXF's version upgrading   so it can be closed. 
Sub-task,Hadrian Zbarcea,2008-05-23T19:19:09+0000,1211570349,,Closing 1.4 issues. 
Bug,Willem Jiang,2008-05-24T11:12:05+0000,1211627525,The public Camel XSD at the default http location is very old (26kb) http://activemq.apache.org/camel/schema/spring/camel-spring.xsd  Camel 1.3 is 40kb and 1.4-snapshot is 42kb,Reading the last section of: http://activemq.apache.org/camel/xml-reference.html  It states that Camel will at runtime use the XSD included in camel-spring.jar. I suppose that we should either:  remove the XSD from the site at http://activemq.apache.org/camel/schema/spring/camel-spring.xsd so it wont confuse people and let their IDE autofetch this old external resource. upgrade it to the latest released version = Camel 1.3  However then the XML reference javadoc is outdated: http://activemq.apache.org/camel/maven/camel-spring/xsddoc/  This is very old and does not include all the new stuff.. I vote we (at the very least) update the public xsd to the latest and greatest. The last few items added to the schema (routingSlip  convertBodyTo  setHeader  etc..) are not available in the current one.. Actually  someone with apache ssh privileges could easily set up a profile in camel-spring to automatically deploy the xsd to this location   The maven-deploy-plugin could be configured for this: http://maven.apache.org/plugins/maven-deploy-plugin/deploy-file-mojo.html  Let me know if you need any help doing this.. Actually   the schema is updated by the below script https://svn.apache.org/repos/asf/activemq/scripts/activemq-schema-copy.sh  we could change this script to copy the latest released schema to camel-spring.xsd. The scripts are committed into the https://svn.apache.org/repos/asf/activemq/scripts The committed revision is 663498. Oh nice  I didn't even know we had this script  Thanks Willem!  Could someone with the proper privileges run this script now?. I'm now running the latest greatest scripts. Cool  thanks James. The schema is in the activem.apache.org web site.. 
Improvement,Claus Ibsen,2008-05-24T14:53:25+0000,1211640805,Currently the packages util and converter reference each other. In the direction from util to converter there is only one reference. ObjectHelper needs ObjectConverter.iterator. As iterator is a static method and does not have anything to do with conversion I think we can move it savely to ObjectHelper. So the cycle disappears. converter uses util but not the other way round. I will add a patch for this.,This patch moves the iterator method from ObjectConverter to ObjectHelper and changes the classes that use the iterator method.. Hadrian  have committed the patch n the trunk.  We should just mark ObjectConverter.iterate as @deprecated as people should use the ObjectHelper instead.. Closing 1.4 issues. 
Improvement,Hadrian Zbarcea,2008-05-24T16:40:51+0000,1211647251,Currently the spi package references builder.RouteBuilder. This creates a bad cycle in Camel as builder is one of the top level packages and spi is one of the lowest level packages. The method where RouteBuilder is used is in CamelContext.addRoutes(RouteBuilder builder). I think this reference is not necessary. CamelContext already has a method addRoutes(Collection<Route> routes).   So instead of calling camelContext.addRoutes(builder) I think the better way would to call: builder.setContext(camelContext); builder.addRoutesToContext(); // This is a new method that replaces the functionality of CamelContext.addRoutes(RouteBuilder builder)  This way we will also cut some part of the cycle between impl and builder. impl.DefaultCamelContext references both RouteBuilder and BuilderSupport from the builder package. Both will not be necessary anymore as as soon as we get rid of the addRoutes method.  This way CamelContext does not have to know anything about it´s builder. What do you think about this change?,This image shows the dependencies in camel core. The model package is left out to make the graph easier to read. What we see is that spi references builder and impl also refrences builder. Both dependencies can be cut.. It's actually between camel and builder. This sound like a reasonable solution  will take a looksie later today.  I just committed a change that removes dependencies between util  converter and processor.. @Christian  addRoutes(RouteBuilder) was used in many places and the usage pattern was something like this: addRoutes(new RouteBuilder()  {...}  )  so your solution was not quite appealing. I solved it by introducing a Routes interface in oac.  I will keep this issue open for another few days  i think there is at least one dependency that could be untangled.. Hi Hadrian   your solution is in any case much better than the Camel 1.3 code but I would suggest to try to remove the addRoutes(RouteBuilder) in the long run. Why not mark the addRoutes method as deprecated and document in the method header the code I meantioned above as the way people should change their code to. So the addRoutes could be set for removal in Camel 1.5 or perhaps in 2.0.  Perhaps an even better solution that I mentioned above would be to simply have the pattern: builder.addRoutesToContext(camelContext);  So the RouteBuilder does no have to know the CamelContext for a longer time. I think it could even be possible that we remove all other references to CamelContext from RouteBuilder.  The current code is really ugly. If you look at DefaultCamelContext.addRoutes(Routes builder). It calls RouteBuilder.getRouteList(). This method calls checkinitialized which calls camelContext.addRouteDefinitions(routeCollection.getRoutes()). As you see the calls jump back and forth between RouteBuilder and DefaultCamelContext. There must be a cleaner way to achieve this. I will try to find a solution for this. Though I guess we are leaving the area of the low hanging fruits here. Small modifications in RouteContext and RouteType to make initialization easier and cleaner. Hi Hadrian   I have just added a patch for DefaultRouteContext to make the dependependency on CamelContext more transparent. I also change RouteType and moved some of the things that should not happen there to DefaultRouteContext. Perhaps you can take a look at it.. I have created a new issue for this problem with a better solution than I suggested before.. Please see the newer issue with the better patch. 
Bug,Claus Ibsen,2008-05-24T17:23:55+0000,1211649835,See the user forum where a user has detailed the problem:  http://www.nabble.com/File-Component-Error-handling-td15372041s22882.html,The trouble appears to start around line 119 in "FileConsumer" (on the 1.3 release)  where the call to processStrategy.commit() never gets reach if an exception occurs during the asynch processor's processing.. A proposed patch that works  however I need a few more investigations. The problem is that the lock file is not deleted when the failure handler has handled the exception. The callback when this happens is not executing the code that deletes the lock file. Okay commitet but now needs dependency on DeadLetterChannel for a constant it exposes.  Camel need some kind of addition to the ErrorHandler interface to let it be able to do failure processing also  or a helper method on exchange to expose if it was handled by a failure processor.. 
Bug,Willem Jiang,2008-05-25T06:19:07+0000,1211696347,The added -d Debugger option broke the  org.apache.camel.spring.Main's parameters consumption.,The patch is applied in to svn repository.. 
Bug,Willem Jiang,2008-05-25T06:30:06+0000,1211697006,With the following route:   				from("timer://tutorial?fixedRate=true&period=10") 						.setBody( 								constant("<?xml version='1.0' encoding='UTF-8'?><greetMe>Hello World</greetMe>")) 						.setHeader("CBR1"  constant("No")).choice().when( 								header("CBR1").isEqualTo("Yes")).setHeader( 								"CreditcardValidation"  constant("Yes")).to( 								"log:CBRBean?level=INFO").to("log:XSLT for provider1?level=INFO") 						.when(header("CBR1").isEqualTo("No")).setHeader( 								"CreditcardValidation"  constant("No")).to( 								"log:XSLT for provider2?level=INFO").end().choice() 						.when(header("CreditcardValidation").isEqualTo("Yes")) 						.to("log:CCVBean?level=INFO").to("log:XSLT for consumer1?level=INFO").when( 								header("CreditcardValidation").isEqualTo("No")) 						.to("log:XSLT for consumer2?level=INFO").otherwise() 						.to("log:test?level=INFO").end();    running mvn camel:run  I get the following stack trace:   java.lang.NullPointerException 	at org.apache.camel.view.NodeData.<init>(NodeData.java:136) 	at org.apache.camel.view.GraphGeneratorSupport.getNodeData(GraphGeneratorSupport.java:142) 	at org.apache.camel.view.RouteDotGenerator.printNode(RouteDotGenerator.java:101) 	at org.apache.camel.view.RouteDotGenerator.printNode(RouteDotGenerator.java:123) 	at org.apache.camel.view.RouteDotGenerator.printRoute(RouteDotGenerator.java:87) 	at org.apache.camel.view.RouteDotGenerator.printRoutes(RouteDotGenerator.java:64) 	at org.apache.camel.view.RouteDotGenerator.printRoutes(RouteDotGenerator.java:48) 	at org.apache.camel.view.RouteDotGenerator.generateFile(RouteDotGenerator.java:169) 	at org.apache.camel.view.GraphGeneratorSupport.generateFile(GraphGeneratorSupport.java:103) 	at org.apache.camel.view.GraphGeneratorSupport.drawRoutes(GraphGeneratorSupport.java:81) 	at org.apache.camel.spring.Main.generateDot(Main.java:392) 	at org.apache.camel.spring.Main.postProcessContext(Main.java:374) 	at org.apache.camel.spring.Main.doStart(Main.java:333) 	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:47) 	at org.apache.camel.spring.Main.run(Main.java:123) 	at org.apache.camel.spring.Main.run(Main.java:114) 	at org.apache.camel.spring.Main.main(Main.java:106) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) 	at java.lang.reflect.Method.invoke(Method.java:585) 	at org.apache.camel.maven.RunMojo$1.run(RunMojo.java:333) 	at java.lang.Thread.run(Thread.java:613)    the error seems related to the maven camel plugin failing generating the dot file for the route.,This error is caused by NodeData will take the optional "otherwise" node as a required node. A patch is committed for fix this error.. 
Bug,Claus Ibsen,2008-05-26T04:17:46+0000,1211775466,The noop=true option does not lock the file during processing as it states in its class javadoc. The parameter is false. It should be true instead.      public NoOpFileProcessStrategy()  {         super(false);     },commited to trunk  see FileNoOpLockFileTest. 
Bug,Claus Ibsen,2008-05-28T04:34:40+0000,1211949280,<dependency>       <groupId>org.springframework</groupId>       <artifactId>spring-aop</artifactId>       <version>${spring-version}</version>     </dependency>  is needed in pom.xml for camel-spring as its needed to let camel-spring component work out-of-the-box. Without it the camel-example-spring does not work and blows up with a ClassNotFoundException when you use camel:run,
Improvement,Unassigned,2008-05-28T08:43:17+0000,1211964197,InstrumentationAgentImpl (or DefaultInstrumentationagent in the trunk)  only allows to set the JMX registry port  URL created is service:jmx:rmi:///jndi/rmi://<host>:<registryPort>/jmxrmi.   However  when a connection is established  the remote objects are exchanged on a different port. If this is not set  it's chosen by random  which is particularly unhelpful if the instrumented Camel server is behind a firewall! The appropriate URL is  service:jmx:rmi://<host>:<remotePort>/jndi/rmi://<host>:<registryPort>/jmxrmi.   Also see http://blogs.sun.com/jmxetc/entry/connecting_through_firewall_using_jmx for more details.  The easiest fix would be to define remotePort=registryPort+1 and use the new URL in the createJmxConnector method. More flexible would be to have an independent property and let the use choose which URL should be used.,a patch is attached to camel-606 also address this issue.. Fixed with CAMEL-606. See updated wiki documentation as well: http://activemq.apache.org/camel/camel-jmx.html. Closing 1.4 issues.. 
Task,Willem Jiang,2008-05-28T09:23:55+0000,1211966635,Spring Integration 1.0.0.4 m4 is released  we need to catch up it.,The patch is in the svn trunk.. 
Sub-task,Willem Jiang,2008-05-29T07:16:59+0000,1212045419,with the message queue  we could get a asychronous implementation of loan broker,The example is committed into the svn repository.. 
Sub-task,Willem Jiang,2008-05-29T07:21:55+0000,1212045715,We can let loan broker call the Credit and Bank service by using the Camel-CXF component  and return the message back by using the InOut ExchangePattern.,The patch is in the trunk now. http://svn.apache.org/viewvc?rev=662632&view=rev. 
Sub-task,Willem Jiang,2008-05-29T07:22:42+0000,1212045762,,Remeber to add a README.txt also. here is the wiki page. http://cwiki.apache.org/confluence/display/CAMEL/Loan+Broker+Example. 
Bug,Unassigned,2008-05-29T07:57:05+0000,1212047825,Even the core type converters could not be loaded:  18:26:04 982 | ERROR | ExtenderThread-4 | ResolverUtil | g.apache.camel.util.ResolverUtil  364 | Could not search jar file '/org/apache/camel/converter' for classes matching criteria: annotated with @Converterdue to an IOException: /org/apache/camel/converter (No such file or directory),Duplicate of CAMEL-577. 
Task,Hadrian Zbarcea,2008-05-30T04:12:27+0000,1212120747,,Looks like we need some more classes on the classpath now  ------------------------------------------------------------------------------- Test set: org.apache.camel.component.jms.temp.JmsProviderTest ------------------------------------------------------------------------------- Tests run: 1  Failures: 0  Errors: 1  Skipped: 0  Time elapsed: 1.125 sec <<< FAILURE! testTemporaryDestinationTypes(org.apache.camel.component.jms.temp.JmsProviderTest) Time elapsed: 0.937 sec <<< ERROR! java.lang.NoClassDefFoundError: javax/transaction/SystemException at org.apache.activemq.pool.PooledConnectionFactory.createConnectionPool(PooledConnectionFactory.java:118) at org.apache.activemq.pool.PooledConnectionFactory.createConnection(PooledConnectionFactory.java:111) at org.apache.activemq.pool.PooledConnectionFactory.createConnection(PooledConnectionFactory.java:86) at org.springframework.jms.support.JmsAccessor.createConnection(JmsAccessor.java:184) at org.springframework.jms.core.JmsTemplate.execute(JmsTemplate.java:449) at org.springframework.jms.core.JmsTemplate.execute(JmsTemplate.java:424) at org.apache.camel.component.jms.JmsProviderMetadata.loadTemporaryDestinationTypes(JmsProviderMetadata.java:88) at org.apache.camel.component.jms.JmsProviderMetadata.getTemporaryQueueType(JmsProviderMetadata.java:44) at org.apache.camel.component.jms.JmsEndpoint.getTemporaryQueueType(JmsEndpoint.java:219) at org.apache.camel.component.jms.temp.JmsProviderTest.testTemporaryDestinationTypes(JmsProviderTest.java:41). And this test now also fails  Running org.apache.camel.component.jms.JmsRouteRequestReplyTest Tests run: 16  Failures: 1  Errors: 0  Skipped: 0  Time elapsed: 267.859 sec <<< FAILURE!. First error is fixed by adding JTA to the pom.xml  <dependency> <groupId>org.apache.geronimo.specs</groupId> <artifactId>geronimo-jta_1.1_spec</artifactId> <version>${geronimo-spec-version}</version> </dependency>. The 2nd test is a bit more tricky  ------------------------------------------------------------------------------- Test set: org.apache.camel.component.jms.JmsRouteRequestReplyTest ------------------------------------------------------------------------------- Tests run: 16  Failures: 1  Errors: 0  Skipped: 0  Time elapsed: 257.094 sec <<< FAILURE! testUseMessageIDAsCorrelationIDPersistReplyToMultiNode(org.apache.camel.component.jms.JmsRouteRequestReplyTest) Time elapsed: 161.797 sec <<< FAILURE! junit.framework.AssertionFailedError: Unexpected reply. Expected: 'Re: Hello World-919'; Received: 'Hello World-919' at junit.framework.Assert.fail(Assert.java:47) at junit.framework.Assert.assertTrue(Assert.java:20) at org.apache.camel.component.jms.JmsRouteRequestReplyTest$Task.assertSuccess(JmsRouteRequestReplyTest.java:314) at org.apache.camel.component.jms.JmsRouteRequestReplyTest.runRequestReplyThreaded(JmsRouteRequestReplyTest.java:455) at org.apache.camel.component.jms.JmsRouteRequestReplyTest.testUseMessageIDAsCorrelationIDPersistReplyToMultiNode(JmsRouteRequestReplyTest.java:349). patch to upgrade to 510 and jta 1.1 and a todo for the failing unit test. Claus  I looked into the same thing last night . While we're at it we should remove dependencies on the big apache-activemq and keep only deps on finer grained jars. It's used in only 3 places.. Hadrian. I have tried to remove dep on the big apache-activemq and it runs on my local laptop.  I have commited a chage - it's still on ActiveMQ 5.0.0 and JTA 1.0. Could you review the change  commit log will be in the camel-commits mailinglist:  Modified: D:\project\camel\apache-camel\pom.xml Modified: D:\project\camel\pom.xml Sending content: D:\project\camel\apache-camel\pom.xml Sending content: D:\project\camel\pom.xml Completed: At revision: 662040. Raising level since activemq-5.0.0 depends on a snapshot on activeio-core that is not longer in maven repo. So an upgrade is really needed.. Hi claus   I have the same problem  activemq 5.0 release has dependency of activeio-core 3.1 snapshot  but now this snapshot get removed from apache repo. And this problem get resolved in activemq 5.1 release  so upgrade to 5.1 should resolve it.  Cheers  Freeman. CAMEL-559:  Upgrade to ActiveMQ 5.1.0 (TODO: on one unit test that now fails) Upgrade to JTA spec 1.1 Maven polishing CAMEL-567 fixed camel-route archetype missing depends on camel-core Tried to add new loan-broker example and spring-integration component (However still a TODO - please fix) Fixed javadoc link on commons-collection being old Upgraded to shade 1.0.1 (missmatch as some parts had shade 1.0.1 already) and other maven upgrades in apache-camel  bundle and tooling Remoed fixed version numbers on dependencies we already have set in the root pom.xml (the $ version stuff)  Sending content: D:\project\camel\examples\camel-example-bam\pom.xml Sending content: D:\project\camel\components\camel-spring-integration\pom.xml Sending content: D:\project\camel\components\camel-jms\src\test\java\org\apache\camel\component\jms\JmsRouteRequestReplyTest.java Sending content: D:\project\camel\components\camel-jms\pom.xml Sending content: D:\project\camel\pom.xml Sending content: D:\project\camel\apache-camel\pom.xml Sending content: D:\project\camel\examples\camel-example-loan-broker\pom.xml Sending content: D:\project\camel\tooling\maven\camel-maven-plugin\pom.xml Sending content: D:\project\camel\tooling\archetypes\camel-router\src\main\resources\archetype-resources\pom.xml Sending content: D:\project\camel\components\camel-bam\pom.xml Sending content: D:\project\camel\components\camel-spring\pom.xml Sending content: D:\project\camel\tests\camel-itest\pom.xml Sending content: D:\project\camel\apache-camel\bundle\pom.xml Sending content: D:\project\camel\examples\camel-example-etl\pom.xml Sending content: D:\project\camel\examples\pom.xml Sending content: D:\project\camel\components\camel-jpa\pom.xml Sending content: D:\project\camel\tooling\maven\pom.xml Completed: At revision: 662188. Outstanding issue:  Review of pom changes and see if Bamboo also is happy as my local laptop Hadrian/James etc. look into the one single unit test failing in JmsRouteRequestReplyTest (TODO added). Looks like bamboo build 290 is hanging.  Idea is to revert to assembly v2.1 instead of 2.2-beta-2 shipped with maven 2.0.9.  activemq/camel/trunk/apache-camel/pom.xml  <version>2.1</version> + <version>2.2-beta-2</version>. Reverted back to apache-assembly-plugin v2.1 in the trunk to see if Bamboo is now happy at the assembly part at the end of building.. Using v2.1 now works on Bamboo  Issues left:  Hadrian/James etc. look into the one single unit test failing in JmsRouteRequestReplyTest (TODO added). Reassigned to let Hadrian/James look at the failing unit test on ActiveMQ 5.1.0. Lets close this one for now. We are on ActiveMQ 5.1 we have a TODO on the failing unit test.  Reverting to ActiveMQ 5.0 is not possible since it uses a SNAPSHOT release that does not longer exists in the maven repos.. Claus   I've just uncommented out the failing test - org.apache.camel.component.jms.JmsRouteRequestReplyTest.testUseMessageIDAsCorrelationIDPersistReplyToMultiNode and have been running without any failures?  Can you try this yourself and if you see no issues can you do the same on the trunk?  Thanks  Marat. Marat  maybe something wrong with my box. This unit test is also failing as the aggregated one.  D:\project\camel\components\camel-jms>mvn clean compile test -Dtest=JmsRouteRequestReplyTest [INFO] Scanning for projects... [INFO] ------------------------------------------------------------------------ [INFO] Building Camel :: JMS [INFO] task-segment: [clean  compile  test] [INFO] ------------------------------------------------------------------------ [INFO] [clean:clean] [INFO] Deleting directory D:\project\camel\components\camel-jms\target [INFO] Deleting file-set: D:\project\camel\components\camel-jms/activemq-data (included: []  excluded: []) [INFO] [resources:resources] [INFO] Using default encoding to copy filtered resources. [INFO] [compiler:compile] [INFO] Compiling 33 source files to D:\project\camel\components\camel-jms\target\classes [INFO] [resources:resources] [INFO] Using default encoding to copy filtered resources. [INFO] [compiler:compile] [INFO] Nothing to compile - all classes are up to date [INFO] [resources:testResources] [INFO] Using default encoding to copy filtered resources. [INFO] [compiler:testCompile] [INFO] Compiling 40 source files to D:\project\camel\components\camel-jms\target\test-classes [INFO] [surefire:test] [INFO] Surefire report directory: D:\project\camel\components\camel-jms\target\surefire-reports  ------------------------------------------------------- T E S T S ------------------------------------------------------- Running org.apache.camel.component.jms.JmsRouteRequestReplyTest Tests run: 16  Failures: 1  Errors: 0  Skipped: 0  Time elapsed: 289.563 sec <<< FAILURE!  Results :  Failed tests: testUseMessageIDAsCorrelationIDPersistReplyToMultiNode(org.apache.camel.component.jms.JmsRouteRequestReplyTest)  Tests run: 16  Failures: 1  Errors: 0  Skipped: 0  ------------------------------------------------------------------------------- Test set: org.apache.camel.component.jms.JmsRouteRequestReplyTest ------------------------------------------------------------------------------- Tests run: 16  Failures: 1  Errors: 0  Skipped: 0  Time elapsed: 289.563 sec <<< FAILURE! testUseMessageIDAsCorrelationIDPersistReplyToMultiNode(org.apache.camel.component.jms.JmsRouteRequestReplyTest) Time elapsed: 182.828 sec <<< FAILURE! junit.framework.AssertionFailedError: Unexpected reply. Expected: 'Re: Hello World-941'; Received: 'Hello World-941' at junit.framework.Assert.fail(Assert.java:47) at junit.framework.Assert.assertTrue(Assert.java:20) at org.apache.camel.component.jms.JmsRouteRequestReplyTest$Task.assertSuccess(JmsRouteRequestReplyTest.java:314) at org.apache.camel.component.jms.JmsRouteRequestReplyTest.runRequestReplyThreaded(JmsRouteRequestReplyTest.java:455) at org.apache.camel.component.jms.JmsRouteRequestReplyTest.testUseMessageIDAsCorrelationIDPersistReplyToMultiNode(JmsRouteRequestReplyTest.java:349). 
Bug,Hadrian Zbarcea,2008-05-30T04:44:55+0000,1212122695,See context at:  http://www.nabble.com/Should-message-converters-be-thread-safe--td17543780s22882.html,
Bug,Willem Jiang,2008-05-30T08:06:25+0000,1212134785,When using mvn eclipse:eclipse to setup the workspace for camel example to run.  I found some camel-cxf related example can't work in eclipse which is caused by using the lower version of wstx-asl.  We can using the activemq-core instead of apache-activemq to fix this issue.,The patch is in the trunk now.. camel-example-spring-xquery was using the big instead of the core so I am changing it to use activemq-core. Hmm some of the ActiveMQ is dependent on Spring 1.2.8  Downloading: http://people.apache.org/repo/m2-ibiblio-rsync-repository/org/springframework/spring/1.2.8/spring-1.2.8.jar Downloading: http://repo1.maven.org/maven2//org/springframework/spring/1.2.8/spring-1.2.8.jar 1887K downloaded  This is with activemq-5.1.0 btw that I am trying to upgrade to in Camel.. 
Bug,Claus Ibsen,2008-05-30T08:32:35+0000,1212136355,The stack trace :  SEVERE: Failed delivery for exchangeId: ID-TsingTao/53940-1212136063400/0-0. On delivery attempt: 0 caught: java.io.FileNotFoundException: target\ID:TsingTao-53937-1212136063115-2:1:1:1:1 (The filename  directory name  or volume label syntax is incorrect) java.io.FileNotFoundException: target\ID:TsingTao-53937-1212136063115-2:1:1:1:1 (The filename  directory name  or volume label syntax is incorrect) 	at java.io.RandomAccessFile.open(Native Method) 	at java.io.RandomAccessFile.<init>(RandomAccessFile.java:212) 	at org.apache.camel.component.file.FileProducer.process(FileProducer.java:76) 	at org.apache.camel.component.file.FileProducer.process(FileProducer.java:54) 	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:43) 	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:75) 	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:146) 	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:90) 	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:39) 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:41) 	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:66) 	at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:67) 	at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:531) 	at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:466) 	at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:435) 	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:322) 	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:260) 	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:944) 	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:875) 	at java.lang.Thread.run(Thread.java:595)  BTW  The sample is workable with Camel-1.3.0.,Strange bug:  TsingTao-53937-1212136063115-2:1:1:1:1 is generated as message.id that uses the UUIDGenerator that should not use unfriendly files chars.. Some of the other samples that involves files fails to.. The problem seems to be the JMS component that generates the id that is not file friendly.. Fixed. camel-jms in 1.4 now generates unique message id differently that was file unfriendly. Fixed by improving FileProducer to handle these situations as its the one that writes the files.. 
Bug,Willem Jiang,2008-05-30T09:40:47+0000,1212140447,When I try to use camel-cxf component in smx4  I still get exceptions like  Exception in thread "SpringOsgiExtenderThread-9" org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: cxf:bean:routerEndpoint due to: org.apache.camel.RuntimeCamelException: Could not auto create component: cxf         at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:262)         at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:52)         at org.apache.camel.model.RouteType.resolveEndpoint(RouteType.java:90)         at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:98)         at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:104)         at org.apache.camel.model.FromType.resolveEndpoint(FromType.java:67)         at org.apache.camel.impl.DefaultRouteContext.getEndpoint(DefaultRouteContext.java:73)         at org.apache.camel.model.RouteType.addRoutes(RouteType.java:204)         at org.apache.camel.model.RouteType.addRoutes(RouteType.java:81)         at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:451)         at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:443)         at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:149)         at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:47)         at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:103)         at org.springframework.context.event.SimpleApplicationEventMulticaster$1.run(SimpleApplicationEventMulticaster.java:78)         at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:49)         at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:76)         at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:275)         at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:737)         at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.finishRefresh(AbstractDelegatedExecutionApplicationContext.java:271)         at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.completeRefresh(AbstractDelegatedExecutionApplicationContext.java:254)         at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor$CompleteRefreshTask.run(DependencyWaiterApplicationContextExecutor.java:136)         at java.lang.Thread.run(Thread.java:595) Caused by: org.apache.camel.RuntimeCamelException: Could not auto create component: cxf         at org.apache.camel.impl.DefaultCamelContext.getComponent(DefaultCamelContext.java:149)         at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:233)         ... 22 more Caused by: java.lang.IllegalArgumentException: Bean with name: cxf in registry is not a Component: org.apache.cxf.bus.CXFBusImpl@3ca56f         at org.apache.camel.osgi.OsgiComponentResolver.resolveComponent(OsgiComponentResolver.java:167)         at org.apache.camel.impl.DefaultCamelContext.getComponent(DefaultCamelContext.java:138)         ... 23 more,we could let component be created by the resolver if we can't get the right component by looking up the context registry. Please check it out.. 
Bug,Claus Ibsen,2008-05-30T13:23:02+0000,1212153782,Writing  this.from (address ) .tryBlock ()                 .process (new ProcessorFail() )                 .to (xxxx )             .handle (Exception.class )                 .process (new ProcessorAssertFail() )  If the ProcessorFail raises an exception  comes recalled correctly the ProcessorAssertFail  but if in his method process I write "Exchange failed? " + exchange.isFailed () the result is FALSE. It's a bug? Using camel 1.2 with the same code the result is true,Hi Donatello  After digging into it a bit I see that Camel on purpose removes the traces of exception for an exchange when you use the tryBlock(). See TryProcessor.java - method handleException  It's like giving a 2nd chance   I do see a very valid reason for this as you with they tryBlock(). .. handle() takes care of this any divert the route in the handle() block. The exchange has not failed yet  as it could be a valid use-case.  Lets say you use an business API to update an inventory  and in the try block the business API thrown a NoSuchInventoryException that you handle and do a a createInventory action instead.  Pseudo-code: tryBlock() // update inventory handle(NoSuchInventoryException) // create the inventory end  So I do not think its a bug  but a feature.  However there is still a trace left of the original thrown exception:  On the exchange.in.header there is this propery still caught.exception=java.lang.IllegalStateException: Force to fail. Its not a bug.  Added unit test to verify correct behavior in Camel: TryProcessorHandleTest.  Danatello  thanks for the report. See the TryProcessorHandleTest how you can still get the original thrown exception and do your own "failed" computation.. Closing 1.4 issues. 
Bug,Unassigned,2008-05-31T16:28:35+0000,1212251315,Just a quick bug report that the camel:dot generator seems to hang now on the latest 1.4 snapshot.  Try it from one of the examples or your own camel-route project INFO: Generating DOT file for routes: D:\project\claus-example\target/site/cameldoc for: org.apache.camel.spring.SpringCamelContext@f2da21 with name: camelContext  It just hangs.,There is a -duration flag iirc passed to Main. Is the example just not shutting down  or it's some kind of a deadlock? Hadrian. Looks like the default duration was somehow gone (could be because of the debugger feature added that also used -d option).  Setting -d 10s as program argument will stop after 10 seconds.. The warm weather must have got to my head. Some examples does never terminate automatically  you have to use ctrl + break.  Closed: Not a bug.. 
Bug,Willem Jiang,2008-06-01T08:13:26+0000,1212308006,the generated method name in java file is always begin with lower case  but the operationName in the servicemodel begin with uppercase per the wsdl  this mismatch will cause the invocation fail throwing NO_OPERATION_FOUND exception we should set CxfConstants.OPERATION_NAME as the one from servicemodel,Is it possible to add a small unit test that demonstrates the bug and now runs with the patch?. Willem  I suppose you don't mind I assign this to you as CXF is your ball park. sure  will add test later on  Cheers. Patch applied with thanks to Freeman.. http://svn.apache.org/viewvc?rev=662226&view=rev. 
Bug,Claus Ibsen,2008-06-01T09:34:58+0000,1212312898,When creating a new camel route project using maven archetype there is no dependeny on camel-core. This should be added.      <dependency>       <groupId>org.apache.camel</groupId>       <artifactId>camel-core</artifactId>       <version>${camel-version}</version>     </dependency>,Completed: At revision: 662188. 
Bug,Willem Jiang,2008-06-01T15:04:33+0000,1212332673,add code as below                 BindingOperationInfo bop = exchange.get(BindingOperationInfo.class);          if (bop != null && bop.getOperationInfo().isOneWay())  {             cxfExchange.setPattern(ExchangePattern.InOnly);         }  else  {             cxfExchange.setPattern(ExchangePattern.InOut);         },http://svn.apache.org/viewvc?rev=662237&view=rev. The patch is in the trunk as Freeman pointed.. 
Improvement,Willem Jiang,2008-06-02T02:01:03+0000,1212372063,CxfMessage has method setMessage()  but this methold isn't defined in the Message interface  which CxfMessage implement. So when different kind of message copy between differnet kind of component  the object what set by setMessage() for CxfMessage will lost since the copyFrom() method only see the method defined in Message  so the header  body could be copied but the message lost we should figure out a way to support the message variable in CxfMessage also get copied,Patch applied with thanks to Freeman.. http://svn.apache.org/viewvc?rev=662348&view=rev. 
Improvement,Claus Ibsen,2008-06-03T03:56:48+0000,1212465408,The FTP Component currently does not support an after completion operation such as:  	delete 	move of the processed file as the File Component does.    ServiceMix FTP Component has such feature.  See forum: http://www.nabble.com/No-way-to-remove-FTP-SFTP-files--td17612896s22882.html,Drew is working on this. See the user forum.. Changed the FTPConsumer and the SFTPConsumer to add an "autoDelete" property that will delete files once processed. A couple of notes: 1. The change includes an update to RemoteFileConfiguration  to provide the "autoDelete" property. 2. The code is based on how the fileConsumer works; namely  it handles the read in an async block rather than the way that the files are handled in the current versions of the consumers. 3. I believe I incorporated a recent change to the 1.4 stream related to error processing; files before weren't getting read if there was an error. I think this was actually a problem in the FileConsumer. 4. Using autodelete bypasses the timestamp check. No need to timestamp check if you're just going to delete everything you read.  So far these changes are working on our project. We use SFTP to pull files down into a local directory  then a file consumer to read them in from there. This gives us the ability to create backups of what was read  something that the FTP/SFTP consumers don't currently allow.  I've said this before and I'll say it again; this would all be a lot easier if there were just one VFS component..... Will work on this after Camel 1.4.0 has been released.  There is also a few other tickets for FTP and File related issues that should be a major target for Camel 1.5 to improve these two important components so Camel works even better with FTP and files.  Beware of commons FTP potential problem with listing files on AIX servers. We did see this problem with 1.4.1 today at work.. ServiceMix has a delete option only: http://servicemix.apache.org/servicemix-ftp.html  I think we will stick with the delete option for now and let the move go. If anyone want a move option then please create a new issue and vote.. Added the deleteFile option.  Committed revision 680011.. Closing 1.5 issues. 
Improvement,Unassigned,2008-06-03T08:57:14+0000,1212483434,camel-core bundle doesn't export the META-INF  so if we use camel-core in osgi container  we can encounter exception like org.apache.camel.NoSuchLanguageException: No language could be found for: xpath at org.apache.camel.impl.DefaultLanguageResolver.noSpecificLanguageFound(DefaultLanguageResolver.java:72)  since the language resovler depend on the language class name property in the META-INF folder,actually this issue is caused by CAMEL-572  it's not bundle package export issue so won't fix this issue. 
Bug,Claus Ibsen,2008-06-03T11:19:53+0000,1212491993,it is try {         ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();         if (contextClassLoader != null)  {             in = contextClassLoader.getResourceAsStream(name);         }  ----  if (in != null) {  -----//here is incorrect  should be see if  in==null then get chance to use another classloader to load the stream +++ if (in == null)  { +++             in = ObjectHelper.class.getClassLoader().getResourceAsStream(name);         }         } catch (Exception e) {         	System.out.println("Could not find class: " + name + ". Reason: " + e);         },Freeman  thanks a lot for all the patches and findings you have submitted recently. Great work and good bug reports. Keep it up and. Closing 1.4 issues. 
Improvement,Willem Jiang,2008-06-03T23:01:51+0000,1212534111,The following classes from impl are only used in builder. They should be moved there.  	NoRouteBuilder 	PredicateSupport 	BinaryPredicateSupport    The last dependency from impl to builder is in PredicateSupport. The method matches uses the static method PredicateBuilder.evaluateValuePredicate(value). The implementation of this method does not depend on anything so I would move it to util.ObjectHelper.   I have added a patch with alle these modifications. According to my structure 101 I see only improvements in the dependecies. The cycle between impl an builder vanishes. I think there is almost no risk in doing this modification.,The last dependency was in ExpressionSupport not in PredicateSupport. Sorry for the typo.. Christian could you re add the patch with the ASF license granted. (ie apache icon next to the attached file).  JIRA has an issue that you can not do this when you create the ticket. You have to do it in 2 steps 1. Create the ticket 2. Attach the patch file with the ASF license granted.  Otherwise a really great patch that does remove the tangle. Keep up the great discoveries and good work you are doing. It is coming along nice and steady.. Patch applied with thanks to Christian. The committed revision is 663018.. I think NoRouteBuilder is now in builder and in impl. Could you please delete the obsolete class in impl?. Deleting camel-core\src\main\java\org\apache\camel\impl\NoRouteBuilder.java  Committed revision 663471.. 
Bug,Willem Jiang,2008-06-04T01:42:58+0000,1212543778,When I added the loan broker example CAMEL-556  I found there is no performance improvement when using the parallelly mulitcast. After digging into to code  I found we should create the enough thread for the parallel processing.,http://svn.apache.org/viewvc?rev=662940&view=rev The patch is in the trunk now.. 
New Feature,Willem Jiang,2008-06-04T06:48:35+0000,1212562115,Please review the attached patch.,Patch applied with thanks to William. The committed revision is 663026.. Thanks a lot!. 
Improvement,Willem Jiang,2008-06-04T06:54:28+0000,1212562468,You can get the InputStream object from camel message's getBody() method   in this way we can leverage the camel's converter framework to convert the message object to what we want.,The patch committed reversion is 663010.. 
Improvement,Unassigned,2008-06-04T08:43:00+0000,1212568980,in method of  protected void find(Test test  String packageName  ClassLoader loader)  it try to load class  from directory or jar  it works for standalone mode. But if the classloader of the method is osgi bundle class loader  it will fail since the getResource(packgename) return neither directory nor jar for example  package name is org/apache/camel/convert  then what returned is /org/apache/camel/convert  so both loadImplementationsInDirectory and loadImplementationsInJar doesn't work in this case,Could be related to he webstart issue as well.. I dont suppose that just removing the leading / would resolve the issue?  Freeman  can you provide a patch to fix it or any more hint/helps? Or attaching a small sample project that illustrates the bug/problem in Camel.. More or less the same issue - osgi does not work out-of-the-box. Hi Claus  Sure  I will try to provide a patch to resovle it.  Cheers  Freeman. Cheers Freeman  as you are on top of the ServiceMix and thus works with an OSGi kernel where you can test it for real.  And hopefully it fixes some of the related issues as well.. Hi  Just a very quick glimpse. I gotta do some work for the client so cant peek to much.  Isn't there a stable OSGI pendency for felix that can be used instead of 1.1.0-SNAPSHOT or whatever it was?  And are we sure its the spring osgi bundle classpath loader that is used all the time?  Med venlig hilsen  Claus Ibsen. re upload the patch use 1.0.1 instead of 1.1-SNAPSHOT in the pom also avoid hardcode classloader name  if the classloader has getBundle method   then it's an osgi bundle classloader. Freeman  why are you returning early if its a spring delegating bundle loader?  +    	if (loader.getClass().getName().equals("org.springframework.osgi.util.BundleDelegatingClassLoader")) { +    		 +    		return; +    	}   Is it because its loaded using bundles before  if so could you not return just after the loading from bundle  or move the check into that code  so its nearly the bundle stuff.  At least I think there should be some comments in the code why we return only for this osgi classloader.. Hi Claus  You are correct This code + if (loader.getClass().getName().equals("org.springframework.osgi.util.BundleDelegatingClassLoader"))  { + + return; + }  shouldn't be in the patch at all. I forget to remove it after the change to avoid using hardcode classloader name  I will re upload a new patch soon  so for it  Freeman. new patch uploaded Thanks. Thanks a lot for the patch. I have applied it with a few adjustments regarding debug/trace logging.. Leaving open until it is verified that it works in an osgi environment. Freeman are you able to try it out?. Hi Claus   Yes  I have tried it with ServiceMix 4.0 which is osgi container and it works well.  Thanks  Freeman. Freeman  I dont suppose I could ask you to try again with TRACE level debugging in org.apache.camel.util.ResolverUtil.  I would like to see if the trace logging is useable in situations to resolve problems. Especially of the osgi logging is useable  eg. the logging of the bundle toString() itself - does it provide a good toString() implementation or do we need to log: bundleId  symbolName  and whatever can be relevant.  If you could paste the logging output here would be super great.. sure  paste some log  16:10:58 355 | TRACE | pool-5-thread-1 | ResolverUtil | g.apache.camel.util.ResolverUtil 356 | Searching in bundle:org.apache.cxf.cxf-bundle [47] 16:10:58 365 | TRACE | pool-5-thread-1 | ResolverUtil | g.apache.camel.util.ResolverUtil 356 | Searching in bundle:org.springframework.bundle.spring.tx [48] 16:10:58 367 | TRACE | pool-5-thread-1 | ResolverUtil | g.apache.camel.util.ResolverUtil 356 | Searching in bundle:org.apache.camel.camel-core [49] 16:10:58 368 | TRACE | pool-5-thread-1 | ResolverUtil | g.apache.camel.util.ResolverUtil 456 | Testing for class org.apache.camel.converter.CamelConverter$1 matches criteria [annotated with @Converter] 16:10:58 369 | TRACE | pool-5-thread-1 | ResolverUtil. Thanks Freeman  looks okay that the bundle can be identified from the log.. With the current version  there is a strong dependency from camel-core to OSGi: i.e. camel can not run without the OSGi classes in the classpath. See the following exception:  Caused by: java.lang.NoClassDefFoundError: org/osgi/framework/Bundle at org.apache.camel.spring.RouteBuilderFinder.<init>(RouteBuilderFinder.java:41) at org.apache.camel.spring.CamelContextFactoryBean.findRouteBuiders(CamelContextFactoryBean.java:404) at org.apache.camel.spring.CamelContextFactoryBean.afterPropertiesSet(CamelContextFactoryBean.java:189) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1288) at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1257) ... 41 more. Sending camel-core/src/main/java/org/apache/camel/util/ResolverUtil.java Transmitting file data . Committed revision 668216.. Guillaume  thanks for reporting this.  What would be a good strategy to resolve this?  A quick idea is having a new OsgiResolverUtil class that ResolverUtil could resort to if it should load in bundle? Since Camel detects if it should try bundle without having hard dependecy this is doable:              Method mth = loader.getClass().getMethod("getBundle"  new Class[] {});             if (mth != null) {                 // it's osgi bundle class loader  so we need to load implementation in bundles                 if (LOG.isDebugEnabled()) {                     LOG.debug("Loading from osgi buindle using classloader: " + loader);                 }                 loadImplementationsInBundle(test  packageName  loader  mth);                 return;             }   The loadImplementationsInBundle could be in the new OsgiResolverUtil so its only loaded if using OSGi bundles. And thus the class loading issue should not happend. And we could catch the NoClassDefFoundError and output a user firendly message that org.osgi.core should be an dependency.  And how do we configure it to be optional in the camel-core pom.xml? Currently it is:      <dependency>       <groupId>org.apache.felix</groupId>       <artifactId>org.osgi.core</artifactId>       <version>${felix-osgi-version}</version>     </dependency>   Could we add <optional>true</optional>  BTW: The activation stuff is now also a hard dependency - i haven't seen this in pom.xml. Ah you got it sorted by a inner class  smart move  Kinda like the OsgiResolverUtil.. In my apllication's bundle (the one with camel-context) I created dependency to org.apache.camel.converter package  and not to other two (stax and jaxp  because I don't use them). With this configuration I get some errors in log  such as: 12:43:42 484 DEBUG [.camel.ObjRepComponent@11773e4] org.apache.camel.util.ResolverUtil - Searching for annotations of org.apache.camel.Converter in packages: [org.apache.camel.converter] 12:43:42 484 DEBUG [.camel.ObjRepComponent@11773e4] org.apache.camel.util.ResolverUtil - Loading from osgi buindle using classloader: BundleDelegatingClassLoader for [Dialog orders (com.comarch.p7samples.dialorder)] 12:43:42 578 DEBUG [.camel.ObjRepComponent@11773e4] org.apache.camel.util.ResolverUtil - Could not find class 'org/apache/camel/converter/jaxp/StaxConverter.class' in classloader: BundleDelegatingClassLoader for [Dialog orders (com.comarch.p7samples.dialorder)]. Reason: java.lang.ClassNotFoundException: org.apache.camel.converter.jaxp.StaxConverter not found from bundle [com.comarch.p7samples.dialorder] java.lang.ClassNotFoundException: org.apache.camel.converter.jaxp.StaxConverter not found from bundle [com.comarch.p7samples.dialorder] at org.springframework.osgi.util.BundleDelegatingClassLoader.findClass(BundleDelegatingClassLoader.java:103) at org.springframework.osgi.util.BundleDelegatingClassLoader.loadClass(BundleDelegatingClassLoader.java:156) at java.lang.ClassLoader.loadClass(ClassLoader.java:251) at org.apache.camel.util.ResolverUtil.addIfMatching(ResolverUtil.java:477) at org.apache.camel.util.ResolverUtil.loadImplementationsInBundle(ResolverUtil.java:357) at org.apache.camel.util.ResolverUtil.find(ResolverUtil.java:293) at org.apache.camel.util.ResolverUtil.find(ResolverUtil.java:277) at org.apache.camel.util.ResolverUtil.findAnnotated(ResolverUtil.java:253) at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.load(AnnotationTypeConverterLoader.java:57) at org.apache.camel.impl.converter.DefaultTypeConverter.checkLoaded(DefaultTypeConverter.java:218) at org.apache.camel.impl.converter.DefaultTypeConverter.convertTo(DefaultTypeConverter.java:64) at org.apache.camel.util.CamelContextHelper.convertTo(CamelContextHelper.java:85) at org.apache.camel.component.bean.RegistryBean.getProcessor(RegistryBean.java:77) at org.apache.camel.component.bean.BeanProcessor.getProcessor(BeanProcessor.java:135) at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:76) at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:69) at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:146) at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:90) at org.apache.camel.processor.Pipeline.process(Pipeline.java:101) at org.apache.camel.processor.Pipeline.process(Pipeline.java:85) at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:57) at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:52) at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:59) at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:75) at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:57) at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:146) at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:90) at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:57) at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:39) at com.comarch.p7.objectrepository.camel.ObjRepConsumer.poll(ObjRepConsumer.java:35) at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:65) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441) at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317) at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:181) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:205) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907) at java.lang.Thread.run(Thread.java:619) Caused by: java.lang.ClassNotFoundException: org.apache.camel.converter.jaxp.StaxConverter at java.lang.ClassLoader.findClass(ClassLoader.java:358) at java.lang.ClassLoader.loadClass(ClassLoader.java:306) at java.lang.ClassLoader.loadClass(ClassLoader.java:251) at org.eclipse.osgi.framework.internal.core.BundleLoader.findClassInternal(BundleLoader.java:429) at org.eclipse.osgi.framework.internal.core.BundleLoader.findClass(BundleLoader.java:369) at org.eclipse.osgi.framework.internal.core.BundleLoader.findClass(BundleLoader.java:357) at org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.loadClass(DefaultClassLoader.java:83) at java.lang.ClassLoader.loadClass(ClassLoader.java:251) at org.eclipse.osgi.framework.internal.core.BundleLoader.loadClass(BundleLoader.java:289) at org.eclipse.osgi.framework.internal.core.BundleHost.loadClass(BundleHost.java:227) at org.eclipse.osgi.framework.internal.core.AbstractBundle.loadClass(AbstractBundle.java:1269) at org.springframework.osgi.util.BundleDelegatingClassLoader.findClass(BundleDelegatingClassLoader.java:99) ... 39 more 12:43:42 593 DEBUG [.camel.ObjRepComponent@11773e4] org.apache.camel.util.ResolverUtil - Could not find class 'org/apache/camel/converter/jaxp/DomConverter.class' in classloader: BundleDelegatingClassLoader for [Dialog orders (com.comarch.p7samples.dialorder)]. Reason: java.lang.ClassNotFoundException: org.apache.camel.converter.jaxp.DomConverter not found from bundle [com.comarch.p7samples.dialorder]  These logs have DEBUG state  but also I receive one ERROR state log:  12:43:42 812 ERROR [.camel.ObjRepComponent@11773e4] org.apache.camel.util.ResolverUtil - Could not search jar file '\org\apache\camel\converter' for classes matching criteria: annotated with @Converter due to an IOException: \org\apache\camel\converter (System nie może odnaleźć określonej ścieżki) java.io.FileNotFoundException: \org\apache\camel\converter (System nie może odnaleźć określonej ścieżki) at java.io.FileInputStream.open(Native Method) at java.io.FileInputStream.<init>(FileInputStream.java:106) at org.apache.camel.util.ResolverUtil.loadImplementationsInJar(ResolverUtil.java:439) at org.apache.camel.util.ResolverUtil.find(ResolverUtil.java:343) at org.apache.camel.util.ResolverUtil.find(ResolverUtil.java:277) at org.apache.camel.util.ResolverUtil.findAnnotated(ResolverUtil.java:253) at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.load(AnnotationTypeConverterLoader.java:57) at org.apache.camel.impl.converter.DefaultTypeConverter.checkLoaded(DefaultTypeConverter.java:218) at org.apache.camel.impl.converter.DefaultTypeConverter.convertTo(DefaultTypeConverter.java:64) at org.apache.camel.util.CamelContextHelper.convertTo(CamelContextHelper.java:85) at org.apache.camel.component.bean.RegistryBean.getProcessor(RegistryBean.java:77) at org.apache.camel.component.bean.BeanProcessor.getProcessor(BeanProcessor.java:135) at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:76) at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:69) at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:146) at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:90) at org.apache.camel.processor.Pipeline.process(Pipeline.java:101) at org.apache.camel.processor.Pipeline.process(Pipeline.java:85) at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:57) at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:52) at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:59) at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:75) at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:57) at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:146) at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:90) at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:57) at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:39) at com.comarch.p7.objectrepository.camel.ObjRepConsumer.poll(ObjRepConsumer.java:35) at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:65) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441) at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317) at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:181) at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:205) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907) at java.lang.Thread.run(Thread.java:619)  Except of these logs everything is working fine.. Also without dependency to org.apache.camel.converter package everything works fine  but there are even more error reports. Probably class loaders are checked in wrong order.. Woljciech.  Do you mind creating a new ticket for your issue and attach a sample project that demonstrates the problem? Please note what container and versions you are using and how to reproduce the problem.  Then we will be in a better position to address this for Camel 1.5. 
Improvement,Claus Ibsen,2008-06-04T18:53:31+0000,1212605611,Add a timestamp for the last completed exchange on the Camel JMX PerfformanceCounter.  Its very nice to be able to see this information in the JMX console. And maybe add a first processed timestamp as well.,Please review the attached patch.. Here is how it will look like.. Excellent. Thanks for the patch William!. William good work.  I was wondering if you could take a look at the timing. It uses nano seconds but I am wondering why we divide the delta with 1000 when its passed to the performance counter. counter.completedExchange((System.nanoTime() - startTime) / 1000);  And could the mbeans description be changed from usec to nano sec  as not everyone knows what a usec is. And should we change to use the more common millis instead?. No idea why it displays usec other than making it look faster.. A patch that displays performance counters in nanoseconds.. jconsole screenshot that shows perf counters in nanoseconds.. William.  At first glance the nano second timing value doesn't give me good indication if the elapsed time is fast or not - we are so used to milli seconds. Can you create a patch that uses millis instead?  And I do think the text in the jconsole should display the unit of the timing  MinProcessingTime [millis] MeanProcessingTime [millis] MaxProcessingTime [millis]. Here is a patch to change back to usec precision.. Hi Claus   Sure. Most users probably more familiar with usec  too. JConsole does not show attribute description which is a bit of a bummer.. William. I would have used System.currentTimeMillis instead. Isn't this better?  And I would write millis instead of usec as millis is the term used in Camel and most places.. new patch that uses System.currentTimeMillis() to get time and fixes the incorrect unit of usec.. i think i attached a wrong file. here it is again.. William. Thanks for taking this up and providing patches and screenshots. Feel free to continue your contributions.. 
New Feature,Claus Ibsen,2008-06-05T04:15:56+0000,1212639356,Please review the attached patch,Applied patch with thanks (great work William). Closing 1.4 issues. 
Improvement,Claus Ibsen,2008-06-05T07:29:21+0000,1212650961,Currently vm resources loaded on the classpath is not refreshable during runtime.  Also camel-velocity outputs logging to velocity.log  this can be included as a camel-velocity category instead.,StringTemplate will as well benefit from the new contentCache option on the endpoint.. Improved the wiki documentation for velocity and stringtemplate as well.. 
Bug,Claus Ibsen,2008-06-05T09:13:58+0000,1212657238,Only the producer cache is stopped and cleared     // start and stop in camel template      protected void doStart() throws Exception {         producerCache.start();     }      protected void doStop() throws Exception {         producerCache.stop();     }     // stop in producer cache     protected void doStop() throws Exception {         ServiceHelper.stopServices(producers.values());         producers.clear();     },
Improvement,Claus Ibsen,2008-06-06T07:02:49+0000,1212735769,William Tam  this one is for you   The total processed time is not exposed to as a managed attribute. And it should be changed from double to long.,Hi Claus   Sure  I will submit a patch to expose TotalProcessed time as a managed attribute and change the type to long.  We've made quite a few changes lately. I think the current precision (millisecond) is not high enough. We often get 0 value when a processor does not have a lot of work to do. Think about when you add up 0's million times  you still get zero for total processed time.  How about going back to usec?. William.  Okay for the usec  but maybe we should have a derived attribute for the millis as well? eg = read only attribute that displays the values in millis  so the end-user have the information also. But the internal computation is done using the nano and displayed as usec stuff.. My thought on this is that having usec attributes is good enough. Having two attributes (usec and millis) for each managed attribute is probably too repetitive. Users can always obtains millis from usec but not the other way around. Also  the TotalProcessed time probably needs to be double since it holds much better value.  So  my suggestion is: 1) roll back to usec and the calculation like we had it before 2) expose TotalProcessed time as a managed attribute 3) keep TotalProcessed time as a double.. Ok good observations. But we should clearly state the value as micro seconds (1000 micro = 1 millis). Most metrics report is still in millis.. Patch to be provided by William  started progress.. Here's another idea. How about making the values in units of milliseconds but storing them in doubles? This way  values less than one millisecond won't get truncated and we don't scarify the precisions. Values reported are in milliseconds still.. jconsole snapshot will look like this. notice I also appended the "Millis" subfix in the processing time attributes.. here is the patch.. The patch also fixes a bug in reset() which does not reset minProcessingTime back to -1. And  maxProcessingTime does not need to be -1.. William thanks a lot for contributing this patch and taking the time to do investigations and good observations.. 
Bug,Claus Ibsen,2008-06-06T08:32:15+0000,1212741135,The unit test in camel-jaxb is failing DumpToXmlTest  However since there are no assertions its not failing the build.  2008-06-06 10:31:16 546 [mponent@15ee671] ERROR DeadLetterChannel              - Failed delivery for exchangeId: ID-claus-acer/1691-1212741073109/0-0. On delivery attempt: 3 caught: org.apache.camel.RuntimeCamelException: com.sun.xml.bind.v2 notationExceptions XmlElementRef points to a non-existent class.         this problem is related to the following location:                 at java.util.List org.apache.camel.converter.jaxb.MessageType.headers                 at org.apache.camel.converter.jaxb.MessageType  org.apache.camel.RuntimeCamelException: com.sun.xml.bind.v2.runtime.IllegalAnnotationsException: 1 counts of IllegalAnnotationExceptions XmlElementRef points to a non-existent class.         this problem is related to the following location:                 at java.util.List org.apache.camel.converter.jaxb.MessageType.headers                 at org.apache.camel.converter.jaxb.MessageType          at org.apache.camel.converter.jaxb.FallbackTypeConverter.convertTo(FallbackTypeConverter.java:70)         at org.apache.camel.impl.converter.DefaultTypeConverter.convertTo(DefaultTypeConverter.java:71)         at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:52)         at org.apache.camel.processor.ConvertBodyProcessor.process(ConvertBodyProcessor.java:40)         at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:43)         at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:146)         at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:90)         at org.apache.camel.processor.Pipeline.process(Pipeline.java:101)         at org.apache.camel.processor.Pipeline.process(Pipeline.java:85)         at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:39)         at org.apache.camel.component.file.FileConsumer.pollFile(FileConsumer.java:128)         at org.apache.camel.component.file.FileConsumer.pollFileOrDirectory(FileConsumer.java:77)         at org.apache.camel.component.file.FileConsumer.pollFileOrDirectory(FileConsumer.java:84)         at org.apache.camel.component.file.FileConsumer.poll(FileConsumer.java:57)         at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:65)         at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:417)         at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:280)         at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:135)         at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:65)         at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:142)         at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:166)         at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650)         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675)         at java.lang.Thread.run(Thread.java:595) Caused by: com.sun.xml.bind.v2.runtime.IllegalAnnotationsException: 1 counts of IllegalAnnotationExceptions XmlElementRef points to a non-existent class.         this problem is related to the following location:                 at java.util.List org.apache.camel.converter.jaxb.MessageType.headers                 at org.apache.camel.converter.jaxb.MessageType          at com.sun.xml.bind.v2.runtime.IllegalAnnotationsException$Builder.check(IllegalAnnotationsException.java:66)         at com.sun.xml.bind.v2.runtime.JAXBContextImpl.getTypeInfoSet(JAXBContextImpl.java:422)         at com.sun.xml.bind.v2.runtime.JAXBContextImpl.<init>(JAXBContextImpl.java:270)         at com.sun.xml.bind.v2.ContextFactory.createContext(ContextFactory.java:103)         at com.sun.xml.bind.v2.ContextFactory.createContext(ContextFactory.java:81)         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)         at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)         at java.lang.reflect.Method.invoke(Method.java:585)         at javax.xml.bind.ContextFinder.newInstance(ContextFinder.java:211)         at javax.xml.bind.ContextFinder.find(ContextFinder.java:372)         at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:574)         at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:522)         at org.apache.camel.converter.jaxb.FallbackTypeConverter.createContext(FallbackTypeConverter.java:141)         at org.apache.camel.converter.jaxb.FallbackTypeConverter.unmarshall(FallbackTypeConverter.java:84)         at org.apache.camel.converter.jaxb.FallbackTypeConverter.convertTo(FallbackTypeConverter.java:61)         ... 23 more,The problem is that in MessageType its defined to use an abstract class (= HeaderType) and this does not work  @XmlRootElement(name = "message") @XmlAccessorType(value = XmlAccessType.FIELD) public class MessageType {     @XmlElementRef(type = HeaderType.class)     private List<HeaderType> headers = new ArrayList<HeaderType>();   Changing to use a real class such as StringHeader does work  @XmlRootElement(name = "message") @XmlAccessorType(value = XmlAccessType.FIELD) public class MessageType {     @XmlElementRef(type = StringHeader.class)     private List<HeaderType> headers = new ArrayList<HeaderType>();   And the bar.xml and foo.xml files are not valid messsages as well  they need the outer <message> tag. We need JAXB experts to look into this.  My idea to remedy this is  either  remove the header types and let all objects be specified as plain strings (PropertyType) do as the content  let it all be any elements and use lax = true. Added TODO in the code and fixed the unit test.  MessageType is work in progress.. 
Bug,Claus Ibsen,2008-06-06T11:33:22+0000,1212752002,This unit test cases infinitive loop   Caused by: java.lang.StackOverflowError 	at java.util.HashMap$HashIterator.<init>(HashMap.java:822) 	at java.util.HashMap$EntryIterator.<init>(HashMap.java:881) 	at java.util.HashMap$EntryIterator.<init>(HashMap.java:881) 	at java.util.HashMap.newEntryIterator(HashMap.java:895) 	at java.util.HashMap$EntrySet.iterator(HashMap.java:988) 	at java.util.AbstractMap.toString(AbstractMap.java:584) 	at java.lang.String.valueOf(String.java:2615) 	at java.lang.StringBuilder.append(StringBuilder.java:116) 	at org.apache.camel.component.bean.BeanWithPropertiesAndHeadersAndBodyInjectionTest$MyBean.toString(BeanWithPropertiesAndHeadersAndBodyInjectionTest.java:91) 	at java.lang.String.valueOf(String.java:2615) 	at java.lang.StringBuffer.append(StringBuffer.java:220) 	at java.util.AbstractMap.toString(AbstractMap.java:598) 	at java.lang.String.valueOf(String.java:2615) 	at java.lang.StringBuilder.append(StringBuilder.java:116) 	at org.apache.camel.component.bean.BeanWithPropertiesAndHeadersAndBodyInjectionTest$MyBean.toString(BeanWithPropertiesAndHeadersAndBodyInjectionTest.java:91) 	at java.lang.String.valueOf(String.java:2615),The bug is in BeanProcessor that adds the bean itself as a propery the the exchange      public void process(Exchange exchange) throws Exception {         if (LOG.isDebugEnabled()) {             LOG.debug(">>>> invoking method for: " + exchange);         }          Object bean = beanHolder.getBean();         exchange.setProperty("CamelBean"  bean);   And then when you do a toString() as the unit test does with the properties:          public String toString() {             return "MyBean[foo: " + foo + " bar: " + bar + " body: " + body + "]";         }   And the properties is the foo argument  then you get circular dependency.  Why do Camel set the bean itself as a property? Is this used by end-users at all? "CamelBean" is not used anywhere else in the java code  so I do think its safe to delete the codeline but then end-users that this property existed isn't there anymore.  We could remedy this by setting the BeanHolder instead of the bean directly.. The fix is now:  Bean component sets a reference to the bean that is being invoked as a property on the Exchange. This property has change its key from "CamelBean" to "org.apache.camel.bean.BeanHolder" and the type is now a BeanHolder.. 
Task,Claus Ibsen,2008-06-07T13:43:56+0000,1212846236,Bruce Elmore have investigated and do think that Camel has a bug in the JMS compoenent regarding how exceptions is received from the JMS Producer (when receiving the reply).  If the reply was a thrown exception from the other part  this is not currently set as an exception on the build Exchange but on the body as is. Pitfall: If an exception should be deserialized and set as an exception object on the created exception there could be problems with that the exception class does not exists on the receive side.  Would be great to get James and other core comitters opinion on this matter  as it's maybe also a more general pattern for other components as well. This ticket is created to not forget about the postings on the user forum:  nabble: (Handle Bean Exception) http://www.nabble.com/Handling-Bean-exceptions-td17671948s22882.html,BTW: The ProducerTemplate has been improved so it will throw the caused exception. As Bruce also pointed out.  I am looking into Bruces ideas.  This is to be added:  if the exchanged failed and a FAULT message was set  then that is used for reply  Still considering:  if the exchanged failed and an Exception was set  then that is used for reply (as a javax.jms.ObjectMessage).  Maybe we can add a flag to enable/disable this behaviour. To send exception as objects over the wire in the body. If not then we can send the message as a toString and maybe add a JMSHeader to indicate the failure.  Any thoughts?. The FAULT stuff is now in place. However the exception needs more consideration and feedback.  Currently if the exchange could not be proceseed it will throw a runtime exception that Spring will catch and do a rollback on the TX. This is something that end-users might want to happend vs. sending a serialized stacktrace back over the wire.  I think we need a flag to set what behavior end-users want.  Feedback welcome. Remember to me. Add a unit test for send JMS asInOut by it timeout. DONE. I've been thinking about this again because I will have to implement similar changes that I made for 1.3 for 1.4. I gather that there is some reluctance to making this change  because of the issues related to serialization of the exception. Obviously  an exception that occurs on the server side might not deserialize on the client side.  I worked around this issue by creating a exception class that is shared by both the client and the server:  public class MyCamelRemoteException extends RuntimeException {  private String causeClassName;  public MyCamelRemoteException(Throwable cause)  { super(String.format("%s (%s)"  cause.getMessage() == null ? "" : cause.getMessage()  cause.getClass().getName())); this.setStackTrace(cause.getStackTrace()); causeClassName = cause.getClass().getName(); }  public String getCauseClassName()  { return causeClassName; }  }  The MyCamelRemoteException contains the exception message  stack trace and the class name of the original exception. I realize that this is a bit of a kludge  however  I believe that it is an improvement over what occurs in 1.3  at least  where the exception is thrown away and the client simply gets a copy of the request as the response.  Note that the JmsBinding would need to wrap the original exception:  public class MyJmsBinding extends JmsBinding {  public MyJmsBinding() { }  @Override public Message makeJmsMessage(Exchange exchange  org.apache.camel.Message camelMessage  Session session) throws JMSException { // TODO: Passing back to raw exception on the queue could be problematic. If // the client doesn't have the class in its classpath  it wouldn't be able to // deserialize the exception. It need to test this to be sure either way.  Message answer = null; if (camelMessage instanceof JmsMessage)  { JmsMessage jmsMessage = (JmsMessage) camelMessage; answer = jmsMessage.getJmsMessage(); }  if (answer == null) { if (exchange.getException() != null)  { answer = createJmsMessage(new MyCamelRemoteException(exchange.getException())  session  exchange.getContext()); }  else  { answer = createJmsMessage(camelMessage.getBody()  session  exchange.getContext()); }  appendJmsProperties(answer  exchange  camelMessage); } return answer; } }  I have not looked into what you've done with FAULTs. This might serve as a workable solution as well.. I am letting go of this one currently.  The camel-jms stuff should be improved in 2.x. But in the short run we are focusing on getting the internal API refactored in 2.0.. I was looking over the Camel 2.0 source and it looked like this problem has still not been addressed. My company would REALLY like to see a solution to this problem incorporated into Camel. We'd be more than happy to create a patch if we could get it incorporated into the Camel codebase.  In the spirit of that  my camel-fixes project is attached. It provides a workaround to this problem. We've been using this for quite some time and have not run into any problems with it. To use the fix  on the server side  your endpoints should use MyJmsComponent instead of JmsComponent. On the client side  use template.send with an inout exchange pattern. Check if the returned exchange contains an exception and if it does  throw it. I can provide a detailed example if anyone needs it.  It's written for Camel 1.4 at the moment. It's more complicated and contains more classes/code than it would have to if it wasn't a separate library. For instance  in order to "inject" a custom version of JmsBinding (MyJmsBinding)  I had to create MyJmsComponent so it would create instances of MyJmsEndpoint and MyJmsQueueEndpoint which in turn create instances of MyJmsBinding. A little ugly  but since Camel doesn't use Spring for dependency injection and didn't see another way.. Bruce  good timing. I have just worked on other parts on camel-jms for the 2.0 release.  Was planning to look into this afterwards. We have been busy with other core improvements and cleanup for the 2.0. So that is why we have not addressed your feature yet.. trunk: 757395.  See new option transferException on the Camel JMS wiki page.  See also org.apache.camel.component.jms.JmsTransferExceptionTest for an unit test.. Closing all 2.0M2 tickets. 
Improvement,Willem Jiang,2008-06-08T03:08:59+0000,1212894539,Current camel-cxf component can only handler set the out message body with the CXF message object (CAMEL-569)  we should support more than that.  When we set the camel exchange out message's body in the other component    camel-cxf component should copy that message body back to the CXF message which will be used in the CXF intercepter chains for the further processing.,The patch is applied in the revision 664432.  URL: http://svn.apache.org/viewvc?rev=664432&view=rev. 
Bug,Willem Jiang,2008-06-08T08:31:08+0000,1212913868,Need to make sure we Use CXF LogUtils to get logger   so we can switch the logger from java.utils.Logger to log4j.,Patch revision is 664468. http://svn.apache.org/viewvc?rev=664468&view=rev. 
Improvement,Claus Ibsen,2008-06-08T10:59:55+0000,1212922795,Currently there is a bad dependency cycle between camel  spi and model. camel.CamelContext references model.RouteType. spi.RouteContext references model.RouteType and model.FromType.  Additionally spi.RouteContext and spi.InterceptStrategy reference model.ProcessorType. These references are especially bad ones as camel and spi are the most low level packages and these references close the loop that makes camel one big tangle. I managed to remove this tangle and so lower the excess(xs) measurement in structure 101 from 4300 to 2400. I added the dependency views to the issue. I hided the deprecated CamelTemplate in the views to show that the cycle will be broken once we can delete this.  The first thing I found out is that model is in my opinion not especially well named. The model package is not the inner domain model of camel as the name suggests but more the java dsl. So I think it could make sense to rename it at some point into javadsl or dsl. This change would be too destructive so I did not change this. But I think it is reasonable to define that camel and spi should not be dependent on the dsl as the dsl is only needed while creating the routes. So my goal was to cut these dependencies.  I first moved spi.RouteContext and spi.InterceptStrategy to model. With RouteContext I am quite sure that this is a good thing as it is only needed in the Java DSL and the builders. InterceptStrategy is of course part of an spi but as it references model it can´t life in spi.  As LifecycleStrategy references RouteContext I split this interface in the part that does not references RouteContext which I just left in spi and a new interface ModelLifecycleStrategy which lives in model. This interface has the onRouteContextCreate.  Then I reworked the communication between DefaultCamelContext and RouteBuilder. I removed the routedefinitions from DefaultCamelContext and mode sure they are not needed anywhere. So only the RouteBuilder knows about the definitions and keeps them encapsulated. In the current code the intialization of the RouteBuilder and the transfer of Routes and RouteDefinitions between Routebuilder and DefaultCamelContext is very complicated and intransparent. The getRouteList does the initialization as a side effect and additionally feeds the route definitions into the CamelContext. This is extremly intransparent. I replaced this with a simple and speaking method in Routes. btw I would vote to rename Routes to RouteProvider. This would make the responsbility clearer.  List<Route> configureAndRetrieveRoutes(CamelContext context) throws Exception;  This method intializes the RouteBuilder  creates the definitions and routes and simply returns the List of Routes. This is all communication between DefaultCamelContext and RouteBuilder. The only little difference in behaviour compared to before is that the Endpoint resolution happens already in this step and not when the CamelContext is started.  All unit tests except one worked out of the box with this change. The one that failed was RouteWithMistypeComponentNameTest. I this test the expected exception happened now while adding the RouteBuilder to the context not when starting the context. This was easily solved by extending the try to include the addRoutes call. This is of course a minor change in contract but I believe the architectural benefits are worth this little change.  I also had to do some little tweaks to make the GraphGeneratorSupport work again. As CamelContext now does not know the route definitions this information has to be taken from BuilderSupport. So made the CamelContext know all its RouteBuilders as a list of Routes. In the Graph generation I then cast them to BuilderSupport and extract the route defintions. So I was able to keep the balance between encapsulation and enough knowledge to draw the graphs.   The last thing I did was to remove the createProcessor method from RouteContext. I think this method was quite redundant. I was able to replace all occurances of this with the much simpler call. RouteType.createOutputProcessor. This removes another part of a cycle.  I set the version for this issue to 1.4.0 so it does not get lost but feel free to move it to the version of camel where you want it solved. As this is a big patch I would of course prefer it to be commited as soon as possible. If we wait too long I probably have to redo the patch as there will be too many changes in camel in the mean time.,ExpressionAdapater should be moved from impl to util or a support package. DataFormatType should not implement DataFormat DONE. Bean component uses model DONE. LoggingLevel enum should be moved to root package DONE. StreamCache interface should be moved to root package DONE Bean- and MockComponent uses Converter classes directly. DONE. CamelPostProcessorHelper from impl uses component/bean  try to avoid this. I will close this one now as we got most fixed and have a much better package structure now.  The bean component is becoming a central piece in Camel and I am wondering if we should move parts of it into the spi/camel/impl and let the bean component be a endpoint factory facade as most others are.. Closing 2.0m1 tickets. 
Improvement,Claus Ibsen,2008-06-08T13:45:25+0000,1212932725,The new sample needed a bit of cleanup so I did some work.  I added some code comments to assist end-users. I also let the broker be configured out-of-the-box in the spring xml instead of embedded java code that wasn't best-practice.  And I added an AOP aspect to act as a kind of audi interceptor on the server side to log all the incomming requests. Part of investigation of an aspectj-aop autoproxy bug report  that I can not reproduce in trunk.,Hmm its sunday and the sun is shining and i'm sitting in the shade with a beer and a laptop and cranking on the sample to use AOP stuff to do audit backups with camel endpoints all configued using the xml and aspects. It's kinda scary what you can do in a few lines of code.. Hi Claus   I think the sample you mentioned is the camel-example-spring-jms not jmx.  Am I right?  Willem.. Oh yes its the JMS messaging sample   And it needs to update the wiki as well with my modifications (well Claus you get the pain when you mess with the code!) http://activemq.apache.org/camel/tutorial-jmsremoting.html. 
Sub-task,Claus Ibsen,2008-06-08T14:41:43+0000,1212936103,The wiki need a little overhaul now that the example has changed slightly.,The wiki: http://activemq.apache.org/camel/tutorial-jmsremoting.html. TODO: Run the server done TODO: Add the -aop server also done TODO: Continue replacing code with snippets done. TODO: Add new client that used the Camel Endpoint pattern.. Okay the tutorial has been updated and we now have 3 clients as well. The tutorial is good to go for a 1.4 release.. 
Improvement,Willem Jiang,2008-06-08T21:52:07+0000,1212961927,Various places code uses autoboxing of constants that just wastes time  as using the other constant (true vs Boolean.true) would remove that useless work. patch fixes this,Patch applied with thanks to Dave. http://svn.apache.org/viewvc?rev=664624&view=rev [ Show » ] Willem Jiang - 09/Jun/08 01:23 AM Patch applied with thanks to Dave. http://svn.apache.org/viewvc?rev=664624&view=rev. 
Bug,Willem Jiang,2008-06-08T21:59:59+0000,1212962399,a couple places streams are opened and are not closed. patch fixes this.,Dave thanks for the patches. I do think we have in Camel a ObjectHelper.close that is usable for closing stuff (That is Closeable) and handling the try catch warn logging. We ought to use this one instead of our own try ... catch handling. Patch applied with thanks to Dave. http://svn.apache.org/viewvc?rev=664624&view=rev [ Show » ] Willem Jiang - 09/Jun/08 01:23 AM Patch applied with thanks to Dave. http://svn.apache.org/viewvc?rev=664624&view=rev. 
Bug,Jonathan Anstey,2008-06-09T14:34:01+0000,1213022041,I noticed that some examples that are run via mvn exec:java require that the example be compiled first. I've updated the readmes to include this step...,Patch to update the readmes.. Thanks again Jonathan for your care of details and providing easy to patch patches.. Closing 1.4 issues. 
Bug,Claus Ibsen,2008-06-09T17:09:42+0000,1213031382,code uses in.read(buf) assuming that the read will be greedy. This isn't guaranteed  Patch fixes this.,Dave thanks for all the findings. Is there other places in the code that have similiar issues with the read?  could be in some of the components as well.  However I haven't seen this kind of code to properly handling reading from an inputsource to a buffer not done with the just the one-liners in.read(buf) in other frameworks. I don't think its well know that this problem could exists that the buffer isn't read in one operation.  Dave do you have experience that this has happened? eg reading a very large file etc?. It's not guaranteed by the InputStream contract. Some streams may greedy read  others may not. Large streams are a likely cause. For files  I believe it's up to each platform to decide how to manage this  so it might be that unix and win32 work perfectly fine  but perhaps some smaller platform does not. I didn't notice any other places in the code that has this problem.. Thanks Dave for all your patches. Great that you take the time to dig into the code and find these. Please keep em coming -. I will fire up to svn commit command. Closing 1.4 issues. 
Improvement,Claus Ibsen,2008-06-09T17:44:53+0000,1213033493,code creates queue browsing strategy even if not needed. patch pushes creation down to relevant branch.,Applied patch with thanks to Dave. Good catch.. Closing 1.4 issues. 
Bug,Claus Ibsen,2008-06-09T17:51:10+0000,1213033870,JmsQueueEndpoint has faulty initialization logic  checking a parameter and if null  setting that parameter. The code should be setting the member variable instead.  Code was       public JmsQueueEndpoint(String uri  JmsComponent component  String destination               JmsConfiguration configuration  QueueBrowseStrategy queueBrowseStrategy) {          super(uri  component  destination  false  configuration);          this.queueBrowseStrategy = queueBrowseStrategy;          if (queueBrowseStrategy == null)  {             queueBrowseStrategy = createQueueBrowseStrategy();          }      }  patch fixes this (two places),Applied patch with thanks to Dave.. Dave you have to remember to add the file after your create the ticket as you could then tick off "grant ASF rights" = so the is an Apache icon on the file attachment.  Could you reattch the file so the ASF license is in order?. Closing 1.4 issues. 
Bug,Willem Jiang,2008-06-09T19:37:56+0000,1213040276,I've been getting this weird error in the 1.4.0 release candidate. I needed to delete my local .m2 directory  and then run mvn camel:run in the bam example (others failed similarly). The patch I attached seems to fix the issue.  [INFO] [compiler:testCompile] [INFO] No sources to compile ----------------------------------------------------- this realm = app0.child-container[org.apache.camel:camel-maven-plugin] urls[0] = file:/home/janstey/.m2/repository/org/apache/camel/camel-maven-plugin/1.4.0/camel-maven-plugin-1.4.0.jar urls[1] = file:/home/janstey/.m2/repository/org/codehaus/plexus/plexus-utils/1.1/plexus-utils-1.1.jar Number of imports: 6 import: org.codehaus.classworlds.Entry@4891bb28 import: org.codehaus.classworlds.Entry@f8e44ca4 import: org.codehaus.classworlds.Entry@c51bc9e7 import: org.codehaus.classworlds.Entry@bece5185 import: org.codehaus.classworlds.Entry@3fee8e37 import: org.codehaus.classworlds.Entry@3fee19d8   this realm = plexus.core urls[0] = file:/opt/apache-maven-2.0.9/lib/maven-2.0.9-uber.jar Number of imports: 6 import: org.codehaus.classworlds.Entry@4891bb28 import: org.codehaus.classworlds.Entry@f8e44ca4 import: org.codehaus.classworlds.Entry@c51bc9e7 import: org.codehaus.classworlds.Entry@bece5185 import: org.codehaus.classworlds.Entry@3fee8e37 import: org.codehaus.classworlds.Entry@3fee19d8 ----------------------------------------------------- [INFO] ------------------------------------------------------------------------ [ERROR] BUILD ERROR [INFO] ------------------------------------------------------------------------ [INFO] Internal error in the plugin manager executing goal 'org.apache.camel:camel-maven-plugin:1.4.0:run': Unable to find the mojo 'org.apache.camel:camel-maven-plugin:1.4.0:run' in the plugin 'org.apache.camel:camel-maven-plugin' org/codehaus/mojo/exec/AbstractExecMojo,Patch applied with thanks to Jonathan. http://svn.apache.org/viewvc?rev=665957&view=rev. 
Bug,Willem Jiang,2008-06-09T21:28:54+0000,1213046934,AbstractDataFormatFeature has problems when deleting interceptors based on phase names when multiple interceptors are removed  due to bad collection removal while iterating  patch fixes this. unit test added.,The Interceptor Lists are the instance of CopyOnWriteArrayList  which iterator is guaranteed not to throw ConcurrentModificationException and does not support the remove method. So I will not apply this patch.. Closing 1.4 issues. 
Improvement,Claus Ibsen,2008-06-10T10:28:55+0000,1213093735,should be same as it used in cxf 2.1 since camel now use cxf 2.1,Nice that all 2.1.6 artifacts is in maven repos. Thanks for the patch Freeman. Damm company firewall - I can not commit the patch. Any committers fell free to assign the task and do it.. Okay got the proxy setting configured. Applied the patch with thanks to Freeman.. Closing 1.4 issues. 
New Feature,Claus Ibsen,2008-06-10T11:47:15+0000,1213098435,We need an camel example that can be package as a standard war application and be deployed in eg. Tomcat. We should have a tutorial wiki that documents how to setup the project and let maven create the war file etc.  I am working on a new example that I will adjust to a web application.,Tutorial documentation in wiki: http://cwiki.apache.org/confluence/display/CAMEL/Tutorial-Example-ReportIncident  Work in progress. Long way to go!. New tutorial at: http://activemq.apache.org/camel/tutorial-axis-camel.html  This example shows how Camel integrates with older frameworks such as Apache Axis 1.4. It can be run using Maven.  The example exposes a webservice using Apache Axis that uses Camel to send the input as a message to an endpoint. The endpoint is a file endpoint that stores a backup of the request. The purpose is more to demonstrate the integration between Axis  Spring and Camel than other concepts in Camel such as its powerful routing and mediation framework.. We have an example now and James also wrote a tutorial on how to use camel as a web application.. Closing 1.5 issues. 
Task,Willem Jiang,2008-06-11T06:59:02+0000,1213167542,Update the https://svn.apache.org/repos/asf/activemq/scripts/activemq-schema-copy.sh for copying the schema. Also need to create a directory which name is integration in activemq.apache.org/camel/schema/spring.,Hi James   Could you create a directory (integration) in the /www/activemq.apache.org/camel/schema/spring for publishing the schema?  The activemq-schema-copy.sh is updated.  Thanks   Willem. Any update on this. We should have this fixed before a 1.4 release.. The script is working now   you can get the schema here http://activemq.apache.org/camel/schema/spring/integration/. 
New Feature,Unassigned,2008-06-11T10:58:52+0000,1213181932,We should be able to run smx as a war in 'embedded mode' with whatever camel routes we need We should create a little example of how to mix and match servicemix  jbi components and camel in a war,Closing all 2.0M2 tickets. 
Bug,Unassigned,2008-06-11T14:58:20+0000,1213196300,A new connection is being created / shutdown for every message that is sent through my ActiveMQ JMSComponent.  I thought this issue had been resolved for Camel 1.3; however  as shown within the example project  it doesn't seem to be.  This is very concerning for rapidly produced messages as there is alot of overhead with creating a new connection.  Forum posting on this issue: http://www.nabble.com/New-connection-being-created-for-every-message-(post-1.3-camel)-td17684874s22882.html  Steps to running the attached sample:  -Have an instance of ActiveMQ running (localhost to the test app) with openwire exposed on port 61616 (the default port) -After extracting the example project  simply run 'mvn test' and it will begin sending messages through Camel -Open JConsole and look under the Connections for localhost broker - you will notice the suffix on connections increasing very quickly as connections are being opened/torn down for every message sent from the test app.,I am running your sample against ActiveMQ and have enabled jmx in activemq.  I have sent more than 130 messages and got this JMX output. I am running on JDK1.5. And I had to add this to your pom.xml to enable JDK1.5    <build>     <defaultGoal>install</defaultGoal>      <pluginManagement>       <plugins>          <plugin>           <groupId>org.apache.maven.plugins</groupId>           <artifactId>maven-compiler-plugin</artifactId>           <version>2.0.2</version>           <configuration>             <source>1.5</source>             <target>1.5</target>             <maxmem>256M</maxmem>             <fork>${compiler.fork}</fork>           </configuration>         </plugin>        </plugins>     </pluginManagement>. Erik what is the status now? Do you have 130 open connections when you have sent 130 messages?. I does indeed looks a bit strange. I have about 30 connections open after sending about 370 messages.. I get the same behavior with Camel 1.4-SNAPSHOT as with 1.3.0. Ah I figured it out. When I stopped the unit tests they are not properly shutdown  so I had 5-10 rouge java processes still sending messages to ActiveMQ.  Now I killed them all and started again. After sending more than 660 messages I still only have 2 connections that I started with.. Eric in the process I tried to use the activemq specifc component in Camel http://activemq.apache.org/camel/activemq.html     <bean id="activemq" class="org.apache.activemq.camel.component.ActiveMQComponent">     <property name="brokerURL" value="tcp://localhost:61616"/>   </bean>. As Claus said  if you use the activemq component directly - which is what we recommend if you are using ActiveMQ - rather than the JMS component everything works fine.  See the blue info box on the JMS page which describes your issue and why you should use the ActiveMQ component - or explicitly use a JMS pool wrapper around the ActiveMQ connection factory http://activemq.apache.org/camel/jms.html  Its easier to just use the ActiveMQ component as that does the right thing for you http://activemq.apache.org/camel/activemq.html. Thanks guys – sorry I was out of town the last week so didn't see the comments until just now. The problem was that I noticed a new connection being opened and closed for every message being sent. I am guessing this is a JMS standard thing  and that is why it showed up with using the JmsComponent instead of the ActiveMQ specific component. Apparently I need to pay more attention as I didn't realize there were 2 different components for AMQ vs. generic JMS component... I'll test it out  but I'm sure that'll do the trick. Thanks again!. Closing 1.4 issues. Is this bug/feature still present in Camel 1.9.1? We have to use Websphere MQ as JMS provider  so using AMQ instead of generic JMS component is not a good workaround. I did a trace of MQ within Camel  and there were indeed a lot of MQOPEN calls  so I guess the problem is still there. Effectively this bug makes the JMS component unusable  so the bug should be fixed.. Jurgen I suggest to use the Camel mailing list / forum for help with Camel  and not comment on old JIRA tickets.  And read on the Camel JMS wiki page  it talks about some cache level options you can adjust to your needs. And on the user forum there is many people using Camel with IBM MQ and you can find some threads about this as well.. 
Test,Claus Ibsen,2008-06-13T04:16:30+0000,1213330590,I notice that in bamboo nightly build recently SpringDataSetTest failed intermittently. I try this test on my local machine  I can see this test failure once about every 10 times try,seems other guys already found this problem  On Jun 6  2008  at 1:12 AM  Claus Ibsen wrote:  > Hi > > Why does the SpringDataSetTest fails once in a while on the Bamboo? It's a bit annoying. > > > SpringDataSetTest : Run (testRun) History > java.lang.AssertionError: dataset:foo Failed due to caught exception: java.lang.AssertionError: Header: camelDataSetIndex does not match. Expected: 9 but was: 8 on Exchange[Message: <hello>world!</hello>] with headers:  {camelDataSetIndex=8}  > at org.apache.camel.component.mock.MockEndpoint.fail(MockEndpoint.java:662) > at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:240) > at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:199) > at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:126) > at org.apache.camel.component.dataset.SpringDataSetTest.testRun(SpringDataSetTest.java:34) > > > Med venlig hilsen > > Claus Ibsen > ...................................... > Silverbullet > Skovsgårdsvænget 21 > 8362 Hørning > Tlf. +45 2962 7576 > Web: www.silverbullet.dk >. a bit odd how the exhange is created. The content and the header doesnt match up. Message number 50: suddenly have a index of only 5.  And later on we get more and more of these missmatches.  2008-06-15 19:52:56 562 DEBUG SedaConsumer - Consuming: Exchange[Message: Hello World from message number 45] with header {camelDataSetIndex=45}  2008-06-15 19:52:56 562 DEBUG SedaConsumer - Consuming: Exchange[Message: Hello World from message number 46] with header {camelDataSetIndex=46}  2008-06-15 19:52:56 562 DEBUG SedaConsumer - Consuming: Exchange[Message: Hello World from message number 47] with header {camelDataSetIndex=47}  2008-06-15 19:52:56 562 DEBUG SedaConsumer - Consuming: Exchange[Message: Hello World from message number 48] with header {camelDataSetIndex=48}  2008-06-15 19:52:56 562 DEBUG SedaConsumer - Consuming: Exchange[Message: Hello World from message number 49] with header {camelDataSetIndex=49}  2008-06-15 19:52:56 562 DEBUG SedaConsumer - Consuming: Exchange[Message: Hello World from message number 50] with header {camelDataSetIndex=5}  2008-06-15 19:52:56 562 DEBUG SedaConsumer - Consuming: Exchange[Message: Hello World from message number 51] with header {camelDataSetIndex=51}  2008-06-15 19:52:56 562 DEBUG SedaConsumer - Consuming: Exchange[Message: Hello World from message number 52] with header {camelDataSetIndex=52}  2008-06-15 19:52:56 562 DEBUG SedaConsumer - Consuming: Exchange[Message: Hello World from message number 53] with header {camelDataSetIndex=53}  2008-06-15 19:52:56 562 DEBUG SedaConsumer - Consuming: Exchange[Message: Hello World from message number 54] with header {camelDataSetIndex=54} ... 2008-06-15 19:52:56 625 DEBUG SedaConsumer - Consuming: Exchange[Message: Hello World from message number 193] with header {camelDataSetIndex=63}. Okay it must be the seda producer that has a concurrency issue:  I have added some logging (CollectionProducer = SedaProducer)  2008-06-15 20:23:29 875 DEBUG CollectionProducer - Producing: Exchange[Message: Hello World from message number 8] with headers: {camelDataSetIndex=8}  2008-06-15 20:23:29 875 DEBUG CollectionProducer - Producing: Exchange[Message: Hello World from message number 9] with headers: {camelDataSetIndex=9}  2008-06-15 20:23:29 875 DEBUG CollectionProducer - Producing: Exchange[Message: Hello World from message number 10] with headers: {camelDataSetIndex=10}  2008-06-15 20:23:29 875 DEBUG CollectionProducer - Producing: Exchange[Message: Hello World from message number 11] with headers: {camelDataSetIndex=11}  2008-06-15 20:23:29 875 DEBUG CollectionProducer - Producing: Exchange[Message: Hello World from message number 12] with headers: {camelDataSetIndex=0}  2008-06-15 20:23:29 875 DEBUG CollectionProducer - Producing: Exchange[Message: Hello World from message number 13] with headers: {camelDataSetIndex=13}  2008-06-15 20:23:29 875 DEBUG CollectionProducer - Producing: Exchange[Message: Hello World from message number 14] with headers: {camelDataSetIndex=14}  2008-06-15 20:23:29 875 DEBUG CollectionProducer - Producing: Exchange[Message: Hello World from message number 15] with headers: {camelDataSetIndex=15}. The problem is CollectionProducer that copies the exchange to produce. However it looks like that exchange.copy is not safe in concurrent environments. Maybe we get bitten by some shared objects for the headers.  Copying the information "more manually" fixes the problem.. A workaround to the failed spring unit test is to use a different queue such as the direct one. However we still have this bug with concurrent seda. I am changing this to use direct queues so it wont fail from time to time on Bamboo. I will then create a unit test in camel-core that demonstrates the seda concurrency issue bug  that we can use as baseline for fixing that issue.. Bamboo should be happy now.  Added a new unit test that demonstrates the bug in camel-core. DataSetSedaTest. Unit test is exluded by default until we have the seda combined with dataset fixed.. Closing 1.4 issues. 
Wish,Hadrian Zbarcea,2008-06-13T07:39:15+0000,1213342755,> Hi > > Should we consider enabling JMX as default in Camel? It runs on JDK1.5 and thus its possible.  Yeah  I think we should.  > What is the default in ServiceMix? Maybe Camel should align what they do?  AFAIK ServiceMix and ActiveMQ default it to true. Folk should have to disable it IMHO as its so useful  – James -------,I'm working on it.. William is again busy working on patch for Camel. I will update wiki once this patch has been applied.  By default  Camel mbean objects are registered with a mbean server and performance counters are enabled. However  RMI connector server is not started by default. Mbean server is "found" by mbean server's default domain name as it can be shared among camel contexts and with other application when it is desirable (as mentioned in CAMEL-613). If no mbean server can be found  a new one will be created. As before  it is also possible to use the platform mbean server. System properties (found in JmxSystemPropertyKeys.java) and Spring configuration (found in CamelJMXAgentType.java) support the same set of configuration parameters. Instrumentation agent can be disabled by system property or spring configuration. Default Instrumentation agent is started and stop by the camel context as a service eliminating the need for SpringInstrumentationAgent subclass. Moved CamelChoiceWithManagementTest from spring to core where it belongs updated RouteBuilderTest  ErrorHandlerTest to account for instrumentation interceptors Fixed some of the JMX tests that does not clear and restore system properties properly and release mbean servers at the end of the test. Update AggregatorType to allow it to be wrapped by interceptors. add ErrorHandlerWrappingStrategy mechanism as we need to prevent instrumentation interceptor from being wrapped by ErrorHandlers. rename LifecycleStrategy.onContextAdd() to onContextStart() since the lifecycle strategy is typically created after camel context. Therefore  we are not really able to invoke the lifecycle strategy at that time. It's more meaningful to be notified when camel context is started instead. since the default domain name for the mbean server and the domain name of the registered mbean object can be differ  we make them into different properties. Add a check in ProcessorType.wrapProcessorInInterceptors() to prevent intercept ref from changing target processor. It is a potential cycling problem. This problem is discovered by enabling instrumentaton interceptor in StreamCachingInterceptorTest. We'll probably should revisit StreamCachingInterceptor. I'll create a JIRA. workaround NPE (CAMEL-620) in ResequencerType to allow createProcesssor to be invoked (so we can wrap Resequencer by an interceptor). add async support for InstrumentationProcessor Fix CAMEL-553 (Firewall-friendly JMX Connector URL) by adding a property for RMI connection port.. Hi William   Thanks for your contribution. It's a huge patch  I will take some time to review it .  Claus  I take this task for getting the patch into repository ASAP   Willem. William Tam - thanks a lot for the great patch. This is awesome work. You did go all the way - started with an issue to enable jmx and then discovered more and more that could/should be fixed. That is great that you have this talent and wanted to contribute it back. Thanks a lot   Looking forward for the wiki documentation as well - that is where the frameworks put themselves into a higher level if the documentation is concise and up to date.  Since its a big patch I do think we test the JMX stuff a bit more a final 1.4 can be released.. Could we improve the DEBUG/INFO logging when the JMX stuff is started / registered?  End-users should be able to find the URI endpoints etc. at INFO level how to connect to the camel context.. This unit test CamelChoiceWithManagementTest file is 0 in file size. Maybe it should be deleted from SVN.. Done  removed the CamelChoiceWithManagementTest from SVN.. Sorry  CamelChoiceWithManagementTest.java was missing from my patch. Here is it.. William  thanks for the missing unit test. Its now added to the trunk.  The unit test passed on my local laptop.. 
Bug,Claus Ibsen,2008-06-13T08:24:08+0000,1213345448,See nabble http://www.nabble.com/how-to-disable-warn-log-message-when-running-HttpGetTest.java---td17598680s22882.html  Basically the duplicated should be removed and the System.out removed as well!,Is already fixed in trunk. 
Task,Claus Ibsen,2008-06-13T08:25:37+0000,1213345537,The http component had system out code.  Look in all component for similar issues. The core has been fixed. Unit testing can be omitted  but we should prefer to use logging instead.,Removed all relevant system out in components.  Now only the unit testing should be improved by using logging or more assertions instead of system.out. 
Improvement,Claus Ibsen,2008-06-13T09:31:30+0000,1213349490,http://activemq.apache.org/camel/transactional-client.html  We should have better documentation how to use this. Maybe in an example. And some unit testing as well.  See nabble: http://www.nabble.com/two-to-database-endpoints-in-one-transaction-td17707633s22882.html,This should be fixed first. Added a database example  now working on a simple JMS example. Phew it does take some time to document it  but now its much better with real backing unit tests that works.. 
Bug,Guillaume Nodet,2008-06-13T13:36:11+0000,1213364171,,URL: http://svn.apache.org/viewvc?rev=667533&view=rev. 
Task,Jonathan Anstey,2008-06-15T20:12:23+0000,1213560743,Just noticed that the wire tap docs were pointing to an old version of the wire tap in the following file (its fixed now):  http://svn.apache.org/repos/asf/activemq/camel/trunk/components/camel-spring/src/test/resources/org/apache/camel/spring/builder/spring_route_builder_test.xml  This file is not even tested so who knows if the routes work anymore,Updated the following wiki pages:  http://cwiki.apache.org/confluence/display/CAMEL/Message+Router http://cwiki.apache.org/confluence/display/CAMEL/Publish+Subscribe+Channel http://cwiki.apache.org/confluence/display/CAMEL/Content+Based+Router http://cwiki.apache.org/confluence/display/CAMEL/Message+Filter http://cwiki.apache.org/confluence/display/CAMEL/Recipient+List http://cwiki.apache.org/confluence/display/CAMEL/Splitter http://cwiki.apache.org/confluence/display/CAMEL/Selective+Consumer http://cwiki.apache.org/confluence/display/CAMEL/Idempotent+Consumer  Not sure if there are any more refs. We may need to actually remove spring_route_builder_test.xml to get the remaining (the snippet errors would show up in the confluence admin area).  Anyone want to try that?. I'm about to delete the file. Jonathan the file is deleted from trunk.. Thanks Claus. Found another reference here http://cwiki.apache.org/confluence/display/CAMEL/Spring+XML+Extensions. I say we resolve this now as any more snippet errors would be sent to the space admin.. Closing 1.4 issues. 
Bug,Gert Vanthienen,2008-06-16T06:38:46+0000,1213598326,When you define a route with a choice() and no matching when() clause is found  the Exchange just ends successfully without doing anything.  In my mind  it should fail by default in this case (or we should at least have an easy way to get this behavior).   from(DIRECT_ROUTER).choice()   .when(xpath("/oc:order_confirmation/oc:order/oc:customer/@category = '140'"))     .to(DIRECT_CUSTOMER1)   .when(xpath("/oc:order_confirmation/oc:order/oc:customer/@category = '116'"))     .to(DIRECT_CUSTOMER2);,Gert I do think that the choice() should always have an otherwise() so there always is a match.  from(DIRECT_ROUTER).choice()   .when(xpath("/oc:order_confirmation/oc:order/oc:customer/@category = '140'"))     .to(DIRECT_CUSTOMER1)   .when(xpath("/oc:order_confirmation/oc:order/oc:customer/@category = '116'"))     .to(DIRECT_CUSTOMER2);   .otherwise().to(DIRECT_CUSTOMER3);   If the otherwise() is missing on the choice() then Camel should thrown an exception. Maybe checked during the route creation stuff.. Claus   I actually do think this use case for a choice() block does make sense. I definitely do not want all my unmatched exchanges to go to any third customer  so I usually code something like:  ...otherwise().process(new Processor() { //make the exchange fail here });   ... to get my RouteBuilder's error handler to pick it up.  We should at least make this behavior easier to implement or maybe even make it the default when no explicit otherwise() was given.  Gert. -1 [edit: retracting my +1]  In other words if there is no explicit otherwise() to go the errorHandler (no redelivery of course).  Thinking more about this I think the behavior of choice should be the way it already is. If no clause matches and there is no otherwise it should silently succeed with a noop. Users are familiar with this from switch() statements and is i think a reasonable expectation.  I think it's perfectly reasonable to add the otherwise (as one would add a default: ) to make it explicit that the exchange should fail if there is no match:      [...].otherwise().exception(MyException.class);   What I would do though is adding a log (below INFO) in the ChoiceProcessor.process() if otherwise == null that would say that exchange is not processed.. Hadrian good comments.  >In other words if there is no explicit otherwise() to go the errorHandler (no redelivery of course). How can we archive this  the DeadLetterChannel is probably already "chaining" the routing?  Would be good to have it documented somehow. I do think the wiki needs a section where each DSL types is documented one-by-one. That is a however a extensive work to do.. OK  I wasn't aware of the throwFault() method that allows a user to easily make the message exchange fail instead of having to use the Processor trick. Reducing the priority of the issue  because I guess I only need to document the default  messsage filtering behavior of the choice() on the site to make people more aware of it.. I added a warning to the logging in http://svn.apache.org/viewvc?view=rev&revision=670544 and I changed the documentation at http://cwiki.apache.org/confluence/x/IcE. 
Improvement,Willem Jiang,2008-06-17T03:27:12+0000,1213673232,Since the Camel default JMX connector's URL is same with ActiveMQ and ServiceMix default JMX Connector URL   we need to change it to avoid the conflict.,Maybe even ServiceMix and ActiveMQ should start using their own URL so there are no conflicts there as well.. When JMX is enabled as default this issue with conflicting urls should also be fixed  so it works out-of-the-box.. Servicemix has a servicemix -camel component   camel will work in servicemix container. So I think we need to change the camel default connector's url.  BTW  if Camel JMX is enabled as default  how can't we deploy more than two camel context (with same default JMX connector URL) in the same servicemix container.. I can take care of the jira  too.  The current implementation is limited to one agent per CamelContext. Notice a bug in the following code that findMBeanServer() always returns empty list because the find method is searching by mbean server id (not default domain name). Once we address that we can share agent among CamelContext. The CamelNamingStrategy already supports naming mbeans from different CamelContexts to be registered with an agent. .  // jmx is enabled but there's no MBeanServer  so create one List servers = MBeanServerFactory.findMBeanServer(jmxDomainName); if (servers.size() == 0)  { server = MBeanServerFactory.createMBeanServer(jmxDomainName); }  else  { server = (MBeanServer)servers.get(0); }  Also  multiple agents can be attached to a connector server by registering the connector server (itself a mbean) to the agents.  Even we say we enable jmx by default  I am not sure we should create a connector server by default. The reason is that applications may already have a connector server in the VM (like the above use case of Camel in ServiceMix deployment). Also  it increases the chances of port conflict as it tries to grab 1099. I think by default  Camel should create or find an agent and register all camel mbeans. The user can then configures to attach to a connector server or create a new one.. William do you have a patch for the bug with finding the mbean server by domain name?. I attach a patch in camel-613 that includes a fix for the finding mbean server issue.  So  what would you like for the default jmx connector url? The current default path is /jmxrmi.. I want to change it to /jmxrmi/camel and will take a look at your patch. Willem we are closing in on a new 1.4 RC - could we get the connector url fixed before that?. Done  I changed the default connector address to service:jmx:rmi:///jndi/rmi://localhost:1099/jmxrmi/camel  also updated the wiki page http://activemq.apache.org/camel/camel-jmx.html. 
Improvement,Willem Jiang,2008-06-17T07:02:39+0000,1213686159,We can share the application context with camel context in CXF bus for the CXFEndpoint in stead of using the cxf.xml.,http://svn.apache.org/viewvc?rev=668598&view=rev. Here is a unit test to show how to set the configuration of the cxf http-conduite in the camel context spring configuration file.  https://svn.apache.org/repos/asf/activemq/camel/trunk/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/spring/CxfEndpointBeanTest.java. 
Improvement,Willem Jiang,2008-06-17T16:46:50+0000,1213721210,See context at: http://www.nabble.com/Exchange-headers-in-velocity-td17916457s22882.html,JUnit test project demonstrating the issue.. I believe this patch would do what needs to be done to fix the header issue we are seeing.. Just wrote a unit test which based on patch's test. The patch is applied with thanks to Stephen. http://svn.apache.org/viewvc?rev=669059&view=rev. 
New Feature,Claus Ibsen,2008-06-19T04:45:31+0000,1213850731,Cfrr. http://flatpack.sourceforge.net/parsing.html  We should have a good way of handling flat files (delimited and fixed positions).  There have been a few requests for this on the different mailing lists and forums.,James has fixed it now. His new component is though not a datatformat but as a producer/consumer.. James is on a roll now so he is also doing the dataformat as well  so the flatpack gets the whole deal now.. Also the wiki should be updated with this new dataformat. Code implemented  need to add the wiki documentation. Closing all 1.5.0 issues. 
New Feature,Gert Vanthienen,2008-06-19T04:48:42+0000,1213850922,Using http://jt400.sourceforge.net/  we can access almost every kind of object on AS/400.  We should start by providing support for reading/writing data from/to data queues because it is one of the easiest ways available to do message-oriented communication with the AS/400 system without requiring WebSphere MQ.,Oh yeah that bring back memories working on that platform and later integration to it using the IBM jt400 API. It actually does work with the messaging and file member reading etc. However the API is massive and not many people have an AS/400 at home to use for developing and testing   But a great feature to have for integration to these huge systems running on the AS/400.. Added to trunk in http://svn.eu.apache.org/viewvc?view=rev&revision=677858 Added to the components build in http://svn.eu.apache.org/viewvc?view=rev&revision=677861  Documentation in http://cwiki.apache.org/confluence/display/CAMEL/JT400. This was tested with an AS/400 system during development  but this test will just be skipped because we don't have an AS/400 publicly available on the web somewhere. In order to test this yourself  you can change the values for the constants in org.apache.camel.component.jt400.Jt400RouteTest.. Closing all 1.5.0 issues. 
Bug,Hadrian Zbarcea,2008-06-19T15:25:05+0000,1213889105,http://www.nabble.com/%28Fixed-%29-Updated---Help-w--Oracle-JMS-and-AQjmsException-%28JMS-147%29-td17989368s22882.html  Oracle's Message implementation (AQjmsMessage) has a typo  I am pretty certain that it exists as "JMSXRecvTimeStamp". To workaround this typo I patched org.apache.camel.component.jms.JMSBinding to include the misspelled property name in set of ignored headers/properties.  Additionally  I believe Oracle might be setting null values for empty or missing standard and optional JMS reserved properties/headers. Most notably JMSReplyTo. This is resulting in JMSBinding attempting to set a null Destination on the JMSReplyTo header which then results in an Oracle exception. A quick patch was to check for null values and ignore them in the method JmsBinding.appendJmsProperties() for the JMSReplyTo header. A better fix is probably to prevent empty/blank headers or properties from originating at the Oracle level... assuming nulls/blanks are not allowed by the JMS 1.1 spec.  Anyhoo  I will attach some diff patches to this issue for your review.   Cheers! Seon,I posted about this bug on the Oracle forums and someone replied that it has been addressed  possibly even for a future release?  Here is the link:  http://forums.oracle.com/forums/thread.jspa?messageID=2600654&#2600654. Thanks for riding the camel and for the patch!  We cannot apply patches if explicit approval was not granted by the author. See the "Submitting patches" here. Other than that I reviewed the patch and it looks good. If you want this patch applied  say for users who will still use the unpatched oracle versions  please grant us license  otherwise you can close this issue with a 'won't fix'.. Hi Hadrian  I removed the original patch and reattached a new one with the ASF permission check marked. Camel is a fun ride so far  I'm enjoying it. My old hoopty was the Mule. I like both for different reasons.  Cheers! Seon. Patch applied with many thanks!. Closing 1.4 issues. 
New Feature,James Strachan,2008-06-19T18:57:01+0000,1213901821,so that folks can help diagnose issues...,there's now a trace flag on DefaultCamelContext and <camelContext trace="true"/> to easily enable tracing. If its part of the new debugger feature then please add documentation about this new option in the wiki  http://activemq.apache.org/camel/debugger.html  And btw the debugger wiki is probably out of date with the latest commits.. James could we have the wiki updated with your new option and some sample output from the new trace interceptor?  I do think I will try to give a go at it so I can see what it really does  This is more or less the last ticket for 1.4 so we could cut a new RC this week.. Would be great if the tracer could output the from parts as well   from: XXXX -> to: YYYY: exchange: AAAA  BBBB  CCCC  And then it could also consider redelivery as well. Outputting if the execution is a redelivery and what count it is.. Maybe the exchange id should be outputted by default? If you have concurrent exchanges then it can be harder to view/grep/filter in the logfiles for the same exchange.. I have enabled the breadcrumb so unit of work id is logged so end users can use it for correlation.. Updated the wiki. Only a spring XML example is missing.. BTW Claus did a great job of documenting it here...  http://cwiki.apache.org/CAMEL/tracer.html. BTW added a FAQ entry... http://cwiki.apache.org/confluence/display/CAMEL/How+do+I+debug+my+route. I've spun off the remaining tasks as separate JIRAs  CAMEL-639 and CAMEL-640.  I made a minor refactor at the last minute to use 'trace' as the property rather than 'tracing'  The Spring XML test case is in camel-spring called SpringTraceTest. 
Bug,Claus Ibsen,2008-06-19T22:45:43+0000,1213915543,java.lang.NullPointerException 	at org.apache.camel.model.ResequencerType.createStreamResequencer(ResequencerType.java:198) 	at org.apache.camel.model.ResequencerType.createProcessor(ResequencerType.java:163) 	at org.apache.camel.model.ProcessorType.createOutputsProcessor(ProcessorType.java:1584) 	at org.apache.camel.model.ProcessorType.createOutputsProcessor(ProcessorType.java:93) 	at org.apache.camel.model.InterceptorRef.createProcessor(InterceptorRef.java:61) 	at org.apache.camel.model.ProcessorType.makeProcessor(ProcessorType.java:1471) 	at org.apache.camel.model.ProcessorType.addRoutes(ProcessorType.java:97) 	at org.apache.camel.model.RouteType.addRoutes(RouteType.java:210) 	at org.apache.camel.model.RouteType.addRoutes(RouteType.java:80) 	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:462) 	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:454) 	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:47) 	at org.apache.camel.ContextTestSupport.startCamelContext(ContextTestSupport.java:108) 	at org.apache.camel.ContextTestSupport.setUp(ContextTestSupport.java:81) 	at org.apache.camel.processor.ResequencerTest.setUp(ResequencerTest.java:48) 	at junit.framework.TestCase.runBare(TestCase.java:128) 	at junit.framework.TestResult$1.protect(TestResult.java:106) 	at junit.framework.TestResult.runProtected(TestResult.java:124) 	at junit.framework.TestResult.run(TestResult.java:109) 	at junit.framework.TestCase.run(TestCase.java:120) 	at junit.framework.TestSuite.runTest(TestSuite.java:230) 	at junit.framework.TestSuite.run(TestSuite.java:225) 	at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:130) 	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196),patch attached to camel-606 has a workaround.. William is this fixed by patch from CAMEL-606 or is it only a workaround?  We need to know if we can close this issue or there are still an issue to be addressed?. After taking a closer look  it is indeed a fix not a workaround. I add some tests to verify correct resequencers (batch vs stream) are created.. Great William.  Is it possible to provide these tests as a patch - would be great to include them in the source?. Applied patch with thanks to William.. Closing 1.4 issues. 
Improvement,Claus Ibsen,2008-06-20T05:01:51+0000,1213938111,A very common use case is to copy received messages into files stored in a backup folder with sub folders named with the date pattern etc.,Anyone got good ideas for this one?  The idea is to have a simple pattern to set in the URI configuration or as a option on the FileEndpoint.  Most end-users need eg to move files into a "backup" folder with some kind of pattern usually a date pattern. This is as a shortcut for not needing to provide a speical headername yourself that you need to compute in Java using a bean/processor. Resorting to some EL is also doable but not easy for new users to camel and then there is also the dependency for the EL of choice.. Idea for patterns:  the date/time stuff from java.text (YYY-mm-DD) ID the message ID (UUID) ORIGINAL the consumed filename so you can do Backup-${ORIGINAL} ORIGINALNOEXT the consumed filename without extension so you can do ${ORIGINALNOEXT}.bak  And should be using ${ } placeholders.. ORIGINALPATH - The path to the original file ORIGINALFULL - The full name path + name + ext. And something with BEAN to invoke a bean method that can compute and return the filename. You can do this today and set the fileheader manually but it would be nicer if its easier to setup and use.. I am experimenting with implementing a new FileLanguage that is based on the simple language for the pattern placeholders  so you can configure the endpoint something like this:  file://target/filelanguage/report.txt?moveExpression=${id}.bak  The new option moveExpression is a String option to set the FileLanguage expression where you can use plain text and use the different ${ } placeholders for convienient file name patterns. Its going quite well. Had a nice quite time on the 3h train ride without network access. The consumer part is more or less done  now I need to add it to the producer as well.. Okay stuff commited to trunk. Now its just the wiki documentation missing. Okay party on with the new expression option on the file component.  Wiki is updated.. Ah I managed to add custom date support using retrieval of Date objects from message header. Needed when you want to use certain dates you have created.. Oh  the new File expressions are very cool. Nice work!. Yep I had a wide smile when the relative folder expression worked like a charm.  Just fits my needs for file based backup of inbound messages. Would love a persistent sequencer though  but I can live without for the foreseeable future.  I am thinking about @deprecated some of the other filename based options on the file component  it starts to "smell" as the code is a bit "slided".. Closing 1.5 issues. 
Improvement,Willem Jiang,2008-06-20T09:04:05+0000,1213952645,recently camel-cxf components add new feature CAMEL-614  in this change CxfProducer create a new cxf bus in such case   see the code below if (endpoint.getApplicationContext() != null) {             SpringBusFactory bf = new SpringBusFactory(endpoint.getApplicationContext());             bus = bf.createBus(); }  we need this bus create inside camel-cxf retrievable   maybe add it into CamelContext can address it,I can add a option(setDefaultBus) in the CXFEndpoint  If you want the bus be retrievable just set this option true.. committed a quick fix for it http://svn.apache.org/viewvc?rev=669838&view=rev   also update the wiki page http://cwiki.apache.org/CAMEL/cxf.html. can we set this option also from spring file?. Just committed a patch which could enable the setDefaultBus option from spring. http://svn.apache.org/viewvc?rev=670454&view=rev  Also updated the wiki page http://cwiki.apache.org/CAMEL/cxf.html. thanks Willem. 
Improvement,Claus Ibsen,2008-06-20T09:21:28+0000,1213953688,For quick development where you are packaging a war application and the spring xml files is located in WEB-INF folder then camel:run can not locate the files as it scans in the classpath only.  Configuraiton like this should be possible:        <plugin>         <groupId>org.apache.camel</groupId>         <artifactId>camel-maven-plugin</artifactId>           <configuration>             <applicationContextUri>WEB-INF/*.xml</applicationContextUri>           </configuration>       </plugin>,You can now do        <plugin>         <groupId>org.apache.camel</groupId>         <artifactId>camel-maven-plugin</artifactId>         <version>1.4-SNAPSHOT</version>           <configuration>             <fileApplicationContextUri>src/main/webapp/WEB-INF/camel-context.xml</fileApplicationContextUri>           </configuration>       </plugin>   fileApplicationContextUri is the new option for FileSystemXmlApplicationContext. TODO: Update wiki documentation. 
Bug,James Strachan,2008-06-20T11:42:31+0000,1213962151,e.g. from JBI to File automaticaly  See this thread  http://www.nabble.com/working-with-jms-tp18026353s22882p18026676.html,Patch applied to fix this.  A workaround for now is to use a dummy processor  from(...).process(   new Processor() {      public void process(Exchange exchange) {         StreamSource source = exchange.getIn().getBody(StreamSource.class);         if (source != null) {             in.setBody(source.getInputStream());         }     } }). to(...). 
Improvement,Willem Jiang,2008-06-23T03:34:10+0000,1214192050,There are two camel-cxf examples can't start by mvn  they are 1. The camel transport for CXF example 2. The example of using JAXWS WebServiceProvider API,http://svn.apache.org/viewvc?rev=670439&view=rev. 
Bug,Claus Ibsen,2008-06-23T04:02:41+0000,1214193761,Apache CXF is used in examples and the links to it in the README.txt are using the incubator.  Apache CXF 2.1.1 has just been released we should upgrade to this version also.,Willem I did the readme fix and bumbed the pom.xml. If there are issues with the CFX component itself maybe you are the expert to look at it?. Go ahead Claus  I will keep any eye on it. He he I tend to misspell CXF as CFX. Maybe I am not the only one  with this problem. Sending components\camel-cxf\pom.xml Sending examples\camel-example-cxf\README.txt Sending pom.xml Transmitting file data ... Committed revision 670442.. 
Improvement,Claus Ibsen,2008-06-23T05:04:25+0000,1214197465,I thought about another real life use case we have at work once in a while. a) when was the last time the integration worked? b) when was the last time the integration was invoked?  We do have option a covered now with lastExchangeCompletionTime. However I would like another timestamp for lastExchangeTime that is just a record the last time it was processed (even if it failed).  PS: At work we do have to grep through logfiles in our legacy EIP platform.,Update the jms tutorial with the JMX Agent connector. Code commit to trunk. Just need to update the wiki tutorial with a new chapter about the new JMX stuff in Camel 1.4. 
Improvement,Claus Ibsen,2008-06-23T05:39:47+0000,1214199587,The camel-jetty wiki documentation is sparse and should be improved.  Also the camel-http component as well. And move the google example from camel-jetty to camel-http as this is to be used for such kind. Jetty is for letting Camel exposing services over http = acting as a HTTP server.  camel-http is for the other situation to retrieve data from other servers (eg goggle),We should be able to retrieve the http query parameters in the exchange from jetty.. Closing 1.5 issues. 
Bug,Gert Vanthienen,2008-06-23T13:02:34+0000,1214226154,In recent refactorings  the getContext()/setContext() methods on Endpoint were renamed to getCamelContext()/setCamelContext().  As discussed recently (http://www.nabble.com/Deprecating-old-methods-and-changing-the-default-error-handler-td17998268s22882.html)  it would be better to use deprecation for now and only actually remove the method on our next big release.,Fixed in http://svn.apache.org/viewvc?view=rev&revision=670567. Closing 1.4 issues. 
Improvement,Hadrian Zbarcea,2008-06-23T18:21:31+0000,1214245291,Adding support to treat a database table as a logical queue.,Granted apache license to patch.. Diff was missing some classes. Clayton.  Can you describe what you mean with "Logical queue support"? I am a bit confused what your patch improves to iBatis? And could you add some more unit tests to your patch as well?  At first glance it looks like a good patch with good documentation etc.  The classloading should use the util classes from Camel = ObjectHelper.loadClass and there is also a method to create a new instance.. This update allows you to treat a database table as a logical queue. Current  the Ibatis consumer polls a database and delivers the messages to the route  but there is no way to update that message as complete/processed/whatever once it has been delivered. The route could be configured to deliver the message to another Ibatis processor that then updates the record  but that can be problematic.  In a nutshell it allows you to set an "onConsume" statement that will be called after the message has been processed. The intent is to have support similar to the jpa component "consumeDelete" option (http://activemq.apache.org/camel/jpa.html).  I meant to include some unit tests. Sorry I'm struggling a bit with making diffs   I'll update to use the ObjectHelper for class loading.. Clayton  thanks for the info. Is now clear to me.  The unit tests can be added separately (doesn't have to be in patch format). Added unit test. Using ObjectHelper for class loading.. Moving to 2.0. Great patch. The api in 2.0 changed a bit so some of this should be updated. I'll look into it.. Patch applied with many thanks to Clark.. We need this documented on the wiki how to use this logical queue support. I will create a sub ticket for this task. Closing 2.0m1 tickets. 
Bug,Willem Jiang,2008-06-23T19:04:43+0000,1214247883,Failure is:  [INFO] ------------------------------------------------------------------------ [ERROR] BUILD FAILURE [INFO] ------------------------------------------------------------------------ [INFO] Compilation failure  /x1/camel/camel-core/src/main/java/org/apache/camel/model/ProcessorType.java:[1587 18] inconvertible types found   : org.apache.camel.model.ProcessorType<Type> required: org.apache.camel.model.ExceptionType  /x1/camel/camel-core/src/main/java/org/apache/camel/model/ProcessorType.java:[1587 51] inconvertible types found   : org.apache.camel.model.ProcessorType<Type> required: org.apache.camel.model.TryType  /x1/camel/camel-core/src/main/java/org/apache/camel/model/InterceptType.java:[90 16] inconvertible types found   : org.apache.camel.model.ProcessorType<capture of ?> required: org.apache.camel.model.ChoiceType  /x1/camel/camel-core/src/main/java/org/apache/camel/model/InterceptType.java:[91 49] inconvertible types found   : org.apache.camel.model.ProcessorType<capture of ?> required: org.apache.camel.model.ChoiceType  /x1/camel/camel-core/src/main/java/org/apache/camel/management/InstrumentationLifecycleStrategy.java:[203 20] inconvertible types found   : org.apache.camel.model.ProcessorType<capture of ?> required: org.apache.camel.model.ExceptionType,Patch to fix this issue.. Patch applied with thanks to Jonathan. http://svn.apache.org/viewvc?rev=670784&view=rev. Closing 1.4 issues. 
Improvement,Claus Ibsen,2008-06-24T09:27:19+0000,1214299639,In tools like Eclipse/IDEA there is smart completion when editing the XML with the XSD; however there's no documentation for elements/attributes.  We should extract the JavaDoc from the Java code and include it into the generated XSD. There's an existing issue here...  https://jaxb.dev.java.net/issues/show_bug.cgi?id=369  as part of this we need to improve the javadoc too,are you still working on this Jonas  or could someone else dive in?. Hey James  just got back from a long break. I'll go ahead have a look at this.. I was initially thinking of creating a plugin for this but the schema generator class does not seem to be extensible to be able to create a "plugin" to intercept it before the generated schema is written down to the xsd document.  the other option here is to hack the jaxb ri and add this functionality. Yeah - I think we need to hack the RI code to fix this. We can submit a patch to them (they've been responsive in the past - I've submitted a number of patches in the past  particularly in the Java -> XSD generation part).  In a short term we could have our own custom build of the RI for XSD generation (which we did for quite a while - as I'd fixed a load of issues with the Java -> XSD generation).  So I'd say  lets  patch the RI code to fix this submit a patch to the RI we use our own build of the RI for XSD generation only - until the RI contains our patch. Moving to 2.0. We wont hack the JAXB generator as we use pure JAXB now. But that ticket was target for JAXB 2.1.13 which is the next release. So may SUN get it into the JAXB eventually.. Closing all resolved tickets from 2010 or older. JAXB ticket about support for documentation here https://java.net/jira/browse/JAXB-917. We could maybe use the javadoc support from the new api component from Dhiraj to access the javadoc  and then transform the XSD to include the <xsd:documentation>. Yay we recently got this now. Lets close this one  as the new work is tracked by CAMEL-7999.. CAMEL-9842: Finally got the non route bits included as well from Camel 2.18 onwards.. 
Improvement,Claus Ibsen,2008-06-24T13:35:45+0000,1214314545,Now you must use ClassPath based xml files as Camel expects a ClassPathXmlApplicationContext.  The code below is not possible  but desired for unit testing camel projects where spring configuration resides in WEB-INF and not on the classpath etc.  public class MyRouteTest extends SpringTestSupport {      protected ClassPathXmlApplicationContext createApplicationContext() {         return new FileSystemXmlApplicationContext("src/main/webapp/WEB-INF/helloworld.xml");     } }    There must be a common spring interface we can return in createApplicationContext instead of the classpath based.,You can do      protected ClassPathXmlApplicationContext createApplicationContext() {         ApplicationContext ctx = new FileSystemXmlApplicationContext(             "src/main/webapp/WEB-INF/helloworld.xml");         return new ClassPathXmlApplicationContext(ctx);     }   Lets see in Camel 1.5 if we can just let it accept an ApplicationContext. The workaround above doens't work.. Looking into this.. With this patch you can use file based application contexts like:  public class MyRouteTest extends SpringTestSupport {     protected AbstractXmlApplicationContext createApplicationContext() {         return new FileSystemXmlApplicationContext("src/main/webapp/WEB-INF/helloworld.xml");     } }. Applied patch with thanks to Jonathan.. Closing 1.5 issues. 
Bug,Claus Ibsen,2008-06-24T22:09:21+0000,1214345361,Camel routes get a DLC processor with a redelivery policy  which defaults to redeliverying a message to a destination processor up to 6 times.  In case of a transacted route it is preferable that DLC's delivery policy be reset to a single attempt  so that a fan-out transacted route would not hold tx locks on destinations for too long.   The DLC's default redelivery policy has also made transactional tests not really testing tx behavior of Camel Components backed runtimes (jms brokers  etc)  rather DLC would catch the exception and try to redeliver the message to destination processor and not letting the components to rollback native transactions initiated by components backed runtimes (jms  db)  The attached patch installs a property into Camel Exchange that indicates weather a route is transacted. This is done in org.apache.camel.spring.spi.TransactionInterceptor.java  DLC then checks if the flow is transacted and sets its redelivery policy to 1  With this change JMS transactions are actually rolled back and messages are put back into the queue and then consumed again  verifying that brokers support transactions and can redeliver messages into Camel routes that were previously rolled back.,Marat thanks a lot for the patch  we appreciate all the hard work you do to report and fix the problems. Great work.  As the 1.4 release is just about to get cut I would like to schedule this patch for 1.5. I am hoping that you don't mind this.. Claus   I don't mind that as long as the patch can be applied to trunk and the sooner the better. Marat we appreciate all your great patches for the more hardcore JMS related stuff.  I am sure this patch will be accepted and submitted to the trunk. The 1.4 should just be voted released before we will apply this patch to the trunk that is for the 1.5 release.  The vote for 1.4 release is in progress as I write this. http://www.nabble.com/-VOTE--Release-apache-camel-1.4-td18146965s22882.html. Marat.  Could you provide a unit test for the new class ExchangeProperty also?. And I am wondering if we should introduce an method on Exchange interface that returns whether this exchange is in transacted mode or not?. According to the spring transaction programmatic stuff you can set the rollback only status.  I am wondering if we should do this also when we do the rollback by throwing the wrapped exception?. I do think I got a failing exception on my local system with the patch.  ------------------------------------------------------------------------------- Test set: org.apache.camel.component.jms.tx.QueueToQueueRequestReplyTransactionTest ------------------------------------------------------------------------------- Tests run: 1  Failures: 1  Errors: 0  Skipped: 0  Time elapsed: 23.047 sec <<< FAILURE! testRollbackUsingXmlQueueToQueueRequestReplyUsingDynamicMessageSelector(org.apache.camel.component.jms.tx.QueueToQueueRequestReplyTransactionTest)  Time elapsed: 22.875 sec  <<< FAILURE! junit.framework.AssertionFailedError: Received unexpeced reply 	at junit.framework.Assert.fail(Assert.java:47) 	at junit.framework.Assert.assertTrue(Assert.java:20) 	at org.apache.camel.component.jms.tx.QueueToQueueRequestReplyTransactionTest.testRollbackUsingXmlQueueToQueueRequestReplyUsingDynamicMessageSelector(QueueToQueueRequestReplyTransactionTest.java:70). I am wondering if we should also cleanup? We are adding a TRANSACTED property on the Exchange that is never removed.. The unit tests now all passes sorry my bad. Marat your ExchangeProperty is quite nice. As this class is in org.apache.camel package I do think it should have javadoc stating its purpose.  Other components and end-users could start using it so it should be clearly documented and ... we should have an unit test for it also.. Claus:  > Could you provide a unit test for the new class ExchangeProperty also?  Working on it.  > I am wondering if we should introduce an method on Exchange interface that returns whether this exchange is in transacted mode or not?  Sure. Will add that  > According to the spring transaction programmatic stuff you can set the rollback only status. And I am wondering if we should do this also when we do the rollback by throwing the wrapped exception?  I can add that  however it has no effect on JMS tx being rolled back as there is a bug in the way tx management is implemented in Spring's JMS DefaultListenerContainer  > We are adding a TRANSACTED property on the Exchange that is never removed.  That's not quite true I believe. As far as I can tell an Exchange lifespan is a single call flow. So if this call flow is transacted then this property is installed on it. Once this Exchange instance is freed so are its properties.  > As this class is in org.apache.camel package I do think it should have javadoc stating its purpose.  Working on that as well.. We should get this in 1.4 before its release. To important to not include as the transaction client EIP pattern doesn't work otherwise.  Marats patch is surely great. Just need it to be more polished that he is working on. Claus:  Updated patch is attached. Note  I've added type safety check on DefaultExchange for well known set of Exchange Properties. Marat  do you mind documenting why you are looking as you do  for the active TX  in the code below? You are first looking into the TSM if not found then on status  and then on the casting to DTS etc. Is all this code really needed? You had to do it like this? I am asking because when someone else look at this code in 1-2 years he would be a little puzzled?  So I do think we should add some code comments on the strategy below and why it needed to do it like this. You can just comment here and I will add it to the code.  activeTx = TransactionSynchronizationManager.isActualTransactionActive(); +                    if (!activeTx) { +                        activeTx = status.isNewTransaction() && !status.isCompleted(); +                        if (!activeTx) { +                            if (DefaultTransactionStatus.class.isAssignableFrom(status.getClass())) { +                                DefaultTransactionStatus defStatus = DefaultTransactionStatus.class.cast(status); +                                activeTx = defStatus.hasTransaction() && !status.isCompleted(); +                            } +                        } +                    }. D:\project\camel>svn commit --message "CAMEL-634: Applied patch with thanks to Marat. Added unit test for transactional DataSource." Sending camel-core\src\main\java\org\apache\camel\Exchange.java Adding camel-core\src\main\java\org\apache\camel\ExchangeProperty.java Sending camel-core\src\main\java\org\apache\camel\impl\DefaultExchange.java Sending camel-core\src\main\java\org\apache\camel\processor\DeadLetterChannel.java Adding camel-core\src\test\java\org\apache\camel\ExchangePropertyTest.java Sending components\camel-jms\src\main\java\org\apache\camel\component\jms\EndpointMessageListener.java Sending components\camel-jms\src\test\java\org\apache\camel\component\jms\tx\ConditionalExceptionProcessor.java Sending components\camel-jms\src\test\java\org\apache\camel\component\jms\tx\QueueToQueueRequestReplyTransactionTest.java Sending components\camel-spring\pom.xml Sending components\camel-spring\src\main\java\org\apache\camel\spring\spi\TransactionInterceptor.java Adding components\camel-spring\src\test\java\org\apache\camel\spring\interceptor\BookService.java Adding components\camel-spring\src\test\java\org\apache\camel\spring\interceptor\TransactionalClientDataSourceTest.java Adding components\camel-spring\src\test\resources\org\apache\camel\spring\interceptor\transactionalClientDataSource.xml Transmitting file data ............. Committed revision 673008.. Can this issue be closed?. Yes it can.  Marat should just document why he uses the code he does to retrieve if the exchange is transacted from the spring TM. Closing 1.4 issues. 
Improvement,Unassigned,2008-06-25T05:37:02+0000,1214372222,We should give the pom.xml files a tweak for all the repos.  Spring in particular is now on the Amazon s3 repo  we should fetch the stuff from this one:   <repository>    <id>spring-milestone</id>    <name>Spring Milestone Repository</name>    <url>http://maven.springframework.org/milestone</url> </repository>,Taking a look at this. See https://issues.apache.org/activemq/browse/CAMEL-789 for updates.. Actually  the spring integration component is already using a repo on S3. It currently uses:  http://repository.springsource.com/maven/bundles/milestone Browse here: http://s3browse.com/explore/repository.springsource.com/maven/bundles/milestone  Looks like the http://maven.springframework.org/milestone repo doesn't contain the artifacts we need. I'm not sure why Spring has two separate repos here... Claus  was there a reason you mentioned this particular one?. If not  then we can close this one. No I guess I found that one in a spring forum when I was playing with Spring WebService. I guess they got real busy with their platform and the OSGi bundle so the real repo to use it the bundles  So I will close this one. Fixed by Jonathan. 
Bug,Claus Ibsen,2008-06-25T11:40:27+0000,1214394027,I have a simple hello world file based ESB that scans a folder for files  invoke a POJO and store the output as a file in another folder.  Deployed as a WAR file in WebSphere it seems as if Camel 1.4-SNAPSHOT can not load the converters needed to converter to String to InputStream for the FileProducer when it is about to store the file.  The logging output where the ResolverUtil can't find the annotated converters in camel jar itself  [06-25 13:31:23] DEBUG ResolverUtil [Thread: 1 org.apache.camel.component.file.FileComponent@7ade7ade]: Searching for annotations of org.apache.camel.Converter in packages: [org.apache.camel.spring.converter  org.apache.camel.converter] [06-25 13:31:23] DEBUG ResolverUtil [Thread: 1 org.apache.camel.component.file.FileComponent@7ade7ade]: Found: []    And the stacktrace:  org.apache.camel.InvalidPayloadException: No in body available of type: java.io.InputStream but has value: This is important work \temp\camel\in\README.txt Done by me. of type: java.lang.String on: Message: This is important work \temp\camel\in\README.txt Done by me. on the exchange: Exchange[Message: This is important work \temp\camel\in\README.txt Done by me.] 	at org.apache.camel.util.ExchangeHelper.getMandatoryInBody(ExchangeHelper.java:127) 	at org.apache.camel.component.file.FileProducer.process(FileProducer.java:67) 	at org.apache.camel.component.file.FileProducer.process(FileProducer.java:55) 	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:43) 	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:75) 	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:57) 	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:146),Just for the record. WebSphere is able to load classes from WEB-INF/classes  but not from jars in WEB-INF/lib.  If extracting camel-core into WEB-INF/classes then the annotated converters can be loaded:  [06-25 14:58:58] TRACE ResolverUtil [Thread: 1 org.apache.camel.component.file.FileComponent@76da76da]: URLs loaded: java.lang.ClassLoader$2@28ce28ce [06-25 14:58:58] TRACE ResolverUtil [Thread: 1 org.apache.camel.component.file.FileComponent@76da76da]: Trying URL: file:/C:/was61/profiles/AppSrv01/installedApps/claus-acerNode01Cell/camel-example-helloworld-1_0fixed_war.ear/camel-example-helloworld-1.0fixed.war/WEB-INF/classes/org/apache/camel/converter/ [06-25 14:58:58] TRACE ResolverUtil [Thread: 1 org.apache.camel.component.file.FileComponent@76da76da]: Scanning for classes in [/C:/was61/profiles/AppSrv01/installedApps/claus-acerNode01Cell/camel-example-helloworld-1_0fixed_war.ear/camel-example-helloworld-1.0fixed.war/WEB-INF/classes/org/apache/camel/converter/] matching criteria: annotated with @Converter [06-25 14:58:58] DEBUG ResolverUtil [Thread: 1 org.apache.camel.component.file.FileComponent@76da76da]: Loading from directory: C:\was61\profiles\AppSrv01\installedApps\claus-acerNode01Cell\camel-example-helloworld-1_0fixed_war.ear\camel-example-helloworld-1.0fixed.war\WEB-INF\classes\org\apache\camel\converter [06-25 14:58:58] TRACE ResolverUtil [Thread: 1 org.apache.camel.component.file.FileComponent@76da76da]: Testing for class org.apache.camel.converter.CamelConverter$1 matches criteria [annotated with @Converter] [06-25 14:58:58] TRACE ResolverUtil [Thread: 1 org.apache.camel.component.file.FileComponent@76da76da]: Testing for class org.apache.camel.converter.CamelConverter$2 matches criteria [annotated with @Converter] [06-25 14:58:58] TRACE ResolverUtil [Thread: 1 org.apache.camel.component.file.FileComponent@76da76da]: Testing for class org.apache.camel.converter.CamelConverter matches criteria [annotated with @Converter] [06-25 14:58:58] TRACE ResolverUtil [Thread: 1 org.apache.camel.component.file.FileComponent@76da76da]: Found class: class org.apache.camel.converter.CamelConverter in classloader:  com.ibm.ws.classloader.CompoundClassLoader@68ec68ec    Local ClassPath: C:\was61\profiles\AppSrv01\installedApps\claus-acerNode01Cell\camel-example-helloworld-1_0fixed_war.ear\camel-example-helloworld-1.0fixed.war\WEB-INF\classes;C:\was61\profiles\AppSrv01\installedApps\claus-acerNode01Cell\camel-example-helloworld-1_0fixed_war.ear\camel-example-helloworld-1.0fixed.war\WEB-INF\lib\activation-1.1.jar;C:\was61\profiles\AppSrv01\installedApps\claus-acerNode01Cell\camel-example-helloworld-1_0fixed_war.ear\camel-example-helloworld-1.0fixed.war\WEB-INF\lib\aopalliance-1.0.jar;C:\was61\profiles\AppSrv01\installedApps\claus-acerNode01Cell\camel-example-helloworld-1_0fixed_war.ear\camel-example-helloworld-1.0fixed.war\WEB-INF\lib\camel-core-1.4-SNAPSHOT.jar;C:\was61\profiles\AppSrv01\installedApps\claus-acerNode01Cell\camel-example-helloworld-1_0fixed_war.ear\camel-example-helloworld-1.0fixed.war\WEB-INF\lib\camel-spring-1.4-SNAPSHOT.jar;C:\was61\profiles\AppSrv01\installedApps\claus-acerNode01Cell\camel-example-helloworld-1_0fixed_war.ear\camel-example-helloworld-1.0fixed.war\WEB-INF\lib\commons-logging-1.1.1.jar;C:\was61\profiles\AppSrv01\installedApps\claus-acerNode01Cell\camel-example-helloworld-1_0fixed_war.ear\camel-example-helloworld-1.0fixed.war\WEB-INF\lib\commons-logging-api-1.1.jar;C:\was61\profiles\AppSrv01\installedApps\claus-acerNode01Cell\camel-example-helloworld-1_0fixed_war.ear\camel-example-helloworld-1.0fixed.war\WEB-INF\lib\jaxb-api-2.1.jar;C:\was61\profiles\AppSrv01\installedApps\claus-acerNode01Cell\camel-example-helloworld-1_0fixed_war.ear\camel-example-helloworld-1.0fixed.war\WEB-INF\lib\jaxb-impl-2.1.6.jar;C:\was61\profiles\AppSrv01\installedApps\claus-acerNode01Cell\camel-example-helloworld-1_0fixed_war.ear\camel-example-helloworld-1.0fixed.war\WEB-INF\lib\log4j-1.2.14.jar;C:\was61\profiles\AppSrv01\installedApps\claus-acerNode01Cell\camel-example-helloworld-1_0fixed_war.ear\camel-example-helloworld-1.0fixed.war\WEB-INF\lib\org.osgi.core-1.0.1.jar;C:\was61\profiles\AppSrv01\installedApps\claus-acerNode01Cell\camel-example-helloworld-1_0fixed_war.ear\camel-example-helloworld-1.0fixed.war\WEB-INF\lib\spring-aop-2.5.4.jar;C:\was61\profiles\AppSrv01\installedApps\claus-acerNode01Cell\camel-example-helloworld-1_0fixed_war.ear\camel-example-helloworld-1.0fixed.war\WEB-INF\lib\spring-beans-2.5.4.jar;C:\was61\profiles\AppSrv01\installedApps\claus-acerNode01Cell\camel-example-helloworld-1_0fixed_war.ear\camel-example-helloworld-1.0fixed.war\WEB-INF\lib\spring-context-2.5.4.jar;C:\was61\profiles\AppSrv01\installedApps\claus-acerNode01Cell\camel-example-helloworld-1_0fixed_war.ear\camel-example-helloworld-1.0fixed.war\WEB-INF\lib\spring-core-2.5.4.jar;C:\was61\profiles\AppSrv01\installedApps\claus-acerNode01Cell\camel-example-helloworld-1_0fixed_war.ear\camel-example-helloworld-1.0fixed.war\WEB-INF\lib\spring-tx-2.5.4.jar;C:\was61\profiles\AppSrv01\installedApps\claus-acerNode01Cell\camel-example-helloworld-1_0fixed_war.ear\camel-example-helloworld-1.0fixed.war\WEB-INF\lib\spring-web-2.5.4.jar;C:\was61\profiles\AppSrv01\installedApps\claus-acerNode01Cell\camel-example-helloworld-1_0fixed_war.ear\camel-example-helloworld-1.0fixed.war\WEB-INF\lib\stax-api-1.0-2.jar;C:\was61\profiles\AppSrv01\installedApps\claus-acerNode01Cell\camel-example-helloworld-1_0fixed_war.ear\camel-example-helloworld-1.0fixed.war    Delegation Mode: PARENT_FIRST [06-25 14:58:58] TRACE ResolverUtil [Thread: 1 org.apache.camel.component.file.FileComponent@76da76da]: Testing for class org.apache.camel.converter.CollectionConverter matches criteria [annotated with @Converter] [06-25 14:58:58] TRACE ResolverUtil [Thread: 1 org.apache.camel.component.file.FileComponent@76da76da]: Found class: class org.apache.camel.converter.CollectionConverter in classloader:  com.ibm.ws.classloader.CompoundClassLoader@68ec68ec. See also the CXF App Server Guide for WAS: http://cwiki.apache.org/confluence/display/CXF20DOC/AppServerGuide#AppServerGuide-Websphere. Using the app server guide from CXF didn't help.  WebSphere is ****** it can not load resources from its classpath in jar files if you define a package name.. Okay looks like WebSphere doens't like to load resources if you just enter the packagename for JAR files. If you explicit enter a .class then its able to resolve it (okay I was trying with Spring resource loader). So there is some hope.. Okay I am about to tame the beast and get a working solution (fingers crossed).  Would love to get it into 1.4 so I am working on this today and tomorrow.. Yes got it working now. I will test it some more  and see if the camel-examples can work in WebSphere 6.1. Oh boy nice to be able to resolve this one.  Camel deployed as plain war files on WebSphere 6.1 is not doable. I have only tested on Windows XP platform. Anyone with a WebSphere on Unix would be highly appreciated if you can test it.. 
Task,Claus Ibsen,2008-06-25T11:42:35+0000,1214394155,All the great new Camel JMX stuff should be tested if it works on WebSphere 6.1.,BTW: WebSphere does report some exceptions while shutting down.. I can take a look. Claus  do you have the stackstrace?. William. Thanks for the offer.  I will grab some stacktrace in the morning  even though starting WebSphere is not something I enjoy doing in my spare time. William. I can see the problem is that the JMX Agent is still started even though I have disabled it in the Spring XML files.  [06-27 06:41:43] DEBUG DefaultInstrumentationAgent [WebContainer : 0]: Starting JMX agent on server: com.ibm.ws.management.PlatformMBeanServer@36483648      <!-- we use the Camel Java DSL for routing but you can also do it in this xml file instead -->     <camel:camelContext id="camel" useJmx="false">         <camel:package>dk.regionh.camel</camel:package>         <camel:jmxAgent id="agent" disabled="true"/>     </camel:camelContext>   And when the application is stopped then the mbeans can't be unregistered:  [06-27 06:42:56] INFO  DefaultInstrumentationAgent [WebContainer : 0]: Exception unregistering MBean javax.management.InstanceNotFoundException: org.apache.camel:context=claus-acer/camel route=[timer]//hello%3fperiod%3d5000 type=processor name="Bean[ref: business]"   I will attach log output and the sample project.. The sample project. Okay to disable the JMX agent you should not use the useJmx attribute and the new jmxAgent tag.  This snippet works and disables all the JMX stuff.      <!-- we use the Camel Java DSL for routing but you can also do it in this xml file instead -->     <camel:camelContext id="camel">         <camel:package>dk.regionh.camel</camel:package>         <camel:jmxAgent id="agent" disabled="true"/>     </camel:camelContext>. Enabling the JMX Connector and connecting using jconsole I can see all the WebSphere mbeans but none from Camel:      <!-- we use the Camel Java DSL for routing but you can also do it in this xml file instead -->     <camel:camelContext id="camel">         <camel:package>dk.regionh.camel</camel:package>         <camel:jmxAgent id="agent" disabled="false" createConnector="true"/>     </camel:camelContext>   See attached screenshot. I think we should use useJmx="false" and it should disable jmx completely. If you go some other path  please don't remove useJmx as it will break other projects. It was removed in a previous commit and I had to reintroduce it. It looks like my work was incomplete .. I'll look at the disable issue first.. Should useJmx (the old flag) default to FALSE? And shouldn't it be depreciated and removed in 2.0?. Nevermind my last comment regarding useJmx's default value. It is correct as it is (TRUE).. Attached patch shold address the "useJmx" issue. When it is set to false  it always disables JMX. The default is true which is consistent with the jmxAgent disabled flag's default.. Patch applied with many thanks!. Well the patch only addressed the bug with useJmx.  Camel does not run on WebSphere 6.1  and in fact you can not mange the Camel mbeans from the jconsole as you can from eg. Jetty. However this is no surprise as WebSphere does have its troubles.  I might fight this battle from time to time as my current client is sadly a WebSphere shop.  I will target this for 1.5 and create a ticket for the useJmx that is fixed in 1.4. ok  that works too  although i don't think creating camel-643 was worth the effort. This patch (mbean_registration_patch.txt) should address the stacktraces when stopping the the application. The problem is websphere's mbeanserver modifies the objectname upon mbean registration. We need to add the actual mbean objectname to the mbean list for unregistration.. It turns out that you have to either set the "usePlatformMBeanServer" flag to true or set the mbeanServerDefaultDomain to "WebSphere".  That is  do this:  <camel:jmxAgent id="agent" createConnector="true" usePlatformMBeanServer="true"/> or <camel:jmxAgent id="agent" createConnector="true" mbeanServerDefaultDomain="WebSphere"/>  The usePlatformMBeanServer would be a better option.  The problem is the implementation of MBeanServerFactory.createMBeanServer("domain.name") does not return a mbeanserrver with the expected default domain name. The instance of mbeanserver that associated with the connector does not seem to be the instance that registered the camel mbeans.. Since websphere's mbean server modifies objectnames (e.g. from prg.apache.camel:context=WTAM810/camel type=context name=WTAM810/camel to org.apache.camel:cell=WTAM810Node01Cell name=WTAM810/camel context=WTAM810/camel type=context node=WTAM810Node01 process=server1)  the mbean tree also looks a bit different.. William thanks again for all your hard work on the JMX stuff. It is really appreciated.. Applied patch with thanks to William Tam. It works now in WebSphere 6.1.. 
Bug,Unassigned,2008-06-26T08:29:45+0000,1214468985,When I unmarshall a xml file using Jaxb through Camel and that I send the result to an in-memory ActiveMq queue (brokerURL = VM)  I receive the following error :  1) Error  GRAVE: Failed delivery for exchangeId: ID-dell-charles/1108-1214228785562/0-2. On delivery attempt: 0 caught: java.lang.RuntimeException: com.company.soft.type.schema.Document java.lang.RuntimeException: com.company.soft.type.schema.Document         at org.apache.activemq.command.ActiveMQObjectMessage.storeContent(ActiveMQObjectMessage.java:104)         at org.apache.activemq.command.ActiveMQObjectMessage.setObject(ActiveMQObjectMessage.java:155)         at org.apache.activemq.ActiveMQSession.createObjectMessage(ActiveMQSession.java:317)         at org.apache.activemq.pool.PooledSession.createObjectMessage(PooledSession.java:149)         at org.apache.camel.component.jms.JmsBinding.createJmsMessage(JmsBinding.java:221)         at org.apache.camel.component.jms.JmsBinding.makeJmsMessage(JmsBinding.java:136)         at org.apache.camel.component.jms.JmsProducer$2.createMessage(JmsProducer.java:229)         at org.springframework.jms.core.JmsTemplate.doSend(JmsTemplate.java:557)         at org.springframework.jms.core.JmsTemplate$4.doInJms(JmsTemplate.java:538)         at org.springframework.jms.core.JmsTemplate.execute(JmsTemplate.java:459)         at org.springframework.jms.core.JmsTemplate.send(JmsTemplate.java:535)         at org.apache.camel.component.jms.JmsProducer.process(JmsProducer.java:227)         at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:61)         at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:50)         at org.apache.camel.processor.DelegateProcessor.process(DelegateProcessor.java:45)         at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:43)         at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:43)         at org.apache.camel.processor.Pipeline.process(Pipeline.java:101)         at org.apache.camel.processor.Pipeline.process(Pipeline.java:85)         at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:41)         at org.apache.camel.processor.Pipeline.process(Pipeline.java:57)         at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:50)         at org.apache.camel.processor.DelegateProcessor.process(DelegateProcessor.java:45)         at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:43)         at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:43)         at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:146)         at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:90)         at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:39)         at org.apache.camel.component.file.FileConsumer.pollFile(FileConsumer.java:128)         at org.apache.camel.component.file.FileConsumer.pollFileOrDirectory(FileConsumer.java:77)         at org.apache.camel.component.file.FileConsumer.pollFileOrDirectory(FileConsumer.java:84)         at org.apache.camel.component.file.FileConsumer.poll(FileConsumer.java:57)         at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:65)         at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:417)         at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:280)         at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:135)         at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:65)         at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:142)         at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:166)         at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650)         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675)         at java.lang.Thread.run(Thread.java:595) Caused by: java.io.NotSerializableException: com.company.soft.type.schema.Document         at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1081)         at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1375)         at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1347)         at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1290)         at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1079)         at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:302)         at org.apache.activemq.command.ActiveMQObjectMessage.storeContent(ActiveMQObjectMessage.java:98)  2) Config          public void configure() {                  DataFormat jaxb = new JaxbDataFormat(                                 "com.company.soft.type.schema");                  errorHandler(deadLetterChannel("seda:errors").maximumRedeliveries(1)                                 .useExponentialBackOff());                 from(                                 "file:///c:/temp/test?moveNamePrefix=c:/temp/consumed/&moveNamePostfix=old")                                 .unmarshal(jaxb)                                 .to("activemq:queue:component.queue");           <camelContext useJmx="true"               xmlns="http://activemq.apache.org/camel/schema/spring">                       <package>com.company.soft.core.routing</package>           </camelContext>            <!--  ActiveMQ brokerURL using VM protocol -->           <bean id="activemq" class="org.apache.activemq.camel.component.ActiveMQComponent">         <property name="brokerURL" value="vm://localhost:61616?broker.persistent=false"/>       </bean>  3) Version used : apache - Camel 1.4 SNAPSHOT  ActiveMQ - 5.1,Charles do you mind creating a sample project that demonstrates the bug? Maybe with the source / or some part of the source from com.company.soft.type.schema that isn't serializable?  If we have a failing unit test or sample project then it's much easier to reproduce the bug and fix it. You can close the bug. Indeed the classes created in the package com.company.soft.type.schema weren't serialisable. After adding "implements serializable" to each class  my camel routes have been executed perfectly.. The JAXB classes that I created weren't serialisable. I have add to each class "implements serialisable" and now everything works perfectly.. 
Improvement,Claus Ibsen,2008-06-26T15:12:40+0000,1214493160,,I am experimenting with something here. I can get it somehow to work. But the very first step is not recorded easily as I just use the Tracer interceptor. Notice the null in the 1st and 4th line. Line 1-3 is one exchange. Line 4-6 is another exchange.  2008-09-18 21:55:55 656 [main           ] INFO  TraceInterceptor               - ID-claus-acer/3994-1221767755421/2-0 null -> Processor[MyProcessor] :  Body:Hello London 2008-09-18 21:55:55 671 [main           ] INFO  TraceInterceptor               - ID-claus-acer/3994-1221767755421/2-0 Processor[MyProcessor] -> To[mock:a] :  Body:Hello London 2008-09-18 21:55:55 671 [main           ] INFO  TraceInterceptor               - ID-claus-acer/3994-1221767755421/2-0 To[mock:a] -> To[mock:b] :  Body:Hello London  2008-09-18 21:55:55 687 [main           ] INFO  TraceInterceptor               - ID-claus-acer/3994-1221767755421/2-1 null -> Processor[MyProcessor] :  Body:This is Copenhagen calling 2008-09-18 21:55:55 703 [main           ] INFO  TraceInterceptor               - ID-claus-acer/3994-1221767755421/2-1 Processor[MyProcessor] -> To[mock:a] :  Body:This is Copenhagen calling 2008-09-18 21:55:55 703 [main           ] INFO  TraceInterceptor               - ID-claus-acer/3994-1221767755421/2-1 To[mock:a] -> To[mock:b] :  Body:This is Copenhagen calling. Now it looks like this  but I am not convinced its correct as I am doing a bit of cheating to get the first node (the one = null above):  2008-09-19 09:52:26 500 [main           ] INFO  TraceInterceptor               - ID-claus-acer/2222-1221810744375/2-0 From[direct:start] -> MyProcessor :  Body:Hello London 2008-09-19 09:52:26 500 [main           ] INFO  TraceInterceptor               - ID-claus-acer/2222-1221810744375/2-0 MyProcessor -> mock:a :  Body:Hello London 2008-09-19 09:52:26 500 [main           ] INFO  TraceInterceptor               - ID-claus-acer/2222-1221810744375/2-0 mock:a -> mock:b :  Body:Hello London  2008-09-19 09:52:31 109 [main           ] INFO  TraceInterceptor               - ID-claus-acer/2222-1221810744375/2-1 From[direct:start] -> MyProcessor :  Body:This is Copenhagen calling 2008-09-19 09:52:31 125 [main           ] INFO  TraceInterceptor               - ID-claus-acer/2222-1221810744375/2-1 MyProcessor -> mock:a :  Body:This is Copenhagen calling 2008-09-19 09:52:31 140 [main           ] INFO  TraceInterceptor               - ID-claus-acer/2222-1221810744375/2-1 mock:a -> mock:b :  Body:This is Copenhagen calling. The problem is that FromType is not a ProcessorType and thus we can not append some interceptor to trigger the route flow when a message is started from here.. patch as work in progress of my experiment.  Will look it later  but have some other issues to work on to make it into 1.5. Also I want more feedback of a more generic solution as how the exchange is currently being routed. There could be benefits for this to be used in JMX console  Debugger  Tooling etc.  This experiment is only at the Tracer interceptor itself and not a generic solution.. BTW: We need to commit some part of it for the UnitOfWork as its cumbersome for end-users to remove sync hooks in the done callback due to concurrent modification exception if attempted.  So that is why the Service interface is used to cleanup in the stop method.. James hinted that we might use UnitOfWork as a route session. we can now use Exchange.getFromEndpoint() to know the URI an exchange camel from. @James  That is nice. The getFromEndpoint() however shows the starting endpoint. What we are also looking for is those intermediate node ids that an Exchange passes in the route graph  especially for processors  choice  and other DSL that isn't an Endpoint.. Sending camel-core/src/main/java/org/apache/camel/impl/DefaultUnitOfWork.java Sending camel-core/src/main/java/org/apache/camel/model/OtherwiseType.java Sending camel-core/src/main/java/org/apache/camel/processor/interceptor/Debugger.java Sending camel-core/src/main/java/org/apache/camel/processor/interceptor/DefaultTraceFormatter.java Sending camel-core/src/main/java/org/apache/camel/processor/interceptor/TraceEventMessage.java Sending camel-core/src/main/java/org/apache/camel/processor/interceptor/TraceInterceptor.java Sending camel-core/src/main/java/org/apache/camel/processor/interceptor/Tracer.java Adding camel-core/src/main/java/org/apache/camel/spi/TraceableUnitOfWork.java Sending camel-core/src/test/java/org/apache/camel/processor/interceptor/TraceInterceptorDestinationTest.java Transmitting file data ......... Committed revision 733758.. Closing 2.0m1 tickets. 
New Feature,Claus Ibsen,2008-06-26T15:14:37+0000,1214493277,Similar concept to the Debugger / Tracer - allow processing to be slowed down.  e.g. force a 1 second sleep between each step in the routes  to show things happening nice and slow - so you are not bombarded with a zillion lines of logging output,There is a delayer in the DSL. However what James suggest is a global delayer to slow everything down.. Okay got something running now.  How far should we go? The trace can be enabled with system properties and parameters to came:run etc. And set in spring XML as well.  What is sufficent for this delay interceptor? To set a fixed delay and enable/disable it? So we eventually need two attributes on camel context or will it clutter it to much? We could also just use one attribute for the fixed delay? Or a ref for a DelayPolicy where you can set the delay? But this requires a new spring bean as well for just setting 2000 for eg 2 sec.. wiki should be updated: http://activemq.apache.org/camel/delayer.html with a reference to set the global route delayer (this feature)  Maybe a new page depending how far we should be able to enable / configure this delayer.. We already have a Delayer class. Should we create a new Delayer class in the interceptor package just as Debugger and Tracer?. Having trouble adding a new page on the wiki with the documentation for this new feature. Adding the file here.. Committed this new feature. See attached file for usage. Will add the new page later to wiki  and also the release note should have a link to this one.. Closing all 1.5.0 issues. 
Bug,Gert Vanthienen,2008-06-27T09:41:36+0000,1214559696,spring.schema files contains the correct entries for camel-spring  http\://activemq.apache.org/camel/schema/spring/camel-spring.xsd=camel-spring.xsd  http\://activemq.apache.org/camel/schema/spring/camel-spring-1.0.0.xsd=camel-spring.xsd http\://activemq.apache.org/camel/schema/spring/camel-spring-1.1.0.xsd=camel-spring.xsd http\://activemq.apache.org/camel/schema/spring/camel-spring-1.2.0.xsd=camel-spring.xsd http\://activemq.apache.org/camel/schema/spring/camel-spring-1.3.0.xsd=camel-spring.xsd http\://activemq.apache.org/camel/schema/spring/camel-spring-1.4.0.xsd=camel-spring.xsd    ...but others (like camel-osgi  camel-spring-integration) have missing entries or even wrong (old SNAPSHOT) entries.,Fixed in http://svn.eu.apache.org/viewvc?view=rev&revision=672500. 
Bug,Willem Jiang,2008-06-27T12:51:28+0000,1214571088,I found this issue when I test  Camel 1.4.0 RC2 kit  I just add a test case to show the error.  https://svn.apache.org/repos/asf/activemq/camel/trunk/components/camel-jms/src/test/java/org/apache/camel/component/jms/AggregratedJmsRouteTest.java  You can reproduce the error if you remove the x character from xtestJmsMulticastAndAggregration() method.  BTW the test case works with the Camel 1.4.0 RC1.,I'm a little bit surprised how this test could have worked at all...  Looking at the route that this test is testing:  from("jms:queue:reply").aggregator(header("cheese").....  and then debugging through it show that this portion of the route 'from("jms:queue:reply)' creates an event driven JMS consumer  and then the 'aggregator' bit creates a JMS polling consumer on the same destination.  This is clearly a race  as we now have two consumers competing for messages off the same destination.  It seems a possible fix for this type of construct would be having the 'from' type realize that its followed by an aggregator and then disable creation of its even driven consumer and letting the aggregator get the messages and then deliver them to their ultimate destinations  Comments?. I'm looking into ti.. The problem is we shouldn't create eventdrivenroute if it is an aggregator. Otherwise  we see the race condition that marat mentioned. If we don't wrap aggregator with an interceptor  it normally invokes the "addRoutes" method in AggregatorType and EventDrienRoute will not be added. But if we do wrap with an interceptor  the interceptor becomes the first node and it will create an event drive route. Attached a patch that sets a flag in the routecontext. if a route has been added  it won't try to add an event driven route.. also  need the second patch to fix a NPE where routes can be uninitialized.. Willem Jiang has commited the patch. However unit test fails on my local laptop:  ------------------------------------------------------------------------------- Test set: org.apache.camel.component.jms.AggregratedJmsRouteTest ------------------------------------------------------------------------------- Tests run: 2  Failures: 0  Errors: 1  Skipped: 0  Time elapsed: 28.204 sec <<< FAILURE! testJmsMulticastAndAggregration(org.apache.camel.component.jms.AggregratedJmsRouteTest)  Time elapsed: 21.625 sec  <<< ERROR! java.lang.AssertionError: mock:reply Received message count. Expected: <2> but was: <0>             at org.apache.camel.component.mock.MockEndpoint.fail(MockEndpoint.java:662)             at org.apache.camel.component.mock.MockEndpoint.assertEquals(MockEndpoint.java:644)             at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:223)             at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:199)             at org.apache.camel.component.jms.AggregratedJmsRouteTest.testJmsMulticastAndAggregration(AggregratedJmsRouteTest.java:66). Claus  could you enable debug and attached the camel-test.log from the camel-jms/target? Will have a look.. when debug logging is enabled  i sometimes get this failure (but i at least get one message delivered). please see my patch that add a wait in the test.. If JMX is disable then it runs on my laptop. Claus  turn on debug log and run the test  search the log for "Routing Rules are". See if you find something like:  2008-07-02 17:44:37 698 [main ] DEBUG AggregratedJmsRouteTest - Routing Rules are: [AggregatorRoute[Endpoint[jms:queue:test.b] -> sendTo(Endpoint[mock:result])]  ....  If you see "EventDrivenRoute" instead  that means you haven't picked up the fix. Let me know.. Claus  more specifically  look for the endpoint "jms:queue:reply" and verify it is a "AggregatorRoute[Endpoint[jms:queue:reply] -> sendTo(Endpoint[mock:reply])]". There are some EventDrivenConsumerRoute for other endpoints and they are fine.. Yes it works now out-of-the-box with no svn diffs.  Thanks William for your hard work on this one.. 
Bug,Hadrian Zbarcea,2008-06-27T17:52:41+0000,1214589161,,See patch in CAMEL-637. 
Improvement,Hadrian Zbarcea,2008-06-28T15:07:34+0000,1214665654,Guillaume did some work on CAMEL-577[1]  now camel-core could run without osig jar in the classpath. I think we can mark the org.osgi.core-1.0.1.jar to be an optional jar.  Willem Jiang,Setting optional will remove the hard dependency on org.osgi.core at runtime - eg. for non OSGi envorionments such as packing a web application then this jar is not includeded in the WEB-INF\lib.  I assume that setting this to optional doesn't affect real osgi platforms where such a core osgi already exists in the OSGi container?  Any thoughts?  Proposed patch: before      <dependency>       <!-- TODO: this is only needed for OSGi environments  can we have it be optional or how? -->       <groupId>org.apache.felix</groupId>       <artifactId>org.osgi.core</artifactId>       <version>${felix-osgi-version}</version>     </dependency>   after      <dependency>       <!-- this is only needed for OSGi environments  we can have it optional -->       <groupId>org.apache.felix</groupId>       <artifactId>org.osgi.core</artifactId>       <version>${felix-osgi-version}</version>       <optional>true</optional>     </dependency>. Hadrian. In the 1.4.0 RC2 distribution the osgi jar is not in the lib folder. Also not in the lib/optional.. We put very few jars in our distro. I think it's the users responsibility to make sure he has the right jars on the classpath. I don't think we should add the org.osgi.core jar in lib or lib/optional. Agree?. Agree. 
Bug,Unassigned,2008-06-29T14:12:32+0000,1214748752,The Camel TOE pattern - you have to see its wikipedia definition http://activemq.apache.org/camel/transactional-client.html  And this user forum thread: http://www.nabble.com/Transaction-policy-not-correctly-rolling-back-on-exception.-td18173845s22882.html  Got myself so much puzzled that I had to use some time indoor on a windy Sunday afternoon.   The Camel TransactionInterceptor that handles the policy() DSL and does the wrapping in the spring transaction template is as below:       public void process(final Exchange exchange) {         LOG.info("transaction begin");          transactionTemplate.execute(new TransactionCallbackWithoutResult() {             protected void doInTransactionWithoutResult(TransactionStatus status) {                 try {                     processNext(exchange);                 } catch (Exception e) {                     throw new RuntimeCamelException(e);                 }             }         });          LOG.info("transaction commit");     }    But I am very confused as it doesn't handle any failures etc. Reading some of the extensive spring documentation at: http://static.springframework.org/spring/docs/2.5.x/reference/transaction.html  I got the impression that we should handle this problematically in Camel. That we should check for these conditions:  	exchange.failed => rollback 	exception thrown => rollback (* and should we rethrow? - I guess not)    I am working on some unit tests and a patch. We actually don't have any unit tests converting this - or at least I couldn't find any.,Is Dupliacted by CAMEL-634. 
Task,Claus Ibsen,2008-06-30T04:00:51+0000,1214798451,The camel-spring javadoc is a central part of camel as well. I should give it an overhaul and make sure we have package  summary and class java docs that are up-to-date etc.,
Task,Unassigned,2008-06-30T04:08:40+0000,1214798920,In chapter 3 the architecture chapter on page 13 the URI's is listed in a table. This table get chopped in the description.,James fixed this.. 
Task,Willem Jiang,2008-06-30T04:14:13+0000,1214799253,camel-core-1.4.0-tests.jar contains jndi-example.properties in the root classpath. We should try not to include it.,Also in the big apache-camel-1.4.0.jar there is a dummy.txt file in the org.apache.camel.converter package.. Hadrian  is this one a ticket you can try to remedy? You are a maven wizard. I just move the came-core and camel-spring *Support class from test directory to main directory. The bundler jar's is reduced about 500K.. I managed to remove the camel-core-test.jar from bundler jar without touching camel-core and camel-spring test modules. We could put the reconstruct of camel-core-test.jar Camel 2.0. 
Task,Willem Jiang,2008-06-30T04:34:09+0000,1214800449,The two new examples in 1.4 needs support for ANT build files.  loan-broker spring-jms,The existing examples is failing. the build files must be changed.. loan-broker already had ANT files. Oh  there is no ant file in loan-broker example. I will add one for it.. Oh my eyes must have played a trick with me. I had to run it from the ANT from the RC2 disto exploded zip to let it find the libs needed. Okay William you are the best to add the ANT for your great demo. The loan broker build.xml is in the svn repository.. 
Bug,Hadrian Zbarcea,2008-06-30T04:39:51+0000,1214800791,In the big jar file apache-camel-1.4.0.jar we have included log4j.properties in the root classpath. This file should not be there. Its very annoying.,Also the big jars contain the package  org.apache.camel.issues that contains unit tests. Also unit tests in org.apache.camel.management. And some spring xml test files in org.apache.camel.model as well. Unit tests in the org.apache.camel.processor package as well. And unit tests in util and view. 
Bug,Claus Ibsen,2008-06-30T06:55:49+0000,1214808949,The example: example-spring-jms using AOP proxies as a part of the enhancer server demonstration to do somekind of audit tracking using aspectj and spring.  However Camel now have trouble picking the correct method (broken in later 1.4-SNAPSHOT) or as the AOP proxied object now has an removeAdvisor(int) method that Camel think it can invoke also.  However the BeanInfo#chooseMethodWithMatchingBody method doens't consider the MEP pattern (InOut etc). So when there is an Out pattern the method should not be void.,Okay got a better matching now considering the MEP pattern.  Will now skip void methods for out capable exchanges.. This issue can be closed  however would be nice with an exclude list of known AOP proxy methods. But its not a show stopper to cut a new 1.4.0 RC. 
Bug,Willem Jiang,2008-06-30T09:24:19+0000,1214817859,Need to update the build.xml of example-camel-cxf to support run the examples of camel transport and web service provider API.,The build.xml is updated.. 
Bug,Claus Ibsen,2008-06-30T12:57:16+0000,1214830636,I noticed a problem in JmsBinding.java. If Camel has read a JMS message from a queue and that message has a bean method specified in the header ("org.apache.camel.MethodName")  the method header will removed if that message is written to another queue. Here's the offending code:       protected boolean shouldOutputHeader(org.apache.camel.Message camelMessage  String headerName                                            Object headerValue)  {          return headerValue != null && !getIgnoreJmsHeaders().contains(headerName)                 && ObjectHelper.isJavaIdentifier(headerName);      }    "org.apache.camel.MethodName" fails the check isJavaIdentifier and is excluded from the headers written to the new message. I'm not sure the purpose of this check  but this might be an unintended side effect.   The call chain is something like this:   JmsProducer.process  JmsBinding.makeJmsMessage  JmsBinding.appendJmsProperties  JmsBinding.shouldOutputHeader   Update: Experimenting later with WebLogic's JMS  I noticed that WebLogic (9.2) does not allow this header name. Maybe this was the original motivation for this check. In order to be compatible with WebLogic  perhaps the method header name should changed to something like "CamelMethod". I believe this would correct both problems.,Yes the JMS spec doesn't allow dots in header names for JMS properties.  So either there should be some convention to substitute dots to underscore and reverse when receive the message (not nice). Or to use simpler header names without dots.. We should agree how to handle properties on exchanges. Maybe all the dot should be removed  even though we favor to use keys that has a package name of some sort.. Marat has a patch to the transactional client not working properly that uses an helper (ExchangeProperties) to access properties on exchanges. Using this indirection we can ensure that dots and other non wanted names is not used.  However we could break old application that still uses dots in the headers. Okay we should discuss this on the dev forum.. Also affected by 1.4.  Target for 1.5 to address this. We could for being backwards compatible add two headers  the original long name with package name with dots without packagename  And let the bean component look for the header in the two keys?  Later we could use the ExchangeProperty feature where we have a mean to address more generally the dot problem with JMS destinations.  Bruce are you in a desperate need for a fix? Or can you wait for 1.5?. Claus   I'd rather not resort to changing the Camel source myself. On the hand  I know a simple change that I could make (changing the method header name constant in the BeanInfo) that would fix the problem. Thanks!  Bruce. If you have a unit test or route example that demonstrates the bug then we will be faster to implement a fix for it.. There are some tickets for the JMS header exclusion stuff as using illegal characters in MQ / WebLogic is prohibited and what we should do to avoid this problem.. I am adding a workaround special for BeanProcessor so we can send org.apache.camel.MethodName over the wire  and being backwards compatible so end-users doesn't need to change their code.  The workaround is to send org.apache.camel.MethodName as org_apache_camel_MethodName and have BeanProcessor fallback to the underscore if the regular key wasn't found.. The workaround works but I am not satisfied. Asking for thoughts on this in the dev forum. We have the same problem for the FileComponent.  My best shot is to fix Camel headers only by  the key must start with "org.apache.camel" will use underscore and restore the key when Camel consumes the message again. Keep in mind that if the user is using WebLogic's JMS (at least WL 9.2)  a message with the header named "org.apache.camel.Method" will be rejected when you initially try to add it to a queue.  The problem that I was initially describing (the header getting stripped off when writing to second queue) would be true regardless of the implementation of the JMS queue (even ActiveMQ).  Off the top of my head  I'd think a solution would be to change the constant to use the underscores and change the logic in the BeanProcessor and BeanInfo to handle the method being specified by either "org.apache.camel.Method" or "org_apache_camel_Method".. Bruce that was also my first shot on the solution = hacking BeanProcessor to accept headers with underscore as well. But then again I wanted to try a generic solution that also works for the FileProducer and other areas in Camel where headers use package name.  So a solution to handle org.apache.camel specially would be ideal for a first shot solution. Or maybe even better replacing all dots with underscore and if the headerkey is a valid java identifier then its accepted.. Okay got it into the trunk now.  See JmsBeanMethodHeaderTest added to jms component unit tests And there is also one for the file example as well.  Notice only dot to underscore is supported and the header key must still be a java identifier to be accepted  so no other funny chars in the name is allowed.. Closing 1.4 issues. 
Improvement,Claus Ibsen,2008-07-01T09:26:37+0000,1214904397,When creating a route from File Camel starts working on the file before it is fully transferred  which results in an error. See this thread: http://www.nabble.com/Overall-notes-on-FTP-SFTP-component-td18166447s22882.html#a18198751,Target for 1.5. Important that Camel has good components for file  ftp etc. as they are still a major means of transport for integrations.. The same could apply for the plain File component.. See also this: http://www.nabble.com/CAMEL-250%3A-Still-having-probs-td18223318s22882.html. The same for FileConsumer  should not poll the file before it has access. Maybe a new option to set this strategy. I am adding a new option - consumer.exclusiveRead with values true|false that will only start polling the file if it has exclusive read to the file (= not in progress of being written).  I am opting for a default value of true so we don't poll files in progress. Anyone thoughts on this? I have implemented it for the regular FTP component. Will check the SFTP part later.. Comitted to trunk  http://svn.apache.org/viewvc?view=rev&revision=679990. The option has been renamed to: consumer.exclusiveReadLock and is default true in Camel 1.5. Closing all 1.5.0 issues. 
Bug,Willem Jiang,2008-07-01T20:03:50+0000,1214942630,A Jython expression used for example like this always returns null  which is now translated to false:  from("...").choice().when().jython("some expression").to(...)  For example  here's an expression that always evaluates to null/false:  request.headers['foo'] == 'bar'  To see this  look at the test PythonExpressionTest in the camel-script module.,I asked a Jython guy and here's what I got:  ---------  The Python syntax is correct  but the Jython script engine does not return the value of the expression from engine.eval. I think you need to put the value into the context. This is how it used to work pre-JSR  and a quick test show this still works.  In the following quick and dirty example  the output is always null  but the result.flag is getting set correctly.  ---------  import java.io.FileReader; import java.io.Reader; import java.util.HashMap; import java.util.Map;  import javax.script.ScriptEngine; import javax.script.ScriptException; import javax.script.ScriptEngineFactory; import javax.script.ScriptEngineManager;  public class ScriptEval {     public static void main(String[] args) throws Exception {         final ScriptEngineManager manager = new ScriptEngineManager();         final ScriptEngine engine = manager.getEngineByName("jython");          final MyRequest request = new MyRequest(args[0]);         engine.put("request"  request);         final EvalResult result = new EvalResult();         engine.put("result"  result);         final Reader script = new FileReader(args[1]);         System.out.printf("Output: %s\n"  engine.eval(script));         System.out.printf("Result value: %s\n"  result.getFlag());     } }  class MyRequest {     private Map<String  String> headers;      public MyRequest(final String value) {         headers = new HashMap<String  String>();         headers.put("console"  value);         headers.put("other_key"  "other_value");     }      public Map<String  String> getHeaders() {         return headers;     } }  class EvalResult {     private boolean flag;      public void setFlag(final boolean flag) {         this.flag = flag;     }      public boolean getFlag() {         return flag;     } }. A follow-up from Dave  my Jython guy. We'd obviously need to massage this a bit if we were going to go this way  but it's an option.  -----------  It figures that I found Invocable right after I sent that out. This works:  args[0] should be the value you want for request.headers['foo'] args[1] should be the name of the script file  JyScript.java import java.io.*; import java.util.*; import javax.script.*;  public class JyScript {     public static void main(String[] args) throws Exception {         final ScriptEngineManager manager = new ScriptEngineManager();         final ScriptEngine engine = manager.getEngineByName("jython");         final MyRequest request = new MyRequest(args[0]);         engine.put("request"  request);         engine.eval(new BufferedReader(new FileReader(args[1])));         final Invocable invocable = (Invocable) engine;         Object result = invocable.invokeFunction("is_console_header_value"  "bar");         System.out.printf("Result is: %s"  result);     } }  class MyRequest {     private Map<String  String> headers;      public MyRequest(final String value) {         headers = new HashMap<String  String>();         headers.put("foo"  value);         headers.put("other_key"  "other_value");     }      public Map<String  String> getHeaders() {         return headers;     } }  my_func.py def is_console_header_value(val):     return request.headers['foo'] == val. Jython engin.eval("print a") always return null  I got a way to walk around it by set the result value to result variable.  Please check the latest camel svn trunk for more information.. Willem  please add code comments that you do this deliberately for the phyton  jython engines - with the result stuff.  And a small cosmetic issue. Please uppercase the first letter when outputting to debugger.. And Willem  there is another jira ticket for script unit test is not running - you have fixed this now - great. You can close that ticket.. The Jython JSR-223 engine defaults to compiling code in "exec" mode. Changing this to "eval" mode allows Py.runCode() to return results to engine.eval()  if (isPython()) {     ScriptContext context = engine.getContext();     context.setAttribute("com.sun.script.jython.comp.mode"  "eval"  ScriptContext.ENGINE_SCOPE); }   CAMEL-655.patch.txt fixes ScriptBuilder.java and the unit tests. cool  I will take care of this patch.. Not critical for the 1.4 release  I suppose.. I think the patch resolved that issue  and I also committed it into the trunk. Now it is a port of camel 1.4. The patch is in the trunk now.. Closing 1.4 issues.. 
Improvement,Claus Ibsen,2008-07-02T04:17:32+0000,1214972252,Our extensive list of components needs to be checked for its state of current documentation standard in the wiki.  The should be checked for  	options 	headers they use/set 	pitfalls 	samples both java and spring XML 	see also 	etc    And whats the difference / relation to similar component (the http ones  the sql ones etc.),camel-jms  missing options:  jmsOperations DONE templateConnectionFactory DONE listenerConnectionFactory DONE acknowledgementMode DONE consumerType DONE pubSubNoLocal DONE cacheLevel DONE requestTimeout DONE replyToDeliveryPersistent DONE preserveMessageQos DONE requestMapPurgePollTimeMillis eagerLoadingOfProperties DONE alwaysCopyMessage DONE useMessageIDAsCorrelationID DONE replyToTempDestinationAffinity DONE replyToDestination DONE replyToDestinationSelectorName DONE  mapping between JMS and Camel  when sending DONE when receiving DONE  missing headers/properties  exchange and headers DONE  better samples  add some more java and spring DSL samples DONE. camel-core  Log component DONE Direct component DONE Seda component DONE VM component DONE Ref component DONE Timer component DONE Mock component DONE List component DONE DataSet component DONE Bean component DONE File component DONE. camel-mail DONE  Sample how to read attachment polled from the mailbox DOME. camel-ftp DONE. camel-mina DONE. camel-sql DONE. camel-jdbc DONE. camel-http DONE. camel-jetty DONE. The most important components is documented.. Closing all 2.0M2 tickets. 
Bug,Claus Ibsen,2008-07-02T13:19:52+0000,1215004792,Affected class: org.apache.camel.dataformat.csv.CsvDataFormat   Method "marshal" has a strange behaviour. The CSVConfig for the CSVWriter can not be set via setConfig  because "marshal" has this line:   CSVConfig conf = createConfig();    Therefore you can not use your own CSVConfig to adjust marshalling.   Fix proposal:   	remove method createConfig 	see unmarshaling with corresponding getter/setter,Bart  thanks alot for the bug report. It should be fixed now using:  CSVConfig conf = getConfig();   that will use the config from the setter if provided.. Closing 1.4 issues. 
Task,Claus Ibsen,2008-07-03T05:34:07+0000,1215063247,wiki documentation should be improved. An end-user had trouble using it.  	it is pure standard java SQL dependent (no spring etc.) 	structure of output object as list of maps  each map has a key for the columnname 	retrives rs.metadata 	that it must be on the producer side (...to) is a bit confusing  but it is in fact correctly as it can not run in the database  but end-users need a timer or somesort to kick it of once in a while,
Improvement,Willem Jiang,2008-07-03T10:40:11+0000,1215081611,In 1.3.0  XmppEndpoint.java and related classes use the smack 2.2.1 API  and have a getConnection() method that sets up and caches the xmpp connection and chat once when the endpoint is initialized. If the network connection to the xmpp server is subsequently lost  attempts to route throw an exception.  This makes use of this component on remote and roaming/wireless devices difficult.  Smack API 3.0.4+ (the only version available for "official" download right now) should auto-reconnect the XMPPConnection once it is created  reusing the same credentials from the current login() session  however the API is not a drop-in replacement  there are a few differences.  It also isn't in the maven repository yet - that maxes out at 2.2.1.,Michael thanks for the report and the maven investigations.  This is quite a problem that frameworks doesn't upgrades in the maven repos.. I probably should not be asking this here - however  is there a general architectural approach in camel for reconnecting or attempting to reinitialize a route that is failing due to an IO-type error or exception? I mean not just with the XMPP component but with components in general. It seems to me if certain errors occur "downstream"  such as the above failure to connect to the XMPP server  the entire route (i.e.: consuming the inbound endpoint) should/could be suspended until the route can be properly reestablished. Is this a feature that is there already that I am missing?. Yes please ask at the user forum. Much broader audience to shed some light on this matter.. Michael if you are able to find it Smack API on any maven repo that would be great. We need a maven repo where we can get the .jars from.. Hey  this is a working port of camel-xmpp to smack 3.0.4. I didn't get the maven repo stuff to work (as mentioned on the smack forum - see comments in the pom.xml) - need to download it manual and tweak the local maven repo. i added a todo for the nickname stuff. think it would be nice to add the nickname to the room uri (like room1@foo.com/dude) and parse it when consuming the room. the code works with openfire 3.5.1/2. i will submit new changes as patches here  too  and hereby grant all rights of the patch code to ASF.  hope the patch will help and are appreciating comments and more suggestions  greets freetwix  ps: tried to be javaesk though on the ruby path these days .... Hi Freetwix  The "_amq" what does it really do? Do you have a link to some documentation that explains this "feature"?. Wow  that was quick  thanks Claus. I looked for a maven repo with the new smack API and could not find one. How would one get it added to the main repo?. I do think our friends at SeriviceMix have a maven repo where we could have the smack hosted.  But no promises. In fact we have other components that hang on older .jars because sadly the central maven repos out there tend to not get updated. So its a pain in the ass to find a decent maven repo that host the jars.. hey claus   the '_amq' is just an extension to the username providing a unique nickname of the amq user in the muc. a nickname in a muc needs to be unique  else an exception will be raised. you found the point what i meant by 'think it would be nice to add the nickname to the room uri (like room1@foo.com/dude) and parse it when consuming the room.'. it would be ok to just use the username  too - it was just in my current project that the same username already entered the muc and i really needed another nick for the camel user. i just recommend the smack sources for documentation  and sorry  the '_amq' feature wasn't really documented at all.  greets  freetwix. Nice job Michael  I have a question about the fragment:  if (shouldOutputHeader(exchange  name  value)) { + // BUG? + if (value != null && shouldOutputHeader(exchange  name  value)) {  Does it cause errors having a header without value? I can imagine situation when it matters just the fact that header is in the message and there is no need to put any value into it. Or indication of empty set.. Hey Vadim   the problem is the serialization of null which will cause an error.. Hmm  may be sending empty string is possible? It may cost a lot of time for user to understand why header vanishes.. Okay the smack API is somewhere on a maven repo  <?xml version="1.0" encoding="UTF-8"?><project> <modelVersion>4.0.0</modelVersion> <groupId>org.igniterealtime.smack</groupId> <artifactId>smack</artifactId> <version>3.0.4</version> </project>. I think we need the good servicemix guys to put smack on their repo. There are two artifacts needed: <artifactId>smack</artifactId> and <artifactId>smackx</artifactId>  Gertv will look into adding the jars to the servicemix maven repo later.. Artifacts org.igniterealtime.smack:smack:3.0.4 and org.igniterealtime.smack:smackx:3.0.4 have been added to the servicemix repo.. Thanks Gert. I will modify the pom.xml so we grab these new babies.  And I guess Vadim  Michael or other can help upgrade the java code in camel-xmpp if anything is needed.. BTW: If anyone beats me to it feel free to modify the pom.xml so we are using 3.0.4 that can be resolved in the servicemix repo. Check out the saxon component where the servicemix repo is added as a maven repo.. Anyone up for the task of creating a patch for the upgrade to smack 3.0.4. Michael  sorry we have changed the camel-xmpp quite a bit lately so your original patch must be redone.  We have a maven repo with the 3.0.4 jars now.  1) Add this to pom.xml <repositories> <!-- ServiceMix repo --> <repository> <id>servicemix</id> <name>Apache ServiceMix Repository</name> <url>http://svn.apache.org/repos/asf/servicemix/m2-repo</url> </repository> </repositories>  2) Upgrade to 3.0.4 in pom.xml <dependency> <groupId>org.igniterealtime.smack</groupId> <artifactId>smack</artifactId> <version>3.0.4</version> </dependency> <dependency> <groupId>org.igniterealtime.smack</groupId> <artifactId>smackx</artifactId> <version>3.0.4</version> </dependency>  Then you are set. You will get some compilation errors since the API in 3.0 is different than 2.x.. I just manually apply the patch  please try it out  http://svn.apache.org/viewvc?rev=683640&view=rev. Closing all 1.5.0 issues. 
Improvement,Willem Jiang,2008-07-03T12:44:02+0000,1215089042,We should provider better documentation how to try the osgi example. It can be a bit tricky to install bundles in an osgi container and start it up  and see where it actually logs it output / progress etc.  And the MANIFEST.MF files on this example looks a bit odd since it doesn't import any camel-core or camel-spring related.,See nabble: http://www.nabble.com/OSGI-example.-Is-it-really-using-osgi--td18996399s22882.html  Christian wants to help out. We could use servicemix4's kernal module to load the camel bundles. And the features.xml will help us to load the other bundles those camel-example-osgi needs.. Willem   On http://gertvanthienen.blogspot.com/2008/09/servicemix-kernel-and-camel.html you can find a basic rundown on how to get Camel working with ServiceMix Kernel 1.0.0. You can find the command to install the camel-example-osgi example from the kernel console in the comments.  For the features.xml  there already is a ServiceMix JIRA issue for creating that (SMX4-49). We have a SNAPSHOT for it that contains a subset of the Camel components right now – available at http://people.apache.org/maven-snapshot-repository/org/apache/servicemix/camel/org.apache.servicemix.camel.features/4.0-m2-SNAPSHOT.  Regards   Gert. Cool  we just need to add this into wiki page of camel now.. Thanks for Gert's great blog post   I just copy it into the camel wiki page http://cwiki.apache.org/confluence/display/CAMEL/How+to+run+Camel+in+a+osgi+container. Just wondering if any actually tried the instructions on the Wiki and that blog - it didn't work for me. Instead I had to  osgi install -s mvn:org.apache.geronimo.specs/geronimo-activation_1.1_spec/1.0.2 osgi install -s mvn:org.apache.servicemix.specs/org.apache.servicemix.specs.stax-api-1.0/1.1.0 osgi install -s mvn:org.apache.servicemix.specs/org.apache.servicemix.specs.jaxb-api-2.1/1.1.0 osgi install -s mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.jaxb-impl/2.1.6_1 osgi install -s mvn:org.apache.camel/camel-core/1.5.0 osgi install -s mvn:org.springframework/spring-tx/2.5.5 osgi install -s mvn:org.apache.camel/camel-spring/1.5.0 osgi install -s mvn:org.apache.camel/camel-osgi/1.5.0  #osgi install -s mvn:org.apache.camel/camel-example-osgi/1.5.0 (can also install from the file system of course)  as per the instructions here:  http://servicemix.apache.org/kernel/1-quick-start.html. Hi Christopher   Thanks for the verification  since camel 1.5.0 is released. we need to update the wiki page to show the installation of camel 1.5.0. It is a wiki page   please feel free to modify it   Willem. Changing to fix v1.5.1. Thanks to Charles tutorial we have more documetation with OSGi.  http://activemq.apache.org/camel/tutorial-osgi-camel-part1.html. I have updated the wiki. Closing all 1.6.0 issues. 
Improvement,James Strachan,2008-07-03T19:17:34+0000,1215112654,,see the documentation here  http://cwiki.apache.org/CAMEL/pipes-and-filters.html. 
Improvement,James Strachan,2008-07-03T19:18:26+0000,1215112706,,
Improvement,James Strachan,2008-07-03T19:19:32+0000,1215112772,,There's now a TransactionErrorHandlerBuilder which has a configurable RedeliveryPolicy. You have to set the spring TransactionTemplate on this new error builder before it works                  TransactionTemplate tt = context.getRegistry()                     .lookup("PROPAGATION_REQUIRED"  TransactionTemplate.class);                 Policy required = new SpringTransactionPolicy(tt);                  // create the transational error handler                 TransactionErrorHandlerBuilder transError = new TransactionErrorHandlerBuilder();                 transError.setTransactionTemplate(tt);                  // use this error handler instead of DeadLetterChannel that is the default                 errorHandler(transError);                  from("direct:okay").policy(required).                     setBody(constant("Tiger in Action")).beanRef("bookService").                     setBody(constant("Elephant in Action")).beanRef("bookService");   Maybe we could have it accept a SpringTransactionPolicy object where it can get hold of the template.  We could also create a DSL method on SpringRouteBuilder so you could do something like                  errorHandler(transactionErrorHandler(required));. But come again how many end users knows there is a SpringRouteBuilder. They are so used to RouteBuilder when they use Java DSL routing.. James I found a small glitch with the new error handler and the spring TransactionInterceptor.  Its the state of previous rollback that gets set to a wrong condition if your pipeline has more than one route. As the TransactionalClientDataSourceTest has two routes where its the 2nd route that fails with a runtime exception then the previous rollback flag is wrong.  It goes like this  1st route = OK => previous rollback flag => false 2nd route = Fail => previous rollback flag => true  And since I have a route that is (from above  the stuff with the books) the setBody node is always going to be OK so there is never going to be any delay in this transaction.  So we need some more clever feature to have it sleep once during a route path.  You can try the TransactionalClientDataSourceTest its rollback test that can demonstrate that there is never a delay.. I committed some improvements:  Java DSL builder method just like the DLC so you can create transaction error handler in neat java syntax Added missing builder method for new option in DLC Added TODO for the bug above with the delay Improved unit test for wiki documentation. Sorry the DataSource example is actually bad as the direct component doesn't retry as its backend system hasn't a transaction manager such as JMS. So I am trying a sample at the camel-jms component instead.. Claus  James  could we move this to 1.5 so I can start building the kit  or you're almost done with it?. Hadrian. Yes its fine to move it to 1.5. I think this one will take some time to get right  so no time to get it in 1.4. Closing 1.4 issues.. 
Bug,Willem Jiang,2008-07-03T21:50:24+0000,1215121824,Operattion namespace never gets set.  As the result  invoking an operation that has a different namespace than the service will not work.,quick fix attached. Williem have applied the patch with thanks. 
Task,Unassigned,2008-07-04T07:30:54+0000,1215156654,I do think we should have a more clear picture how Camel kick-starts itself. Currently you can do it in several ways according to your needs and Camel is pretty smart in that regard.  You can start Camel with:  	Standalone with your own java main code 	Using camel-spring Main class 	From maven tools 	Spring configured (a normal use-case) 	Web-app with spring configured 	OSGi activator (or how does it do this?)    And on a related note as well  how to easy do unit testing of your own camel integrations  	standard junit 	using camel-core-tests 	using camel-spring-tests 	using spring unit tests with all its annotations etc 	etc.,Why is this "Won't Fix"?. 
Improvement,Willem Jiang,2008-07-04T08:46:38+0000,1215161198,Getting hold on the http session can be important for end-users  so it makes sense to support this out-of-the-box as easy as possible.,Its a good idea to add a link to the forum request: http://www.nabble.com/servlet-issues-with-camel..-td18261581s22882.html. http://svn.apache.org/viewvc?rev=674401&view=rev Also updated the wiki page.. Closing 1.4 issues.. 
Bug,Claus Ibsen,2008-07-04T10:24:07+0000,1215167047,The new changes to the transactional client EIP pattern to let Camel support spring based TX does a trick to the DLC to set its max redeliveries to 1 if in transacted mode. This causes the normal DLC code to be executed and it will report that in case of failures that its being handled by its error handler  this is normally to move it to an error queue. This of course doesn't happen. The DLC should be short cutted to let the underlying system handling the redelivery without the DLC infecting it currently.,Maybe a better approach than my current fix is to not add the DLC to the route node in questions that are under transactional control somehow with the policy element?. BTW I've just added a TransactionalErrorHandlerBuilder...  https://issues.apache.org/activemq/browse/CAMEL-663  that never retries - but just rollsback the transaction which might be better for transacational routes.  You can now use XML to specify this on the <camelContext> <route> or a <pipeline> now https://issues.apache.org/activemq/browse/CAMEL-662 https://issues.apache.org/activemq/browse/CAMEL-661. Ah maybe we should try switching whatever error handler the node has currently set (ie DLC as default) to the transaction one instead?. The new TransactionErrorHandlerBuilder is in camel-spring and the others is in camel-core.. Yeah - its in camel-spring as it depends on spring. We should have a ponder for 1.5 or 2.0 as to whether Spring transaction based error handler - or a retry/deadletter is the best default. Fixed with CAMEL-663 and that end-users should switch error handler to the transaction one instead of the default.  Later as James write we can change the behavior in Camel 1.5 or 2.0. Also the wiki documentation for the transactional client has been updated with this new error handler.. 
Improvement,Claus Ibsen,2008-07-04T12:19:09+0000,1215173949,Currently you have to setup the transaction demarcation in the spring xml file as:      <bean id="PROPAGATION_REQUIRED" class="org.apache.camel.spring.spi.SpringTransactionPolicy">         <constructor-arg>             <bean class="org.springframework.transaction.support.TransactionTemplate">                 <property name="transactionManager" ref="jmsTransactionManager"/>             </bean>         </constructor-arg>     </bean>    to be able to use the policy from XML directly in the tag:              <camel:policy ref="PROPAGATION_REQUIRED"/>    We should support a neater syntax without the nested bean and constructor args.,You can now do      <!-- policy for required transaction used in our Camel routes -->     <bean id="PROPAGATION_REQUIRED" class="org.apache.camel.spring.spi.SpringTransactionPolicy">         <property name="transactionManager" ref="txManager"/>     </bean>   And use it in Java DSL directly                  SpringTransactionPolicy required = context.getRegistry()                     .lookup("PROPAGATION_REQUIRED"  SpringTransactionPolicy.class);  ...     from("xxxx").policy(required).to("yyyy");   Or you can avoid the lookup code above and use the bean DSL to lookup the spring bean     from("xxxx").policy(bean(Policy.class  "PROPAGATION_REQUIRED")).to("yyyy");. The propogationBehaviourName is also a propery  see the wiki documentation http://activemq.apache.org/camel/transactional-client.html. 
Improvement,Unassigned,2008-07-04T12:51:50+0000,1215175910,if using exponential backoff we might wanna cap the redelivery delay,
Sub-task,Claus Ibsen,2008-07-04T13:07:59+0000,1215176879,In lack of real spring XML tags for all the DLC stuff we now have a ref attribute so you can use plain spring beans for the error handler.,Also document that the transaction error handler can be build / configured in the Java DSL DONE. Documented here (in the bottom) http://activemq.apache.org/camel/transactional-client.html  And some parts here: http://activemq.apache.org/camel/error-handler.html. 
Task,Gert Vanthienen,2008-07-04T14:43:19+0000,1215182599,Camel HTTP still depends on 1.3.1 while everything else uses 1.3.2,Fixed in http://svn.eu.apache.org/viewvc?view=rev&revision=674070. Closing 1.4 issues. 
Task,Claus Ibsen,2008-07-04T18:48:10+0000,1215197290,The pom.xml uses hardcoded versions  but should use the one from the uber pom.xml,
Task,Willem Jiang,2008-07-05T03:24:27+0000,1215228267,We could put the dependency module's version into the camel parent pom dependency manager section. In this way the child module can specify the dependency module without version.,Just cleaned up the spring modules dependencies.. Willem. Bamboo is not failing with 6 unit tests. Looks like a mock FTP server uses some backport jars that isn't there anymore.. Sorry   I will fix these error ASAP.. done.. 
Improvement,Unassigned,2008-07-05T15:51:09+0000,1215273069,See this documentation: http://activemq.apache.org/camel/how-do-i-use-spring-property-placeholder-with-camel-xml.html  We should try to support the spring property placeholders in full.,Requires Spring 3.0. 
Bug,Claus Ibsen,2008-07-06T07:56:03+0000,1215330963,I am working to improve the intercept DSL documentation and the new stop() type  This code fails with a NPE       public void testInterceptor() throws Exception {         MockEndpoint mockOk = getMockEndpoint("mock:ok");         mockOk.expectedBodiesReceived("Camel in Action");          template.sendBodyAndHeader("direct:order"  "Camel in Action"  "user"  "James");          mockOk.assertIsSatisfied();     }      protected RouteBuilder createRouteBuilder() throws Exception {         return new RouteBuilder() {             public void configure() throws Exception {                 intercept(header("user").isEqualTo("test")).to("mock:test").stop();                  from("direct:order").to("mock:ok");             }         };     }   java.lang.NullPointerException 	at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:48) 	at org.apache.camel.processor.Interceptor.process(Interceptor.java:41) 	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:69) 	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:155),See ChoiceProcessor#process. 
Sub-task,Claus Ibsen,2008-07-06T07:58:36+0000,1215331116,If the intercept has a predicate it seems as if it doesn't proceed by default or the like.       public void testInterceptor() throws Exception {         MockEndpoint mockTest = getMockEndpoint("mock:test");         mockTest.expectedBodiesReceived("Camel in Action");          MockEndpoint mockOk = getMockEndpoint("mock:ok");         mockOk.expectedBodiesReceived("Camel in Action");          template.sendBodyAndHeader("seda:order"  "Camel in Action"  "user"  "test");          mockTest.assertIsSatisfied();         mockOk.assertIsSatisfied();     }      protected RouteBuilder createRouteBuilder() throws Exception {         return new RouteBuilder() {             public void configure() throws Exception {                 // TODO: enable this with predicate instead of the one below fails the unit test                 //intercept(header("user").isEqualTo("test")).to("mock:test");                  // this without predicate success                 intercept().to("mock:test");                  from("seda:order").to("mock:ok");             }         };     },Okay its the InterceptType#createProxy that has a flaw when there is a predicate it doesn't add the default proceed at the otherwise in the answer.. See failing unit test InterceptorPredicateProceedAndStopTest method: testInterceptorWithPredicate  It has a TODO statement  so its easy to find in IDEA. Without proceed: dsl: intercept(header("user").isEqualTo("test")).to("mock:test"); answer: Intercept[[Choice[ [When[ Expression[null] -> [org.apache.camel.model.ProceedType@1226a77]]] Otherwise[[To[mock:test]]]]]]  With explicit proceed: dsl: intercept(header("user").isEqualTo("test")).to("mock:test").proceed(); answer: Intercept[[Choice[ [When[ Expression[null] -> [org.apache.camel.model.ProceedType@1226a77]]] Otherwise[[To[mock:test]  org.apache.camel.model.ProceedType@1226a77]]]]]. Okay got it covered - I think.  In a route like this  intercept(header("foo").isEqualTo("bar")).to("mock:b").stop();   All messages that fails the predicate test (foo != bar) is now proceeded by default. This is that if (foo == bar) then its routed to mock and stopped.  This is the most intuitive.  To stop all don't use a predicate.  intercept().to("mock:b").stop();. Fixed in revision #674289. See also http://activemq.apache.org/camel/dsl.html  The section "Changes in Camel 1.4".. 
Bug,Claus Ibsen,2008-07-06T17:09:24+0000,1215364164,Currently the BAM example is commented out for the distribution. As Claus said probably as it does not work at the moment. Does anyone know what exactly goes wrong with the example?,On my trunk I get this output  [INFO] [camel:run] [pache.camel.spring.Main.main()] Main                           INFO  Apache Camel 1.4-SNAPSHOT starting [pache.camel.spring.Main.main()] Main                           INFO  Generating DOT file for routes: D:\project\camel\examples\camel-example-bam\target/site/cameldoc for: org.apache.camel.spring.SpringCamelContext@bdb6ae with name: camel Failed to load preferences.  Proceeding with defaults:  [         ActivityMonitorEngine] BamFailures                    ERROR Exchange[Message: ActivityState[3 on ProcessInstance[p1] Activity[1 name: file:src/data/invoices?noop=true]]] [         ActivityMonitorEngine] BamFailures                    ERROR Exchange[Message: ActivityState[5 on ProcessInstance[p2] Activity[1 name: file:src/data/invoices?noop=true]]] [         ActivityMonitorEngine] BamFailures                    ERROR Exchange[Message: ActivityState[6 on ProcessInstance[p3] Activity[1 name: file:src/data/invoices?noop=true]]] Stopping. Revision: 666227 Author: jstrachan Date: 19:33:36  10. juni 2008 Message: removed the BAM examples from the distro until we can figure out how to get the example working again   Modified : /activemq/camel/trunk/apache-camel/src/main/descriptors/unix-bin.xml Modified : /activemq/camel/trunk/apache-camel/src/main/descriptors/windows-bin.xml. James any update on this? Can you try again. It seems fine on my windows laptop. Any mac / unix out there to try it on their platform?. Claus   Doesn't this output report three missing files now instead of just one (for the missing invoiceB.xml) or am I just mis-interpreting the log output? Only invoiceB.xml is missing for purchase order p2 and these errors seems to indicate BAM failures for all three PO/Invoice combinations.  Regards   Gert. Okay got the sample to work again.. Readded the bam-example in the bin dist  D:\project\camel\apache-camel>svn commit --message "CAMEL-677: BAM example now works again." Sending apache-camel\src\main\descriptors\unix-bin.xml Sending apache-camel\src\main\descriptors\windows-bin.xml Transmitting file data .. Committed revision 676027.. Closing 1.4 issues.. 
Task,Willem Jiang,2008-07-07T02:39:16+0000,1215398356,There are some tests cases are commented out in the itest/pom.xml    we should clean them up.,http://svn.apache.org/viewvc?rev=674384&view=rev. 
Bug,Claus Ibsen,2008-07-07T05:05:04+0000,1215407104,If you have a route like this: from("jms:queue").to("bean:testBean").to("bean:testBean")  the second instance of the processor "to(bean:testBean)" will fail to register with mbean server because of duplicated objectname.  As a result  only one instance of the "to(bean:testBean)" processor is visible to mbean server and we won't set the performance counter of the second instance.   http://www.nabble.com/Starting-Camel-context-causes-JMX-exception.-tp18304692s22882p18304692.html,Patch to include node id in processor's objectname. Since node id is an option id  instrumentation agent adds instance id into the objectname as well.. Applied patch with thanks to William Tam.. 
Improvement,Claus Ibsen,2008-07-07T05:06:42+0000,1215407202,We should more clearly document that some of the annotations requires the use of came-spring to let it be injected and setup.  http://activemq.apache.org/camel/bean-integration.html  eg. the really nice MessageDriven is in camel-core but only injected by the camel-spring component. We should document this more clearly.,agreed.  btw the main reason for many of the annotations all being inside camel-core is so that folks can use other Dependency Injection containers - like Guice to perform the injections. I think this is all now covered in the bean integration section http://activemq.apache.org/camel/bean-integration.html. Closing 2.0m1 tickets. 
Improvement,Willem Jiang,2008-07-07T07:58:37+0000,1215417517,Current camel:run plugin will take the duration as the read only option    we may need to set the duration sometime.,http://svn.apache.org/viewvc?rev=674415&view=rev. Closing 1.4 issues.. 
Wish,Unassigned,2008-07-07T09:34:24+0000,1215423264,Hi Folks  Can we try to create a FAQ section like some other open source projects?  I need to find the binary dist. of Camel.1.4  but don't know where it is. The links I tried aren't working.  I guess others might try the same thing and they would have the same question.,The FAQ is here: http://activemq.apache.org/camel/faq.html  The download page where to find binaries: http://activemq.apache.org/camel/download.html  Camel 1.4 has not been released yet.  However RC2 can be downloaded from here (binaries): http://people.apache.org/~hadrian/apache-camel-1.4.0-RC2/maven2/org/apache/camel/apache-camel/1.4.0/  look into the camel-dev mailing list for announcements of new RC distributions.. See also contributing: http://activemq.apache.org/camel/contributing.html. Mange tak.  Jeg er en dansker som i oejeblikket arbejder her in Holland.  Jeg har arbejdet in Canada og USA for de sidste 10 aar.  Hvordan er job mulighederne i edb branchen i Danmark?  Med Venlig Hilsen  George Titan  _________________________________________________________________. Hi George  The job market in Denmark is looking very positive (from employee) . Basically if you have good skills you can park your car where you want  Okay that is a bit overstating but I am sure most companies is always on the look out for new talents and bright people.  So whenever you fell like it we have jobs at home  And the real estate market is also in your favor as the prices has been cut down with 10-25% at least so you should be able to buy/rent a place to live.. cool  so I guess I'll be on my way. I have commited myself to a project until December and so I figure I'll be here until then.  I got a perm. job here in Holland after 10 days coming here from Munich. I just wanted to experience central Europe for a while. As for Holland  I think Holland has a lower living standard than Denmark. The food is very bad. Weather is terrible  and quality of service is irritating at best.  Sincerely George Titan  _________________________________________________________________. 
Bug,Gary Tully,2008-07-07T09:58:33+0000,1215424713,Hi.  I'm using ActiveMQ 5.1 together with Spring's DefaultMessageListenerContainer to enable MDPs. I'm using the redeliveryPolicy to enable redelivery on failures during consumption of a message. ActiveMQ configuration looks like this:      <camelContext id="camel" xmlns="http://activemq.apache.org/camel/schema/spring">          <route errorHandlerRef="deadLetterErrorHandler">                 <from uri="activemq:NEW" />         </route>     </camelContext>   <bean id="deadLetterErrorHandler" class="org.apache.camel.builder.DeadLetterChannelBuilder">     <property name="redeliveryPolicy" ref="redeliveryPolicyConfig"/> </bean>  <bean id="redeliveryPolicyConfig" class="org.apache.camel.processor.RedeliveryPolicy">     <property name="maximumRedeliveries" value="4"/>     <property name="initialRedeliveryDelay" value="30000"/>     <property name="useExponentialBackOff" value="true"/>     <property name="backOffMultiplier" value="2" /> </bean>   Now if a failure occurs  the configured delay isn't used on the first redelivery attempt. Instead redelivery takes place immediately after the failure occured. This sounds odd to me  since the property is even called initialRedeliveryDelay . I know that maybe this was caused due to the following issue:  https://issues.apache.org/activemq/browse/AMQ-1032  In my opinion immediately redelivery isn't very useful in most cases. If a failure occurs  it won't be fixed some ms later . So my suggestion is (in respect to AMQ-1032) to have two options:  initialRedeliveryDelay redeliveryDelay  So both configurations would be possible. For AMQ-1032 just configure initialRedeliveryDelay to 0. Otherwise just take the redeliveryDelay as initialRedeliveryDelay to get what I want .  Does this make sense?,I have just tried an unit test and it sleeps for 30 seconds. [ main] RedeliveryPolicy DEBUG Sleeping for: 30000 millis until attempting redelivery  And then on the 2nd [ main] RedeliveryPolicy DEBUG Sleeping for: 60000 millis until attempting redelivery  Your route doesn't do anything with the received message from activemq:NEW. How do you actually trigger the failure and the redelivery?. I have tried with a jms example and it works in the unit tests in the source code.  Are you sure you have Camel 1.4-SNAPSHOT in ActiveMQ where you run your project?. Hi Claus.  Meanwhile I've realized that the problem is a misunderstanding on my side what camel is supposed to do. I thought I can configure the redelivery behavior of ActiveMQ within the camelContext as part of the acivemq.xml configuration on a per destination basis. What I haven't mentioned is  that my listener/consumer for the queue isn't configured within camel or activemq but in a separate spring baked application. What I now have realized is  that I have to consume a message via camel to get it's routing/mediation support (including redelivery features) - now it's crystal clear to me (or not?). So I configured redeliveryPolicy on a ActiveMQConnectionFactory on my spring baked application and the settings are working fine now.  Sorry for mixing things up.  Thanks for you help.  Regards  Veit. Hi.  Sorry for reopening but the redeliveryDelay problem still exists. But it seems no camel problem then because I'm not using camel anymore  instead the redeliveryPolicy on the AQConnectionFactory.  So  should that be moved to the AQM project then? There I'm using AMQ 5.1.0 (Camel 1.3).. Hi Veit  Yes please open a ticket on the ActiveMQ project if its solely an ActiveMQ problem. http://issues.apache.org/activemq/browse/AMQ. Veit. I managed to move the issue from Camel to ActiveMQ project.. Veit. Can you add your new configuration etc. for the ActiveMQ that demonstrates the problem? I am sure the ActiveMQ comitters want to see your configuration file and what the problem is you have.. Thanks Claus.  Sure  here's my applicationContext.xml:  <?xml version="1.0" encoding="UTF-8"?> <beans xmlns="http://www.springframework.org/schema/beans" xmlns:amq="http://activemq.apache.org/schema/core" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core-5.1.0.xsd">  <!-- ActiveMQ destinations to use --> <bean id="destination" class="org.apache.activemq.command.ActiveMQQueue" autowire="constructor"> <constructor-arg value="NEW" /> </bean>  <bean id="jmsFactory" class="org.apache.activemq.ActiveMQConnectionFactory"> <property name="brokerURL"> <value>discovery:multicast://test</value> </property> <property name="redeliveryPolicy"> <ref local="redeliveryPolicy" /> </property> </bean> <bean id="redeliveryPolicy" class="org.apache.activemq.RedeliveryPolicy"> <property name="initialRedeliveryDelay" value="10000" /> <property name="maximumRedeliveries" value="4" /> <property name="useExponentialBackOff" value="true" /> <property name="backOffMultiplier" value="2" /> </bean>  <!-- Spring JMS Template --> <bean id="myJmsTemplate" class="org.springframework.jms.core.JmsTemplate"> <property name="connectionFactory"> <!-- lets wrap in a pool to avoid creating a connection per send --> <bean class="org.springframework.jms.connection.SingleConnectionFactory"> <property name="targetConnectionFactory"> <ref local="jmsFactory" /> </property> </bean> </property> </bean>  <bean id="consumerJmsTemplate" class="org.springframework.jms.core.JmsTemplate"> <property name="connectionFactory" ref="jmsFactory"/> </bean>  <!-- and this is the message listener container --> <bean id="jmsContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer"> <property name="connectionFactory" ref="jmsFactory"/> <property name="destination" ref="destination"/> <property name="messageListener" ref="messageListener" /> <property name="concurrentConsumers" value="100" /> <property name="maxMessagesPerTask" value="1" /> <property name="sessionTransacted" value="true" /> </bean> <!-- this is the Message Driven POJO (MDP) --> <bean id="messageListener" class="com.foo.bar.jms.Consumer" />  </beans>  The messageListener will create a RuntimeException on the onMessage method to produce an error. The first redelivery attempt occurs immediately  without respect to the initialRedeliveryDelay.. Redelivery policy doesn't work with Spring's org.springframework.jms.listener.DefaultMessageListenerContainer at all  That happens  because DefaultMessageListenerContainer closes the consumer  session and connection  and do the reconnect if message listener throws exception  and of course previous delivery timepoint is empty in the new consumer.  It happens  because DefaultMessageListenerContainer doesn't know what a cause of JMSException. Maybe it was disconnection... and ConnectionFactory haven't reconnection logic...  I wrote my own simple MessageListenerContainer  that doesn't do reconnection if JMSException is thrown  because ActiveMQConnectionFactory has reconnection logic. I'm sorry to correct you  but it IS working with the above configuration. All parameters I change within the redeliveryPolicy bean definition affecting the redelivery within the sping bean! The only thing that doesn't work correctly (or needs enhancement) is the initial redelivery.. I don't know how do you reach that  but if I use DefaultMessageListenerContainer all redeliveries happens immediately  not first only.  If any Execption in MessageListener happens it always closes the connnection  DefaultMessageListenerContainer.java private class AsyncMessageListenerInvoker implements SchedulingAwareRunnable {  ....      catch (Throwable ex) {     clearResources();  ...       }  ... }   private void clearResources() {     if (sharedConnectionEnabled()) {     synchronized (sharedConnectionMonitor) { 	JmsUtils.closeMessageConsumer(this.consumer); 	JmsUtils.closeSession(this.session);         }     }     else { 	JmsUtils.closeMessageConsumer(this.consumer); 	JmsUtils.closeSession(this.session);     } 	this.consumer = null; 	this.session = null; }. I don't know. Perhaps configuration  ActiveMQ 5.1.0 or Spring 2.5.5. Perhaps someone fixed/enhanced something .. @Dima:  Now  I can confirm your findings! After I set the jmsTransactionManager in my config (not just sessionTransacted=true like before) I encounter immediate redelivery without delay/backoffs  too:  <bean id="jmsContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer"> <property name="connectionFactory" ref="jmsFactory"/> <property name="destination" ref="destination"/> <property name="messageListener" ref="messageListener" /> <property name="concurrentConsumers" value="2" /> <property name="maxMessagesPerTask" value="1" /> <property name="sessionTransacted" value="true" /> <property name="transactionManager" ref="jmsTransActionManager" /> </bean>  After I set this  the MesageListener also checks connections actively - which is very noisy. So in the end: is this all expected behavior? I'm a bit confused.... transactions change redelivery semantics for a consumer. I think you are seeing expected behavior if the session is transacted considering https://issues.apache.org/activemq/browse/AMQ-1032  If this is not the case  a complete Junit tests case with a listener that throws an exception would help. There are a bunch of spring test cases in the activemq-core module that you could use as a template. resolving pending junit test case that can show otherwise.. additional clarification. There is indeed an immediate retry with the redelivery flag set  this allows an app to immediately deal with a redelivered message (one having the redelivered flag set) if it needs to. For subsequent redeliveries the delay semantics kick in. This was implemented in https://issues.apache.org/activemq/browse/AMQ-1032 hence this is working as designed. Fix implemented in r982903  initialRedeliveryDelay is not respected  set it to 0 to have immediate redelivery. Additional deliveryDelay (default = 1000) which controls subsequent redelivery delay if initialRedeliveryDelay==0. going to fix this  make it configurable. done. 
Improvement,Gert Vanthienen,2008-07-07T12:41:32+0000,1215434492,We should upgrade to the 1.1.1 version of the different Geronimo specs jar – they include the necessary OSGi metadata.,Apparently  all the Geronimo spec jars have their own release cycle. A fix is in http://svn.eu.apache.org/viewvc?view=rev&revision=674495. I didn't think it made any sense to keep a separate <properties/> entry for every spec if they are just going to be used once  but feel free to let me know if you still prefer having them around instead of this solution.. 
Bug,Claus Ibsen,2008-07-08T11:05:13+0000,1215515113,See the user forum: http://www.nabble.com/Fwd%3A-Using-Apache-Camel-as-Transport-for-Apache-CXF-with-SOAP-over-JMS-td18314917s22882.html  Basically JmsBinding should check for primitives before setting the object property on the jms message.,Will allow primitive types  strings  numbers etc.  But objects will be skipped 2008-07-08 13:47:29 843 [main ] DEBUG JmsBinding - Ignoring non primitive header: order of class: org.apache.camel.component.jms.issues.DummyOrder with value: DummyOrder  {orderId=333  itemId=4444  quantity=2}. Fixed in Revision #674786. 
Bug,Willem Jiang,2008-07-08T11:05:57+0000,1215515157,See user forum: http://www.nabble.com/Fwd%3A-Using-Apache-Camel-as-Transport-for-Apache-CXF-with-SOAP-over-JMS-td18314917s22882.html,Lets see how much Willem makes before the next 1.4 RC . Set the fix to 1.4.. FYI  there are some discussions about the protocol header. http://www.nabble.com/-PROPOSAL--ProtocolMessage-to18078001s22882.html#a18078001. The patch and test case are all in the trunk now.. Closing 1.4 issues.. 
Improvement,Gert Vanthienen,2008-07-09T11:22:04+0000,1215602524,This will allow camel-saxon to be used in an OSGi environment  using the ServiceMix bundle for Saxon 9.0 to provide the Saxon classes,Fixed in http://svn.eu.apache.org/viewvc?view=rev&revision=675184. 
Bug,Willem Jiang,2008-07-10T03:22:28+0000,1215660148,,sorry  not complete the subject of this issue  and I have no permission to edit it  the subject of this issue should be "process method of BeanProcessor should check ExchangePattern before set out message" this part if (value != null)  { exchange.getOut().setBody(value); }  the exchange.getOut() might return null if the ExchangePattern is InOnly of this Exchange  so get NPE here  shoud be if (value != null && !exchange.getPattern().equals(ExchangePattern.InOnly))  { exchange.getOut().setBody(value); }. Ah good the patch uses outCapable check  Note: We can use getOut(true) to force the out message being created if not exists.  Could we have a unit test that demonstrates the NPE bug that this patch fixes? That would be awesome.. Applying this patch help me find out a CxfExchange bug in camel-cxf which do not copy the change pattern  I am still working on it.. Target for 1.4. I found a side effect for this patch.  I do think the code should be like this:              if (value != null) {                 if (exchange.getPattern().isOutCapable()) {                     // force out creating if not already created (as its lazy)                     if (LOG.isDebugEnabled()) {                         LOG.debug("Setting bean invocation value on OUT message: " + value);                     }                     exchange.getOut(true).setBody(value);                 } else {                     // if not out then set it on the in                     if (LOG.isDebugEnabled()) {                         LOG.debug("Setting bean invocation value on IN message: " + value);                     }                     exchange.getIn().setBody(value);                 }   Before in some situations the bean invocation value was never set  as this route demonstrates:                  from("direct:in").                     to("bean:myBean").                     setHeader(FileComponent.HEADER_FILE_NAME  "hello.txt").                     to("file://target");. As Gert have pointed out on the dev forum we should step up and find out what we want with this MEP that can turn into a mess:  http://www.nabble.com/ExchangePattern-handling-in-Camel-td18378396s22882.html. Okay I have comitted my change and added unit test to demonstrate the bug caused by the original patch.. D:\project\camel\camel-core>svn commit --message "CAMEL-688: Fixed problem when bean processor did not set invocation value at all. Added unit test to demonstrate the bug." Sending camel-core\src\main\java\org\apache\camel\component\bean\BeanProcessor.java Adding camel-core\src\test\java\org\apache\camel\component\file\BeanToFileTest.java Transmitting file data .. Committed revision 675500.. Closing 1.4 issues.. 
Improvement,Willem Jiang,2008-07-10T03:59:32+0000,1215662372,org.apache.felix.framework.searchpolicy.ContentClassLoader is in OSGI env which is not URLClassloader  we should resort to the BundleDelegatingClassLoader in OSGI evniorment   so just ignore it in find method,Are there more such classloaders that should be skipped in OGSi environments? Anyone from the other platforms  knopplerfish  equianox? I think I have seen such in the spring framework source code once.. 
Bug,Unassigned,2008-07-10T04:54:43+0000,1215665683,XMPP component page http://activemq.apache.org/camel/xmpp.html states that uri is "xmpp:hostname[:port][/room]". But in fact it does not work: the room is not recognised for "xmpp:jabber.org/room33". There is missing // to make it a valid hierarchical uri. See http://java.sun.com/j2se/1.4.2/docs/api/java/net/URI.html  Fix: the url should be "xmpp://vchekan@jabber.org/room33". Notice "//".  Also: according to the code it is possible to set a user name like this: xmpp://[login@]hostname[:port][/room] which would be nice to mention.  Also it is not clear at all how to set up password. Without password there is not too much use of this component so it is critical to document it.  If I am provided with access to confluence  I could fix it on my own. Mu login is "vchekan".,Thanks for the reporting. There are a few tickets on the XMPP slated for 1.5 with features to set password and more.. 
Bug,Willem Jiang,2008-07-10T07:26:00+0000,1215674760,When I applied the CAMEL-688 patch   I found the CxfSoapMessageProviderTest failed.  After digging into the code   I found CxfExchange do not copy the exchange pattern when the exchange copying itself.,http://svn.apache.org/viewvc?rev=675467&view=rev. Closing 1.4 issues.. 
Bug,Claus Ibsen,2008-07-10T07:28:00+0000,1215674880,Hi   I am playing with Camel 1.4-SNAPSHOT.  I have created a route that goes to jpa  but I receive the error "[PersistenceUnit: camel-jpa] class or package not found".   In persistence.xml in camel-jpa-1.4-SNAPSHOT.jar camel-jpa is defined as: <persistence-unit name="camel-jpa" transaction-type="RESOURCE_LOCAL">  <class>org.apache.camel.processor.idempotent.jpa.MessageProcessed</class>   </persistence-unit>  Where can I find the MessageProcessed class? It is not in camel-core nor camel-jpa.,See nabble: http://www.nabble.com/-PersistenceUnit%3A-camel-jpa--class-or-package-not-found-td18362845s22882.html. 
Improvement,Claus Ibsen,2008-07-11T03:57:45+0000,1215748665,for example  some virtual jar like  bundle:\109.0:1\lib\camel-core-1.4-SNAPSHOT.jar should be ignored by loadImplementationsInJar since when try to open it  will get FileNotFoundException,Thanks for the patch. I decided to more the filter logic up a notch in the while loop where we should have such filtering logic.                  // osgi bundles should be skipped                 if (urlPath.startsWith("bundle:")) {                     if (LOG.isTraceEnabled()) {                         LOG.trace("it's a virtual osgi bundle  skipping this file: " + urlPath);                     }                     continue;                 }. Hi Claus   Yeah  it's better. Thanks  Freeman. 
Bug,Willem Jiang,2008-07-11T04:43:56+0000,1215751436,CamelTransportFactory does not need to call "configurer.configurationBean(destination)" as it has been performed by CamelDestination..initConfig() in its constructor.     Index: components/camel-cxf/src/main/java/org/apache/camel/component/cxf/transport/CamelTransportFactory.java =================================================================== --- components/camel-cxf/src/main/java/org/apache/camel/component/cxf/transport/CamelTransportFactory.java	(revision 675685) +++ components/camel-cxf/src/main/java/org/apache/camel/component/cxf/transport/CamelTransportFactory.java	(working copy) @@ -26 7 +26 6 @@    import org.apache.camel.CamelContext;  import org.apache.cxf.Bus; -import org.apache.cxf.configuration.Configurer;  import org.apache.cxf.service.model.EndpointInfo;  import org.apache.cxf.transport.AbstractTransportFactory;  import org.apache.cxf.transport.Conduit; @@ -87 12 +86 7 @@      }        public Destination getDestination(EndpointInfo endpointInfo) throws IOException { -        CamelDestination destination = new CamelDestination(camelContext  bus  this  endpointInfo); -        Configurer configurer = bus.getExtension(Configurer.class); -        if (null != configurer) { -            configurer.configureBean(destination); -        } -        return destination; +        return new CamelDestination(camelContext  bus  this  endpointInfo);      }        public Set<String> getUriPrefixes() {,Patch applied with thanks to William.  http://svn.apache.org/viewvc?rev=675833&view=rev. Closing 1.4 issues.. 
Bug,Claus Ibsen,2008-07-11T08:35:09+0000,1215765309,You can not propagate headers through the xquery component                  from("direct:one")                     .to("xquery:org/apache/camel/component/xquery/transform.xquery")                     .to("mock:result");    The mock will not receive any of the headers the exchange had when it was send to direct:one,Closing 1.4 issues.. 
Bug,Claus Ibsen,2008-07-11T08:38:47+0000,1215765527,The code the extracts the result that is returned when you use the sendXXX  requestXXX methods on the producer template doens't honor the exchange pattern.       protected Object extractResultBody(E result) {         Object answer = null;         if (result != null) {             Message out = result.getOut(false);             if (out != null) {                 answer = out.getBody();             } else {                 answer = result.getIn().getBody();             }         }         return answer;     }    It defaults to preferring out messages all the time. But in some circumstances the out body could be set to null but the real response is in the in body. Setting the exchange pattern to InOnly doesn't honor this.  Maybe this ticket is a symptom of the MEP problem that we have in Camel. See the discussion on the dev forum.,I do think the MEP should be added as a parameter and isOutCapable should be tested if we want to get the Out body as the answer.. 
Bug,Claus Ibsen,2008-07-11T08:53:15+0000,1215766395,The new transform() DSL doesn't propogate headers so you can not do:                   from("direct:four")                     .transform().constant("London")                     .to("mock:result");    And expect that any headers on the exchange at direct:four is received after the transform,The solution is to add this in the TransformProcessor      public void process(Exchange exchange) throws Exception {         Object newBody = expression.evaluate(exchange);         exchange.getOut().setBody(newBody);          // propogate headers         exchange.getOut().getHeaders().putAll(exchange.getIn().getHeaders());                  super.process(exchange);     }. 
Improvement,Claus Ibsen,2008-07-11T09:06:16+0000,1215767176,The formatter is not visible. There should be getter/setter.  Add java example to the tracer wiki how to do it from java.,Configuration in Spring XML is not currently possible.  <camelContext trace="true" xmlns="http://activemq.apache.org/camel/schema/spring">   trace="true" doesn't support configuration or a ref to a spring bean that is the TraceFormatter.  Then we need a traceFormatterRef option. But then again doens't the spring XML start to bloat with all kind of attributes and tags?. Java example configuration added to wiki DONE. Postponing the Spring XML configuration to 1.5. 
New Feature,Claus Ibsen,2008-07-11T11:32:09+0000,1215775929,I have configuration like this: exception(java.lang.Throwable.class)     .to("jbi:service:http://servicemix.in2m.com/samples/http/bean3Service?mep=in-out")     .to("jbi:service:http://servicemix.in2m.com/samples/http/bean2Service?mep=in-out");      from("jbi:service:http://servicemix.in2m.com/samples/http/httpConsumer")     .to("validator:updatepassword.xsd")               .to("jbi:service:http://servicemix.in2m.com/samples/http/jmsProviderService?mep=in-only")             .to("jbi:service:http://servicemix.in2m.com/samples/http/bean2Service");      from("jbi:service:http://servicemix.in2m.com/samples/http/jmsConsumer")     .to("jbi:service:http://servicemix.in2m.com/samples/http/MyProviderService1?mep=in-out")         .to("jbi:service:http://servicemix.in2m.com/samples/http/MyProviderService2?mep=in-out");  When I send a message to "http://servicemix.in2m.com/samples/http/MyProviderService1" or "http://servicemix.in2m.com/samples/http/MyProviderService2" it may send Connection Exception and the message moves to "service:http://servicemix.in2m.com/samples/http/bean3Service".  Now in "service:http://servicemix.in2m.com/samples/http/bean3Service" there should a way to know  which service was down  either "service:http://servicemix.in2m.com/samples/http/MyProviderService1" or "service:http://servicemix.in2m.com/samples/http/MyProviderService2"?,The meaning with this is something we have a few tickets for already.  A kinda ExchangeContext where end-users and the camel framework itself can get hold on current execution route and other meta data information. We need it in particular for encoding configuration so type converters etc. can get what to use for byte encodings.  Also the tracer logger should use this to get the "from" route so it can write: from XXX -> process YYY process YYY -> to(activemq:orders) etc.. See Tracer wiki documentation  http://camel.apache.org/tracer.html section: Traced route path during runtime. Closing 2.0m1 tickets. 
Sub-task,Claus Ibsen,2008-07-11T12:00:21+0000,1215777621,Currently you can not configure the trace output in the spring XML file.  There should be a new attribute to point to a traceFormatterRef that is a spring bean where you can configure the TraceFormatter to use.  	showBreadCrum 	showExchangeId 	etc.,Update wiki as well.. Closing 1.5 issues. 
Bug,Claus Ibsen,2008-07-11T12:02:35+0000,1215777755,Currently if you have a bean invocation configure that is something like this   public Exchange doSomething(Exchange exchange) {  ..  return exchange; }    Then Camel will set the exchange on the exchange out body. This should not be allowed. Wiki documentation is updated about this  but the code does not check for such condition.,
Bug,Claus Ibsen,2008-07-11T15:38:49+0000,1215790729,Hi   When I configure the following routes to process 10 xml files in a directory   everything works correctly  A)   		from("file:///c:/temp/test/?delete=false&lock=true&consumer.delay=500&consumer.initialDelay=10").thread(10) 		.to("bean:authenticate") 				.choice().when(header("authenticated").isEqualTo(true)) 					//.to("display") 				    .to("direct:extractDocument") 		.otherwise().to("activemq:queue:rejectedmessages.queue");  B)   			from("direct:extractDocument").thread(1) 			.setHeader("responder").xpath("//XyZ:Response/text()"  String.class  ns) 			.setHeader("channel"  "File-Channel")  			.to("bean:saveContent") 			.to("xquery:com/myapplication/transformation/in/extract.xquery") 			.to("activemq:queue:A.in.queue"); 	}  C) 		from("activemq:queue:A.in.queue").thread(10) 		.filter(body().isInstanceOf(String.class)) 		.unmarshal(jaxb) 		.to("bean:convert") 		.to("bean:save") 		.to("activemq:queue:A.in.queue");  Here is the log trace  4336937 [Thread Processor] INFO  Authenticate  - Company authenticated 4336937 [Thread Processor] INFO  Authenticate  - Company authenticated 4336937 [Thread Processor] INFO  Authenticate  - Company authenticated 4336937 [Thread Processor] INFO  Authenticate  - Company authenticated 4336937 [Thread Processor] INFO  Authenticate  - Company authenticated 4336937 [Thread Processor] INFO  Authenticate  - Company authenticated 4336937 [Thread Processor] INFO  Authenticate  - Company authenticated 4336937 [Thread Processor] INFO  Authenticate  - Company authenticated 4336937 [Thread Processor] INFO  Authenticate  - Company authenticated 4336937 [Thread Processor] INFO  Authenticate  - Company authenticated 4337359 [Thread Processor] INFO  SaveContent  - Message saved 4338562 [Thread Processor] INFO  SaveContent  - Message saved 4338828 [Thread Processor] INFO  SaveContent  - Message saved 4339062 [Thread Processor] INFO  SaveContent  - Message saved 4339328 [Thread Processor] INFO  SaveContent  - Message saved 4339890 [Thread Processor] INFO  SaveContent  - Message saved 4340312 [Thread Processor] INFO  SaveContent  - Message saved 4340515 [Thread Processor] INFO  SaveContent  - Message saved 4340687 [Thread Processor] INFO  SaveContent  - Message saved 4340750 [Thread Processor] INFO  Convert  - Message send 4340906 [Thread Processor] INFO  SaveContent  - Message saved 4341218 [Thread Processor] INFO  Save  - Order saved 4341328 [Thread Processor] INFO  Convert  - Message send 4341890 [Thread Processor] INFO  Save  - Order saved 4341922 [Thread Processor] INFO  Convert  - Message send 4342672 [Thread Processor] INFO  Save  - Order saved 4342734 [Thread Processor] INFO  Convert  - Message send 4343672 [Thread Processor] INFO  Save  - Order saved 4343718 [Thread Processor] INFO  Convert  - Message send 4344703 [Thread Processor] INFO  Save  - Order saved 4344734 [Thread Processor] INFO  Convert  - Message send 4345937 [Thread Processor] INFO  Save  - Order saved 4345984 [Thread Processor] INFO  Convert  - Message send 4347359 [Thread Processor] INFO  Save  - Order saved 4347375 [Thread Processor] INFO  Convert  - Message send 4349078 [Thread Processor] INFO  Save  - Order saved 4349109 [Thread Processor] INFO  Convert  - Message send 4350859 [Thread Processor] INFO  Save  - Order saved 4350906 [Thread Processor] INFO  Convert  - Message send 4352593 [Thread Processor] INFO  Save  - Order saved  but when I would like to increase the number of threads to execute more than one XQUERY at a time  B)			from("direct:extractDocument").thread(10) 			.setHeader("responder").xpath("//XyZ:Response/text()"  String.class  ns) 			.setHeader("channel"  "File-Channel")  			.to("bean:saveContent") 			.to("xquery:com/myapplication/transformation/in/extract.xquery") 			.to("activemq:queue:A.in.queue");   the following error is generated  4315906 [Thread Processor] INFO  com.bravura.babel.server.common.Authenticate  - Company authenticated 4315906 [Thread Processor] INFO  com.bravura.babel.server.common.Authenticate  - Company authenticated 4315906 [Thread Processor] INFO  com.bravura.babel.server.common.Authenticate  - Company authenticated 4315906 [Thread Processor] INFO  com.bravura.babel.server.common.Authenticate  - Company authenticated 4315906 [Thread Processor] INFO  com.bravura.babel.server.common.Authenticate  - Company authenticated 4315906 [Thread Processor] INFO  com.bravura.babel.server.common.Authenticate  - Company authenticated 4315906 [Thread Processor] INFO  com.bravura.babel.server.common.Authenticate  - Company authenticated 4315906 [Thread Processor] INFO  com.bravura.babel.server.common.Authenticate  - Company authenticated 4315906 [Thread Processor] INFO  com.bravura.babel.server.common.Authenticate  - Company authenticated 4315906 [Thread Processor] INFO  com.bravura.babel.server.common.Authenticate  - Company authenticated 4316750 [Thread Processor] INFO  com.bravura.babel.server.common.SaveContent  - Message saved 4316781 [Thread Processor] INFO  com.bravura.babel.server.common.SaveContent  - Message saved 4316781 [Thread Processor] INFO  com.bravura.babel.server.common.SaveContent  - Message saved 4317094 [Thread Processor] INFO  com.bravura.babel.server.common.SaveContent  - Message saved 4317125 [Thread Processor] INFO  com.bravura.babel.server.common.SaveContent  - Message saved 4317172 [Thread Processor] INFO  com.bravura.babel.server.common.SaveContent  - Message saved 4317203 [Thread Processor] INFO  com.bravura.babel.server.common.SaveContent  - Message saved 4317250 [Thread Processor] INFO  com.bravura.babel.server.common.SaveContent  - Message saved 4317281 [Thread Processor] INFO  com.bravura.babel.server.common.SaveContent  - Message saved 4317328 [Thread Processor] INFO  com.bravura.babel.server.common.SaveContent  - Message saved  43Error on line 1 column 0    XPST0003: XQuery syntax error in ##:     Unexpected token "<eof>" in path expression Error on line 1 column 0    XPST0003: XQuery syntax error in ##:     Unexpected token "<eof>" in path expression Error on line 1 column 0    XPST0003: XQuery syntax error in ##:     Unexpected token "<eof>" in path expression Error on line 1 column 0    XPST0003: XQuery syntax error in ##:     Unexpected token "<eof>" in path expression Error on line 1 column 0    XPST0003: XQuery syntax error in ##:     Unexpected token "<eof>" in path expression Error on line 1 column 0    XPST0003: XQuery syntax error in ##:     Unexpected token "<eof>" in path expression Error on line 1 column 0    XPST0003: XQuery syntax error in ##:     Unexpected token "<eof>" in path expression Error on line 1 column 0    XPST0003: XQuery syntax error in ##:     Unexpected token "<eof>" in path expression Error on line 1 column 0    XPST0003: XQuery syntax error in ##:     Unexpected token "<eof>" in path expression 18219 [Thread Processor] ERROR org.apache.camel.processor.DeadLetterChannel  - Failed delivery for exchangeId: ID-dell-charles/4777-1215789902562/0-1. On delivery attempt: 0 caught: org.apache.camel.RuntimeExpressionException: net.sf.saxon.trans.StaticError: XQuery syntax error in ##:     Unexpected token "<eof>" in path expression 43org.apache.camel.RuntimeExpressionException: net.sf.saxon.trans.StaticError: XQuery syntax error in ##:     Unexpected token "<eof>" in path expression 	at org.apache.camel.component.xquery.XQueryBuilder.evaluate(XQueryBuilder.java:125) 	at org.apache.camel.component.xquery.XQueryBuilder.process(XQueryBuilder.java:89) 	at org.apache.camel.impl.ProcessorEndpoint.onExchange(ProcessorEndpoint.java:92) 	at org.apache.camel.impl.ProcessorEndpoint$1.process(ProcessorEndpoint.java:66) 	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:43) 	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:75) 	at org.apache.camel.processor.Pipeline.process(Pipeline.java:101) 	at org.apache.camel.processor.Pipeline.process(Pipeline.java:85) 	at org.apache.camel.processor.Pipeline.process(Pipeline.java:101) 	at org.apache.camel.processor.Pipeline.access$100(Pipeline.java:40) 	at org.apache.camel.processor.Pipeline$1.done(Pipeline.java:124) 	at org.apache.camel.processor.ThreadProcessor$ProcessCall.run(ThreadProcessor.java:66) 	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675) 	at java.lang.Thread.run(Thread.java:595) Caused by: net.sf.saxon.trans.StaticError: XQuery syntax error in ##:     Unexpected token "<eof>" in path expression 	at net.sf.saxon.query.QueryParser.grumble(QueryParser.java:323) 	at net.sf.saxon.expr.ExpressionParser.grumble(ExpressionParser.java:136) 	at net.sf.saxon.expr.ExpressionParser.parseBasicStep(ExpressionParser.java:1403) 	at net.sf.saxon.expr.ExpressionParser.parseStepExpression(ExpressionParser.java:1220) 	at net.sf.saxon.expr.ExpressionParser.parseRelativePath(ExpressionParser.java:1160) 	at net.sf.saxon.expr.ExpressionParser.parsePathExpression(ExpressionParser.java:1146) 	at net.sf.saxon.expr.ExpressionParser.parseUnaryExpression(ExpressionParser.java:1025) 	at net.sf.saxon.expr.ExpressionParser.parseCastExpression(ExpressionParser.java:684) 	at net.sf.saxon.expr.ExpressionParser.parseCastableExpression(ExpressionParser.java:639) 	at net.sf.saxon.expr.ExpressionParser.parseTreatExpression(ExpressionParser.java:620) 	at net.sf.saxon.expr.ExpressionParser.parseInstanceOfExpression(ExpressionParser.java:602) 	at net.sf.saxon.expr.ExpressionParser.parseIntersectExpression(ExpressionParser.java:1058) 	at net.sf.saxon.expr.ExpressionParser.parseUnionExpression(ExpressionParser.java:1040) 	at net.sf.saxon.expr.ExpressionParser.parseMultiplicativeExpression(ExpressionParser.java:977) 	at net.sf.saxon.expr.ExpressionParser.parseAdditiveExpression(ExpressionParser.java:957) 	at net.sf.saxon.expr.ExpressionParser.parseRangeExpression(ExpressionParser.java:873) 	at net.sf.saxon.expr.ExpressionParser.parseComparisonExpression(ExpressionParser.java:823) 	at net.sf.saxon.expr.ExpressionParser.parseAndExpression(ExpressionParser.java:414) 	at net.sf.saxon.expr.ExpressionParser.parseOrExpression(ExpressionParser.java:396) 	at net.sf.saxon.expr.ExpressionParser.parseExprSingle(ExpressionParser.java:350) 	at net.sf.saxon.expr.ExpressionParser.parseExpression(ExpressionParser.java:314) 	at net.sf.saxon.query.QueryParser.parseQuery(QueryParser.java:256) 	at net.sf.saxon.query.QueryParser.makeXQueryExpression(QueryParser.java:97) 	at net.sf.saxon.query.StaticQueryContext.compileQuery(StaticQueryContext.java:450) 	at net.sf.saxon.query.StaticQueryContext.compileQuery(StaticQueryContext.java:513) 	at org.apache.camel.component.xquery.XQueryBuilder$3.createQueryExpression(XQueryBuilder.java:216) 	at org.apache.camel.component.xquery.XQueryBuilder.getExpression(XQueryBuilder.java:294) 	at org.apache.camel.component.xquery.XQueryBuilder.evaluateAsDOM(XQueryBuilder.java:153) 	at org.apache.camel.component.xquery.XQueryBuilder.evaluate(XQueryBuilder.java:115) 	... 14 more,Could be an concurrency issue with the xquery and saxon framework.. Should we have to open a defect on Saxon Jira web site ?. I do think Gert did some changes in Camel related to some concurrency issues with a component similar to this one. We should get his attention first I think.. Charles is it possible for you to create a unit test that fails with this?  Can you trigger the problem all the time?. Charles I am looking into this. I will try to commit a patch later. Could you then try out with the latest 1.4-SNAPSHOT. I will post again here when its ready.. Charles we have a proposed patch now. Gert is taking a look too.  When the builds server has created a new snapshot build on the maven repo you can try it out. Wait a few hours.. Many thanks. I suppose that the current snaphot (not yet created with the patch) is ?  [ ] apache-camel-1.4-20080714.001554-34.zip 14-Jul-2008 02:03 6.7M. 2008-07-14 12:05:42 406 [hread Processor] ERROR DeadLetterChannel - Failed delivery for exchangeId: ID-claus-acer/4188-1216029941640/0-0. On delivery attempt: 0 caught: org.apache.camel.RuntimeExpressionException: java.lang.IllegalArgumentException: Supplied node must be built using the same or a compatible Configuration org.apache.camel.RuntimeExpressionException: java.lang.IllegalArgumentException: Supplied node must be built using the same or a compatible Configuration at org.apache.camel.component.xquery.XQueryBuilder.evaluate(XQueryBuilder.java:124) at org.apache.camel.model.language.ExpressionType.evaluate(ExpressionType.java:98) at org.apache.camel.processor.TransformProcessor.process(TransformProcessor.java:42) at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:43) at org.apache.camel.processor.Pipeline.process(Pipeline.java:101) at org.apache.camel.processor.Pipeline.process(Pipeline.java:85) at org.apache.camel.processor.Pipeline.process(Pipeline.java:101) at org.apache.camel.processor.Pipeline.access$100(Pipeline.java:40) at org.apache.camel.processor.Pipeline$1.done(Pipeline.java:124) at org.apache.camel.processor.ThreadProcessor$ProcessCall.run(ThreadProcessor.java:66) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675) at java.lang.Thread.run(Thread.java:595) Caused by: java.lang.IllegalArgumentException: Supplied node must be built using the same or a compatible Configuration at net.sf.saxon.query.DynamicQueryContext.setContextItem(DynamicQueryContext.java:89) at org.apache.camel.component.xquery.XQueryBuilder.createDynamicContext(XQueryBuilder.java:390) at org.apache.camel.component.xquery.XQueryBuilder.evaluateAsDOM(XQueryBuilder.java:151) at org.apache.camel.component.xquery.XQueryBuilder.evaluate(XQueryBuilder.java:114) ... 12 more. Could be when was the last build? There has been some commits before this today that could have caused this build. But try it out and see how it goes.  Charles the build server has just finished the build. So check back in a little while to see if there is a new build.. Charles. Gert and I have found a solution (we think). I have just committed the final details.  Could you test it. The builds should take approx 2 hours before its online on the maven repo. Or wait until tomorrow with the test  then you are sure to grab the latest build.. Well. We progress but I have a new error. This is reproducible. The error does not occur for every message and unfortunately for us  Camel receives a null pointer exception.  4320078 [Thread Processor] ERROR org.apache.camel.processor.DeadLetterChannel - Failed delivery for exchangeId: ID-dell-charles/2644-1216109166046/0-1. On delivery attempt: 0 caught: org.apache.camel.RuntimeExpressionException: java.lang.NullPointerException 43org.apache.camel.RuntimeExpressionException: java.lang.NullPointerException at org.apache.camel.component.xquery.XQueryBuilder.evaluate(XQueryBuilder.java:132) at org.apache.camel.component.xquery.XQueryBuilder.process(XQueryBuilder.java:90) at org.apache.camel.impl.ProcessorEndpoint.onExchange(ProcessorEndpoint.java:92) at org.apache.camel.impl.ProcessorEndpoint$1.process(ProcessorEndpoint.java:66) at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:43) at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:75) at org.apache.camel.processor.Pipeline.process(Pipeline.java:101) at org.apache.camel.processor.Pipeline.process(Pipeline.java:85) at org.apache.camel.processor.Pipeline.process(Pipeline.java:101) at org.apache.camel.processor.Pipeline.access$100(Pipeline.java:40) at org.apache.camel.processor.Pipeline$1.done(Pipeline.java:124) at org.apache.camel.processor.ThreadProcessor$ProcessCall.run(ThreadProcessor.java:66) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675) at java.lang.Thread.run(Thread.java:595) Caused by: java.lang.NullPointerException at net.sf.saxon.value.Value.asItem(Value.java:71) at net.sf.saxon.expr.VariableReference.evaluateItem(VariableReference.java:291) at net.sf.saxon.functions.QNameFn.evaluateItem(QNameFn.java:66) at net.sf.saxon.instruct.ComputedElement.getNameCode(ComputedElement.java:283) at net.sf.saxon.instruct.ElementCreator.constructElement(ElementCreator.java:290) at net.sf.saxon.instruct.ElementCreator.evaluateItem(ElementCreator.java:270) at net.sf.saxon.instruct.Instruction.iterate(Instruction.java:320) at net.sf.saxon.expr.IfExpression.iterate(IfExpression.java:257) at net.sf.saxon.expr.ForExpression$MappingAction.map(ForExpression.java:591) at net.sf.saxon.expr.MappingIterator.next(MappingIterator.java:54) at net.sf.saxon.query.XQueryExpression$ErrorReportingIterator.next(XQueryExpression.java:553) at net.sf.saxon.pull.PullFromIterator.next(PullFromIterator.java:60) at net.sf.saxon.pull.PullFilter.next(PullFilter.java:83) at net.sf.saxon.pull.PullNamespaceReducer.next(PullNamespaceReducer.java:66) at net.sf.saxon.pull.PullFilter.next(PullFilter.java:83) at net.sf.saxon.pull.PullPushTee.next(PullPushTee.java:57) at net.sf.saxon.pull.PullConsumer.consume(PullConsumer.java:27) at net.sf.saxon.pull.PullPushCopier.copy(PullPushCopier.java:27) at net.sf.saxon.query.XQueryExpression.pull(XQueryExpression.java:402) at org.apache.camel.component.xquery.XQueryBuilder.evaluateAsDOM(XQueryBuilder.java:162) at org.apache.camel.component.xquery.XQueryBuilder.evaluate(XQueryBuilder.java:122) ... 14 more. Charles does the message succed in the next redelivery?  The stacktrace is on the first failure = On delivery attempt: 0  Do you also have: On delivery attempt: 1 On delivery attempt: 2 On delivery attempt: 3 etc.  How high is your throughput? Have you tried to lower the threads from 10 to eg. 5? And you can also try a throttler() in from of the xquery to let XXX number of exchanges pass per. second. - throttle(20) will only pass 20 messages per second.. Charles can you also try with a never version of Saxon. http://saxon.sourceforge.net/  Has released v9.1.0.1 of Saxon. Unfortunately not in a maven repo (yet). The message is not redelivered. Here is the full stack trace :  4315594 [Thread Processor] ERROR org.apache.camel.processor.DeadLetterChannel - Failed delivery for exchangeId: ID-dell-charles/3883-1216116412562/0-0. On delivery attempt: 0 caught: org.apache.camel.RuntimeExpressionException: java.lang.NullPointerException 43org.apache.camel.RuntimeExpressionException: java.lang.NullPointerException at org.apache.camel.component.xquery.XQueryBuilder.evaluate(XQueryBuilder.java:132) at org.apache.camel.component.xquery.XQueryBuilder.process(XQueryBuilder.java:90) at org.apache.camel.impl.ProcessorEndpoint.onExchange(ProcessorEndpoint.java:92) at org.apache.camel.impl.ProcessorEndpoint$1.process(ProcessorEndpoint.java:66) at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:43) at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:75) at org.apache.camel.processor.Pipeline.process(Pipeline.java:101) at org.apache.camel.processor.Pipeline.process(Pipeline.java:85) at org.apache.camel.processor.Pipeline.process(Pipeline.java:101) at org.apache.camel.processor.Pipeline.access$100(Pipeline.java:40) at org.apache.camel.processor.Pipeline$1.done(Pipeline.java:124) at org.apache.camel.processor.ThreadProcessor$ProcessCall.run(ThreadProcessor.java:66) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675) at java.lang.Thread.run(Thread.java:595) Caused by: java.lang.NullPointerException at net.sf.saxon.value.Value.asItem(Value.java:71) at net.sf.saxon.expr.VariableReference.evaluateItem(VariableReference.java:291) at net.sf.saxon.functions.QNameFn.evaluateItem(QNameFn.java:66) at net.sf.saxon.instruct.ComputedElement.getNameCode(ComputedElement.java:283) at net.sf.saxon.instruct.ElementCreator.constructElement(ElementCreator.java:290) at net.sf.saxon.instruct.ElementCreator.evaluateItem(ElementCreator.java:270) at net.sf.saxon.instruct.Instruction.iterate(Instruction.java:320) at net.sf.saxon.expr.IfExpression.iterate(IfExpression.java:257) at net.sf.saxon.expr.ForExpression$MappingAction.map(ForExpression.java:591) at net.sf.saxon.expr.MappingIterator.next(MappingIterator.java:54) at net.sf.saxon.query.XQueryExpression$ErrorReportingIterator.next(XQueryExpression.java:553) at net.sf.saxon.pull.PullFromIterator.next(PullFromIterator.java:60) at net.sf.saxon.pull.PullFilter.next(PullFilter.java:83) at net.sf.saxon.pull.PullNamespaceReducer.next(PullNamespaceReducer.java:66) at net.sf.saxon.pull.PullFilter.next(PullFilter.java:83) at net.sf.saxon.pull.PullPushTee.next(PullPushTee.java:57) at net.sf.saxon.pull.PullConsumer.consume(PullConsumer.java:27) at net.sf.saxon.pull.PullPushCopier.copy(PullPushCopier.java:27) at net.sf.saxon.query.XQueryExpression.pull(XQueryExpression.java:402) at org.apache.camel.component.xquery.XQueryBuilder.evaluateAsDOM(XQueryBuilder.java:162) at org.apache.camel.component.xquery.XQueryBuilder.evaluate(XQueryBuilder.java:122) ... 14 more 15594 [Thread Processor] ERROR org.apache.camel.processor.DeadLetterChannel - Failed delivery for exchangeId: ID-dell-charles/3883-1216116412562/0-1. On delivery attempt: 0 caught: org.apache.camel.RuntimeExpressionException: java.lang.NullPointerException 43org.apache.camel.RuntimeExpressionException: java.lang.NullPointerException at org.apache.camel.component.xquery.XQueryBuilder.evaluate(XQueryBuilder.java:132) at org.apache.camel.component.xquery.XQueryBuilder.process(XQueryBuilder.java:90) at org.apache.camel.impl.ProcessorEndpoint.onExchange(ProcessorEndpoint.java:92) at org.apache.camel.impl.ProcessorEndpoint$1.process(ProcessorEndpoint.java:66) at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:43) at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:75) at org.apache.camel.processor.Pipeline.process(Pipeline.java:101) at org.apache.camel.processor.Pipeline.process(Pipeline.java:85) at org.apache.camel.processor.Pipeline.process(Pipeline.java:101) at org.apache.camel.processor.Pipeline.access$100(Pipeline.java:40) at org.apache.camel.processor.Pipeline$1.done(Pipeline.java:124) at org.apache.camel.processor.ThreadProcessor$ProcessCall.run(ThreadProcessor.java:66) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675) at java.lang.Thread.run(Thread.java:595) Caused by: java.lang.NullPointerException at net.sf.saxon.value.Value.asItem(Value.java:71) at net.sf.saxon.expr.VariableReference.evaluateItem(VariableReference.java:291) at net.sf.saxon.functions.QNameFn.evaluateItem(QNameFn.java:66) at net.sf.saxon.instruct.ComputedElement.getNameCode(ComputedElement.java:283) at net.sf.saxon.instruct.ElementCreator.constructElement(ElementCreator.java:290) at net.sf.saxon.instruct.ElementCreator.evaluateItem(ElementCreator.java:270) at net.sf.saxon.instruct.Instruction.iterate(Instruction.java:320) at net.sf.saxon.expr.IfExpression.iterate(IfExpression.java:257) at net.sf.saxon.expr.ForExpression$MappingAction.map(ForExpression.java:591) at net.sf.saxon.expr.MappingIterator.next(MappingIterator.java:54) at net.sf.saxon.query.XQueryExpression$ErrorReportingIterator.next(XQueryExpression.java:553) at net.sf.saxon.pull.PullFromIterator.next(PullFromIterator.java:60) at net.sf.saxon.pull.PullFilter.next(PullFilter.java:83) at net.sf.saxon.pull.PullNamespaceReducer.next(PullNamespaceReducer.java:66) at net.sf.saxon.pull.PullFilter.next(PullFilter.java:83) at net.sf.saxon.pull.PullPushTee.next(PullPushTee.java:57) at net.sf.saxon.pull.PullConsumer.consume(PullConsumer.java:27) at net.sf.saxon.pull.PullPushCopier.copy(PullPushCopier.java:27) at net.sf.saxon.query.XQueryExpression.pull(XQueryExpression.java:402) at org.apache.camel.component.xquery.XQueryBuilder.evaluateAsDOM(XQueryBuilder.java:162) at org.apache.camel.component.xquery.XQueryBuilder.evaluate(XQueryBuilder.java:122) ... 14 more  I will test with new Saxon release and/or add the throttle. When I change the number of threads  I can sometimes send messages without errors.. The error has disappeared with the last version of Saxon 9-1-0-1j.  remark : I haven't added the throttle option to make the test.  Many thanks for your help.. 
Improvement,Unassigned,2008-07-12T03:49:18+0000,1215834558,It is unusual for xmpp account to have no password but the password property is not tested in junits,Patch applied with thanks!. Closing 1.4 issues.. 
Improvement,Unassigned,2008-07-12T04:40:34+0000,1215837634,According to XEP-0045: Multi-User Chat standard (http://www.xmpp.org/extensions/xep-0045.html) Multi User Chat is an old protocol which is supported for backward compatibility. It is better to use Multi User Chat because most servers support it.,Good spot. Patch applied with many thanks!. Closing 1.4 issues.. 
Improvement,Unassigned,2008-07-12T05:45:19+0000,1215841519,According to XMPP standard user have to provide a nick name. This patch adds a "Nickname" property to XmppEndpoint and modifies XmppGroupChatProducer so that if "Nickanme" property is set then use it as a room nick  otherwise use login name as a nick.,Can you provide a unit test as well that covers the nickname property?  And we should remember to update the wiki documentation. But Vadim  thanks for all the work on this component. Highly appreciated with real life end-users experience and feedback.. Thanks for review Claus  here is the unit test chunk.. Patch applied. Vadim  many thanks for your attention to details! Keep them coming .. Closing 1.4 issues.. 
Sub-task,Claus Ibsen,2008-07-12T05:45:52+0000,1215841552,See the parent issue.,When an exception occur and the TX is rolled back and redelivered then this happends in a new thread and Camel is stateless so we can not 100% determine what the previous condition was for the exchange.  So currently we can only support end-users can configure the initialRedeliveryDelay. All other options is not supported in TX mode.. I am considering changing to not use the RedeliveryPolicy for TX mode  or introducing an TransactedRedeliveryPolicy with fewer options to resemble what end-users can use.  eg: TransactedRedeliveryPolicy only has redeliveryDelay as an option  and the delay is fixed.  Any thoughts?. RedeliveryPolicy extends DelayPolicy and DelayPolicy only have 1 setting for a fixed delay.. code committed  need to update wiki. Updated wiki as well. See transactional client wiki page.. Closing 1.5 issues. 
Bug,Claus Ibsen,2008-07-12T06:29:31+0000,1215844171,The processors that is registered in JMX can have null in their id. So the JMX path is processor -> null -> 0.  Either we should replace null with unknown as we do for endpoints. Or try to fix that the id is generated.,See screenshot. The instanceid is not needed  will be removed. The process id is unique.. nodeid is now mandatory and the instanceid has been removed  as nodeid is unique.. 
Improvement,Claus Ibsen,2008-07-12T13:25:22+0000,1215869122,During my work on a new web app sample for Camel that exposes a webservice I have had to figure out a few issues working with the CXF.  Combined with this sample and the existing docuementation we could improve the documentation in regards to:  	use CXF in a webapp (war file) 	how to generate source code based on a wsdl (contract first) 	how to startup in jetty and test it 	how to get in / out source generated objects from Camel exchange 	how to use a POJO as the endpoint impl and then use eg. a producertemplate to send a message to camel routing. 	etc. etc.,Will be covered in the tutorial in CAMEL-601.. 
Improvement,Willem Jiang,2008-07-12T14:30:53+0000,1215873053,I am working on a web app example that uses CXF to expose a webservice.  During the process I thought that getting my POJO object (InputReportIncident) was a bit clumsy as I had to do;                   MessageContentsList list = exchange.getIn().getBody(MessageContentsList.class);                 InputReportIncident in = (InputReportIncident) list.get(0);     So I have created a patch that improves the getBody to be more end-user friendly. You can now do  as you always do in Camel:                  InputReportIncident in = exchange.getIn().getBody(InputReportIncident.class);    Just cast it to what you expect and want to work with.  InputReportIncident is a POJO object generated by the CXF wsdl2java generator.   Willem could you take a look? Maybe I have misunderstood the CXF and there is a easier way already. But I don't like the need to get the List and then get (0) to get my POJO.  Sending the response is already supported nicely:                  // the response                 OutputReportIncident out = new OutputReportIncident();                 out.setCode("Bye Claus");                 exchange.getOut().setBody(out);,The patch. Willem could you take a look at this once you have time?  Would be great to have you eyes on this one.. Willem  with the patch its possible for me to have this route. InputReportIncident and OutputReportIncident are generate by wsdl2java (contract first)  public class ReportIncidentRouteBuilder extends RouteBuilder {      private static OutputReportIncident OK = new OutputReportIncident();      public void configure() {         OK.setCode("OK");          from("cxf:bean:reportIncident")             .convertBodyTo(InputReportIncident.class)             .to("velocity://MailResponse.vm")             .to("seda:mails")             .transform(constant(OK));          from("seda:mails")             .to("file:target/mails");     }  }. Closing 1.4 issues.. 
Bug,Claus Ibsen,2008-07-12T19:08:50+0000,1215889730,When using smack library sending presence message after login is redundant. According to smack documentation (and confirmed by experiment) login sends the presence. http://www.igniterealtime.org/builds/smack/docs/latest/javadoc/org/jivesoftware/smack/XMPPConnection.html#login(java.lang.String %20java.lang.String) Logs in to the server using the strongest authentication mode supported by the server  then sets presence to available,Thanks for the patch and the info. Keep 'em coming. Closing 1.4 issues.. 
Task,Claus Ibsen,2008-07-12T19:44:11+0000,1215891851,We got a bunch of patches from Vadim and have a ticket for upgrade of the smack API to 3.0.x. When they are all done we should ensure that the wiki documentation is up-to-date.  Currently there are many options on the endpoint that is not documented at all on the wiki. And there should be some samples as well.,I've added options and some examples. But xmpp for consumer mode is still on todo list.. Vadim has update the wiki. Thanks.. Closing 1.5 issues. 
Bug,Unassigned,2008-07-12T19:53:22+0000,1215892402,This configuration logs in  presence works  but message is not received by the participant.  		from("timer://kickoff?period=10000&delay=1"). 		setBody(constant("xmpp message")). 		to("xmpp://xxxxxxxx@gmail.com/?resource=camel-user&password=xxxxxx&participant=xxxxxxxx@jabber.org");    It is cause by the code   message.setFrom(endpoint.getUser());   1. There is no need to set "from" field: smack will fetch this info from the connection info and will set it up properly.  2. I can't find the link  but according to common sence and examples in Instant Messaging and Presence  "from" should be JID (Jabber ID) and not just user name!     <message        to='romeo@example.net'        from='juliet@example.com/balcony'        type='chat'        xml:lang='en'>      <body>Wherefore art thou  Romeo?</body>    </message>   3. "Normal" message is just a hint to UI that the message is not part of conversation but a standalone message. It does not matter practically but ideologically  xmpp component will send messages as they flow and I'd say it is a conversation (or monologue to be precise). So no need to set "Normal" flag either. Smack will set it to the default "chat" type.,Vadim you're keeping us busy . Patch applied with thanks!. Closing 1.4 issues.. 
Bug,Claus Ibsen,2008-07-13T11:50:01+0000,1215949801,The strange code in the FileProducer that if the exchange is out capable it will poll the file instead bites us big time.  James must have had a beer and a fancy moment when he created the code. Something with a dynamic receipentlist where the endpoints should be polled from a file but the expression uses a Producer when the endpoints is created. For the file it should consume instead but it doesn't. Any basically it should consume instead.  It also bites us when we send an InOut exchange to the FileProducer it will not produce the file but consume it and there is no file so nothing happens.  This code  public class FileBackupTest extends ContextTestSupport {      public void testMailGeneration() throws Exception {         MockEndpoint mock = getMockEndpoint("mock:result");         mock.expectedMessageCount(1);          template.requestBody("seda:mails"  "Hello World");          mock.assertIsSatisfied();     }      protected RouteBuilder createRouteBuilder() throws Exception {         return new RouteBuilder() {             public void configure() throws Exception {                 from("seda:mails")                     .to("file:target/mails")                     .to("mock:result");             }         };     }   Would not create a file in target/mails folder as we are using template.request that is an InOut MEP.  I will fix it by removing the strange consumer code in the FileProducer and change the fancy dynamic recepientlist test (SimulatorTest)  to not use file based endpoints.  It could be a blocker for the 1.4 release and we should consider creating a new RC!,Also remember to add a unit test that is InOut MEP to the file components.. Added new header on the in message  // lets store the name we really used in the header  so end-users can retrieve it message.setHeader(FileComponent.HEADER_FILE_NAME_PRODUCED  answer.getAbsolutePath());  Remember to add this to wiki. We should consider creating a new RC for 1.4 with this fix.. 
Improvement,Claus Ibsen,2008-07-14T06:26:10+0000,1216016770,The current DLC strategy in Camel is to retry 6 times with 1 sec delay. If still failed it will be moved to a log WARN.  This default behavior is not feasible for most end-users  in fact none. We should have a better default strategy in Camel. Also we should force end-users to setup a strategy from the start.  And we should improve this in the documentation so end-users is aware of this.,See nabble http://www.nabble.com/-DISCUSS----Default-error-handler-in-Camel-2.0%2C-what-should-we-do--td22798791.html  We will disable error handler by default in 2.0. trunk: 761288. Closing all 2.0M2 tickets. 
Bug,Willem Jiang,2008-07-14T10:19:14+0000,1216030754,When defining very simple routing with ThreadProcessor I get ConcurrentModificationException on multicore systems.  Example:  from("direct:a").thread(10).process(new Processor() {            @Override           public void process(Exchange ex) throws Exception  {             //sth           } });  Stack trace: Exception in thread "Thread Processor" java.util.ConcurrentModificationException 	at java.util.HashMap$HashIterator.nextEntry(HashMap.java:793) 	at java.util.HashMap$EntryIterator.next(HashMap.java:834) 	at java.util.HashMap$EntryIterator.next(HashMap.java:832) 	at java.util.HashMap.putAll(HashMap.java:523) 	at org.apache.camel.processor.Pipeline.createNextExchange(Pipeline.java:146 ) 	at org.apache.camel.processor.Pipeline$1.done(Pipeline.java:123) 	at org.apache.camel.processor.ThreadProcessor$ProcessCall.run(ThreadProcess or.j ava:66) 	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecuto r.ja va:885) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.ja va:9 07) 	at java.lang.Thread.run(Thread.java:619),Hi  Could you attach your sample that doesn't work on your system.  I have tried to create an unit test that demonstrates the bug but I runs fine here.. And please provide us with information about OS: Camel Version  Java Version etc.. JUnit test case that causes error. Attached test case causes ConcurrentModificationException. It happens on multicore machines only (always on quad core processor  never on single core)  Testing environment: jdk 1.6.0_06 camel 1.4-SNAPSHOT windows xp eclipse 3.4. Attachment without license. Wojciech. Thanks for the test. It fails on my laptop as well.  However I must say though that such a scenario isn't really a real use-case. Who will fire 500000 messages simulationsly in one thread  But we will try to look into it.. http://svn.apache.org/viewvc?rev=679273&view=rev. Closing all 1.5.0 issues. 
Improvement,Willem Jiang,2008-07-14T13:04:40+0000,1216040680,See the discussion: http://www.nabble.com/Why-some-jars-are-not-part-of-the-Camel-1.4-snapshot-distribution---td18401236s22882.html,For missing script engines and/or springing languages  I think you get an error like "no scripting language 'ruby' found" so we'd want to look for that in addition to the ClassNotFoundException. Hopefully we could catch all uses of a missing scripting language in ScriptBuilder somewhere.. The same for endpoints as well. If you have a route with "from("jetty:http://...").process(...) and you forget to add camel-jetty to the classpath.  Maybe camel could do someting smarter and give a better fedback  that you might have forgot a "camel-XXX" on the classpath.. Just committed the patch of the better logging for the script engines's ClassNotFoundException and the camel component's NoSuchEndpointException. For the NoClassDefError when trying to load Type converter  it not easy to go through the Maven's pom.xml for the who dependency jars looking up  I just close this issue  current better logging solution is enough for us the detect this kind of class path issue.. Closing all 1.5.0 issues. 
New Feature,James Strachan,2008-07-14T14:19:33+0000,1216045173,see http://flatpack.sourceforge.net/,trunk has a working version...  http://cwiki.apache.org/CAMEL/flatpack.html. We will do a new RC for 1.4 so this component is now a part of 1.4. Closing 1.4 issues.. 
Bug,Willem Jiang,2008-07-14T16:27:15+0000,1216052835,The web site for the FTP modules says you can use a URL like ftp://publicftpserver.com/download for anonymous FTP  but this doesn't work unless you specify a username.,Hi Geoff  Please resubmit your patch with the ASF License granted  or I can't apply the patch. Here is the link for manage the patch https://issues.apache.org/activemq/secure/ManageAttachments.jspa?id=27543  Thanks   Willem. The workaround is to specify "anonymous" as the username.. Applied patch with thanks to Geoff. http://svn.apache.org/viewvc?rev=677141&view=rev. Closing 1.4 issues.. 
Bug,Willem Jiang,2008-07-15T04:06:18+0000,1216094778,since CAMEL-709 add getBody method to CxfMessage  so the code in CxfBinding.createCxfMessage() Object body = in.getBody(InputStream.class); will never always return InputStream object  which means the code will never run into the case that the message body is List.class  but it will break the logic when the MESSAGEFORMAT is POJO for camel-cxf  so we need try to getBody(List.class) firstly to fix it,sorry  correct my typo from previous comment  since CAMEL-709 add getBody method to CxfMessage  so the code in CxfBinding.createCxfMessage() Object body = in.getBody(InputStream.class); will always return InputStream object  which means the code will never run into the case that the message body is List.class  but it will break the logic when the MESSAGEFORMAT is POJO for camel-cxf  so we need try to getBody(List.class) firstly to fix it. I did some modification on your patch to make it easy to read the code. I also did some update in the SoapBinding class.  The patch is applied in the reversion 676805.  http://svn.apache.org/viewvc?rev=676805&view=rev. thanks Willem. Willem  did this patch actually make it into the new RC4 hadrian just released?. No   I am afraid we have to do other RC release.. Closing 1.4 issues.. 
Improvement,Willem Jiang,2008-07-15T06:23:44+0000,1216103024,CXF 2.1 implements the JSR311 http://cwiki.apache.org/CXF20DOC/jax-rs-jsr-311.html  Current camel-cxf need to support this REST endpoint,btw what exactly does that mean   FIWW we have a JAX-RS endpoint in camel-rest which uses JAX-RS - though its currently using some Jersey extensions so it can easily generate HTML (human) views as well as XML / JSON services. @James I'm thinking to leverage the CXF's REST supports to help the user to export their resources (not just Camel context's endpoints and routes) in Camel. BTW the CXF REST writer Sergey is interesting to do some contribution this year. James : I think it's pretty clear Willem is referring to CXF JAXRS endpoints. I appreciate Camel users can avail of camel-restlet but there're requirements to get CXF JAXRS endpoints supported too. Can this be moved to 2.1?. When is 2.0 due ?. We hope to get it done In 2 weeks time  e.g. end of April.  So we are scoping on only fixing bugs and adding minor features etc to avoid keep postponing a release.  There is a discussion at dev forum: http://www.nabble.com/CAMEL-2.0---The-remaining-work-td22841080.html. I am out of office from 13th April to 24th April  I will reply your letter when I come back.. Willem how much work is left? As we should do the last bits of Camel 2.0 and get the code ready for a RC cut next week.  So if there is more work to it then we move this to Camel 2.1.. @claus I'm working on the issue of CAMEL-1659  hope I can finished it today. TODO   update the release note for this feature. Most works were done  let's close this issue and will open another JIRA if we have further issue of CXF-REST.. 
Improvement,Claus Ibsen,2008-07-15T06:56:17+0000,1216104977,Currently log component only logs the payload. We have a nice ExchangeFormatter that can format an exchange with all kind of options.  The options could be enabled on the log component so you can customize your logging. Also there should be a multiline option to the exchange formatter so it can log all the stuff on multi lines if for instance there are many options  they get very long.,See nabble: http://www.nabble.com/Is-it-possible-to-log-headers-properties-(key%2Cvalue-pairs)-through-interceptors---td18382140s22882.html. Updated wiki as well.. 
Improvement,Unassigned,2008-07-15T11:03:11+0000,1216119791,See CAMEL-702  An end-user had failures with the saxon 9.0 that Camel has dependency to in its pom.xml We should upgrade to never version of Saxon that fixed this problem. It happens in concurrent situations.  We need to talk with the servicemix people as they host the saxon on their maven repo  Asking them to upgrade would be great.,Gertv was so nice to upgrade the servicemix repo with this new version. Thanks gert.. 
Improvement,Willem Jiang,2008-07-15T11:04:34+0000,1216119874,Willem knows what this is. See chat log on the july-15-2008.  Basically getBody() should be smart in what kind of situation you are using CXF.,We can tell if the operation's parameters style by checking if the operation is wrapper style or non-wrapper style. But if you check the JAXWS-2.1 specification(2.6.2.1 Header Binding Extension)  we can't just take consideration that the parameter just only one. Since the soap header will be mapped into one parameter.. Willem what about adding an option to camel-cxf where you can specify that you want either behaviour?  Look what Hadrian had to do for a Camel introduction presentation in the route:  public void configure() throws Exception {         // direct:start is a internal queue to kick-start the routing in our example         // we use this as the starting point where you can send messages to direct:start         from("cxf:http://localhost:9090/unittest?serviceClass=org.apache.camel.example.reportincident.ReportIncidentEndpoint")             .process(new Processor() {                 public void process(final Exchange exchange) { 	                Message in = exchange.getIn(); 	                // Get the parameter list 	                List parameter = in.getBody(List.class); 	                // Put the result back 	                exchange.getOut().setBody(parameter.get(0)); 	            }             })             .setHeader("subject"  el("${in.body.incidentId}"))             .filter(header("subject").isEqualTo("Hadrian"))             .to("velocity:MailBody.vm")             .to("file://target/subfolder?delete=false&consumer.delay=1000")             .to("smtp://someone@localhost?password=secret&to=incident@mycompany.com");     }   This is very "ugly" and I was hoping that Camel would be smarter here as what Hadrian does in the inner processor is just plain plumming code that Camel could figure out to do itself.  Hadrian didn't know about the fact that you can do a explicit convertBodyTo to the POJO class: .convertBodyTo(InputReportIncident.class) instead of the inner processor.  This new flag could then be default on for the most common style of webservice: document  litteral  wrapped  contract first. And then you can turn the flag off for those "Greeter" RPC stylish webservices  and for end-users who prefer for some obsure reason to use the Holder objects.  In my world we develop webservices using document litteral  wrapped using contract first. And nothing else.  I would love Camel and CXF to support this as a first class citizen.  New users to Camel and CXF already have a hard time to figure out CXF comming from a AXIS land where they just get the code generated from a .wsdl and then they are ready to go. Okay sorry  rant is over and I have only started to boil the water for my morning coffeee.. Now you can get the request object by passing the InputReportIncident.class as the parameter to the getBoby method in the camel-cxf consumer side  it is out of box .  I did some work on CAMEL-829  and updated the test case in my last commit[1]   which also show how to avoid the Holder parameters by turn off the wrapper style parameter mapping.  Please check out the WSDL[2] which has a JAXWS customer extension to turn off the wrapper style parameter mapping.  [1] http://svn.apache.org/viewvc?rev=687273&view=rev [2] https://svn.apache.org/repos/asf/activemq/camel/trunk/components/camel-cxf/src/test/resources/person-non-wrapper.wsdl. Please check out the http://svn.apache.org/viewvc/activemq/camel/trunk/components/camel-cxf/src/test/java/org/apache/camel/non_wrapper/PersonProcessor.java?view=markup&pathrev=687273  You can handle get the request message object by using the below code by turning off the wrapper style parameter mapping in WSDL2Java processing.  public class PersonProcessor implements Processor {      private static final transient Log LOG = LogFactory.getLog(PersonProcessor.class);      public void process(Exchange exchange) throws Exception {         LOG.info("processing exchange in camel");         GetPerson person =  exchange.getIn().getBody(GetPerson.class);         String personId = person.getPersonId();         GetPersonResponse response = new GetPersonResponse();          if (personId == null || personId.length() == 0) {             LOG.info("person id 123  so throwing exception");             // Try to throw out the soap fault message             org.apache.camel.non_wrapper.types.UnknownPersonFault personFault =                 new org.apache.camel.non_wrapper.types.UnknownPersonFault();             personFault.setPersonId("");             org.apache.camel.non_wrapper.UnknownPersonFault fault =                 new org.apache.camel.non_wrapper.UnknownPersonFault("Get the null value of person name"  personFault);             // Since camel has its own exception handler framework  we can't throw the exception to trigger it             // We just set the fault message in the exchange for camel-cxf component handling             exchange.getFault().setBody(fault);         }         response.setPersonId(personId);         response.setName("Bonjour");         response.setSsn("123");         LOG.info("setting Bonjour as the response");         // Set the response message  first element is the return value of the operation          // the others are the holders of method parameters         exchange.getOut().setBody(new Object[] {response});     }  }. Much better with the exchange.getIn().getBody(GetPerson.class);  Willem is the turn off wrapper needed in the wsdl? <jaxws:bindings> <jaxws:enableWrapperStyle>false</jaxws:enableWrapperStyle> </jaxws:bindings>  I haven't seen this before and I doubt that many knows about this one? Isn't it possible to configure this without having to do it in the .wsdl file? Such as on the cxf endpoint?. There are some descriptions in the Chapter 8 of JAXWS 2.1 spec about the a standard customization facility that can be used to customize the WSDL 1.1 to Java binding. My last commit uses external binding file to turn off the wrapper mapping  please check it[1] out.  [1] http://svn.apache.org/viewvc?rev=689425&view=rev. Closing all 1.5.0 issues. 
Task,Willem Jiang,2008-07-15T11:41:49+0000,1216122109,Spring folks has release a M5 that has quite an impact over M4 so there could be some issues Willem need to address in Camel.,Done. http://svn.apache.org/viewvc?rev=677135&view=rev. Closing 1.4 issues.. 
New Feature,Unassigned,2008-07-15T12:12:03+0000,1216123923,See: http://servingxml.sourceforge.net/,Looks like a nice framework but does anyone use it?. Lets close old ticket that are not in demand.. 
Bug,Willem Jiang,2008-07-15T15:28:07+0000,1216135687,Not sure if this is a bug in CXF or Camel. Please see attached sample project.  --------------------------------------------------  INFO: Interceptor has thrown exception  unwinding now org.apache.cxf.binding.soap.SoapFault: A header representing a Message Addressing Property is not valid and the message cannot be processed 	at org.apache.cxf.ws.addressing.MAPAggregator.mediate(MAPAggregator.java:375) 	at org.apache.cxf.ws.addressing.MAPAggregator.handleMessage(MAPAggregator.java:159) 	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:221) 	at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:78) 	at org.apache.camel.component.cxf.transport.CamelDestination.incoming(CamelDestination.java:148) 	at org.apache.camel.component.cxf.transport.CamelDestination$ConsumerProcessor.process(CamelDestination.java:172) 	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:43) 	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:59) 	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:75) 	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:57) 	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:155) 	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:91) 	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:57) 	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:39) 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:41) 	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:66) 	at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:68) 	at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:531) 	at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:466) 	at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:435) 	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:322) 	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:260) 	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:944) 	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:875) 	at java.lang.Thread.run(Thread.java:595),The best person to look into this is Willem.  Eduard have your tried google and checked that without Camel the CXF part works? Maybe you could debug and track what the header name/value was that cause this exception. Would help in the trace of the bug.. Eduard   Can you try to run the sample with cxf default http transport first ? The Message Address is in the soap header  it should not be affected by the JMS transport.  I will dig your issue  when I have time next week.  Willem.. HTTP Example. I haven't time to debug this issue yet. It could be a CXF issue. I have tried using HTTP and everything is running fine. I have attached the HTTP example. It seems that the HTTP transport is setting some properties in CXF context.. I have reported this issue to CXF guys  too. Please take a look at: https://issues.apache.org/jira/browse/CXF-1703. By the way: "MTOM" does not work with Camel as transport  too. Please have a look at following JIRA issue: https://issues.apache.org/jira/browse/CXF-1702  The HTTP transport in CXF uses a „Content-Type" header. This property is missing in JMS transport and Camel transport.. Moving for 1.5. After dug the code and went through the WS-Addressing specification  I find the error that you should not set the SOAPAction in the WSDL and also a bug[2] of CamelConduit.  According Web Services Addressing 1.0 - SOAP Binding[1] 4.2 Description  The value of the SOAPAction HTTP header MUST either be identical to the value of the wsa:Action header  or be empty.  [1]http://www.w3.org/TR/2005/CR-ws-addr-soap-20050817 [2]https://issues.apache.org/activemq/browse/CAMEL-741. Added a integration test with the attached example.  http://svn.apache.org/viewvc?rev=678734&view=rev. Closing all 1.5.0 issues. 
Bug,Willem Jiang,2008-07-15T18:35:03+0000,1216146903,CAMEL-686 fixed the issue of not propagating transport headers (e.g. SOAPAction) but it looks like we added quotes around the value (i.e. getCustomer becomes "getCustomer").  I updated the CustomerServicesTest to illustrate the problem.  Also  I cleaned up the client/server-application.xml.,It is not a bug as the quotes came from CXF. CXF puts quotes around the SOAPAction's value. Anyway  I think we should apply the patch to verify header values in the test because activemq does not look for SOAPAction header (like TIBCO EMS) so the old test was not verifying the header propagation functionality.. Applied test patch with thanks to William.  http://svn.apache.org/viewvc?rev=677156&view=rev. 
Bug,Willem Jiang,2008-07-16T04:48:28+0000,1216183708,Since Spirng-aop is used when we enable the jmx support for camel by default   we need to ship that jar in the camel bin distribution.,http://svn.apache.org/viewvc?rev=677153&view=rev. Closing 1.4 issues.. 
Improvement,Willem Jiang,2008-07-16T07:41:03+0000,1216194063,CAMEL-485 shows the extension of ScheduledPollConsumer should have special consumer options for delay etc. Current SpringIntegrationEndpoint doesn't extend the ScheduledPollEndpoint.  Also need to update the wiki page.,http://svn.apache.org/viewvc?rev=677185&view=rev  http://cwiki.apache.org/confluence/display/CAMEL/SpringIntegration. Closing 1.4 issues.. 
Task,Claus Ibsen,2008-07-16T08:53:57+0000,1216198437,jsch in pom.xml is old at 0.1.31. Now 0.1.38 is finally at the central maven repo. However 0.1.39 has also just been released. We will upgrade to 0.1.38.,
Improvement,Claus Ibsen,2008-07-16T12:12:46+0000,1216210366,See nabble: http://www.nabble.com/Component-to-read-FixedLength-file---td18444614s22882.html  post on july-16 by Charles.,Also all the options/headers that is set after the processing should be updated on the wiki. Committed revision 686614.. See camel-flatpack wiki documentation how to use this. Also there is a unit test as well.. Closing 1.5 issues. 
Improvement,Claus Ibsen,2008-07-17T08:41:33+0000,1216284093,Camel does not check for already registered mbeans. There can be shared endpoints in the camel routes etc.  We used to have an instance count and everything but at the end a jms endpoint such as "activemq:topic:orders" can be reused in several routes and we should in fact only register it once.,See nabble: http://www.nabble.com/How-can-avoid-to-have-such-error-message-%22instanceAllreadyExistsException%22---td18503700s22882.html. Fix commited to SVN: http://svn.apache.org/viewvc?view=rev&revision=677549. Claus   I have tested and the error message does not appear anymore. You can close the issue.  Many thanks. Charles. Thanks a lot for reporting and testing the fixes. We appreciate all you patient work with us and the Camel.. 
Bug,Claus Ibsen,2008-07-17T15:35:36+0000,1216308936,Hi   I have discovered that the header/trailer rows have been removed from the DataSet object by the Camel Flatpack component. I have prepared a small junit test case to show you that the records Header / Trailer does not exist anymore.,Duplicate of CAMEL-731. Closing all 1.5.0 issues. 
Bug,Hadrian Zbarcea,2008-07-17T16:15:20+0000,1216311320,Using a URI like ftp://localhost/file.txt?directory=false the FtpConsumer will give a index out of bounds exception.,The error happens when poll() is called.. Patch applied with many thanks! Good catch!. Closing all 1.5.0 issues. 
Improvement,Unassigned,2008-07-18T05:56:59+0000,1216360619,We should be sure that when registering the mbean the objectname is really the correct one we use. If its a shared endpoint then we should only have a single instance. If not then we should of course have multi.  And beware the WebSphere 6.1 can have issues with the objectname as it prefixes the objectname with its own server context (the /cell/node stuff).   We should alvoid confusing end-users with "InstanceAlreadyRegistered" exceptions with stacktraces  they should not be logged if it's not really a problem. William Tam has a good grip on this  so we will work together with him to improve it.  See nabble: http://www.nabble.com/How-can-avoid-to-have-such-error-message-%22instanceAllreadyExistsException%22---td18503700s22882.html,Moving to 2.0. Already fixed by Hadrian. We can not use Milestone builds on our project  Can you please port this fix to the 1.6.1. branch. You can disable JMX when using 1.x.  JMX has been slater for a total overhaul and rewrite in Camel 2.1.. The 1.6.1 release is already built. If the community vote passes this will have to wait for 1.6.2.. The JMX issue in 1.x is not serious in that sense it logs WARN messages. And with the JMX being planned for total makeover in 2.1 timeframe. And that 1.6.x is being the stable release of 1.x we do not plan to look into this in 1.x.. Closing 2.0m1 tickets. 
Improvement,Claus Ibsen,2008-07-18T11:19:18+0000,1216379958,The camel-http component uses the http scheme and thus some end-users could by mistake enter the http protocol twice:  http://http://www.google.com etc  The error you get now is something with host is null.  See nabble: http://www.nabble.com/How-to-define-a-HTTP-Post-destination-in-a-route-in-spring-td18506233s22882.html,Will throw a ResolveEndpointFailedException in case of miss configuration such as: http://http://www.google.com. Closing 1.5 issues. 
Bug,Claus Ibsen,2008-07-18T13:01:00+0000,1216386060,When   getContext().addInterceptorStrategy(new Tracer());  is added in a RouteBuilder Class  then the timer component does not start.  e.g.   public class RouteBuilder extends RouteBuilder {      getContext().addInterceptorStrategy(new Tracer());      public void configure()  {          from("timer://export")         .to("bean:myBean");     } },Moving to Camel 1.5. let me take a look.. It was caused by NPE thrown by TraceFormatter  java.lang.NullPointerException at org.apache.camel.processor.interceptor.TraceFormatter.getBodyTypeAsString(TraceFormatter.java:124) at org.apache.camel.processor.interceptor.TraceFormatter.format(TraceFormatter.java:46) at org.apache.camel.processor.interceptor.TraceInterceptor.format(TraceInterceptor.java:68) at org.apache.camel.processor.Logger.logMessage(Logger.java:218) at org.apache.camel.processor.Logger.process(Logger.java:125) at org.apache.camel.processor.interceptor.TraceInterceptor.logException(TraceInterceptor.java:128) at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:59) at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:43) at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:155) at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:91) at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:39) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:41) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:66) at org.apache.camel.component.timer.TimerConsumer.sendTimerExchange(TimerConsumer.java:91) at org.apache.camel.component.timer.TimerConsumer$1.run(TimerConsumer.java:48) at java.util.TimerThread.mainLoop(Unknown Source) at java.util.TimerThread.run(Unknown Source). The patch fixes NPE in TraceFormatter and adds an unit test .. Applied patch with thanks to William Tam.  Also fixed the same problem for LogFormatter.. Closing all 1.5.0 issues. 
Bug,Willem Jiang,2008-07-20T01:50:50+0000,1216518650,When downloading a directory with a complex layout (mutli level directory)  the downloaded files do not reflect the local one more info here http://www.nabble.com/FTP-component%3A-Possible-bug-td18540318s22882.html,The patch also contains the unit test.. license granted to ASF. Patch applied with thanks to Ryadh.  http://svn.apache.org/viewvc?rev=678246&view=rev. Just for the note: the SFTP part has the same issue then. Comitted the fix for the SFTP part  and the failing test on Bamboo due to clash with port number. Remember to use a new number for each test.. note taken regarding the port number.. Ryadh. Oh the port number issue is only surfaced on the Bamboo CI server. Running mvn test locally doesn't really show this issue. So this issue has bitten us from time to time   BTW: Thanks for taking a good look at the FTP component and finding the issues it has and fixing them as well. This is really great. I have added a new improved unit test that uses 2 folders and different logo files. Works correctly now.. That's a pity  thought that jsch would cut it. You welcome  I'll try to provide help as much as I can. Closing all 1.5.0 issues. 
Improvement,Willem Jiang,2008-07-21T08:36:38+0000,1216629398,Eduard Hildebrandt  logged a JIRA[1]  in CXF  it is actually a camel transport issue.  https://issues.apache.org/jira/browse/CXF-1703,http://svn.apache.org/viewvc?rev=678367&view=rev. Closing all 1.5.0 issues. 
Improvement,Claus Ibsen,2008-07-22T07:41:48+0000,1216712508,When using tracing and  message body is byte[] then trace looks like this:  2008-07-19 14:26:12 391 [enerContainer-1] INFO  TraceInterceptor >>>        - ID-vchekan/3625-1216502771610/1-1 -> to3 >>> To[activemq:vadim44] InOnly Properties: ..................  BodyType:[B Body:  Notice BodyType="[B". Proposal: use getCanonicalName instead of getName in interceptor. I will publish the patch when I sort out problems with junit.,Vadim. Thanks for the point of use the canoical classname it works nice. You get byte[] now.. Closing all 1.5.0 issues. 
Bug,Willem Jiang,2008-07-22T10:08:08+0000,1216721288,CAMEL-726 shows a ws-address error when using Camel transport for CXF. After running the code   I found there is no To address tag  generated in the soap header. It was caused by the CamelConduit can set right targe reference.,http://svn.apache.org/viewvc?rev=678732&view=rev. Closing all 1.5.0 issues. 
New Feature,Gert Vanthienen,2008-07-22T12:22:35+0000,1216729355,Add a maven archetype to allow users to easily create/use a Scala DSL RouteBuilder,Moving to 2.0. Fixed in http://svn.eu.apache.org/viewvc?view=rev&revision=706062. Closing all 1.5.0 issues. 
New Feature,Willem Jiang,2008-07-22T15:07:27+0000,1216739247,for more background see...   	console and commands 	extending the console    some ideas for what the console can do   	listing routes and the steps in routes 	dynamically add some simple routes. e.g. type in "from uri to uri". Maybe the Scala DSL could be its own shell? 	enable/disable tracing 	debugging? e.g. stepping through  setting breakpoints 	enable/disable a 'go slow dial' for easier debugging etc,Hi James   I think this command line console should be placed in the camel trunk to avoid the camel-core dependency on the ServiceMix side. Now I have no idea about how to implement the dynamical adding simple routes. How can I map the "from uri to uri" to a Java DSL file without writing a stupid parser ?  Can you show me some hits ?  Thanks   Willem. Agreed on putting it into the camel distro; it should only depend on some gshell stuff which shouldn't change very much.  How about we start by adding the easy stuff; like listing all routes  endpoints.  Something like an ls command?  Maybe we should make a kinda virtual camel file system - kinda like unix. e.g.    camel> ls  routes endpoints  camel> cd endpoints  camel> ls  direct:foo mock:cheese  camel> ls -l  direct:foo org.apache.camel.component.direct.DirectEndpoint  mock:cheese org.apache.camel.component.mock.MockEndpoint  camel> cd ../routes  camel> ls  route1 route2 route3  camel> cd route1  camel> ls -al  from1 to1 to2  camel> ls -al  from1 direct:foo  to1 mock:cheese  camel> cd mock:cheese  camel> ls  properties exchanges  camel> cd exchanges  camel> ls  exchangeId1 exchangeId2 exchangeId3  camel> cd exchangeId1  camel> ls  properties in out    You get the idea   i.e. maybe we write a little generic kinda cd / ls file system shell which can be really easy to extend can then navigate around all the available endpoints & routes showing a summary listing or a detail listing etc.  (Maybe we can just make this a kinda JMX browser really - not sure).  Then other things we'd need to add are things like turning on / off tracing  or enable/disable the the delayer to really slow down the processing of routes so its easy to watch - or even allowing stepping through routes maybe via the debugger and showing the contents of endpoints (i.e. showing what the tracer has collected).  To answer your question on how to add new routes via a shell - maybe we just have a separate camel-scala shell that lets you type in the scala DSL?. Thanks  James  It is much clearer for me.  I just have another question  how can I get the camel context from the gshell ? Is there any registry in the SMX where I can look it up ?. Its probably best to use JMX for all this I think - it avoids possible class loader issues. Though maybe we could use the OSGi registry too; but JMX is probably simpler. OK  I will try JMX first. Moving to 2.0. CAMEL-3383 will do it in Apache Karaf. Closing all resolved tickets from 2010 or older. 
Bug,Unassigned,2008-07-22T18:52:11+0000,1216752731,1. Set -Dfile.encoding=Cp1252  2. Set tracing ON.  3. Run the code: ==================================================== from("timer://kickoff?period=10000"). 		process(new Processor() { 			public void process(Exchange exchange) throws Exception  { 				ArrayList<HashMap<String  Object>> rows = new ArrayList<HashMap<String  Object>>(); 				HashMap<String  Object> row = new HashMap<String  Object>(); 				row.put("column1"  "Value 1"); 				rows.add(row); 				exchange.getOut().setBody(rows); 			} 		}). 		marshal().xstream(). 		to("mock:result"); ====================================================  3. Observe output: ==================================================== Jul 22  2008 11:35:28 AM org.apache.camel.processor.Logger process INFO: ID-vchekan/4855-1216751728436/1-0 -> interceptor1 Interceptor[Delegate(Pipeline[DeadLetterChannel[Delegate(TraceInterceptor[Processor[enviance.org.test.MessageBrokerPackage$1@13e0aba]])  RecipientList[log:org.apache.camel.DeadLetterChannel?level=error]  RedeliveryPolicy[maximumRedeliveries=6]]  DeadLetterChannel[Delegate(TraceInterceptor[Marshal[org.apache.camel.model.dataformat.XStreamDataFormat@3257b8]])  RecipientList[log:org.apache.camel.DeadLetterChannel?level=error]  RedeliveryPolicy[maximumRedeliveries=6]]  DeadLetterChannel[Delegate(TraceInterceptor[To[mock:result]])  RecipientList[log:org.apache.camel.DeadLetterChannel?level=error]  RedeliveryPolicy[maximumRedeliveries=6]]])] InOnly Properties: {org.apache.camel.timer.time=null  org.apache.camel.timer.period=10000  org.apache.camel.timer.name=kickoff} Headers:{} BodyType:null Body:Message: null Jul 22  2008 11:35:28 AM org.apache.camel.processor.Logger process INFO: ID-vchekan/4855-1216751728436/1-0 -> processor1 Processor[enviance.org.test.MessageBrokerPackage$1@13e0aba] InOnly Properties:{org.apache.camel.timer.time=null  org.apache.camel.timer.period=10000  CamelCauseException=null  org.apache.camel.timer.name=kickoff} Headers:{} BodyType:null Body:Message: null Jul 22  2008 11:35:28 AM org.apache.camel.processor.Logger process INFO: ID-vchekan/4855-1216751728436/1-0 -> marshal1 Marshal[org.apache.camel.model.dataformat.XStreamDataFormat@3257b8] InOnly Properties:{org.apache.camel.timer.time=null  org.apache.camel.timer.period=10000  CamelCauseException=null  org.apache.camel.timer.name=kickoff} Headers:{} BodyType:java.util.ArrayList Body:[{column1=Value 1}] Jul 22  2008 11:35:29 AM org.apache.camel.processor.Logger process INFO: ID-vchekan/4855-1216751728436/1-0 -> to1 To[mock:result] InOnly Properties:{org.apache.camel.timer.time=null  org.apache.camel.timer.period=10000  CamelCauseException=null  org.apache.camel.timer.name=kickoff} Headers:{} BodyType:[B Body: ====================================================  As you see xstream returms an empty array (the end of the last line).  4. Change encoding in step 1 to -Dfile.encoding=UTF-8 and re-run the application. ==================================================== Jul 22  2008 11:40:18 AM org.apache.camel.processor.Logger process INFO: ID-vchekan/4875-1216752017927/1-0 -> interceptor1 Interceptor[Delegate(Pipeline[DeadLetterChannel[Delegate(TraceInterceptor[Processor[enviance.org.test.MessageBrokerPackage$1@13e0aba]])  RecipientList[log:org.apache.camel.DeadLetterChannel?level=error]  RedeliveryPolicy[maximumRedeliveries=6]]  DeadLetterChannel[Delegate(TraceInterceptor[Marshal[org.apache.camel.model.dataformat.XStreamDataFormat@3257b8]])  RecipientList[log:org.apache.camel.DeadLetterChannel?level=error]  RedeliveryPolicy[maximumRedeliveries=6]]  DeadLetterChannel[Delegate(TraceInterceptor[To[mock:result]])  RecipientList[log:org.apache.camel.DeadLetterChannel?level=error]  RedeliveryPolicy[maximumRedeliveries=6]]])] InOnly Properties:{org.apache.camel.timer.time=null  org.apache.camel.timer.period=10000  org.apache.camel.timer.name=kickoff}  Headers:{} BodyType:null Body:Message: null Jul 22  2008 11:40:18 AM org.apache.camel.processor.Logger process INFO: ID-vchekan/4875-1216752017927/1-0 -> processor1 Processor[enviance.org.test.MessageBrokerPackage$1@13e0aba] InOnly Properties: {org.apache.camel.timer.time=null  org.apache.camel.timer.period=10000  CamelCauseException=null  org.apache.camel.timer.name=kickoff} Headers:{} BodyType:null Body:Message: null Jul 22  2008 11:40:18 AM org.apache.camel.processor.Logger process INFO: ID-vchekan/4875-1216752017927/1-0 -> marshal1 Marshal[org.apache.camel.model.dataformat.XStreamDataFormat@3257b8] InOnly Properties:{org.apache.camel.timer.time=null  org.apache.camel.timer.period=10000  CamelCauseException=null  org.apache.camel.timer.name=kickoff}  Headers:{} BodyType:java.util.ArrayList Body:[ {column1=Value 1} ] Jul 22  2008 11:40:18 AM org.apache.camel.processor.Logger process INFO: ID-vchekan/4875-1216752017927/1-0 -> to1 To[mock:result] InOnly Properties: {org.apache.camel.timer.time=null  org.apache.camel.timer.period=10000  CamelCauseException=null  org.apache.camel.timer.name=kickoff}  Headers:{} BodyType:[B Body:<?xml version="1.0" ?><list><map><entry><string>column1</string><string>Value 1</string></entry></map></list> ====================================================  You see xml now.  I think it is a bug when xstream component silently refuses to work by producing empty output. It should either take into account configured encoding when producing output or explicitly refuse to work if encoding is "wrong" (throw an exception explaining the reasons of error).  Fixing this error is important because it affects at least 2 windows environments: Eclipse and ActiveMQ. By default Eclipse on Windows has Cp1252 encoding set. I do not know what encoding is set in ActiveMQ for Windows but it does not work unless activemq.bat is edited and encoding is explicitly set there.,Vadim I have tried to reproduce the bug but failed. I have added a unit test to camel-xstream component: MarshalListTest  I have also upgraded the xstream .jars in the pom.xml to newer releases. So could you try it out with the 1.5-SNAPSHOT version?. This is getting interesting Claus. I've upgraded to trunk and I still can reproduce the issue. In my output in eclipse there is no encoding in xml. But I get it in the test. And maven tests pass on my box. So now I have 3 combinations: no body at all  xml without encoding and xml with encoding 8) I keep working on it.. Claus  looks like upgrade to xstream 1.3 solved the problem. After I refreshed my eclipse project and made sure that xstream-1.3.jar is loaded I have xml output with explicit encoding whichever file.encofing I set. You can close the issue. Thanks!. Actually I can close it. 
Improvement,Jonathan Anstey,2008-07-23T11:57:24+0000,1216814244,,Moving to 2.0. Assigning this to me so I don't forget about it.. Removing fault stuff from list as this will be most likely deprecated.  org.apache.camel.model.ProcessorType.removeFaultHeader(String) org.apache.camel.model.ProcessorType.setFaultBody(Expression) org.apache.camel.model.ProcessorType.setFaultHeader(String  Expression). Removing org.apache.camel.model.ProcessorType.convertFaultBodyTo(Class) from the list as faults will be changed to outputs in Camel 2.0.. Removing org.apache.camel.model.ProcessorType.end() as this is handled implicitly in the Spring DSL.. org.apache.camel.model.ProcessorType.policies() - not even sure how this would be used from the Spirng DSL... not sure why it was in my original list.. Deprecated org.apache.camel.model.ProcessorType.trace() and org.apache.camel.model.ProcessorType.trace(String) in revision 699285.. Java DSL: exception Spring DSL: onException  I think we should align these.. I've updated the Java DSL to align with Spring. We now have onException for both.. Java DSL: method(bean  method) Spring DSL: methodCall(bean  method)  Example here: http://activemq.apache.org/camel/bean-language.html. Nice catch! I kinda like the method() name better which means we'd have to deprecate the Spring DSL methodCall element. Not sure how to do this without duplicating all the JAXB classes (yuck!). I think I'll just assign myself a JIRA to change this is 2.0 when we're not afraid to break API stuff. Java DSL: script("js"  "some javascript here") Spring DSL: <expression language="js">some javascript here</expression>  And with the Java DSL you can add attributes to the script engine. This is not possible at all with spring DSL today.  See: http://cwiki.apache.org/confluence/display/CAMEL/Scripting+Languages+Context. Could there be a problem when using the recipientList in spring xml you can not build expressions with eg a tokenizer.  Eg: http://activemq.apache.org/camel/recipient-list.html the last java example:  from("direct:a").recipientList( header("recipientListHeader").tokenize(" "));  How do you do this in spring XML.  And end user indicated he could not do this. Yikes  I think you've uncovered a major gap here! It doesn't look like we can do any of the chained expression stuff in the Spring XML. If you look in ValueBuilder  there are a bunch of things in there which we can only do in the Java DSL.. Well I think closing the gap should be a major goal in Camel 2.0 then. Maybe we need to rework the spring DSL so we group outputs in a nested shadow element  to not confuse end users and having to many options in the ctrl + editor helper  eg: onException has these outputs currently (see below) and all that is mixed with the important elements you need to configure specially for onException. And the editor unlike (IDEA) doesnt bold the important ones.   <xs:choice maxOccurs="unbounded" minOccurs="0">             <xs:element ref="tns:aggregator"/>             <xs:element ref="tns:bean"/>             <xs:element ref="tns:catch"/>             <xs:element ref="tns:choice"/>             <xs:element ref="tns:when"/>             <xs:element ref="tns:otherwise"/>             <xs:element ref="tns:convertBodyTo"/>             <xs:element ref="tns:delayer"/>             <xs:element ref="tns:onException"/>             <xs:element ref="tns:filter"/>             <xs:element ref="tns:finally"/>             <xs:element ref="tns:handleFault"/>             <xs:element ref="tns:interceptor"/>             <xs:element ref="tns:idempotentConsumer"/>             <xs:element ref="tns:intercept"/>             <xs:element ref="tns:loadBalance"/>             <xs:element ref="tns:loop"/>             <xs:element ref="tns:marshal"/>             <xs:element ref="tns:multicast"/>             <xs:element ref="tns:pipeline"/>             <xs:element ref="tns:policy"/>             <xs:element ref="tns:proceed"/>             <xs:element ref="tns:process"/>             <xs:element ref="tns:recipientList"/>             <xs:element ref="tns:removeHeader"/>             <xs:element ref="tns:removeProperty"/>             <xs:element ref="tns:resequencer"/>             <xs:element ref="tns:route"/>             <xs:element ref="tns:routingSlip"/>             <xs:element ref="tns:setBody"/>             <xs:element ref="tns:setHeader"/>             <xs:element ref="tns:setOutHeader"/>             <xs:element ref="tns:setProperty"/>             <xs:element ref="tns:splitter"/>             <xs:element ref="tns:thread"/>             <xs:element ref="tns:throttler"/>             <xs:element ref="tns:throwFault"/>             <xs:element ref="tns:to"/>             <xs:element ref="tns:transform"/>             <xs:element ref="tns:try"/>             <xs:element ref="tns:unmarshal"/>           </xs:choice>. You can now do:  <recipientList delimiter=" ">     <header>myHeader</header>   </recipientList>. Closing 2.0m1 tickets. 
Sub-task,Claus Ibsen,2008-07-23T18:22:04+0000,1216837324,,This patch adds support for setting the out header in the Spring DSL.  I've also made a few modifications to the setHeader DSL method:  Removed the SetHeaderProcessor because it was much cleaner to just use the ProcessorBuilder's version of this. Removed the ability to have a child processor in the <setHeader> element. There is a good reason for this: (1) the Java DSL doesn't even support this  (2) its really not intuitive and no one IMO would want to use it!. Jonathan  great patch.  I am wondering if we can improve the tag for the attribute only solution as below: + <setOutHeader headerName="theHeader" value="the value"> + <expression/> + </setOutHeader>  It requires the empty expression tag that is a bit confusing for end-users. Wold be great with: + <setOutHeader headerName="theHeader" value="the value"/>  But I guess its declare in the XSD file.  If not maybe we should not support the value attribute and force the child expression tag + <setOutHeader headerName="theHeader"> + <constant>the value</constant> + </setOutHeader>. Hey Claus  I'm not sure if we can support this format  <setOutHeader headerName="theHeader" value="the value"/>  because the XmlElementRef JAXB attribute cannot be set to optional (thus the expression node is mandatory)... I haven't looked at depth into this though. There may be another way around this.  I do like the second option however. I think the main bit there would be adding the 'constant' expression type to the Spring DSL as its not there currently. Shouldn't be too bad. I'll take a look tomorrow.. I've switched things up a bit and now the setHeader/setOutHeader features use the following nicer syntax for constants:  <route>   <from uri="seda:a"/>   <setOutHeader headerName="theHeader">     <constant>the value</constant>   </setOutHeader>   <to uri="mock:b"/>      </route>. We must remember to update the wiki documentation with this new constant in the spring xml.. How about this?  http://cwiki.apache.org/confluence/display/CAMEL/Constant. I also added the link here http://cwiki.apache.org/confluence/display/CAMEL/Languages+Supported so it would show up elsewhere in the documentation.. Very good. Could you state that constant language is in Camel 1.5.. Applied patch. Thanks a lot Jonathan. Great work with the new constant language to not make the spring DSL confusing with the empty expression tags.  Committed revision 679483.. I've added the availability comment in the docs. I'm glad to see the empty expression tags go too. Again thanks a lot  its a great patch (as always from you). Jonathan  I assume the <constant> also works for the regular setHeader tag as well? If so I think we should add a sample with setHeader to the wiki as well. I do think setHeader is more used than setOutHeader.  If the regular setHeader has the value attribute also  we should probably @deprecated it  so we remember to remove it in Camel 2.0. This patch deprecates the setHeader+value attribute DSL method and changes a bunch of usages so any snippets on the wiki will be updated. I've also added a little comment to the Camel 1.5 release notes so any users won't be surprised by this change.. Applied patch no 3. Thanks.. Closing all 1.5.0 issues. 
Bug,Claus Ibsen,2008-07-23T19:17:01+0000,1216840621,Using the $headerkey shorthand for xpath expression throws a NPE if the headerkey doesn't exists on the in message.  We should try to find a better workaround for key doesn't exists. The NPE is thrown by SUN in their xpath engine.  Check nabble: http://www.nabble.com/Camel-XPath-and-no-variables-found-in-MessageVariableResolver---What-should-Camel-do--td18603960s22882.html,Fixed in trunk  rev 679170. Closing 1.5 issues. 
Improvement,Unassigned,2008-07-24T04:58:48+0000,1216875528,Usually rooms are on URL which is different from the server url. For example if you login as me@jabber.org then rooms will be room33@conferences.jabber.org. Use xmpp discovery to find what rooms server is and make it possible to set room by name instead of room@server. Preserve backward compatibilty by analyzing room string and if there is no "@" symbol then perform autodiscovery.,Vadim feel free to submit a patch with this feature.. Sure Claus. The fix is ready and I'm working on junit now.. Resolved by CAMEL-757. Closing all 1.5.0 issues. 
Sub-task,Claus Ibsen,2008-07-24T06:00:31+0000,1216879231,Upgrade pom.xml to v1.3,Closing 1.5 issues. 
Bug,Unassigned,2008-07-24T06:11:14+0000,1216879874,Apparently xmpp component can produce consumers endpoint but so far I wasn't successful running it. Neither this feature is mentioned in documentation. Neither it is covered by nunit.  Code: 		from("xmpp://xxxxxxx@jabber.org/?password=xxxxxxx&participant=yyyyyyy@jabber.org"). 		to("mock:vadim");,Ok  it was an issue with me logged in into xmpp server twice. Works fine now.. 
Improvement,Willem Jiang,2008-07-24T07:55:32+0000,1216886132,Current ErrorHandler instance is get from RouterBuilder  but if we set the ErrorHandler into the CamelContext   RouterBuilder will not take that into consideration. You can find more information here[1]  [1] http://www.nabble.com/DeadLetterChannel-Configuration-Camel-1.4-td18622356s22882.html#a18622356,http://svn.apache.org/viewvc?rev=679345&view=rev. Closing all 1.5.0 issues. 
New Feature,Gert Vanthienen,2008-07-24T07:59:12+0000,1216886352,Actors in Scala are concurrent processes that communicate by exchanging messages.  We should add a component that allows people to use Scala actors for implementing concurrent execution in Camel  even from within the Java/Spring DSLs.   from("direct:a").to("actor:pong"); from("actor:pong").process(...);,Moving to 2.0. Gertv I am closing this one.  Feel free to create new tickets in the future for any work on camel-scala. Ups sorry I though this was the initial ticket for camel-scala  Obvious this is for using actors. Is there any demand for this? People can use camel-akka for example. Lets close old ticket that are not in demand.. 
Improvement,Claus Ibsen,2008-07-24T13:55:38+0000,1216907738,It'd be nice to see the camel archetypes along with things like struts  appfuse and the other default archetypes in the eclipse tooling for maven,I'm taking a look at this today.. After looking at http://svn.sonatype.org/nexus/trunk/nexus-indexer/src/main/java/org/sonatype/nexus/index/creator/MinimalArtifactInfoIndexCreator.java  it seems that archetypes need to have 'archetype' somewhere in the groupId/artifactId in order for Nexus (& m2eclipse) to pick them up.  I've attached a simple patch for this issue.. The screenshot shows that the Nexus Indexer picks up the locally built Camel archetype perfectly!  We'll have to wait for the 1.5 release though to get them in the default list from repo1.maven.org.... Of course  once this patch is applied I'll go ahead and update http://activemq.apache.org/camel/creating-a-new-spring-based-camel-route.html. Jonathan. Thanks for the patch. I have applied it. Feel free to update the wiki.. Its updated now. Once 1.5 gets released (and shows up in m2eclipse) we should definitely mention the m2eclipse create project option as an alternative to the command line.. Jonathan you could write something about this on the release note page: http://activemq.apache.org/camel/camel-150-release.html  Then its not forgotten and that it should show up in m2eclipse.. Done.. Closing all 1.5.0 issues. 
New Feature,Unassigned,2008-07-24T13:56:34+0000,1216907794,see http://code.google.com/p/gxp/,Moving to 2.0. 
Bug,Unassigned,2008-07-24T18:02:12+0000,1216922532,The AMQP tests are currently disabled. Adding an older version of MINA (than Camel uses) & commons lang to the classpath got the tests passing except for ObjectMessage type test.  Sending a TextMessage and BytesMessage work fine so I'm opening up a separate JIRA for the ObjectMessage issue.,Granting Apache license this time around.... Applied patch with thanks.. Closing all 1.5.0 issues. 
Bug,Jonathan Anstey,2008-07-24T18:09:21+0000,1216922961,Sending a TextMessage and BytesMessage work fine but when you try to send a Serializable object it gets lost somehow... see the testJmsRouteWithObjectMessage test in http://svn.apache.org/repos/asf/activemq/camel/trunk/components/camel-amqp/src/test/java/org/apache/camel/component/amqp/AMQPRouteTest.java to see what happens.,I tried the same test out on ActiveMQ and it works fine. This maybe an issue with Qpid itself or maybe how camel-jms interacts with Qpid.  Since sending a byte array works  a workaround for sending objects could be to get the AMQP component to serialize the object itself before sending it along to Qpid.  If there are no objections  I could submit a patch for this.. +1. After further inspection  this is a known Qpid bug. See: https://issues.apache.org/jira/browse/QPID-1092. The fix has been merged already so the next Qpid release should work.  As for the workaround I mentioned  it wouldn't work as well as I thought. By not using Qpid's ObjectMessage (and just using BytesMessage) Camel would have no way of knowing it had to auto deserialize the byte array back to an Object. This would actually be more confusing to the user IMO.  I guess we'll just have to wait until Qpid gets released again?. Yeah - lets just wait for qpid to get stable & working. Damm they have approx 250 fixed out of 400 and its just M3 to M4. There is a long way. FYI M3 has just passed the vote so will be available soonish. The issue in Qpid has been fixed in M3 so sending ObjectMessages should be OK... a quick test didn't work for me but maybe after a little more investigation this can be solved for Camel 1.5.. Jon could you try to upgrade the dep on mina-core to the the same from the uber pom = 1.1.7  We have a conflict here: http://activemq.apache.org/camel/maven/dependency-convergence.html. Unfortunately  Qpid requires MINA 1.0.1... it blows up otherwise.. M3 still isn't released. I'm moving this one to Camel 2.0. Jonathan. I just got a blog news that M3 has been released.. Cool stuff. Doesn't seem to be in the incubating maven repo yet but I'm sure it eventually will be.. The Qpid project has apparently abandoned Maven altogether! I guess we could always put the qpid artifacts in a maven repo ourselves (perhaps the ServiceMix repo)?  See: http://aidan-skinner.livejournal.com/229584.html. Jon we might need to let gertv add the M3 on the servicemix repo so we can upgrade  The M3 version is here: http://www.apache.org/dist/incubator/qpid/M3-incubating/. Yeah  this seems to be our only option. I was hoping the Qpid guys would use the script I made for them to do the maven deploy... doesn't look like they've used it yet   Gert  would be great if you could add Qpid M3 to the ServiceMix repo.. Jonathan they have released M4  I can upload .jars to fusesource repo  so if the M4 or later is not in a central maven repo  we should upload to our own and get this done in 2.0 http://qpid.apache.org/download.html. upgraded to qpid v0.5.0 and the object unit test now works.  trunk: 783248.. Closing all 2.0M2 tickets. 
Improvement,Claus Ibsen,2008-07-25T06:59:22+0000,1216969162,Currently XmppEndpoint support room only for producer but not for consumer.,Vadim I anticipate that you can create the consumer part as well and attach a patch? If so we can target this for Camel 1.5?. Absolutely. I'm mostly done with the code and busy with QA and junit modifications. Likely I'll be done in 1-2 weeks so 1.5 is the target.. Comments for the patch:  Added support of MultiUserChat to XmppConsumer. I opted to add it into XmppConsumer instead of creating a separate XmppMultiUserchatConsumer because when I did it  it turned out to be two identical classes with slight differences.  Bug fix. XmppConsumer listened to "raw" xmpp packages filtering and processing those of type "Message". Because of low-level nature of packages XmppConsumer failed to check either the type of message is "error" or "response" so unit test passed successfully because XmppComponent thought that message has been received when in fact echo with error message has been sent by server. I fixed it by removing listener to the raw xmpp connection packages and utilizing smack.Chat class which does all error detecting and other low level functions. It allowed to remove some extra code from XmppConsumer.processPacket too.  XmppEndpoint As soon as nobody listens to the raw packages  no need to have PacketFilter property anymore. Added conference subdomain detection code (CAMEL-748 can be closed if patch is accepted)  GroupChat Producer and Consumer: added attribute to suppress history messages to be sent upon room joining.  Unit test: Had some problems with accounts kicking out each other when log in or join room. Solved by introducing 3 different resources/nicknames for a single account.. Vadim  You have this code. Could you explain with code comments why you are creating the private chat two times?  privateChat = endpoint.getConnection().createChat(endpoint.getParticipant()); + privateChat.addMessageListener(this); + privateChat = endpoint.getConnection().createChat(endpoint.getParticipant());. /*  Because I'm a sleepy head  */. Replaced the attach.. Another attempt to attach file.. Vadim  nice patch. I have a few comments:  Would be nice with INFO logging in doStart() about connecting to ... so end-users can see what room / chat server / whatever is connected to (there is an if .. else in the start code) You can fix the TODO about the swallowing exceptions by wrapping in a CamelRuntimeExchangeException or what is is called - see mail on dev forum  And then is there any new stuff that needs to be updated in the wiki as well?. Claus  thanks for your review and guidance. Attached new diff.  Added logging in doStart() I do understand the issue with exceptions now. processPacket() which sends a message is invoked asynchronously from smack library. And it is defined as not throwing any exceptions because there is nobody up in the stack to handle it. It is tempting to add exception handling to camel process() call but it would be a bad idea. Sometimes endpoint needs information about success/failure for example jdbc endpoint would rollback transaction if message have not been sent. So I left try/catch but I replaced e.printStackTrace with LOG.error.. Oh  and I'll take care about wiki update.. Vadim. A good idea of patches is to name the files differenty  so for instance with the bug id number. You have attached a patch.txt that is a very small patch and not like the other one.  Could you check it out and attach the correct path. Ok  another attempt to attach the correct file. Applied patch with thanks to Vadim. Thanks again for all the hard work on the XMPP stuff.. Closing all 1.5.0 issues. 
Bug,Claus Ibsen,2008-07-25T07:39:03+0000,1216971543,The SFTP (the secure) has this bug that it doesn't check if the folder already exsits before it tries to create the remote folder.  See nabble: http://www.nabble.com/SftpProducer-bug-td18640519s22882.html  Bela the reported want to contribute a patch later  or he will be able to test it.,Remember to check the regular FTP producer as well  it could have similar bug.. A fix is committed http://svn.apache.org/viewvc?view=rev&revision=679979  Bela should test it on SFTP.. It works only if the last folder is missing. It seems the sftp servers don't create intrermediate folders for you. At least my server doesn't (out of the box Fedora 7). So I think we have to bring back the code to create the folders on by one.. SftpProducer patch to fix the folder creation issue.. Applied patch. Thanks Bela.. Just for the record. I made the same code changes for the regular FTP producer as well.. Closing 1.5 issues. 
Improvement,Willem Jiang,2008-07-25T09:54:48+0000,1216979688,Added a parameter "MultiParameterArray" for the camel-bean take an array of parameters from body without any parameter expression work.,http://svn.apache.org/viewvc?rev=679753&view=rev. Closing all 1.5.0 issues. 
Sub-task,Claus Ibsen,2008-07-26T13:41:53+0000,1217079713,Just as the new option in the ftp component consumer.exclusiveRead we should have this option for the FileConsumer so we wont poll file that are in progress of being written.,Commited to trunk  http://svn.apache.org/viewvc?view=rev&revision=680002. Could be an issue on unix boxes that we acquire the read access to soon. We need to test it some more and find a better solution.. Committed a better solution using java.nio for the locking test. Closing 1.5 issues. 
Task,Claus Ibsen,2008-07-26T16:51:00+0000,1217091060,We have some source in camel-core for a JMX component to monitor a JMX. Maybe we should improve the JMXConsumer  add unit tests and document it on the wiki.  Just added this ticket so its not forgotten. The component is not exposed.,the jmx component in camel-core is @deprecated and will be removed in Camel 2.0.  We do an overhaul of JMX in 2.1. And the jmx component that is in camel-core does not work at all.. trunk: 787905.. Closing all 2.0M3 tickets. 
New Feature,Claus Ibsen,2008-07-27T07:00:22+0000,1217142022,The smoks framework http://milyn.codehaus.org/Smooks  has mappings for various data formats such as EDI  CSV  XML etc. As EDI is still a big deal in integration we should also have integration from Camel to Smoks. There can be a license issue as smoks is GPL so we should host it at camel-extra.  TSS also had a news bit about smoks in Mule: http://www.theserverside.com/news/thread.tss?thread_id=50129,Asked on user forum about Apache firendly license: http://www.nabble.com/Milyn-Smoks---License-td18944385.html  However they don't wanna change. See issue #4 at camel-extra http://code.google.com/p/camel-extra/. Added initial component in camel-extra and updated the wiki.  However we didn't gain as much as I hoped from Smooks. Only a data format to unmarshal from a stream to a XML document.. Closing 1.5 issues. 
Bug,Willem Jiang,2008-07-28T04:07:30+0000,1217218050,The example applications from Camel 1.4 source distribution work correctly on my machine.  After comparing the sample Spring XML configuration and my Spring configuration  I noticed there is no jmxAgent element in the sample XML where my configuration has this element.  The problem I noticed was that when the disabled attribute of the jmxAgent element is set to true  the redelivery policy does not work.     http://www.nabble.com/DeadLetterChannel-Configuration-Camel-1.4-td18622356s22882.html#a18622356,http://svn.apache.org/viewvc?rev=680249&view=rev. Closing all 1.5.0 issues. 
Sub-task,Claus Ibsen,2008-07-28T04:30:22+0000,1217219422,camel-ftp should have the same move related options as the file component:  	moveNamePrefix 	moveNamePostfix    It is a common use-case to after downloading from a FTP Server to either:  	delete the file 	move it    So we should support the 2nd use-case as well.,When moving and the target filename exists  it should delete it first as the file component does. If the operations failed it should log a WARN. The regular FTP part is almost done. Need an extra unit test.. Committed the regular FTP part.  TODO The SFTP consumer.. TODO Update Wiki. Done now. Bela will help test the SFTP part.. I run a couple of tests in my environment:  moving files to sub folders that doesn't exists: PASS moving files where an existing file already exists (camel should try to delete the existing file first): PASS moving files to same folder: PASS  Notes:  recursive=false was set at all times. I think the false should be the default not true. Wiki really should warn about the implications of the recursive poll. Same folder move was tested with prefix/suffix + exclusions. Wiki also should point out that exclusion prefix "done/" is not substitute for recursive=false. Or is it?? Then we have a bug ... Hi Bela  Thanks a lot for testing. Good point about the default value for recursive. I have changed it for Camel 1.5. Closing 1.5 issues. 
Bug,Willem Jiang,2008-07-29T04:02:15+0000,1217304135,The InstrumentationProcessor currently only catches exception and sets it in the exception.   Runtime errors and throwables can be thrown all the way out of the DeadLetterChannel's process method  out of the reach of exception policy.,Patch applied with thanks to William.  http://svn.apache.org/viewvc?rev=680633&view=rev. 
Improvement,Willem Jiang,2008-07-29T05:15:52+0000,1217308552,We have explored some ideas of how one may retreive protocol headers from of a Camel message in this thread: http://www.nabble.com/-PROPOSAL--ProtocolMessage-to18078001s22882.html#a18078001.  In summary  there were two train of thoughts: 1) set aside a place for "ProtocolHeaders" in Camel message which is strictly for storing what a component recognizes as protocol headers.  A component can still select some or all of these protocol headers to be copied to/from the native message header.  2) Using the current headers in Camel message and let people configure what should be copied to/form native message.  I thought about both approaches a bit.  I went with the later and created a patch.  I guess the problem with the first approach is it introduces one more place to look for headers.   We may end up forcing components examine both places for processing information.    In my patch  I create a HeaderFilterStrategy that can control what to copy in/out Camel message headers.  A component can be injected with a strategy by Spring or using APIs.  I modified the following components to use this strategy: jms  cxf  http  jetty  and jhc.  Please review my patch and will update other components based on feedbacks.,Hi  Very good work. Makes the filtering logic of the headers coded "using the same standard". Great work.  Looks very good. Just a comment while digging into the code/javadoc:  DefaultHeaderFilterStrategy could the class javadoc state what "out" direction is referred as. For completeness and not to miss understand it. DefaultHeaderFilterStrategy the interface methods applyFilerXXX is in the bottom of the file. I would move the to the top. And let the properties be in the bottom. DefaultHeaderFilterStrategy would be nice with javadoc on the extendsXXX method that implementators is supposed to use if needed  Maybe giving a hint in the class javadoc to see the camel-jms component for an example how you should use it as a component developer.  Since the applyFilterXXX methods works as excluding headers it can be a bit confusing at first reading the code that you use !applyFilterXXX and then add the header on a camel exchange etc. I guess it just take a little while to get used to  People are not good at reading the ! in if statements.  BTW: How many of the components are still to be of the same standard. Thanks for the applying the patch and the feedbacks. I will come up with a list of candidates to be updated for header filtering strategy.. mail and xmpp are the only components that could be updated. I'll work on those. ampq inherits from jms so it is all set.. headerflterstrategy_aware_patch achieves the following: 1) create a new interface "HeaderFilterStrategyAware" which can identify components that should support header filter strategy. 2) Remove getters/setters of the strategy from (Default)Endpoint and (Default)Component. Endpoint and Component interfaces are not aware of the strategy.. HFS_aware_plus_cxf.patch supercedes headerflterstrategy_aware.patch  It does what headerflterstrategy_aware.patch does. It also makes CxfComponent HeaderFilterStrategy aware and the component now propagates headers like the CxfSoapComponent.. Tam are there still some components that needs to be refactored with your new strategy?  Do you mind posting a little status update? I assume all your patches have been committed by Jiang?. Yea  I still have to update mail and xmpp. I'll have it done this week. Sorry about the delay. Willem have applied my patches so far (and thanks).. Thanks Tam. Don't be sorry about the delay your patches are great. And we have plenty time before we start cutting a 1.5 release. update xmpp and mail component with header filter strategy. Once this patch is reviewed and applied  we can resolve this issue.. @William. Last patch (xmpp_mail_hfs.patch) applied with many thanks!. Closing all 1.5.0 issues. 
Improvement,Claus Ibsen,2008-07-29T07:31:54+0000,1217316714,Should always exclude .camelLock and . regardless if end-user add their own list. As of now they must remember to set these as well when they provide their own list.  And maybe we should change the type from String[] to something that is easier to work with  and easier to set using Spring XML.  Also consider adding the opposite a include name pre and postfix for people not experts in regexp patterns. But then again we end up having to many options. There could also be a regexp for exclusion  instead of only pre and postfix.,The FTP consumer should also skip .camelLock and . files. And maybe we should also have the exclude pre and postfix options on the FTPConsumers as well.. FTPConsumer should also skip any files starting with a dot.. FileConsumer DONE SFTP and FTPConsumer TODO. Also added the excludedNamePrefix and excludedNamePostfix on the ftp consumer as we have these options on the file consumer also.. Closing 1.5 issues. 
Improvement,Claus Ibsen,2008-07-29T17:50:46+0000,1217353846,The PlatformMBeanServer option should be default=true  See nabble: http://www.nabble.com/any-reason-we-don%27t-use-the-platform-MBeanServer-by-default--td18709017s22882.html,Applied patch with thanks to William Tam. Closing 1.5 issues. 
Improvement,Hadrian Zbarcea,2008-07-30T10:21:35+0000,1217413295,e.g.    java org.apache.camel.spring.Main -out foo.xml    Then once the CamelContext is created it grabs the getRouteDefintions() and writes them to an XML file   <routes xmlns="...">   <route/> ... </routes>    This will then make it easy for tooling to visualise the routes,I'm taking a look at this one.. This patch adds the ability to export all route definitions as an XML file. To use it  you can simply provide the '-Dcamel.routesOutputFile=foo.xml' parameter to the camel-maven-plugin run mojo. For example  running 'mvn camel:run -Dcamel.routesOutputFile=`pwd`/theroutes.xml' in the camel docs example will create the file theroutes.xml as:  <?xml version="1.0" encoding="UTF-8"?> <routes xmlns="http://activemq.apache.org/camel/schema/spring">   <route group="org.apache.camel.example.docs.ContentBasedRouteRoute">     <from uri="seda:cbr.input"/>     <interceptor>       <choice id="choice1">         <when>           <expressionType/>           <to uri="seda:cbr.output.a"/>         </when>         <otherwise>           <to uri="seda:cbr.output.b"/>         </otherwise>       </choice>     </interceptor>   </route>   <route group="org.apache.camel.example.docs.PipelineRoute">     <from uri="seda:pipeline.in"/>     <interceptor>       <to id="to1" uri="seda:pipeline.out1"/>       <to id="to2" uri="seda:pipeline.out2"/>       <to id="to3" uri="seda:pipeline.out3"/>     </interceptor>   </route>   <route group="org.apache.camel.example.docs.MulticastRoute">     <from uri="seda:multicast.in"/>     <interceptor>       <multicast id="multicast1">         <to uri="seda:multicast.out1"/>         <to uri="seda:multicast.out2"/>         <to uri="seda:multicast.out3"/>       </multicast>     </interceptor>   </route>   <route>     <from uri="seda:other.a"/>     <interceptor>       <to id="to4" uri="seda:other.b"/>       <to id="to5" uri="seda:other.c"/>     </interceptor>   </route> </routes>. Jon  awesome patch. I'll give it a whirl today. I am curious if/how we could make the output reusable for starting routes say in a different context.. Sure looks killer  but I guess the interceptor tag isn't what we normally would add. Is it because of the default DeadLetterChannel adding a interceptors to all routes?. About the DLC interceptor thingy. It has borthered me a bit during debugging that the routes that is outputted nicely with toString in the debug inspector gets very long and a bit confusing because of the DLC adding the pipeline and what not.  I was wondering if there could be somekind of "feature" to surpress this from showing? Or is it to dangerous to not show it all? Maybe we need to discuss this on the dev forum instead of JIRA?. Hadrian   Maybe I just need my morning coffee but I can't think of the usecase you are envisaging here  Do you mean starting up a selected route on another context or taking the whole lot and loading them up on another context? In either of these scenarios I think the output would also need to contain a camelContext element so the factory bean could load it up properly.. Claus   I agree that the internal route representation is getting quite hairy... however  I think this feature + the toString methods should show all of whats going on or it may be even more confusing to the user (i.e. showing one thing  doing another). This is just my opinion though.... Exactly   While almost all xml is defined via jaxb in oac.model  there is no root element  so those don't fully define a schema. That is generated from camel spring. The root element over there is camelContext correct. That means a few things:  camel xml can only be valid(ated) in a spring xml document  or something conforming to the spring xml schema the xml you generate is not valid (in the absence of a schema) the xml you generate cannot be later used to say instantiate a clone of the process. i.e. if some archaeologist discovers a file generated using your method  what else should she do create an exact replica of the camel process.  I put quite a lot of thought lately into what improvements could be made to the dsl  which imho is one of the most significant innovations in camel. Most notably:  How could we for instance translate from one dsl to another (java  xml  scala  etc)? What is the most suitable language for tooling? Is it xml  an EIP DSL (which we'd have to define)?. Patch applied with thanks!. Thanks for looking at this Hadrian!  Before Camel 2.0 though  we should certainly look into the great points you made earlier. In particular  the ability to switch features between DSLs seems very important. IIRC we get a lot of list traffic from folks trying out stuff in the Java DSL (cause its so damn easy) and wanting to convert their stuff over to Spring DSL for production deployment. At the very least we could have improved docs on this topic.. Closing all 1.5.0 issues. 
Improvement,Willem Jiang,2008-07-30T10:26:07+0000,1217413567,To visualise routes its kinda handy to just boot up a Camel Context and check everything configures correctly  then get the route configurations - rather than having to actually start all the routes up.  i.e. to check the configuration works - and to apply any Java / Scala / XML route creation code - but not actually start any routes processing,This would also allow to start the routes only after a user was successfully authenticated in a system if Camel is used in a client application.. James   Is this what you had in mind? It seems a bit too simple to me...  Anyway  if you wanna disable the SpringCamelContext from starting routes  just set the 'shouldStartContext' system property to false.. yeah - the use case really is to be able to boot up a camel context  look at the route definitions - but then not have to actually activate the routing rules. Ah well  I'm pretty sure this is OK then   For a quick test  just run 'mvn camel:run -DshouldStartContext=false' on the camel-spring-example - no routes will be started.  This one was really meant to be used with http://issues.apache.org/activemq/browse/CAMEL-769 IIRC.. Awesome!. Applied patch with thanks to Jonathan. http://svn.apache.org/viewvc?rev=686171&view=rev. Closing all 1.5.0 issues. 
Improvement,Claus Ibsen,2008-07-30T11:34:14+0000,1217417654,If you start a route that is referenced to a bean that isn't registered in the registry you get a CamelRuntimeException. org.apache.camel.RuntimeCamelException: target not provided]  As you can have long and complex routes it isn't the best feedback.  With a little help we can now give feedback on the node caused the problem such as: org.apache.camel.RuntimeCamelException: target not provided for node: Processor[ref:  skyggedb]  BTW: I am wondering if we should have a special exception for misconfiguration or throw a IllegalArgumentException isntead of this "very generic exception?" Any thoughts?  The route in the sample is:                  from("direct:inhouseQueue")                     .unmarshal().xstream()                     .processRef("skyggedb")                     .to("mock:result");,I changed the RuntimeCamelException to ILE as the others in the ProcessorType class.. Closing 1.5 issues. 
Improvement,Claus Ibsen,2008-07-30T12:06:05+0000,1217419565,I had this unit test where I want to assert that the message body contains this string part          MockEndpoint error = getMockEndpoint("mock:errorQueue");         error.expectedMessageCount(1);         error.message(0).body().contains("<patientCpr>0101701234</patientCpr>");    But the expression fails because the body is byte array and is not casted to String as the contains type is. If I change the code to:          error.message(0).body().convertTo(String.class).contains("<patientCpr>0101701234</patientCpr>");    Then it of course works. But what if there already is a type convert in Camel that could have done the cast for me?  But is it dangerous to add such automatic type casting behind the end-users back? Any thoughts?,Here is a snippet how I have prototyped the constains() predicate (a bit quick and dirty) but good for show and tell:      public static <E extends Exchange> Predicate<E> contains(final Expression<E> left                                                               final Expression<E> right) {         return new BinaryPredicateSupport<E>(left  right) {              protected boolean matches(E exchange  Object leftValue  Object rightValue) {                 Object castedValue = exchange.getContext().getTypeConverter().convertTo(rightValue.getClass()  leftValue);                 if (castedValue != null) {                     return ObjectHelper.contains(castedValue  rightValue);                 } else {                     return ObjectHelper.contains(leftValue  rightValue);                 }             }              protected String getOperationText() {                 return "contains";             }         };     }. A patch. I have attached a patch with this change. However as it's a bit magical that Camel will type convert to the right value (usually the data type on the exchange/message) before performing the matching.  But you can do:  mock.message(0).body().contains("<patientCpr>0101701234</patientCpr>");   And it will convert the string to byte[] as the body() is a byte[]  You can still do the convertBodyTo as well:  mock.message(0).convertBodyTo(String.class).contains("<patientCpr>0101701234</patientCpr>");. The problem is that both types (right vs. left) might need to be casted and you really dont know which one was the one the end user wanted it to be expected as.. 
Bug,Unassigned,2008-07-30T15:06:58+0000,1217430418,This has a simple fix - it was a spelling error,Patch applied with many thanks!. Closing all 1.5.0 issues. 
Bug,Claus Ibsen,2008-07-31T20:39:19+0000,1217536759,This is a sequel of CAMEL-577  which itself duplicated by CAMEL-558 and CAMEL-522. Probably related to CAMEL-636  CAMEL-693  and CAMEL-689.  First of all  to even get this to "work" requires my own bundle to have this manifest: DynamicImport-Package: org.apache.camel.*  Failing to do so will result in more classloading errors.  Even so  it still fails with this:  [SpringOsgiExtenderThread-2] TRACE org.apache.camel.util.ResolverUtil - Testing for class org.apache.camel.converter.jaxp.XmlConverter matches criteria [annotated with @Converter] [SpringOsgiExtenderThread-2] TRACE org.apache.camel.util.ResolverUtil - Found class: class org.apache.camel.converter.jaxp.XmlConverter in classloader: BundleDelegatingClassLoader for [org.elfattah.shell (org.elfattah.shell)] [SpringOsgiExtenderThread-2] TRACE org.apache.camel.util.ResolverUtil - Testing for class org.apache.camel.converter.stream.StreamCacheConverter$StreamSourceCache matches criteria [annotated with @Converter] [SpringOsgiExtenderThread-2] TRACE org.apache.camel.util.ResolverUtil - Testing for class org.apache.camel.converter.stream.StreamCacheConverter$InputStreamCache matches criteria [annotated with @Converter] [SpringOsgiExtenderThread-2] TRACE org.apache.camel.util.ResolverUtil - Searching for: annotated with @Converter in package: org/apache/camel/converter using classloader: org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader [SpringOsgiExtenderThread-2] TRACE org.apache.camel.util.ResolverUtil - It's not an osgi bundle classloader [SpringOsgiExtenderThread-2] TRACE org.apache.camel.util.ResolverUtil - Getting resource URL for package: org/apache/camel/converter with classloader: org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader@1a5db4b [SpringOsgiExtenderThread-2] TRACE org.apache.camel.util.ResolverUtil - URL from classloader: bundleresource://20/org/apache/camel/converter [SpringOsgiExtenderThread-2] TRACE org.apache.camel.util.ResolverUtil - Decoded urlPath: /org/apache/camel/converter [SpringOsgiExtenderThread-2] TRACE org.apache.camel.util.ResolverUtil - Scanning for classes in [/org/apache/camel/converter] matching criteria: annotated with @Converter [SpringOsgiExtenderThread-2] DEBUG org.apache.camel.util.ResolverUtil - Loading from jar: /org/apache/camel/converter [SpringOsgiExtenderThread-2] ERROR org.apache.camel.util.ResolverUtil - Could not search jar file '/org/apache/camel/converter' for classes matching criteria: annotated with @Converter due to an IOException: /org/apache/camel/converter (No such file or directory) java.io.FileNotFoundException: /org/apache/camel/converter (No such file or directory) 	at java.io.FileInputStream.open(Native Method) 	at java.io.FileInputStream.<init>(FileInputStream.java:106) 	at org.apache.camel.util.ResolverUtil.loadImplementationsInJar(ResolverUtil.java:476) 	at org.apache.camel.util.ResolverUtil.find(ResolverUtil.java:362) 	at org.apache.camel.util.ResolverUtil.find(ResolverUtil.java:277) 	at org.apache.camel.util.ResolverUtil.findAnnotated(ResolverUtil.java:253) 	at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.load(AnnotationTypeConverterLoader.java:66) 	at org.apache.camel.impl.converter.DefaultTypeConverter.checkLoaded(DefaultTypeConverter.java:218) 	at org.apache.camel.impl.converter.DefaultTypeConverter.convertTo(DefaultTypeConverter.java:64) 	at org.apache.camel.util.IntrospectionSupport.convert(IntrospectionSupport.java:216) 	at org.apache.camel.util.IntrospectionSupport.setProperty(IntrospectionSupport.java:194) 	at org.apache.camel.util.IntrospectionSupport.setProperties(IntrospectionSupport.java:167) 	at org.apache.camel.impl.DefaultComponent.setProperties(DefaultComponent.java:187) 	at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:89) 	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:270) 	at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:52) 	at org.apache.camel.model.RouteType.resolveEndpoint(RouteType.java:100) 	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:102) 	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:108) 	at org.apache.camel.model.FromType.resolveEndpoint(FromType.java:73) 	at org.apache.camel.impl.DefaultRouteContext.getEndpoint(DefaultRouteContext.java:77) 	at org.apache.camel.model.RouteType.addRoutes(RouteType.java:214) 	at org.apache.camel.model.RouteType.addRoutes(RouteType.java:90) 	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:537) 	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:529) 	at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:149) 	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:47) 	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:103) 	at org.springframework.context.event.SimpleApplicationEventMulticaster$1.run(SimpleApplicationEventMulticaster.java:78) 	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:49) 	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:76) 	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:275) 	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:737) 	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.finishRefresh(AbstractDelegatedExecutionApplicationContext.java:306) 	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.completeRefresh(AbstractDelegatedExecutionApplicationContext.java:279) 	at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor$CompleteRefreshTask.run(DependencyWaiterApplicationContextExecutor.java:145) 	at java.lang.Thread.run(Thread.java:619) [SpringOsgiExtenderThread-2] DEBUG org.apache.camel.util.ResolverUtil - Found: [class org.apache.camel.converter.ObjectConverter  class org.apache.camel.converter.jaxp.DomConverter  class org.apache.camel.converter.IOConverter  class org.apache.camel.converter.jaxp.StaxConverter  class org.apache.camel.converter.jaxp.XmlConverter  class org.apache.camel.converter.stream.StreamCacheConverter  class org.apache.camel.converter.jaxp.StreamSourceConverter  class org.apache.camel.converter.NIOConverter  class org.apache.camel.converter.CollectionConverter  class org.apache.camel.converter.CamelConverter]  The project that demonstrates this error is open source  check it out here: http://svn.assembla.com/svn/elfattah/trunk  do mvn install on elfattah-api and elfattah-shell  Then go to elfattah-shell and:  mvn pax:provision,FYI  the bundle #20 mentioned by the error logger is camel-core:  osgi> b 20 initial@reference:file:org.apache.camel.camel-core_1.4.0.jar/ [20] Id=20  Status=ACTIVE Data Root=/home/ceefour/project/elfattah/elfattah-shell/runner/equinox/org.eclipse.osgi/bundles/20/data No registered services. No services in use. Exported packages org.apache.camel.model.loadbalancer; version="1.4.0"[exported] org.apache.camel.component.dataset; version="1.4.0"[exported] org.apache.camel.language.simple; version="1.4.0"[exported] org.apache.camel.processor.loadbalancer; version="1.4.0"[exported] org.apache.camel.processor.aggregate; version="1.4.0"[exported] org.apache.camel.component.log; version="1.4.0"[exported] org.apache.camel.converter.jaxp; version="1.4.0"[exported] org.apache.camel.processor.resequencer; version="1.4.0"[exported] org.apache.camel.processor.interceptor; version="1.4.0"[exported] org.apache.camel.impl.converter; version="1.4.0"[exported] org.apache.camel.management; version="1.4.0"[exported] org.apache.camel.util.jndi; version="1.4.0"[exported] org.apache.camel.util; version="1.4.0"[exported] org.apache.camel.impl; version="1.4.0"[exported] org.apache.camel.builder.xml; version="1.4.0"[exported] org.apache.camel.component.list; version="1.4.0"[exported] org.apache.camel.component.direct; version="1.4.0"[exported] org.apache.camel.component.seda; version="1.4.0"[exported] org.apache.camel.component.ref; version="1.4.0"[exported] org.apache.camel.component.file; version="1.4.0"[exported] org.apache.camel.converter; version="1.4.0"[exported] org.apache.camel.language.bean; version="1.4.0"[exported] org.apache.camel.model.config; version="1.4.0"[exported] org.apache.camel.model.dataformat; version="1.4.0"[exported] org.apache.camel.processor; version="1.4.0"[exported] org.apache.camel.component.mock; version="1.4.0"[exported] org.apache.camel.component.timer; version="1.4.0"[exported] org.apache.camel.component.vm; version="1.4.0"[exported] org.apache.camel.model.language; version="1.4.0"[exported] org.apache.camel.model; version="1.4.0"[exported] org.apache.camel.converter.stream; version="1.4.0"[exported] org.apache.camel.builder; version="1.4.0"[exported] org.apache.camel.component.jmx; version="1.4.0"[exported] org.apache.camel.spi; version="1.4.0"[exported] org.apache.camel; version="1.4.0"[exported] org.apache.camel.component.bean; version="1.4.0"[exported] org.apache.camel.language; version="1.4.0"[exported] org.apache.camel.view; version="1.4.0"[exported] org.apache.camel.processor.validation; version="1.4.0"[exported] org.apache.camel.processor.idempotent; version="1.4.0"[exported] org.apache.camel.processor.exceptionpolicy; version="1.4.0"[exported] org.apache.camel.component.file.strategy; version="1.4.0"[exported] Imported packages javax.activation; version="0.0.0"<System Bundle [0]> javax.management; version="0.0.0"<System Bundle [0]> javax.management.modelmbean; version="0.0.0"<System Bundle [0]> javax.management.monitor; version="0.0.0"<System Bundle [0]> javax.management.remote; version="0.0.0"<System Bundle [0]> javax.naming; version="0.0.0"<System Bundle [0]> javax.naming.spi; version="0.0.0"<System Bundle [0]> javax.xml.bind.annotation; version="0.0.0"<System Bundle [0]> javax.xml.namespace; version="0.0.0"<System Bundle [0]> javax.xml.parsers; version="0.0.0"<System Bundle [0]> javax.xml.stream; version="0.0.0"<System Bundle [0]> javax.xml.transform; version="0.0.0"<System Bundle [0]> javax.xml.transform.dom; version="0.0.0"<System Bundle [0]> javax.xml.transform.sax; version="0.0.0"<System Bundle [0]> javax.xml.transform.stream; version="0.0.0"<System Bundle [0]> javax.xml.validation; version="0.0.0"<System Bundle [0]> javax.xml.xpath; version="0.0.0"<System Bundle [0]> org.apache.commons.logging; version="1.1.1"<initial@reference:file:org.ops4j.pax.logging.pax-logging-api_1.1.1.jar/ [12]> org.osgi.framework; version="1.4.0"<System Bundle [0]> org.springframework.jmx.export.annotation; version="2.5.5"<initial@reference:file:org.springframework.bundle.spring.context_2.5.5.jar/ [15]> org.springframework.jmx.export.assembler; version="2.5.5"<initial@reference:file:org.springframework.bundle.spring.context_2.5.5.jar/ [15]> org.springframework.jmx.export.metadata; version="2.5.5"<initial@reference:file:org.springframework.bundle.spring.context_2.5.5.jar/ [15]> org.w3c.dom; version="0.0.0"<System Bundle [0]> org.xml.sax; version="0.0.0"<System Bundle [0]> No fragment bundles Named class space org.apache.camel.camel-core; bundle-version="1.4.0"[provided] No required bundles. To assist you and to make sure that future revisions of our project don't mask the bug  I've tagged it dedicated to this bug:  http://svn.assembla.com/svn/elfattah/tags/camel-774-bug. Hi Hendry  Thanks for the detailed error report. The bug is definitely that Camel fails to identify that its is a bundle loader  [SpringOsgiExtenderThread-2] TRACE org.apache.camel.util.ResolverUtil - It's not an osgi bundle classloader. Thanks Claus. I hope this can help getting it resolved. Let me know if it is  even a snapshot will do very well for us.  Another question  is below "DynamicImport-Package workaround" supposed to be bug? Or it's just the way Camel needs to be configured on OSGi? If so it should be mentioned somewhere in the docs... not everybody knows that DynamicImport-Package even exists.. (even some OSGi programmers)  First of all  to even get this to "work" requires my own bundle to have this manifest: DynamicImport-Package: org.apache.camel.*  Failing to do so will result in more classloading errors.. Hi Hendry  I got your project and is running it with jdk6 update 7 (had to update from u3  not using java6 normally with camel development). I can reproduce the bug on my laptop.  It actually pick ups the converters with the real bundle classloader  but since Camel will try several classloaders it gets to this one as well that we are not supposed to use. I will work on a patch.  About the dynamic stuff. I am not an OSGi expert either but we get the attentions of the good people that know much more about this stuff.. Okay got it working now with a 1.5-SNAPSHOT.  I will improve the fix in camel-core and commit it later. I am afraid you need to use 1.5 snapshots but they are published on apache snapshot repos.  [seda:shellIn thread:1] DEBUG org.apache.camel.impl.ProducerCache - >>>> Endpoint[seda:shellOut] Exchange[Message: Thank you for saying 'Hej med dig'] [seda:shellIn thread:1] DEBUG org.apache.camel.impl.ProducerCache - >>>> Endpoint[seda:shellOut] Exchange[Message: Seriously  this is good...!]. Hendry  I have commited a patch in camel 1.5 snapshot that should work - at least on my laptop.  You can try it out by switching from 1.4.0 to 1.5-SNAPSHOT for camel-version. You can get the jars from apache snapshot maven repo Documentation is here: http://activemq.apache.org/camel/download.html  Wait 2-3 hours or more before the CI server have build and published the jars.. And please let us know if it works for you.. Thanks Claus I'll check it out  Regarding DynamicImport-Package for me it's "OK" bcuz I also do it with Swing  however maybe there are better alternative  For now the workaround is that  so should put it somewhere in documentation especially the ones relating to OSGi - Camel relationship (as Camel have been touted as OSGi friendly since 1.2 esp. by James). Thanks  working fine:  http://trac.assembla.com/elfattah/changeset/26  Changeset 26  Timestamp: 08/01/08 11:09:03 (less than one hour ago) Author: ceefour Message:  Now using Apache Camel 1.5-SNAPSHOT  which fixed an OSGi problem. See: https://issues.apache.org/activemq/browse/CAMEL-774 . Thank you Claus Ibsen for helping me in this.  Files:  trunk/elfattah-parent/pom.xml (modified) (2 diffs) trunk/elfattah-shell/debug.args (added) trunk/elfattah-shell/pom.xml (modified) (1 diff) trunk/elfattah-shell/src/main/java/org/elfattah/shell/ShellRouteBuilder.java (modified) (1 diff). Closing all 1.5.0 issues. 
Sub-task,Unassigned,2008-08-01T06:30:37+0000,1217572237,See parent issue.   Thanks Claus. I hope this can help getting it resolved. Let me know if it is  even a snapshot will do very well for us.  Another question  is below "DynamicImport-Package workaround" supposed to be bug? Or it's just the way Camel needs to be configured on OSGi? If so it should be mentioned somewhere in the docs... not everybody knows that DynamicImport-Package even exists.. (even some OSGi programmers)  First of all  to even get this to "work" requires my own bundle to have this manifest: DynamicImport-Package: org.apache.camel.*  Failing to do so will result in more classloading errors.,Without DynamicImport-Package this is what results...  [SpringOsgiExtenderThread-2] TRACE org.apache.camel.util.ResolverUtil - Testing for class org.apache.camel.converter.ObjectConverter matches criteria [annotated with @Converter] [SpringOsgiExtenderThread-2] TRACE org.springframework.osgi.util.DebugUtils - Could not find class [org.apache.camel.converter.ObjectConverter] required by [org.elfattah.shell(org.elfattah.shell)] scanning available bundles [SpringOsgiExtenderThread-2] DEBUG org.apache.camel.util.ResolverUtil - Could not find class 'org/apache/camel/converter/ObjectConverter.class' in classloader: BundleDelegatingClassLoader for [org.elfattah.shell (org.elfattah.shell)]. Reason: java.lang.ClassNotFoundException: org.apache.camel.converter.ObjectConverter not found from bundle [org.elfattah.shell] java.lang.ClassNotFoundException: org.apache.camel.converter.ObjectConverter not found from bundle [org.elfattah.shell] at org.springframework.osgi.util.BundleDelegatingClassLoader.findClass(BundleDelegatingClassLoader.java:103) at org.springframework.osgi.util.BundleDelegatingClassLoader.loadClass(BundleDelegatingClassLoader.java:156) at java.lang.ClassLoader.loadClass(ClassLoader.java:251) at org.apache.camel.util.ResolverUtil.addIfMatching(ResolverUtil.java:531) at org.apache.camel.util.ResolverUtil.loadImplementationsInBundle(ResolverUtil.java:409) at org.apache.camel.util.ResolverUtil.find(ResolverUtil.java:302) at org.apache.camel.util.ResolverUtil.find(ResolverUtil.java:279) at org.apache.camel.util.ResolverUtil.findAnnotated(ResolverUtil.java:255) at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.load(AnnotationTypeConverterLoader.java:66) at org.apache.camel.impl.converter.DefaultTypeConverter.checkLoaded(DefaultTypeConverter.java:218) at org.apache.camel.impl.converter.DefaultTypeConverter.convertTo(DefaultTypeConverter.java:64) at org.apache.camel.util.IntrospectionSupport.convert(IntrospectionSupport.java:216) at org.apache.camel.util.IntrospectionSupport.setProperty(IntrospectionSupport.java:194) at org.apache.camel.util.IntrospectionSupport.setProperties(IntrospectionSupport.java:167) at org.apache.camel.impl.DefaultComponent.setProperties(DefaultComponent.java:195) at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:89) at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:272) at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:52) at org.apache.camel.model.RouteType.resolveEndpoint(RouteType.java:99) at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:102) at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:108) at org.apache.camel.model.FromType.resolveEndpoint(FromType.java:73) at org.apache.camel.impl.DefaultRouteContext.getEndpoint(DefaultRouteContext.java:77) at org.apache.camel.model.RouteType.addRoutes(RouteType.java:213) at org.apache.camel.model.RouteType.addRoutes(RouteType.java:89) at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:539) at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:531) at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:149) at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:47) at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:103) at org.springframework.context.event.SimpleApplicationEventMulticaster$1.run(SimpleApplicationEventMulticaster.java:78) at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:49) at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:76) at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:275) at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:737) at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.finishRefresh(AbstractDelegatedExecutionApplicationContext.java:306) at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.completeRefresh(AbstractDelegatedExecutionApplicationContext.java:279) at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor$CompleteRefreshTask.run(DependencyWaiterApplicationContextExecutor.java:145) at java.lang.Thread.run(Thread.java:619) Caused by: java.lang.ClassNotFoundException: org.apache.camel.converter.ObjectConverter at org.eclipse.osgi.framework.internal.core.BundleLoader.findClassInternal(BundleLoader.java:481) at org.eclipse.osgi.framework.internal.core.BundleLoader.findClass(BundleLoader.java:397) at org.eclipse.osgi.framework.internal.core.BundleLoader.findClass(BundleLoader.java:385) at org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.loadClass(DefaultClassLoader.java:87) at java.lang.ClassLoader.loadClass(ClassLoader.java:251) at org.eclipse.osgi.framework.internal.core.BundleLoader.loadClass(BundleLoader.java:313) at org.eclipse.osgi.framework.internal.core.BundleHost.loadClass(BundleHost.java:227) at org.eclipse.osgi.framework.internal.core.AbstractBundle.loadClass(AbstractBundle.java:1274) at org.springframework.osgi.util.BundleDelegatingClassLoader.findClass(BundleDelegatingClassLoader.java:99) ... 38 more [SpringOsgiExtenderThread-2] TRACE org.apache.camel.util.ResolverUtil - Testing for class org.apache.camel.converter.ObjectConverter matches criteria [annotated with @Converter]. I've tagged my project specifically to aid this subtask as:  http://svn.assembla.com/svn/elfattah/tags/camel-dynimport-bug. To me the answer is clear:  [SpringOsgiExtenderThread-2] DEBUG org.apache.camel.util.ResolverUtil - Could not find class 'org/apache/camel/converter/ObjectConverter.class' in classloader: BundleDelegatingClassLoader for [org.elfattah.shell (org.elfattah.shell)]. Reason: java.lang.ClassNotFoundException: org.apache.camel.converter.ObjectConverter not found from bundle [org.elfattah.shell]  Question is  what ResolverUtils wants to do?  org.apache.camel.converter.ObjectConverter is definitely not in our (org.elfattah.shell)'s import package.... therefore it should not be accessible from there anyway. And we don't have any code that uses that class explicitly. Which means ResolverUtil's hands is dirty...  ResolverUtil should know which classloader it wants to load a class from.  Or use a classloader that has "Import-Package: org.apache.camel.converter". Ahh the OSGIBundleLoader might have more options to be able to reader what packages it is allowed to read in (from the manifest) so its able to determine if it can find what it wants (org/apache/camel/converter/ObjectConverter) in your case above.  BTW That stuff is part of Camel's annotations based type converted discovery.. Hendy it should be able to run without the dynamicimport. The "error" is logged at DEBUG/TRACE level for diagnostic to the camel team if end-users has problem with loading resources in a camel application.  We might be able to let the OSGI bundle discovery be smarter in the future.. I don't think dynamic imports are actually needed. What happens is that the ResolverUtil scans all the osgi bundles for META-INF/services/org/apache/camel/TypeConverter. When one is found  it contains a list of packages that contains converters. Then  the ResolverUtil looks for all the classes in these packages from all bundles and tries to load these classes. Such converters have to be either annotated with the @Converter annotation or implement the TypeConverter class. This means that the bundles containing these converters has to import the needed camel packages in some way. You could use dynamic imports or static imports. I would recommend using static imports. What we need is to come with a list of the imports that the user needs to add on his bundle to be able to make the discovery process work easily. I may be wrong  but for annotated converters  i think a static import of org.apache.camel package should be sufficient.  I agree the discovery process in OSGi could be a bit smarter and look for some camel specific MANIFEST entry  but this would not change the fact that the bundle has to import the needed packages.. Look at chatlog at: http://servlet.uwyn.com/drone/log/hausbot/camel/20080910. Target for 2.0. Willem Jiang has done some great update on the camel-osgi side in Camel 2.0 and 1.6.  Closing this one  also based on gnodets suggestion that the dynamic is not needed.. I've hit a similar issue - using camel 2.0 snapshot  I added static import of org.apache.camel to my manifest and it didn't fix it.  Adding "DynamicImport-Package: org.apache.camel.*" fixes it.  [SpringOsgiExtenderThread-2] DEBUG org.apache.camel.impl.DefaultPackageScanClassResolver - Loading from osgi buindle using classloader: BundleDelegatingClassLoader for [cut (cut)] [SpringOsgiExtenderThread-2] DEBUG org.apache.camel.impl.DefaultPackageScanClassResolver - Could not find class 'org/apache/camel/component/file/GenericFileProducer.class' in classloader: BundleDelegatingClassLoader for [cut (cut)]. Reason: java.lang.ClassNotFoundException: org.apache.camel.component.file.GenericFileProducer not found from bundle [cut] java.lang.ClassNotFoundException: org.apache.camel.component.file.GenericFileProducer not found from bundle [cut] at org.springframework.osgi.util.BundleDelegatingClassLoader.findClass(BundleDelegatingClassLoader.java:103) at org.springframework.osgi.util.BundleDelegatingClassLoader.loadClass(BundleDelegatingClassLoader.java:156)  If this is a different issue  I am happy to open a new ticket.. 
Improvement,Willem Jiang,2008-08-01T08:38:35+0000,1217579915,Current trace and trace interceptor do not support to be configured when the camel context is started.,http://svn.apache.org/viewvc?rev=681654&view=rev  TODO update the wiki page.. Closing all 1.5.0 issues. 
Bug,Claus Ibsen,2008-08-01T09:11:29+0000,1217581889,Many servers use 'username'@'servername' as a login name. Camel-mail doesn't allow this.,It does allow it. Try to upgrade to 1.4. This works for me:  String smtpUri = "smtp://mail.server.com?username=freeforall@server.com&password=freeforall" + "&From=freeforall@server.com&To=otheruser@server.com";. I use camel 1.4 and javax.mail 1.4.1. If I define camel endpoint with '@' in username there is an exception during sending mail: org.springframework.mail.MailParseException: Could not parse mail; nested exception is javax.mail.internet.AddressException: Illegal character in domain in string ``Wojciech.Durczynski@server.com@smtp.server.com'' at org.springframework.mail.javamail.JavaMailSenderImpl.send(JavaMailSenderImpl.java:363) at org.springframework.mail.javamail.JavaMailSenderImpl.send(JavaMailSenderImpl.java:346) at org.apache.camel.component.mail.MailProducer.process(MailProducer.java:46) at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:43) at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:75) at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:57) at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:155) at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:91) at org.apache.camel.processor.Pipeline.process(Pipeline.java:101) at org.apache.camel.processor.Pipeline.process(Pipeline.java:85) at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:57) at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:39) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:41) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:66) at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:47) at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:149) at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:86) at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:84) at org.apache.camel.impl.DefaultProducerTemplate.sendBodyAndHeader(DefaultProducerTemplate.java:122) at org.apache.camel.impl.DefaultProducerTemplate.sendBodyAndHeader(DefaultProducerTemplate.java:117) at com.comarch.p7samples.minis.password.PasswordPlugin$1.onSubmit(PasswordPlugin.java:92) at org.apache.wicket.markup.html.form.Form.delegateSubmit(Form.java:1355) at org.apache.wicket.markup.html.form.Form.onFormSubmitted(Form.java:810) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:597) at org.apache.wicket.RequestListenerInterface.invoke(RequestListenerInterface.java:183) at org.apache.wicket.request.target.component.listener.ListenerInterfaceRequestTarget.processEvents(ListenerInterfaceRequestTarget.java:73) at org.apache.wicket.request.AbstractRequestCycleProcessor.processEvents(AbstractRequestCycleProcessor.java:91) at com.comarch.p7.ui.core.application.BaseRequestCycleProcessor.processEvents(BaseRequestCycleProcessor.java:20) at org.apache.wicket.RequestCycle.processEventsAndRespond(RequestCycle.java:1171) at org.apache.wicket.RequestCycle.step(RequestCycle.java:1248) at org.apache.wicket.RequestCycle.steps(RequestCycle.java:1349) at org.apache.wicket.RequestCycle.request(RequestCycle.java:493) at org.apache.wicket.protocol.http.WicketFilter.doGet(WicketFilter.java:387) at org.apache.wicket.protocol.http.WicketServlet.doPost(WicketServlet.java:145) at javax.servlet.http.HttpServlet.service(HttpServlet.java:727) at javax.servlet.http.HttpServlet.service(HttpServlet.java:820) at com.comarch.p7.ui.webscope.ListenerServlet$FilterChainImpl.doFilter(ListenerServlet.java:206) at com.comarch.p7.ui.webscope.ListenerServlet.service(ListenerServlet.java:85) at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:487) at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:362) at org.ops4j.pax.web.service.internal.HttpServiceServletHandler.handle(HttpServiceServletHandler.java:66) at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:181) at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:726) at org.ops4j.pax.web.service.internal.HttpServiceContext.handle(HttpServiceContext.java:107) at org.ops4j.pax.web.service.internal.JettyServerHandlerCollection.handle(JettyServerHandlerCollection.java:64) at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152) at org.mortbay.jetty.Server.handle(Server.java:324) at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:505) at org.mortbay.jetty.HttpConnection$RequestHandler.content(HttpConnection.java:843) at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:648) at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:211) at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:380) at org.mortbay.jetty.bio.SocketConnector$Connection.run(SocketConnector.java:228) at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:488) Caused by: javax.mail.internet.AddressException: Illegal character in domain in string ``Wojciech.Durczynski@server.com@smtp.server.com'' at javax.mail.internet.InternetAddress.checkAddress(InternetAddress.java:947) at javax.mail.internet.InternetAddress.parse(InternetAddress.java:833) at javax.mail.internet.InternetAddress.parse(InternetAddress.java:569) at javax.mail.internet.InternetAddress.parse(InternetAddress.java:546) at javax.mail.internet.MimeMessage.setRecipients(MimeMessage.java:607) at org.apache.camel.component.mail.MailBinding.populateMailMessage(MailBinding.java:53) at org.apache.camel.component.mail.MailProducer$1.prepare(MailProducer.java:48) at org.springframework.mail.javamail.JavaMailSenderImpl.send(JavaMailSenderImpl.java:354) ... 56 more. and in RouteBuilder I do simply: .to("smtp://smtp.server.com?password=myPass&username=Wojciech.Durczynski@server.com&debugMode=true"). The problem probably exists because in class MailConfiguration there is a method:  public void setUsername(String username) { this.username = username; if (!recipients.containsKey(Message.RecipientType.TO))  { // set default destination to username@host for backwards compatibility // can be overridden by URI parameters String address = username + "@" + host; recipients.put(Message.RecipientType.TO  address); }  }  If "To" isn't a parameter in url  broken address is added to recipients map. And my url doesn't have "To" parameter  because I always provide it as a header in a message.. Hi  Ah interesting  I would assume the TO header option is a quite common use-case. I do think Camel should support this as well.. Okay I got it now. Added a unit test that demonstrated the bug and now you can have @ in the username option.. Sadly your improvement doesn't solve problem.  Look into this usecase: endpoint: smtp://smtp.server.com?password=secret&username=user1@server.com header: To=user2@server2.com  Then during sending mail: In MailConfiguration.setUsername() recipients map doesn't have element "To"  so recipients.put(javax.mail.Message.RecipientType.TO  "user1@server.com"); is invoked  Later in MailBinding.populateMailMessage() appendHeadersFromCamel() is invoked  which sets "To" recipients of message right (to user2@server2.com) but in the same method just after this  is invoked: if(recipients.containsKey(javax.mail.Message.RecipientType.TO)) mimeMessage.setRecipients(javax.mail.Message.RecipientType.TO  (String)recipients.get(javax.mail.Message.RecipientType.TO));  And this rewrites "To" recipients of message to these  which are set in recipients map. And that's "user1@server.com" only  which is wrong.  Because of this recipient of the mail doesn't receive message  but only sender gets it.  Why to bother with the following code and not remove it?: if(!recipients.containsKey(javax.mail.Message.RecipientType.TO))  { String address = username; if(address.indexOf("@") == -1) address = (new StringBuilder()).append(address).append("@").append(host).toString(); recipients.put(javax.mail.Message.RecipientType.TO  address); }. Hi Wojciech  Yeah I was a little battle to try to fix it while staying 100% backwards compatible. I might as well take the heat and improve it so the headers always overrides whatever you have pre configured on the endpoint/URI.  And the userinfo from the URI should not be set as TO but in a special holder then we are in a better situation to preserve the headers while populating the minemessage.. Wojciech  I am thinking about the following  configuration of recipients (to  from  bcc) is either pre configured only (etc. URI) or message headers only.  So if you have none To  CC or BCC in the message headers it will use the pre configured If you have a To  CC and/or BCC in the message header camel will only use these and not any from the pre configuration.  So its like exclusive. Either pre configuration or headers (never mixed).  Some will use it with pre configuration to just send mails to the same all the time (eg alert mails) Others as you need dynamic recipients and therefore use message headers.. Change of strategy.  Camel will first apply any headers from the message and set them as To  CC and BCC. And then if any provided on the URI configuration they will override these settings.  This will support your use-case and let people without any headers configure camel to use the same To  CC and BCC from the URI configuration at all times.. Hi  Try my latest patch that is just committed.. Update wiki with the mail overrule strategy TODO. Yes it works well now. But why have you changed your strategy? Headers should have greater priority then url parameters. Consider following use case: somebody wants to define smtp endpoint with default recipient. If recipient is given in header  he receives mail. And if not  then default recipient receives it. With your current approach this use case is impossible to achieve. Maybe apply headers at the end of processing in MailBinding?. The short answer is that it will break existing behaviors in Camel 1.4 or older.  I also though that if you have any recipient informations in the headers what should Camel do? a) only use headers b) only use pre configued (no - then dynamic recipients is not possible) c) headers append to existing pre configured d) headers override existing pre configured e) pre configured override headers (reverse as option e)  What we have now is option (e). What you want is option (d). But what about option (c) isn't the the most correct and least surprised one to have?  I would like to change the behavior and if its not 100% backwards compatible then its okay anyway - we will write about it in the release notes.  Any thoughts?. Both (c) and (d) are better than (e). I don't know which one of them is better. When there is no To recipients in url  MailConfiguration adds sender as recipient. And what you surely need to avoid is sending mail to recipients declared in message headers AND to sender himself. There is danger of this behaviour in (c). Maybe think about new parameter in url  something like overrideRecipientsInHeaders. And depending on it use (c) or (d) for particular endpoint.. From Hadrian  To me it looks like d) is better than c) (and e) ). I think headers explicitly express the expected behavior and that should not be altered by the pre-existing conf. imho the pre-existing conf is there only for the case where explicit info is not present in the headers  constituting a default behaviour  but not a base to be added to.  my $0.02  Hadrian. I also think that d) is the best one and least surprise. Will create a sub task to implement it in Camel 1.5. Closing all 1.5.0 issues. 
New Feature,Claus Ibsen,2008-08-01T14:12:42+0000,1217599962,I propose a new URI attribute to allow to send html mail bodies  "pretty emails" in manager talk. Currently camel send only text body even with attachement.  I attached 2 patches to do. I tested it in my environment  but  I have not created unit tests yet (I'll do once I figure it out how).,Oops. The name of the attribute is htmlBody and defaults to false (existing behavior).. Nice patch. I will try to get it in while I dig on another mail bug reported.. Bela can you re attach the patches this time with the ASF license granted. We can only accept patches with the ASF license granted.. Remember to update wiki also with this new option.. I attached them again. I attached them when I created the ticket and then there's no checkbox for the ASF license. Or have I just missed it ??. Yes the checkbox is missing if you attach the files when creating.  The files should always be attached after.. What if the option is contentType and its default text/plain. Then you can configure this to text/html for pretty mails?. Applied patch with a slightly modified version. The option is named: contentType Wiki is updated also.  Thanks Bela.. Closing all 1.5.0 issues. 
Improvement,Willem Jiang,2008-08-04T04:37:46+0000,1217824666,We should support enable or disable the debugger dynamically if the debugger is set to camel context.,Willem is this documented in the wiki http://activemq.apache.org/camel/debugger.html  Also maybe the tracer should be updated if it had a similar change: http://activemq.apache.org/camel/tracer.html. The wiki is updated.. Closing all 1.5.0 issues. 
Bug,Hadrian Zbarcea,2008-08-04T14:48:36+0000,1217861316,There ought to be a setFault() method declared in the org.apache.camel.Exchange interface. There doesn't seem to be any good reason to omit it  so I guess this is just an oversight.  Note: The lack of this method declaration is not very noticeable  because it does get defined in DefaultExchange  which (so far) is used as the base class for all of the Exchange implementations in Camel. This is why I classified the bug as trivial.,We are actually thinking of removing the fault semantics  as it is only specific to a limited number of technologies/protocols. There are a few ways of doing it and they all have a serious impact on the api. Thus we'll probably only tackle it in 2.0.  I am tempting to close this as a duplicate or a won't fix. Any objections?. +1 to close it  we hopefully gets the exception and fault merged in camel 2.0 - CAMEL-316. Closing all 1.5.0 issues. 
New Feature,Unassigned,2008-08-05T06:49:55+0000,1217918995,Add a new component to generate/print reports in PDF  HTML  Excel  ...  format using reporting tool like JasperReport / Eclipse BIRT,Its a bit too vague this ticket. Please create ticket if you got the time and have a reporting engine we can use. Remeber it must be a license which works with Apache.. @Claus   Before to take the decision to close it or not  let me present the arguments in favor of such a component.  1) License Unfortunately  JasperReport is proposed under GNU LGPL license which is prohibited by Apache. So  I propose to use Eclipse Birt report engine which is proposed under EPL (Eclipse Public License). This license is considered as a reciprocal license by Apache  2) Need of a reporting tool Apache Camel is well designed to transport data  transform it and exchange it though connector like web service  file component  ... For reporting purposes  we can use velocity (which is a templating framework) or any equivalent framework  iText (to generate pdf) proposed under MPL license but these framework have not been designed for reporting.  With BIRT  you can add a rich variety of reports to your application.  Lists - The simplest reports are lists of data. As the lists get longer  you can add grouping to organize related data together (orders grouped by customer  products grouped by supplier). If your data is numeric  you can easily add totals  averages and other summaries. Charts - Numeric data is much easier to understand when presented as a chart. BIRT provides pie charts  line & bar charts and many more. BIRT charts can be rendered in SVG and support events to allow user interaction. Crosstabs - Crosstabs (also called a cross-tabulation or matrix) shows data in two dimensions: sales per quarter or hits per web page. Letters & Documents - Notices  form letters  and other textual documents are easy to create with BIRT. Documents can include text  formatting  lists  charts and more. Compound Reports - Many reports need to combine the above into a single document. For example  a customer statement may list the information for the customer  provide text about current promotions  and provide side-by-side lists of payments and charges. A financial report may include disclaimers  charts  tables all with extensive formatting that matches corporate color schemes.  Moreover  The BIRT Report Engine API (RE API) allows you to integrate the run-time part of BIRT into your application. This may mean integrating into a stand alone Java application  deploying as part of a servlet or embedding it within an RCP application. The engine supports the following operations:  Discover the set of parameters defined for a report. Get the default values for parameters. Run a report to produce HTML/Paginated HTML  WORD  XLS  PS  or PDF output. Fetch an image or chart for a report. Export Report data to CSV Retrieve TOCs  Bookmarks  etc  More info on Birt : http://www.eclipse.org/birt/phoenix/intro/ ReportEngine : http://www.eclipse.org/birt/phoenix/deploy/reportEngineAPI.php#iruntask  Idea : Create a camel Birt component who will allow to merge data receive with rptdesign & rptdocument used to generate the report. As parameter  we can provide the type of report we would like to generate : PDF  HTML  Word  .... 
Bug,Willem Jiang,2008-08-05T11:41:44+0000,1217936504,Suppose we have the following flow:   from("activemq:vasea")   .to("cxf:bean:serviceEndpoint?dataFormat=MESSAGE")     .unmarshal().string()   .to("activemq:petea");  In this flow cxf:bean:serviceEndpoint returns ByteArrayInputStream as body. Under normal conditions everything works fine: WS output gets to the queue. But if we add: getContext().addInterceptStrategy(new Tracer()); Queue starts receiving empty messages. After digging in the code I found out that tracer reads input stream in order to display body  but not resets it. Thus when message reaches unmarshaller  nothing could be read from the stream.,Ah good catch. The logger could have the same problem as well.  I remember there is something with streamcache that might can help out here. I don't have the time to dig into it yet.  A workaround is to disable logging of the body in the tracer. There are options for this in the formatter: http://activemq.apache.org/camel/tracer.html. Hi Genadii  I just did a quick fix for it. Please check out the latest Camel 1.5 snapshot and let me know you feed back   Willem. Closing all 1.5.0 issues. 
Improvement,Claus Ibsen,2008-08-05T13:23:46+0000,1217942626,Wiki documentation needs some java dsl examples  Also the acceptors (listeners) should log at INFO level when its started up  instead of DEBUG level.,Added two samples to start with. As always people should look in the unit test codes for examples how to use the component.. Closing 1.5 issues. 
Test,Willem Jiang,2008-08-06T04:23:51+0000,1217996631,http://www.nabble.com/Jms-%3ECXF-%3EJms-routing-td18795982s22882.html#a18795982,http://svn.apache.org/viewvc?rev=683126&view=rev. Closing all 1.5.0 issues. 
Bug,Willem Jiang,2008-08-06T04:33:58+0000,1217997238,[aultMessageListenerContainer-1] DeadLetterChannel              ERROR Failed del ivery for exchangeId: ID-TsingTao/51509-1217997092428/0-0. On delivery attempt: 5 caught: java.lang.NullPointerException java.lang.NullPointerException         at org.apache.camel.component.jms.JmsMessage.createMessageId(JmsMessage. java:165)         at org.apache.camel.impl.MessageSupport.getMessageId(MessageSupport.java :127)         at org.apache.camel.component.cxf.CxfMessage.copyFrom(CxfMessage.java:47 )         at org.apache.camel.impl.DefaultExchange.safeCopy(DefaultExchange.java:9 9)         at org.apache.camel.impl.DefaultExchange.copyFrom(DefaultExchange.java:8 2)         at org.apache.camel.impl.DefaultEndpoint.createExchange(DefaultEndpoint. java:145)         at org.apache.camel.component.cxf.CxfProducer.process(CxfProducer.java:1 75)         at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$Processor ToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:43)         at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:7 5)         at org.apache.camel.management.InstrumentationProcessor.process(Instrume ntationProcessor.java:57)         at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChanne l.java:155)         at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChanne l.java:91)         at org.apache.camel.processor.Pipeline.process(Pipeline.java:101)         at org.apache.camel.processor.Pipeline.process(Pipeline.java:85)         at org.apache.camel.management.InstrumentationProcessor.process(Instrume ntationProcessor.java:57)         at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProc essor.java:39)         at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelp er.java:41)         at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsy ncProcessor.java:66)         at org.apache.camel.component.jms.EndpointMessageListener.onMessage(Endp ointMessageListener.java:68)         at org.springframework.jms.listener.AbstractMessageListenerContainer.doI nvokeListener(AbstractMessageListenerContainer.java:531)         at org.springframework.jms.listener.AbstractMessageListenerContainer.inv okeListener(AbstractMessageListenerContainer.java:466)         at org.springframework.jms.listener.AbstractMessageListenerContainer.doE xecuteListener(AbstractMessageListenerContainer.java:435)         at org.springframework.jms.listener.AbstractPollingMessageListenerContai ner.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:322)         at org.springframework.jms.listener.AbstractPollingMessageListenerContai ner.receiveAndExecute(AbstractPollingMessageListenerContainer.java:260)         at org.springframework.jms.listener.DefaultMessageListenerContainer$Asyn cMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:944)          at org.springframework.jms.listener.DefaultMessageListenerContainer$Asyn cMessageListenerInvoker.run(DefaultMessageListenerContainer.java:875),http://svn.apache.org/viewvc?rev=683125&view=rev. Closing all 1.5.0 issues. 
New Feature,Claus Ibsen,2008-08-06T10:07:39+0000,1218017259,Using the hapi API: http://hl7api.sourceforge.net/  We can implement a new component for camel that handles HL7 for the health care industry where this protocol is widely used. However as license stuff the component must be hosted at camel-extra where we have hibernate and other stuff.,gertv was kind to put the hapi jar on the servicemix repo.  I got a prototype up and running with the MLLP protocol using mina and a dataformat as well so we can easily marshall and unmarshal from the Message model in the HAPI API to/from streams that is used by mina  Rest to do is polishing  adding a few more unit testing and porting it to camel-extra where it can be hosted.. Can be hosted on apache  so it will be part of offical camel. Added initial component camel-hl7 to the trunk  Committed revision 683518.. Wiki documentation TODO. Awsome. Unfortunately I don't think it could be hosted at apache due to the gpl/mpl license  right?. I think we'll just need to have an item about this in our NOTICES file. See info on category B licenses here: http://www.apache.org/legal/3party.html. Check out the chat log: http://servlet.uwyn.com/drone/log/hausbot/camel/20080806. Closing 1.5 issues. 
Bug,Unassigned,2008-08-06T14:46:15+0000,1218033975,Quartz endpoint generates an error which is not serialisable (java.io.NotSerializableException: org.apache.camel.component.quartz.QuartzEndpoint)   43java.lang.RuntimeException: org.apache.camel.component.quartz.QuartzEndpoint 	at org.apache.activemq.command.ActiveMQObjectMessage.storeContent(ActiveMQObjectMessage.java:104) 	at org.apache.activemq.command.ActiveMQObjectMessage.setObject(ActiveMQObjectMessage.java:155) 	at org.apache.activemq.ActiveMQSession.createObjectMessage(ActiveMQSession.java:317) 	at org.apache.activemq.pool.PooledSession.createObjectMessage(PooledSession.java:149) 	at org.apache.camel.component.jms.JmsBinding.createJmsMessage(JmsBinding.java:273) 	at org.apache.camel.component.jms.JmsBinding.makeJmsMessage(JmsBinding.java:139) 	at org.apache.camel.component.jms.JmsProducer$2.createMessage(JmsProducer.java:229) 	at org.springframework.jms.core.JmsTemplate.doSend(JmsTemplate.java:570) 	at org.springframework.jms.core.JmsTemplate$4.doInJms(JmsTemplate.java:551) 	at org.springframework.jms.core.JmsTemplate.execute(JmsTemplate.java:471) 	at org.springframework.jms.core.JmsTemplate.send(JmsTemplate.java:548) 	at org.apache.camel.component.jms.JmsProducer.process(JmsProducer.java:227) 	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:61) 	at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:50) 	at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:79) 	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:57) 	at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:55) 	at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:50) 	at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:79) 	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:57) 	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:69) 	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:155) 	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:91) 	at org.apache.camel.processor.Pipeline.process(Pipeline.java:101) 	at org.apache.camel.processor.Pipeline.process(Pipeline.java:85) 	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:57) 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:41) 	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:50) 	at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:50) 	at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:79) 	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:57) 	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:43) 	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:52) 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:41) 	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:66) 	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:47) 	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:61) 	at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:50) 	at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:79) 	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:57) 	at org.apache.camel.processor.MulticastProcessor.process(MulticastProcessor.java:185) 	at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:50) 	at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:79) 	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:57) 	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:69) 	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:155) 	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:91) 	at org.apache.camel.processor.Pipeline.process(Pipeline.java:101) 	at org.apache.camel.processor.Pipeline.process(Pipeline.java:85) 	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:57) 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:41) 	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:50) 	at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:50) 	at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:79) 	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:57) 	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:43) 	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:39) 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:41) 	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:66) 	at org.apache.camel.processor.loadbalancer.QueueLoadBalancer.process(QueueLoadBalancer.java:41) 	at org.apache.camel.component.quartz.QuartzEndpoint.onJobExecute(QuartzEndpoint.java:117) 	at org.apache.camel.component.quartz.CamelJob.execute(CamelJob.java:32) 	at org.quartz.core.JobRunShell.run(JobRunShell.java:202) 	at org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:531) Caused by: java.io.NotSerializableException: org.apache.camel.component.quartz.QuartzEndpoint 	at java.io.ObjectOutputStream.writeObject0(Unknown Source) 	at java.io.ObjectOutputStream.writeObject(Unknown Source) 	at java.util.HashMap.writeObject(Unknown Source) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) 	at java.lang.reflect.Method.invoke(Unknown Source) 	at java.io.ObjectStreamClass.invokeWriteObject(Unknown Source) 	at java.io.ObjectOutputStream.writeSerialData(Unknown Source) 	at java.io.ObjectOutputStream.writeOrdinaryObject(Unknown Source) 	at java.io.ObjectOutputStream.writeObject0(Unknown Source) 	at java.io.ObjectOutputStream.defaultWriteFields(Unknown Source) 	at java.io.ObjectOutputStream.writeSerialData(Unknown Source) 	at java.io.ObjectOutputStream.writeOrdinaryObject(Unknown Source) 	at java.io.ObjectOutputStream.writeObject0(Unknown Source) 	at java.io.ObjectOutputStream.defaultWriteFields(Unknown Source) 	at java.io.ObjectOutputStream.writeSerialData(Unknown Source) 	at java.io.ObjectOutputStream.writeOrdinaryObject(Unknown Source) 	at java.io.ObjectOutputStream.writeObject0(Unknown Source) 	at java.io.ObjectOutputStream.writeObject(Unknown Source) 	at org.apache.activemq.command.ActiveMQObjectMessage.storeContent(ActiveMQObjectMessage.java:98),Hi Charles  What are you doing? Looks like some quartz stuff is sent over the JMS transport? (activemq)?  Could you post some snippets of your route and what you send to trigger this problem? Any of the xxxEndpoints in Camel is not supposed to be sent over JMS only the Exchange as its the data.. Sorry. There was an error in my code. Quartz works very well. The issue can be closed.. Hi Charles  could you please tell me what was the error in your code? I'm having the same exception here. Thanks!. Hi Daniel   The error was due to the fact that the java object generated by JAXB was not serializable and when the message containing this object has been posted on the JMS bus  JMS has propagated the error to the Quartz endpoint. 
Improvement,Claus Ibsen,2008-08-06T18:27:17+0000,1218047237,Camel should not out-of-the-box use recursive when it polls files from a directory. It could result in side effects such as loading already files moved to a /done subfolder if camel is restarted etc.  end user should turn the feature on if he/she needs it. It is already changed for the FTP component.  Write in release notes this changes so end-users can adjust if they upgrade.,FileConsumer option: consumer.recursive is now default false in Camel 1.5. Closing 1.5 issues. 
Task,Claus Ibsen,2008-08-07T04:15:15+0000,1218082515,When downloading artifacts we have a many repos. Several of them are specific for a single/few components. We should move these repo settings to these targeted components and let the uber pom.xml have only the major public maven repos.  Maybe some of the repos is out-of-date and not used anymore.,Having faster builds sounds good... I'll take a look at this.. Cheers Jonathan. And I recall we have a ticket as well to use the spring amazon repo for their jars instead of what we have configued in our pom.xml.  So you might as well check up on the repos where we get the spring stuff from.  For instance we have a spring-integration project that might need to use the amazon stuff for the milestones while regular spring can also be retrieved from the major apache maven repos also.  Okay good luck and I as well would love faster builds without checking 10 repos each time. This patch pushes down... well... all of the repositories that were in the root pom lower in the build tree. This should speed up builds quite a bit!   Note that if you build from a clean repo  the build will fail trying to find the mina ftpserver. This patch does not introduce this failure however. See http://www.nabble.com/-HEADS-UP--Missing-ftpserver-dependency-td18870393s22882.html for more details about this failure.. Thanks Jonathan. I am wondering if you are not able to "assign" ticket to yourself? Would be handy to know if you are working on it  You should get the credit for all the hard work you do!. I think being able to assign JIRAs is for official committers only. Hopefully I will be able to do this some day. Closing 1.5 issues. 
New Feature,Claus Ibsen,2008-08-07T15:58:38+0000,1218124718,Hi   I've noticed that the behavior of Camel for now is that it polls the file system for files. If the last modified attribute of the file is less than what is stored in memory  camel ignores the file already. However in our case we need to poll the file regardless of its last modified date or its file size.  Can you add a new attributge for this type of behavior? from("file://c:/uploads?ignoreLastModified=true&ignoreFileSizeChange=true");  Thanks,Good idea will get it in Camel 1.5 pretty soon.. Carlo  I have a hard time imagining the use case. Could you please provide some more details on how this feature would be useful? If the file didn't change at all  isn't this as good as a periodic wakeup  something camel-quartz could do? Thanks!. I have a directory that is being used to read files and send web services on the file. When the web services times out the file is placed in another directory.  When it does  the file is recopied into the directory at some other time. It will still have the same timestamp so camel doesn't read it already. But we still need to resend the file.. I think I get it . You are using something like `cp -p` to copy it back which preserves the modification time. Thanks for the clarification.. Actually at work we have a similar low practical integration using a different platform than Camel we store backup and erros in files that can be copied into a special folder for retransmission.  So I see a valid use-case as well that Camel should be able to consume the files.  I am wondering if there is a better combine option name for it though?. Added the option consumer.alwaysConsume as a boolean to enable this feature.  Description for option in wiki: Camel 1.5: Is used to force consuming the file even if it hasn't changed since last time it was consumed. Is useful if you for instance move files back into a folder and the file keeps the original timestamp.. closing. 
Task,Claus Ibsen,2008-08-07T18:02:44+0000,1218132164,The camel-msv component had a wrong camel.osgi.export.pkg in its pom.xml and thus the .jar does not contain the correct class files.  Can be checked by warnings when the component is packaged.,camel-stringtemplate had a flaw. src/main/resourceMETA-INF license is missing in some components. Added missing license. Closing 1.5 issues. 
Bug,Claus Ibsen,2008-08-07T21:22:13+0000,1218144133,Exception throw inside Pipeline is not reported or handled when error handler is LoggingErrorHandler. Attached unit test fails - exchange with exception is not passed to "mock:error" endpoints. Test will pass when you change error handler to default (DeadLetterErrorHandler) or when processor throwing an exception is processed not inside Pipeline.  After some digging inside source code I noticed Pipeline source code fragment.      public void process(Exchange exchange) throws Exception {         AsyncProcessorHelper.process(this  exchange);     }   AsyncProcessorHelper.process(..) never throws exception directly. Instead it passes exception information in exchange object properties. Problem is LoggingErrorHandler doesn't use it correctly because (code snipped from LoggingErrorHandler):      public void process(Exchange exchange) throws Exception {         try {             output.process(exchange);         } catch (Throwable e) {             if (!customProcessorForException(exchange  e)) {                 logError(exchange  e);             }         }     }   it is logging only exception returned directly by output.process call.,Error handling should just work so target for Camel 1.5. Attached patch for LoggingErrorHandler and verifying test case (new file).  Two doubts:  1) Inside LoggingErrorHandler  before passing to handling exception cause is moved to exchange property. Is that correct ?  public void process(Exchange exchange) throws Exception { 	try { 		output.process(exchange); 	} catch (Throwable e) { 		exchange.setException(e); 	} 	if (exchange.getException()!=null) {  		// move exchange exception cause to property 		Throwable e = exchange.getException(); 		exchange.setProperty(DeadLetterChannel.EXCEPTION_CAUSE_PROPERTY  e); 		exchange.setException(null);  		if (!customProcessorForException(exchange  e)) { 			logError(exchange  e); 		}  		// restore exception on exchange 		exchange.setException((Throwable)exchange.getProperty(DeadLetterChannel.EXCEPTION_CAUSE_PROPERTY)); 	} }   2) Inside test case. When defining exception enclusure in path DSL definition I used 'end()' element to close 'exception handling' subpath. (without 'end()' exception handling is not working at all.) Is that correct ?  from(...) 	.exception(SomeException.class).to(...).end() 	.process(...) 	.to(...);. Hi Thomasz  Thanks for looking into this and providing patches and with comments as well.  Ad 1) Ah here we get a bit confusing with Camel.  You can fail a route by: a) throwing an exception b) setting an exception on the exchange  case a is handled today by the logging error handler. The bug is that case b is not. The DLC handles both cases.  What you do by setting the exception on the message is that a is now => b. I do think we should keep the two cases separated.  Ad 2) Ah this is not seen very often but clever. You have the exception within the from = in your route path. Yes the end() is needed otherwise Camel doesn't know when to stop if it goes by the exception path. It doesn't know about new lines so it would just continue. With this you can do fancy stuff  exception(xxx).to(yy).process(zzz).choice().... Just like a regular route path. So when you have it nested you need to tell Camel when to end this path.  If you move the exception outside then you can use the semi colon to stop ;  exception(xxx).to(yy); from(aaa).process(bla);  Then the ; is like the end(). So you suggest not touching "case a" and adding proper handling of "case b" ?. Yes  something like  Throwable toBeLogged = null;  // case a // base b  if (toBeLogged != null) {   // log it }. Tomasz thanks for the patches. I have applied a fix based on your work. Also I fixed that for INFO logging it was logging at DEBUG level instead.. I was still working on this but you ware faster  BWT. I'm digging a little bit more around LoggingErrorHandler and found some issues directly related to modified error handler fragment. Should I report it here or rather on mailing list ?. Tomasz the mailing list is a good place if you are not sure its really a in issue or you need help. If you are pretty sure its a bug then please open a new JIRA ticket.  Glad you are looking into this and take time to report it. Digging into the code also helps you understand how Camel works so you get some education as well. Closing all 1.5.0 issues. 
Bug,Claus Ibsen,2008-08-08T02:49:46+0000,1218163786,Connections to smtp servers with no authentication fail. The mail.smtp.auth is always set to true. The patch sets it to false if no username is given.,Applied patch with thanks to Bela.. Closing all 1.5.0 issues. 
Bug,Claus Ibsen,2008-08-08T03:02:15+0000,1218164535,When using the thread processor in a simple pipeline  the exchange will be redelivered 6 times (default policy) along with the preset errorhandler settings. The code below will re-deliver 6 times to the default DeadLetterChannel and once to the log:errorTester.      	errorHandler(deadLetterChannel("log:errorTester?level=ERROR").maximumRedeliveries(1));      	from("seda:whatEver")         .thread(2)        	.process(new Processor() {         		public void process(Exchange exchange) throws Exception  {         			System.out.println("### Exchg : " + exchange.getExchangeId());         			throw new Exception("Kaboom 2!");         		}         });,err correction: re-delivers 6 times before it goes to the default DeadLetterChannel  then once more before it goes to the specified ErrorHandler. It seems like the message gets re-delivered parallel: once following the default ErrorHandler policy and also following the preset error handler.. Target for Camel 1.5. Error handling is important that it just works. So far this is what I see:  The thread processor wraps everything following into a pipeline. One problem is that the "children" (the members of the pipeline) don't inherit the the settings for the Error Channel. Since the ErrorHandlerBulder is null it falls back to the default (6 re-tries  DLC). This probably can be corrected at ProcessorType.java:1610 by copying the ErrorHandlerBuilder of the parent.  But there is another problem. If we bomb in one of the members of the pipeline after the thread processor  the error handling will be executed two times: once for the member (that would be the desirable behavior) and once for the whole pipeline. Camel actually re-delivers the exchange to the first member after the thread().  Well that is it so far. Let me know if you want me to keep poking.... Bela thanks for the help  much appreciated. It might already be fixed in Camel 1.5. Using your unit test I can only get it redelivered once.. See unit test added: http://svn.apache.org/viewvc?view=rev&revision=686461  org.apache.camel.issues.ThreadErrorHandlerTest. More digging...  I attached 2 unit tests. The extra is that I'm counting the actual execution of the processor.  The first is the simpler test (BelasThreadErrorHandlerTest1.java). It demonstrates that the exchange gets delivered 1 less times than the number specified in the errorHandler statement. This happens even without the thread processor. By the way am I right here? We mean "re"-delivery  meaning executing the processor  where the failure occurred  once (failure) + plus the number of "re" times  right? Btw with zero doesn't even call the processor.  The second unit test is about the thread processor behavior (BelasThreadErrorHandlerTest1.java). The error handlig behavior is different depending where you put the errorHandler call inside the route: before or after. If it comes before the only problem is the one less re-delivery (see above in the first unit test). If you put the errorHandler spec after the thread processor it gets ignored and Camel will redeliver 5 times followed by the default DLC (one less again because 6 is the default).. Unit test to show the number of re-deliveries is one less than expected.. Unit test to test the errorHandling with thread processor.. Hi Bela  Thanks for all the digging. maximumRedelivery=0 should disable it = newer retry.. Thanks for the unit tests. Will look into it later.. The "number of re-deliveries is one less than expected." has been fixed.. The outstanding issue is when you configure an errorHandler after the thread.     from(xxx)    .thread(2)    .errorHandler(...)    .process(...)   Then its using the parent errorhandler and if none exists its the default error handler using DLC with 5 retries.  But setting the errorhandler before works as expected:     from(xxx)    .errorHandler(...)    .thread(2)    .process(...)   So we gotta figure out how Camel should handle this  and if the after should be supported also.. Setting error handler after thread is not supported. End users should set it on the correct type such as a RouteType such as the from.  The thread children is now also configured with the inherited error handler as suggested by Bela.  Thanks Bela for reporting and digging into this issue.. There's only one issue with this  but isn't a big deal. The failure gets logged twice. Once for the thread and once for the processor which failed somewhere after the thread. They get logged with their respective exchanges. I think only the exchange before the failed processor should be logged.  I will try to create a test case  but not sure how can this be automated with JUnit (you have to set it to debug and watch the log). Anyway this is not a showstopper bug.. Bela yes please if you are digging into this create a new ticket with the findings.  When you say "logged" do you mean the DEBUG logging in camel or that the exchange is moved to a dead letter channel after all redeliveries failed? Can you elaborate a bit on this?. Yes  I meant the log messages. I cannot reproduce it in a unit test  but it is still happening in my system. While trying to create the test I found someting else:  https://issues.apache.org/activemq/browse/CAMEL-901  It maybe the indirect cause of my logging problem. Let me know if I can help in any ways.. Closing all 1.5.0 issues. 
Bug,Hadrian Zbarcea,2008-08-08T05:48:57+0000,1218174537,The test fails with the following error:  junit.framework.ComparisonFailure: expected:<[Bye World]> but was:<[]> 	at junit.framework.Assert.assertEquals(Assert.java:81) 	at junit.framework.Assert.assertEquals(Assert.java:87) 	at org.apache.camel.component.mina.MinaConsumerTest.testSendTextlineSyncText(MinaConsumerTest.java:28) ...  One test sends sync the text "World" and the should receive "Bye World" in response. 2008-08-08 01:35:25 589 DEBUG MinaProducer - Message received: Bye World  2008-08-08 01:35:25 589 DEBUG MinaProducer - Message received:   2008-08-08 01:35:25 589 DEBUG MinaProducer - Message received: Bye   2008-08-08 01:35:25 589 DEBUG MinaProducer - Message received:    There are actually not one  but two messages received which causes the reply to be overridden by the second message.  The problem is with the test itself that actually returns "Bye " + body + "\n"!  Because the test uses the 'textline' mina codec  the encoder actually adds another '\n'.  With the textline codec there's one message per line  so the extra \n makes it two lines and hence the extra message.  The decoder at the other end suppresses the LineDelimiter (\n)  so the extra message is actually an empty string.  Removing the extra \n in the message fixes the test  but the notes above should be considered when camel-mina is used with the textline codec.,Closing all 1.5.0 issues. 
Improvement,Claus Ibsen,2008-08-08T06:26:49+0000,1218176809,In the Bean component  it is mentioned that a @OutHeader annotation exists  "Using Annotations to bind parameters to the Exchange  The annotations can be used to bind in situations where traditional methods would result in ambiguous methods. So by adding annotations you can decorate your bean to help Camel invoke the correct method.  You can also use the following annotations to bind parameters to different kinds of Expression Annotation Meaning @Body To bind to an inbound message body @Header To bind to an inbound message header @Headers To bind to the Map of the inbound message headers @OutHeader To bind to an outbound message header @OutHeaders To bind to the Map of the outbound message headers @Property To bind to a named property on the exchange @Properties To bind to the property map on the exchange"  but the Camel-1.4 project does not contain such a class !  Is it an error in the doc or a ghost class ? If this is an error in the wiki page  can you update it please ?,Thanks for spotting this. Fixed the page and also added the new missing @Constant language.. Closing all 1.5.0 issues. 
Improvement,Claus Ibsen,2008-08-08T07:55:22+0000,1218182122,Hi   First of all  I would like to thanks Claus for the quality of its tutorial. This is a great job for the camel community to have now a second tutorial showing the magic of Camel.  What I would like to propose is to add a fourth part to this tutorial to show :   	How to turn on the code to DSL language and/or spring xml configuration file ? 	How the architecture can be adapted to use Camel as the entry point of the web service instead of the CxFServlet ?    Task to do   1) Adapt the architecture to allow Camel to become the entry point of the web services 2) Transpose the code to routes the messages between the endpoints using DSL language through a java class 3) Idem bu using a spring configuration file,Yes after some of the heat settled I will sit down with a few beers and craft some more parts. However any contribution is of course much appreciated.. How can I help you ?. Charles do you have edit rights to the wiki? If not then you can get it but you need to have signed the Apache CLA so Apache have the rights to whatever you write on the wiki.  If so then you can also write / edit the tutorial.  I will take a look at a part 4 this weekend. I think I will keep it basic at first to introduce the routing in only Java. And then part 5 can be more about spring how to setup Camel using spring xml files. And then a part 6 about the camel-cxf integration as its a bit not easy.  Oh and then definitely a part about unit testing with the camel test kit as its very important as well.. I will sign the Apache SLA and send it back in order for me to have access to the wiki.. New ideas  Part 7 : Add transaction support Part 8 : Deploy Camel in an application server (JBOSS  Tomcat)  WebSphere  BEA  ...)  OSGI server (Spring Application Platform suite  Equinox  Felix  ...) or JBI ESB (ServiceMix  Petals  ...)  The next step will be the redaction of a book. Is the code of the tutorial available under SVN ?. Each part has a file attached with the source code.  At the end I will add a new example to camel 1.5 that is based on the tutorial with a finished integration on this use-case. However this example will be more like the last parts with spring  routes  and everything. Currently that code is not in SVN (yet). I think we could put these codes into the svn example directory  in this way we could make the tutorial codes sync with the latest Camel.. Ah  there was an issue for this. I presented camel @trijug yesterday and I used the attached version for step 4. It does 1. and 2  and I sent it to Claus if he wants to add more of his magic before attaching it to the wiki. Sometimes mail client are smart enough to send my messages to trash  so I'll attach it here too  if anybody wants to improve on it.. Part 4 now done. Will add a part 5 later. Should be either more about unit testing with Camel test kit (such as mocks) or to introduce spring.. The attached code does not include a solution for the first bullet in the original description of this task: 1) Adapt the architecture to allow Camel to become the entry point of the web services  I think this is an important aspect to demonstrate.. @Hadrian  I agree but I wanted to introduce the "Camel calls CXF entry automatically" when Willem have improve the CXF so I dont have to go through hoops to get the input object. And as I understand it he has fixed/improved this recently. But the very reasons for not doing this from the start is the fact that I wanted to demo that Camel doens't take the power from the ordinary developer. The cursor is blinking in his code editor and he is in control and can write the code to start the show  Camel is all about this also  just being there when you need it and it can be a very powerful helper/friend.. From James in another ticket. A good idea. So I comment it here to not forget to write something about this in the tutorial.  BTW I wonder if we should encourage the use of  when().xpath("/foo")   rather than  when(header....)   as the when(). is typically more feature rich and has better IDE smart completion. After messing with letting camel handle the entry point with cxf I am not happy with it. It will require quite a context change for end-users to let it handle it properly  and I feel as a developer I lose a little control.  Also I had to use cxf:endpoint to configure it using spring xml and not jaxws (I got a ClassCastException). Will report it later.  And frankly to handle any exceptions during the routing requires to use a more powerful DSL style and I frankly don't think we are there yet int the tutorial. (Maybe for part 7+).      private static OutputReportIncident OK = new OutputReportIncident();     private static OutputReportIncident VALIDATION = new OutputReportIncident();     private static OutputReportIncident ERROR = new OutputReportIncident();      public void configure() throws Exception {         OK.setCode("0");         VALIDATION.setCode("1");         ERROR.setCode("9");          // first part from the webservice -> file backup         from("cxf:bean:reportIncident")                 .tryBlock()                     .convertBodyTo(InputReportIncident.class)                     .bean(ValidateIncidentService.class)                     .setHeader(FileComponent.HEADER_FILE_NAME  bean(FilenameGenerator.class  "generateFilename"))                     .to("velocity:MailBody.vm")                     .transform(constant(OK))                 .handle(IncidentValidationException.class)                     .transform(constant(VALIDATION))                 .handle(Exception.class)                     .transform(constant(ERROR))                 .end();     }   So part 5 will be a gentle introduction to let Spring create the camel context and we will take it from there in baby steps.. Okay I have added a part 5 to demonstrate how to embed Camel with Spring so it's started and stopped by Spring And finally I also added how to use camel-cxf endpoints directly in the routing so it's nice.  I plan to do a part 6 to introduce the equal Spring DSL version  Any feedback and review is of course welcome. Is the following sentence of the part 5 correct ?  " The idea now is to replace the endpoint the starts the ball going from "direct:start" to the CXF endpoint."  or 'the starts' should be 'TO starts'. Thanks Charles for review. I have fixed it.. Charles I have also upload a new zip file with the missing cxf file remove (not needed)  Please check if that works for you. Additional remark  I know that this tutorial does not explain in detail How CXF works and is integrated but it should be interesting for the users that you explain why you have switched the endpoint from jaxws to cxf and what are the difference between the two endpoints (ex : it is not possible to pass a spring reference into cxf endpoint for the service class  ...) ?. @Charles  Could you log the issue with the missing possibility to refer to a spring bean for the serviceClass? That would be a nice option to have. I think it should support the # notation so you can refer to it just as:  cxf://localhost:8080/myapp/myserver?serviceClass=#myCoolService   And the spring XML  <bean id=myCoolService class="..."/>   The # notation is now possible in Camel 2.0 for all setter properties on a given Endpoint.. I created the ticket CAMEL-1254. I must revert my code to test it again. But if my memory is correct  when I try to do the following   exception was raised because it is not possible to pass the bean reference as an interface to the serviceclass.  <!-- implementation of the webservice --> <osgi:reference id="reportIncidentEndpoint" interface="org.apache.camel.example.reportincident.ReportIncidentService"/>  <!-- webservice endpoint --> <cxf:cxfEndpoint id="reportIncident" address="/incident" wsdlURL="/WEB-INF/wsdl/report_incident.xml" serviceClass="org.apache.camel.example.reportincident.service.ReportIncidentImpl" endpointName="s:ReportIncidentPort" serviceName="s:ReportIncidentService" xmlns:s="http://reportincident.example.camel.apache.org"/>  With a jaxws endpoint  it is possible to provide the bean reference  <!-- export the webservice using jaxws --> <jaxws:endpoint id="reportIncident" implementor="#reportIncidentEndpoint" address="/incident" wsdlLocation="/wsdl/report_incident.wsdl" endpointName="s:ReportIncidentPort" serviceName="s:ReportIncidentService" xmlns:s="http://reportincident.example.camel.apache.org"/>. @ Charles   You are right   here is the [mail thread|http://www.nabble.com/org.apache.cxf.interceptor.Fault%3A-Message-part-%7Bhttp%3A-reportincident.example.camel.apache.org%7DinputReportIncident-was-not-recognized.(Does-it-exist-in-service-WSDL)-td20937098s22882.html#a20950634} that we were discussing.  I just checked the CXF code of dealing #reportIncidentEndpoint  I don't think it is difficult to support it in camel-cxf. @Willem   Great. When the patch will be available  I will use it for the second part of my tutorial.. @Charles  Could you check my latest changes on CAMEL-1254 ? I introduce a new operation serviceClassInstance in URI for looking up the service class from camel context registry.. I need to write part 6 that is the XML based router.  The code is now provided in camel 2.0 as an example (based on part-5). The tutorial is finished. No time to write more on it.. Closing all 2.0M2 tickets. 
Bug,Unassigned,2008-08-08T12:07:17+0000,1218197237,Hi    The following error is returned when Tracer is activated for the Flatpack component :  4317672 [Thread: 2 org.apache.camel.component.file.FileComponent@14f5a31] INFO  org.apache.camel.processor.interceptor.TraceInterceptor  - ID-dell-charles/1671-1218196761734/1-1 -> interceptor2 Interceptor[Delegate(DeadLetterChannel[Delegate(TraceInterceptor[To[flatpack:fixed:com/bravura/babel/transformation/cutas/in/CUTAS.xml]])  sendTo(Endpoint[seda:errors])  RedeliveryPolicy[maximumRedeliveries=1]])] InOnly Properties: {org.apache.camel.file.lock.name=c:\temp\cutas\input\clientA\ST000355.txt.cameLock  org.apache.camel.file.lock=sun.nio.ch.FileLockImpl[0:9223372036854775807 exclusive valid]  org.apache.camel.fileChannel=sun.nio.ch.FileChannelImpl@4610fa}  Headers: {org.apache.camel.file.name=ST000355.txt} BodyType:java.io.File 4317672 [Thread: 2 org.apache.camel.component.file.FileComponent@14f5a31] INFO  org.apache.camel.processor.interceptor.TraceInterceptor  - ID-dell-charles/1671-1218196761734/1-1 -> to4 To[flatpack:fixed:com/bravura/babel/transformation/cutas/in/CUTAS.xml] InOnly Properties:{CamelCauseException=null  org.apache.camel.file.lock.name=c:\temp\cutas\input\clientA\ST000355.txt.cameLock  org.apache.camel.file.lock=sun.nio.ch.FileLockImpl[0:9223372036854775807 exclusive valid]  org.apache.camel.fileChannel=sun.nio.ch.FileChannelImpl@4610fa} Headers:{org.apache.camel.file.name=ST000355.txt}  BodyType:java.io.File 4318031 [Thread: 2 org.apache.camel.component.file.FileComponent@14f5a31] INFO  org.apache.camel.processor.interceptor.TraceInterceptor  - ID-dell-charles/1671-1218196761734/1-2 -> interceptor3 Interceptor[Delegate(DeadLetterChannel[Delegate(TraceInterceptor[To[activemq:queue:cutas.clientA.accepted.in]])  sendTo(Endpoint[seda:errors])  RedeliveryPolicy[maximumRedeliveries=1]])] InOnly Properties:{} Headers: {camelFlatpackCounter=0} BodyType:net.sf.flatpack.DefaultDataSet 4318031 [Thread: 2 org.apache.camel.component.file.FileComponent@14f5a31] INFO  org.apache.camel.processor.interceptor.TraceInterceptor  - ID-dell-charles/1671-1218196761734/1-2 -> to5 To[activemq:queue:cutas.clientA.accepted.in] InOnly Properties:{CamelCauseException=null} Headers:{camelFlatpackCounter=0}  BodyType:net.sf.flatpack.DefaultDataSet 4318172 [Thread: 2 org.apache.camel.component.file.FileComponent@14f5a31] INFO  org.apache.camel.processor.interceptor.TraceInterceptor  - ID-dell-charles/1671-1218196761734/1-3 -> interceptor3 Interceptor[Delegate(DeadLetterChannel[Delegate(TraceInterceptor[To[activemq:queue:cutas.clientA.accepted.in]])  sendTo(Endpoint[seda:errors])  RedeliveryPolicy[maximumRedeliveries=1]])] InOnly Properties:{} Headers: {camelFlatpackCounter=1} BodyType:net.sf.flatpack.DefaultDataSet 4318172 [Thread: 2 org.apache.camel.component.file.FileComponent@14f5a31] INFO  org.apache.camel.processor.interceptor.TraceInterceptor  - ID-dell-charles/1671-1218196761734/1-3 -> to5 To[activemq:queue:cutas.clientA.accepted.in] InOnly Properties:{CamelCauseException=null} Headers:{camelFlatpackCounter=1}  BodyType:net.sf.flatpack.DefaultDataSet 4318172 [Thread: 2 org.apache.camel.component.file.FileComponent@14f5a31] INFO  org.apache.camel.processor.interceptor.TraceInterceptor  - ID-dell-charles/1671-1218196761734/1-4 -> interceptor3 Interceptor[Delegate(DeadLetterChannel[Delegate(TraceInterceptor[To[activemq:queue:cutas.clientA.accepted.in]])  sendTo(Endpoint[seda:errors])  RedeliveryPolicy[maximumRedeliveries=1]])] InOnly Properties:{} Headers: {camelFlatpackCounter=2} BodyType:net.sf.flatpack.DefaultDataSet 4318172 [Thread: 2 org.apache.camel.component.file.FileComponent@14f5a31] INFO  org.apache.camel.processor.interceptor.TraceInterceptor  - ID-dell-charles/1671-1218196761734/1-4 -> to5 To[activemq:queue:cutas.clientA.accepted.in] InOnly Properties:{CamelCauseException=null} Headers:{camelFlatpackCounter=2}  BodyType:net.sf.flatpack.DefaultDataSet 4318172 [Thread: 2 org.apache.camel.component.file.FileComponent@14f5a31] INFO  org.apache.camel.processor.interceptor.TraceInterceptor  - ID-dell-charles/1671-1218196761734/1-5 -> interceptor3 Interceptor[Delegate(DeadLetterChannel[Delegate(TraceInterceptor[To[activemq:queue:cutas.clientA.accepted.in]])  sendTo(Endpoint[seda:errors])  RedeliveryPolicy[maximumRedeliveries=1]])] InOnly Properties:{} Headers: {camelFlatpackCounter=3} BodyType:net.sf.flatpack.DefaultDataSet 4318172 [Thread: 2 org.apache.camel.component.file.FileComponent@14f5a31] INFO  org.apache.camel.processor.interceptor.TraceInterceptor  - ID-dell-charles/1671-1218196761734/1-5 -> to5 To[activemq:queue:cutas.clientA.accepted.in] InOnly Properties:{CamelCauseException=null} Headers:{camelFlatpackCounter=3}  BodyType:net.sf.flatpack.DefaultDataSet 4318172 [Thread: 2 org.apache.camel.component.file.FileComponent@14f5a31] INFO  org.apache.camel.processor.interceptor.TraceInterceptor  - ID-dell-charles/1671-1218196761734/1-6 -> interceptor3 Interceptor[Delegate(DeadLetterChannel[Delegate(TraceInterceptor[To[activemq:queue:cutas.clientA.accepted.in]])  sendTo(Endpoint[seda:errors])  RedeliveryPolicy[maximumRedeliveries=1]])] InOnly Properties:{} Headers: {camelFlatpackCounter=4} BodyType:net.sf.flatpack.DefaultDataSet 4318172 [Thread: 2 org.apache.camel.component.file.FileComponent@14f5a31] INFO  org.apache.camel.processor.interceptor.TraceInterceptor  - ID-dell-charles/1671-1218196761734/1-6 -> to5 To[activemq:queue:cutas.clientA.accepted.in] InOnly Properties:{CamelCauseException=null} Headers:{camelFlatpackCounter=4}  BodyType:net.sf.flatpack.DefaultDataSet 4318172 [Thread: 2 org.apache.camel.component.file.FileComponent@14f5a31] INFO  org.apache.camel.processor.interceptor.TraceInterceptor  - ID-dell-charles/1671-1218196761734/1-7 -> interceptor3 Interceptor[Delegate(DeadLetterChannel[Delegate(TraceInterceptor[To[activemq:queue:cutas.clientA.accepted.in]])  sendTo(Endpoint[seda:errors])  RedeliveryPolicy[maximumRedeliveries=1]])] InOnly Properties:{} Headers: {camelFlatpackCounter=5} BodyType:net.sf.flatpack.DefaultDataSet 4318172 [Thread: 2 org.apache.camel.component.file.FileComponent@14f5a31] INFO  org.apache.camel.processor.interceptor.TraceInterceptor  - ID-dell-charles/1671-1218196761734/1-7 -> to5 To[activemq:queue:cutas.clientA.accepted.in] InOnly Properties:{CamelCauseException=null} Headers:{camelFlatpackCounter=5}  BodyType:net.sf.flatpack.DefaultDataSet 4318219 [DefaultMessageListenerContainer-9] WARN  org.apache.camel.component.jms.EndpointMessageListener  - Endpoint[activemq:queue:cutas.clientA.accepted.in] consumer caught an exception while processing JMS message: ActiveMQMessage {commandId = 5  responseRequired = true  messageId = ID:dell-charles-1675-1218196762046-2:3:1:1:1  originalDestination = null  originalTransactionId = null  producerId = ID:dell-charles-1675-1218196762046-2:3:1:1  destination = queue://cutas.clientA.accepted.in  transactionId = null  expiration = 0  timestamp = 1218196771187  arrival = 0  brokerInTime = 1218196771187  brokerOutTime = 1218196771218  correlationId = null  replyTo = null  persistent = true  type = null  priority = 4  groupID = null  groupSequence = 0  targetConsumerId = null  compressed = false  userID = null  content = null  marshalledProperties = null  dataStructure = null  redeliveryCounter = 0  size = 1024  properties =  {camelFlatpackCounter=0}   readOnlyProperties = true  readOnlyBody = true  droppable = false} 43org.apache.camel.RuntimeCamelException: java.lang.NullPointerException 	at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:71) 	at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:531) 	at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:466) 	at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:435) 	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:322) 	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:260) 	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:944) 	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:875) 	at java.lang.Thread.run(Unknown Source) Caused by: java.lang.NullPointerException 	at org.apache.camel.processor.interceptor.TraceFormatter.getBodyTypeAsString(TraceFormatter.java:124) 	at org.apache.camel.processor.interceptor.TraceFormatter.format(TraceFormatter.java:39) 	at org.apache.camel.processor.interceptor.TraceInterceptor.format(TraceInterceptor.java:68) 	at org.apache.camel.processor.Logger.logMessage(Logger.java:218) 	at org.apache.camel.processor.Logger.process(Logger.java:125) 	at org.apache.camel.processor.interceptor.TraceInterceptor.logException(TraceInterceptor.java:128) 	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:59) 	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:43) 	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:39) 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:41) 	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:66) 	at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:68) 	... 8 more  Code snippet :  	public void configure() {  		errorHandler(deadLetterChannel("seda:errors").maximumRedeliveries(1) 				.useExponentialBackOff());          // Display trace 		Tracer tracer = new Tracer(); 		tracer.getFormatter().setShowBody(false); 		tracer.getFormatter().setShowHeaders(true); 		tracer.getFormatter().setShowNode(true); 		getContext().addInterceptStrategy(tracer);   		from(file:///c:/temp/cutas/input/clientA/?delete=false&amp;lock=true&amp;consumer.delay=500&amp;consumer.initialDelay=10) 		.to(flatpack:fixed:com/bravura/babel/transformation/cutas/in/CUTAS.xml);  		from(flatpack:fixed:com/bravura/babel/transformation/cutas/in/CUTAS.xml) 		.to(activemq:queue:cutas.clientA.accepted.in);,Hi Charles  This should be fixed with the 1.5-SNAPSHOT.  What you can do as a workaround in Camel 1.4 is to not show the body type. tracer.getFormatter().setShowBodyType(false);. The error is also generated (in Camel 1.4) even if i use : tracer.getFormatter().setShowBodyType(false);. Hi Charles  Hmm that is to bad. You can also try to disable the body all together just for testing tracer.getFormatter().setShowBody(false);. This is not really blocking. I can wait for Camel 1.5.  Nevertheless  there is a bug with the flatpack component because in the case presented here  the endpoint "from(flatpack:fixed:com/bravura/babel/transformation/cutas/in/CUTAS.xml)" send a flatpack DataSet object which is not accepted by the activemq queue.. Yes the flatpack component needs an overhaul for Camel 1.5. It was added very late in 1.4 and thus not complete.  Charles if you are up for it you are welcome to give a go at improving the flatpack component. I have faxed my apache CLA so now I wait to be listed on apache web site. Next week  I will try to spend some time on this beautiful Apache project. I have almost finished the Proof Of Concept for which I was busy since a couple weeks so now I will have a few times for open source community (if my boss agrees. Charles about the bug?  You need to convert the content to something that can be serailized/handled by the JMS provider. But as said before we should give the flatpack component an overhaul.  But can you test with this (there is a type converter from DataSet to Map)  from(flatpack:fixed:com/bravura/babel/transformation/cutas/in/CUTAS.xml) .convertBodyTo(Map.class) .to(activemq:queue:cutas.clientA.accepted.in);  I will close this as not a bug. And then we must make sure the flatpack stuff can be sent to JMS out-of-the-box with eg a good type converter or a camel type that is seiralizable.. The original reported bug is already fixed in Camel 1.5. Closing all 1.5.0 issues. 
Bug,Gert Vanthienen,2008-08-08T12:51:14+0000,1218199874,When I run 'mvn dependency:go-offline' I get the following error in camel-scala:   [ERROR] BUILD ERROR [INFO] ------------------------------------------------------------------------ [INFO] Failed to resolve artifact.  GroupId: org.scala-tools ArtifactId: maven-scala-plugin Version: RELEASE  Reason: Unable to determine the release version  Try downloading the file manually from the project website.  Then  install it using the command:      mvn install:install-file -DgroupId=org.scala-tools -DartifactId=maven-scala-plugin      -Dversion=RELEASE -Dpackaging=maven-plugin -Dfile=/path/to/file  Alternatively  if you host your own repository you can deploy the file there:      mvn deploy:deploy-file -DgroupId=org.scala-tools -DartifactId=maven-scala-plugin      -Dversion=RELEASE -Dpackaging=maven-plugin -Dfile=/path/to/file -Durl=[url] -DrepositoryId=[id]    org.scala-tools:maven-scala-plugin:maven-plugin:RELEASE   Adding an explicit version for the scala plugin fixes this.,Adding patch with ASF license.... Fixed in http://svn.eu.apache.org/viewvc?view=rev&revision=683956. Thanks to Jon for providing the patch!. Closing all 1.5.0 issues. 
Improvement,Jonathan Anstey,2008-08-08T15:19:47+0000,1218208787,The table of the current supported uris (chapter 3) displayed in the pdf of the documentation manual is cut and so not all the information is available.,Damm I thought that we fixed this in the 1.4. this is looking OK now isn't it?  http://activemq.apache.org/camel/manual/camel-manual-2.0-SNAPSHOT.pdf  or is there something still being cut?. Charles  what PDF reader are you using? The table looks fine in Evince 2.22.2 and Acrobat Reader 8.. We have also a cut in the appendix (page 169) for :  FILE EXPRESSION LANGUAGE Available as of Camel 1.5 The File Expression Language is an extension to the Simple language  adding file related capabilities. These capabilities is related to common use cases working with file path and names. The goal is to allow expression to be used with the File and FTP components for setting dynamic file patterns for both consumer and producer. ....  I see that the table of the components in the appendix are too big. Size must be reduce otherwise the table is cut in 2 parts and the second part is added after the first part. This is not helpful to read.. I use Acrobat Reader 9.  I see also strange characters like this 'Â' for Cxf component when the content of the column is empty.. Content table of the component FTP/SFTP is also cut.. Here is screenshot example of error (1) detected in Adobe Reader 9.. Here is screenshot example of error (2) detected in Adobe Reader 9.. Here is screenshot example of error (3) detected in Adobe Reader 9.. Yeah  this doesn't look too hot... I see those errors too.. I've fixed these issues now. See the latest PDF here http://people.apache.org/~janstey/temp/camel-manual-2.0-SNAPSHOT.pdf (or wait until the nightly build creates one). Closing 2.0m1 tickets. 
Improvement,Hadrian Zbarcea,2008-08-08T16:07:22+0000,1218211642,I noticed that you can't currently specify something like the following (where the header is an array of values):     <route>     <from uri="seda:a"/>     <recipientList>       <header>recipientListHeader</header>     </recipientList>   </route>    which is equivalent to the Java DSL   from("seda:a").recipientList(header("recipientListHeader"));,Patch to fix this issue.. @Jon: had to append Test to SpringRecipientListWithArrayHeader.java if we were to run it in the builds . Full build going on now.... Good catch! I was passing in the test explicitly like so 'mvn -Dtest=SpringRecipientListWithArrayHeader'. Awsome. Patch applied. Thanks Jon!. Closing all 1.5.0 issues. 
Test,Unassigned,2008-08-08T19:04:18+0000,1218222258,Noticed that there was no spring test case for the throttler pattern.,Attached a test for the throttler.  We'll also need to add this snippet to the wiki here http://activemq.apache.org/camel/throttler.html once this patch gets applied.. Patch applied with many thanks! Waiting for documentation changes.. Updated docs at http://cwiki.apache.org/confluence/display/CAMEL/Throttler. Closing all 1.5.0 issues. 
Bug,Claus Ibsen,2008-08-09T06:27:45+0000,1218263265,The method org.apache.camel.processor.validation.ValidatingProcessor.process() is executed concurrently but error information is stored in a shared errorHandler. Because each thread calls errorHandler.reset() it may clean errors written by another thread. The easiest way to fix this issue would be a synchronized block:  ValidatingProcessor.java ... synchronized (errorHandler) {     errorHandler.reset();     validator.setErrorHandler(errorHandler);          DOMResult result = new DOMResult();     validator.validate(source  result);          errorHandler.handleErrors(exchange  schema  result); } ...     The disadvantage of this solution is that is serializes threads. A locally created error handler would be preferrable ...,I am wondering if the code below would do the trick? I does however assume that it can create a new instance of the error handler provided.          // create a new errorHandler and set it on the validator         // must be a local instance to avoid problems with concurrency (to be thread safe)         ValidatorErrorHandler handler = errorHandler.getClass().newInstance();         validator.setErrorHandler(handler);          DOMResult result = new DOMResult();         validator.validate(source  result);          handler.handleErrors(exchange  schema  result);. BTW: We need a unit test that covers ValidatingProcessor. The ones I have seen have created their own processor and not using the one from camel-core.. Fixed in rev 684301. Closing all 1.5.0 issues. 
Bug,Claus Ibsen,2008-08-09T10:20:34+0000,1218277234,See nabble: http://www.nabble.com/FileEndpoing-%22consumer.recursive%22-is-misleading-td18897261s22882.html,Closing 1.5 issues. 
Sub-task,Claus Ibsen,2008-08-09T11:49:01+0000,1218282541,To get the stuff from the HL7 model objects is quite cumbersome  so camel-hl7 should extract them for you.  For instance the message type and trigger even is useful to know what kind of HL7 message it is.,Damm this requires what we have now to be a real component so we can access the exchange and set the header values. Or improve DataFormat to be able to set/get headers as well on the message.. Got it sorted  my bad  DataFormat is already capable of doing mutations to the exchange = brilliant.  Need to update the wiki with this additional info for the DataFormat and a new route sample as well.. See HL7 DataFormat where all the MSH 03-12 fields is now added to the exchange in message so routing is much easier.  Check out the HL7 component page for a routing sample with this new feature.. Closing 1.5 issues. 
Bug,Claus Ibsen,2008-08-10T06:52:59+0000,1218351179,The new strict URI validation requires that the named parameter options be validated prior to calling endpoint. This has the unfortunate side effect of failing exchanges to Endpoints where the parameter options are variable e.g. a GET request to HTTP server. In cases such as these it would be useful to be able to circumvent this strict validation.  The attached test illustrates the issue.,Okay got it covered now. Will commit the fix later today.. Stephan the paramsViaHeader works in Camel 1.4 already. You just need to remove the leading ? in the value.. Closing all 1.5.0 issues. 
Bug,Willem Jiang,2008-08-10T22:22:11+0000,1218406931,I believe there is incorrect flow in the HttpProducer which can subvert error handling in the route:  in Camel 1.4.0 in HttpProducer on line 76 a "blank" out message is set on the exchange:  Message out = exchange.getOut(true);         try {             int responseCode = httpClient.executeMethod(method); ...  1. If an IO error occurs on connect  the out message will be passed to the error handling code and if the originating endpoint was a JmsMessage it will cause an NPE when JmsMessage.getMessageId() is called. It also obscures the offending message I believe. 2. A similar situation will happen if the HTTP service returned an error code; the out message will contain a reply message even though the processing resulted in an error (e.g. HTTP Status 500)  3. Also  shouldn't this code test whether the exchange expects an "out" altogether  and if not  perhaps  put just put the return HTTP status into the "in" message header.  --Bill,Thanks for reporting this. Will target this for Camel 1.5.  Ad 1) Can you provide a unit test the demonstrates this bug? Or at least a routebuilder with the setup? Helps a lot with something to start with.  Ad 2) Yeah it should test for != 200 and set a fault message or the like for all the non OK result.  Ad 3) The MEP (InOnly  InOut) is a bit confusing in Camel right now. The components doesn't isn't strict about them. They were added becasue of JBI to my knowledge. We are discussing to do something about it in Camel 2.0. For now we wont change the current behavior.  But yes doing a isOutCapable is a good idea. and set on in if not.  BTW: If you fancy then patches is highly appreciated http://activemq.apache.org/camel/contributing.html. For 1) I fixed the NPE in CAMEL-785. Please check out the Camel 1.5 snapshot for verification.  2) I just updated the code if the responseCode != 200  we put the result into the fault message.  3) Since we are thinking the InMessage should be a mutable  I'd like to keep the out message for store the result.  Maybe we will review this in the Camel2.0.. @Willem  I think for things like 500 (transient errors) it should still be exception.. On a second thought  let's close this one. We'll have quite some cleanup to do across all components after CAMEL-316 is fixed.. Closing all 1.5.0 issues. 
Sub-task,Claus Ibsen,2008-08-11T08:38:51+0000,1218443931,Just a ticket for a reminder for myself to improve the wiki documentation a bit for these two components.,Closing 1.5 issues. 
Task,Willem Jiang,2008-08-11T14:16:10+0000,1218464170,As was mentioned in the thread http://www.nabble.com/-HEADS-UP--Missing-ftpserver-dependency-td18870393s22882.html#a18870393   the current ftpserver dependency is no longer available. The 1.0.0-M2 release is supposed to go up today so we should update camel-ftp to pick this up.  I'm currently running camel-ftp against the release candidate... will attach patch if any changes are required.,There were only a couple of minor changes required + a few extra test dependencies. Since ftpserver is a subproject of mina now  the release should appear at repo1.maven.org later today.  For reference  the vote thread is here http://www.nabble.com/-VOTE--Releasing-FtpServer-1.0.0-M2-td18840655.html. I will commit this patch when the release is done. Patch applied with thanks to Jonathan.  http://svn.apache.org/viewvc?rev=685022&view=rev. Closing all 1.5.0 issues. 
New Feature,James Strachan,2008-08-11T14:20:36+0000,1218464436,,am adding a @OneWay annotation; things nearly working - will commit soon.... the test case SpringRemotingWithOneWayTest shows we can now invoke a method marked as async. Hawk-eye strikes back!  I was reading the nice javadoc on the @OneWay annotation (great James that you have added such elaborate documentation). I was puzzled with this  Where the <b>notOneWayMethod</b> will not be using one way invocation while all other methods will inherit the InOut exchange pattern  Should it be ... inherit InOnly exchange pattern?. Maybe the override MEP is drifting  @OneWay(InOut) => couldl be named @TwoWay  ha ha Okay just joking but couldn't resist.. Yeah - I kinda figured  the default for all interfaces & methods by default is InOut. You might wanna mark some methods as InOnly and some interfaces/classes as being all InOnly - but if you mark a class as InOnly you might wanna mark one or two methods as being InOut.  Maybe the OneWay class name is bad; but I wanted the annotation to naturally default to InOnly unless you explicitly specified an ExchangePattern configuration. i.e. so just using the annotation kinda implies InOnly.  Maybe we should just use an annotation thats something like @MEP or @Pattern with just folks knowing that by default it uses InOnly - but then I wanted the common 80% case - adding just an annotation to mark oneway method invocations.  I think its gonna be pretty rare for folks to mark a class as @OneWay then explicitly configure the MEP of a specific method as being not InOnly.  But maybe we need more annotations?  e.g. @InOnly  @InOut and @Pattern (for others that are not the common InOnly/InOut)?. I would prefer the annotations to be named after the MEP  @InOnly @InOut  And not being able to "override" their behavior. So @InOnly is 100% in only. And @InOut 100% out  @OneWay(InOut) is confusing.  And btw OneWay is a new term for InOnly that I haven't seen or read before.  And I guess @InOnly and @InOut is feasible for now. Is the @Pattern really needed?. Agreed. I've been hacking something along those lines.  Am thinking of @InOnly which is only ExchangePattern.InOnly and @InOut which is only ExchangePattern.InOut then allowing @Pattern(ExchangePattern.RobustInOut) for any other non-common exchange patterns.  While users might not use @Pattern directly - I was thinking of using this annotation to annotate the annotations themselves. e.g. rather than knowing about the special @InOut or @InOnly annotations - we'd just look for annotations which are annotated with @Pattern to specify the pattern. That way folks who already have created  say  an @Async annotation could just add @Pattern(ExchangePattern.InOnly) so camel would auto-recognise it as being a oneway rather than request reply operation.. Just to be more clear - @InOnly and @InOut would have no configuration whatsoever - they would be fixed MEPs; whereas @Pattern would take a mandatory MEP. So @InOnly would be an abbreviation for @Pattern(ExchangePattern.InOut). @Pattern could remain a purely internal implementation detail.  At some point if there is demand we could create an annotation for every possible MEP; but am thinking mostly folks will only need @InOut and @InOnly for a while and @Pattern can be for the uncommon stuff. See the documentation http://cwiki.apache.org/CAMEL/using-exchange-pattern-annotations.html  i.e. the user just adds @InOnly to a method to enable async processing. Closing all 1.5.0 issues. 
Bug,Hadrian Zbarcea,2008-08-11T16:45:49+0000,1218473149,You can't configure the delayer pattern properly in the Spring DSL currently. I will be attaching a patch for this shortly.,Patch to fix this issue.. Patch applied with many thanks to Jon.. Closing all 1.5.0 issues. 
Sub-task,Claus Ibsen,2008-08-11T18:37:22+0000,1218479842,See discussion on parent.   Option d) is choose to implement in Camel 1.5,BTW: Will also support setting multiple recipients in a single string by separating with either colon or semi colon (  or. What about moving appendHeadersFromCamel(mimeMessage  exchange  exchange.getIn()); line in method MailBinding.populateMailMessage a few lines below? Doesn't it solve the problem?. Well it wasn't as easy as it looked liked.  What we want is to not mix but only use headers if provided or only use pre configured. If we mix and match then it gets very confusing. So I actually had to do a bit more coding to handle this.  I need to add a few more unit tests to explicitly tests this change some more.. Update wiki. Updated wiki as well. Closing 1.5 issues. 
Improvement,Claus Ibsen,2008-08-11T19:38:27+0000,1218483507,,We would like to configure ExceptionType objects for a DeadLetterChannelBuilder in Spring XML. If the ErrorHandlerBuilderSupport exposed a setter for exceptions  then we could potentially create a list of ExceptionType objects and inject them in to the DeadLetterChannelBuilder.  We want to do something like this  but in Spring XML:  exception(NullPointerException.class) .maximumRedeliveries(1) .setHeader(MESSAGE_INFO  constant("Damm a NPE")) .to(ERROR_QUEUE);. Hi Kevin  Can you re-attach the patch file  this time with the ASF license granted. We can not accept patch files that hasn't this license.. Kevin any update?. The setter is named setErrorHandlers. Closing all 1.5.0 issues. 
Improvement,Claus Ibsen,2008-08-12T13:03:57+0000,1218546237,Users looking to upgrade from smx-eip to smx-camel should be provided an out-of-the-box aggregator strategy/collection to replace the smx-eip SplitterAggregator & RecipientListAggregator.,Ron can you elaborate what's the gap currently between the aggregator and splitter in Camel vs. the ones in ServiceMix?. Hi Claus   The following servicemix-eip class is responsible for building aggregate messages for both Splitters and RecipientLists. The buildAggregate() method listed below actually builds the aggregate message. The two element names and attribute names used to build the aggregate message are also listed below  each of which is customizable in a declarative fashion. It would be ideal if folks upgrading from servicemix-eip to servicemix-camel were provided an out-of-the-box aggregator strategy/collection that built aggregate messages using the same format. Existing smx-eip customers have already built follow-on transforms that expect to find this format.  Let me know if you have further questions.  Ron  http://svn.apache.org/viewvc/servicemix/components/engines/servicemix-eip/trunk/src/main/java/org/apache/servicemix/eip/patterns/SplitAggregator.java?view=markup  protected QName aggregateElementName = new QName("aggregate"); protected QName messageElementName = new QName("message"); protected String countAttribute = "count"; protected String indexAttribute = "index";  public void buildAggregate(Object aggregation  NormalizedMessage message  MessageExchange exchange  boolean doTimeout) throws Exception { NormalizedMessage[] messages = ((SplitterAggregation) aggregation).messages; String correlationId = ((SplitterAggregation) aggregation).correlationId; SourceTransformer st = new SourceTransformer(); Document doc = st.createDocument(); Element root = createChildElement(aggregateElementName  doc); root.setAttribute(countAttribute  Integer.toString(messages.length)); for (int i = 0; i < messages.length; i++) { if (messages[i] != null) { Element elem = st.toDOMElement(messages[i]); if (messageElementName != null)  { Element msg = createChildElement(messageElementName  root); msg.setAttribute(indexAttribute  Integer.toString(i)); msg.appendChild(doc.importNode(elem  true)); }  else  { root.appendChild(doc.importNode(elem  true)); }  if (isCopyProperties())  { copyProperties(messages[i]  message); }  if (isCopyAttachments())  { copyAttachments(messages[i]  message); }  } } message.setContent(new DOMSource(doc)); message.setProperty(AbstractSplitter.SPLITTER_CORRID  correlationId); }  protected Element createChildElement(QName name  Node parent) { Document doc = parent instanceof Document ? (Document) parent : parent.getOwnerDocument(); Element elem; if ("".equals(name.getNamespaceURI()))  { elem = doc.createElement(name.getLocalPart()); }  else  { elem = doc.createElementNS(name.getNamespaceURI()  name.getPrefix() + ":" + name.getLocalPart()); }  parent.appendChild(elem); return elem; }. We are looking into an overhaul of the Aggregator for Camel 2.x  likely 2.1.  People migrating from SMX JBI must redo their aggregation strategies to Camel style.  Ron as you get hands on the Camel AggregationStrategy you will get the hang of it and will be able to adapt your code fairly easily. 
Improvement,Willem Jiang,2008-08-12T13:57:10+0000,1218549430,Current  Camel only support the set the LoadBalancer Strategy after the outputs like this    <camelContext id="camel" xmlns="http://activemq.apache.org/camel/schema/spring">     <route>       <from uri="direct:start"/>       <loadBalance>                     <to uri="mock:x"/>                   <to uri="mock:y"/>                  <to uri="mock:z"/>           <roundRobin/>              </loadBalance>     </route>   </camelContext>    It should be much better with the below configuration file   <camelContext id="camel" xmlns="http://activemq.apache.org/camel/schema/spring">     <route>       <from uri="direct:start"/>       <loadBalance>             <roundRobin/>                      <to uri="mock:x"/>                   <to uri="mock:y"/>                  <to uri="mock:z"/>                     </loadBalance>     </route>   </camelContext>,http://svn.apache.org/viewvc?rev=685153&view=rev. Closing all 1.5.0 issues. 
New Feature,James Strachan,2008-08-12T17:09:44+0000,1218560984,we need the converse of @MessageDriven for sending - without using any proprietary  middleware or Camel APIs,James haven't you already implement this?  We are closing in on a 1.5 release and should update the roadmap. James have implemented it already: http://activemq.apache.org/camel/bean-integration.html. Closing all 1.5.0 issues. 
New Feature,James Strachan,2008-08-12T17:13:44+0000,1218561224,see http://code.google.com/p/google-guice/,there's a first cut that shows how to create and inject a camel context with some route builders. We could do with improving this to also support showing how to inject endpoints and components. documentation here http://cwiki.apache.org/CAMEL/guice.html. marking this as resolved for now - we can always raise further JIRAs or sub tasks to improve it over time. Closing all 1.5.0 issues. 
Bug,Willem Jiang,2008-08-13T11:25:14+0000,1218626714,Currently  the routing slip will create a new InOut exchange for each target based on the target endpoint type. This means that someone calling from a jbi endpoint (or other endpoint with custom exchange) into the routing slip will have their exchange type changed (to mostly likely DefaultExchange). I will be including a patch to fix this issue shortly.,Patch to fix the issue.  The fix employs a technique similar to that of the pipeline processor to preserve the exchange type. Basically  in order for a type of Exchange to be propagated  it must override the newInstance method so the routing slip has a way to create a clean instance of it.. Applied patch with thanks to Jonathan. http://svn.apache.org/viewvc?rev=685557&view=rev. Closing all 1.5.0 issues. 
Task,Willem Jiang,2008-08-13T11:39:50+0000,1218627590,The FileConsumeSingleDirectoryOnlyTest.testConsumeFileOnly unit test is failing... I'm looking into this now.,Turns out it was just an ordering issue on some Linux boxes (it didn't fail on the bamboo server). I've added the ability to expect message bodies in any order on a mock endpoint to support this fix.. Patch applied with thanks to Jonathan http://svn.apache.org/viewvc?rev=685546&view=rev. Closing all 1.5.0 issues. 
Sub-task,James Strachan,2008-08-13T11:43:31+0000,1218627811,,Moving to 2.0. see http://activemq.apache.org/camel/guice-jms-example.html. Closing all 1.5.0 issues. 
Improvement,Claus Ibsen,2008-08-13T14:08:03+0000,1218636483,See nabble: http://www.nabble.com/camel-1.4-redelivery-issue-td18960138s22882.html  Without this option you can not use the fluent builders to set this option.,Closing 1.5 issues. 
New Feature,Willem Jiang,2008-08-13T14:44:32+0000,1218638672,http://code.google.com/p/google-gson/  http://jettison.codehaus.org/,Moving to 2.0. After quick document reviewing of gson and jettison  I find XStream provides a more sophisticate support of JSON by leverage jettison. Since we have camel-xstream component   it takes my litter time to implement the JSON DataFormat support in Camel. Willem  we need wiki documentation for his one.  Please add a new subpage for the new dataformat at: http://activemq.apache.org/camel/data-format.html. And it should also be added to camel-spring in the jaxb.index so we get it in spring XSD as well.  And the class javadoc for JsonDataFormat is a copy from the xstream  it should state that its for Json.. Thank Claus for your review  I will do a quick fix of Spring stuff and update the wiki page.. Added the wiki page http://cwiki.apache.org/confluence/display/CAMEL/JSON. Closing 2.0m1 tickets. 
Improvement,Claus Ibsen,2008-08-13T18:25:35+0000,1218651935,,Committed revision 686463.  Updated the wiki documentation also.. Closing all 1.5.0 issues. 
Improvement,Unassigned,2008-08-14T08:34:45+0000,1218702885,kinda like a language overview in programming languages.  e.g. starting off describing the RouteBuilder and from()  then inputs to() or bean() or processor() then describing filter/content based routing and blocks to introduce expressions (custom languages + Java) then go onto more esoteric patterns like routing slip  splitter  aggregator etc,Maybe showing some common use cases that folks tend to do.  e.g.  sending the same message to multiple destinations adding a custom Processor into a route to see whats going on in a debugger - or enabling the [Tracer] using parallelism splitting a route using a seda/direct endpoint. Moving to 2.0. Moving to future. 
Improvement,Claus Ibsen,2008-08-14T09:59:31+0000,1218707971,,Use the new async API if you want asynchronous routing. I see the seda queue as being very similar to a jms queue in Camel with the main difference being no persistence; which is fine. In fact I would probably use a seda endpoint pretty much everywhere I'd use a JMS queue endpoint where I do not require persistence.  I think that request reply should therefore be supported for seda.. trunk: 780261  780262  780267  Works now for both seda and vm.  Updated wiki for seda component.. Closing all 2.0M2 tickets. 
Bug,Hadrian Zbarcea,2008-08-14T23:38:53+0000,1218757133,,Fixed in revision 686094. Closing all 1.5.0 issues. 
New Feature,Hadrian Zbarcea,2008-08-15T14:20:51+0000,1218810051,Given that our archetypes will be showing up in m2eclipse after our next release  we should really have a few more options that will make it easier for someone to start using Camel.  I propose a Spring XML based archetype which is basically the camel-router archetype with the Java DSL transposed to Spring XML. Another archetype shows how easy it is to start using Camel with ActiveMQ.,Here are the two archetypes I proposed.. I made a minor change to get rid of the <amq:broker syntax... the embedded AMQ broker definition now looks like    <broker xmlns="http://activemq.apache.org/schema/core" useJmx="false" persistent="false">     <transportConnectors>       <transportConnector uri="tcp://localhost:61616" />     </transportConnectors>   </broker>. Re-attaching. @Jon: this is great. what do you think about renaming camel-router-spring to just camel-spring and camel-router-with-activemq to camel-activemq  well  this will conflict with the components  but anyway  something shorter?. Hadrian   I'm fine with the rename although if its just because of the length of the artifactId  it really shouldn't be an issue. Just take a look at some of the other archetypes out there (in attached image). I don't think we're breaking any records here  IMHO its better to be more descriptive  especially since we'll probably have more archetypes in the future.. Yeah  I agree with more descriptive. That was the point  camel-router doesn't add much more than just camel. And length is nice  but not the most important. What about camel-archetype-spring and camel-archetype-activemq then? Or leave your original names? I'll bow to your decision .  Yeah  rereading my previous comment  it didn't make much sense; "shorter" referred to the camel-router part. Sorry.. Hmmm... Looks like having archetype in the artifactId is the standard used at the Maven project (even if it is redundant ) We should probably go with that then. So  how about this as the final list of archetypes:  camel-archetype-component (was camel-component) camel-archetype-java (was camel-router) camel-archetype-spring (was camel-router-spring) camel-archetype-activemq (was camel-router-with-activemq). Just in time . I was ready to commit as is.. Awsome patch Jon. Applied with many thanks!. Closing all 1.5.0 issues. 
Improvement,Claus Ibsen,2008-08-16T08:27:21+0000,1218875241,When producing files an idea is to write to a temp file that has a name pattern that will be skipped by consumers (such as starting with a dot) and then after the write rename the file to the correct name. Then the consumers wont need to use exotic locking to get exclusive read access to the file. Works on all file systems.  There is a nabble discussion on this issue somewhere.,There is a ticket for the FTP/SFTP as well something with uploadSuffix. It should use the same option name as this file producer  so it should be tempPrefix.. Closing 2.0m1 tickets. 
Improvement,Willem Jiang,2008-08-17T13:00:15+0000,1218978015,CxfMessage's getBody will extract the return result from the MessageContentsList by passing the result type class as the getbody() parameter,http://svn.apache.org/viewvc?rev=686607&view=rev. Closing all 1.5.0 issues. 
Improvement,Claus Ibsen,2008-08-17T14:15:58+0000,1218982558,Using the flatpack component now you get one exchange per row in the file.   But sometimes you need the entire content as one exchange so you can do some processing on the entire content. We need an option for this.,Added option: splitRows that can be turned off to return the entire content that you can convert to a List and then iterate each rows as a Map object. Updated wiki as well.  Committed revision 686616.. Closing 1.5 issues. 
New Feature,Claus Ibsen,2008-08-17T15:43:09+0000,1218987789,The flatpack component currently doesn't support the opposite operation = from Object Model to write to exported format.  This is what is called writers in flatpack.,Added it for data format so use this one to marshal to flatpack format (fixed  delimited text). Closing 1.5 issues. 
Test,Willem Jiang,2008-08-18T03:59:20+0000,1219031960,http://www.nabble.com/Jetty-Component-Routing-td19024402s22882.html#a19024402,http://svn.apache.org/viewvc?rev=686675&view=rev. Closing all 1.5.0 issues. 
Improvement,Jonathan Anstey,2008-08-18T12:50:10+0000,1219063810,Hi   It should be interesting that camel archetypes appear in the list of the archetypes catalog available through Nexus Repository  Maven.  Remark : Mule is there so Camel should also be there   Kind regards   Charles Moulliard,This was fixed after the 1.4 release. The next release of Camel should show up in Nexus.. See https://issues.apache.org/activemq/browse/CAMEL-753. Closing old tickets. 
Bug,Claus Ibsen,2008-08-18T13:09:07+0000,1219064947,When this route        <camel:route>         <camel:from uri="sftp://someuser@hostname/path/to/directory/?password=secret&amp;directory=true&amp;binary=true&amp;consumer.useFixedDelay=false&amp;consumer.setNames=true&amp;consumer.recursive=false" />         <camel:to uri="file:///C:/camel/output/" />     </camel:route>    is configured the files in the remote directory are download  but subsequent calls of the method "pollDir" result in this exception:   [ Thread: 1 RemoteFileComponent] SftpConsumer                   WARN  Caught SftpException:2: No such file [ Thread: 1 RemoteFileComponent] SftpConsumer                   WARN  Doing nothing for now  need to determine an appropriate action [ Thread: 1 RemoteFileComponent] ScheduledPollConsumer          WARN  An exception occured while polling: Endpoint[sftp://someuser@hostname/path/to/directory/?password=secret&amp;directory=true&amp;binary=true&amp;consumer.useFixedDelay=false&amp;consumer.setNames=true&amp;consumer.recursive=false]: No such file 2: No such file    As you can see the slash is definitely in the configured route. If I check for the missing slash and add it to the dir variable (line 115 in SftpConsumer) then the consumer works:       	if(!dir.startsWith("/")) {     		dir = "/" + dir;     	}    Didn't have the time to have a closer look. The root cause of the missing slash is somewhere else.,Hi  Thanks for reporting this. Do you mind trying 1.5-SNAPSHOT as the camel-ftp component has been refactored and improved quite a bit.  See the download page how to setup the maven repo to get snapshot releases http://activemq.apache.org/camel/download.html. Actually I did test it against the latest Maven snapshots. Forgot to tell that. The problem with those was that the download didn't even start. For the moment I can't tell why.. Hmm strange.  You can enable TRACE logging at org.apache.camel and then the logging might hint what could be wrong.. Yes the TRACE logging should output what directory it tries to poll  if (log.isTraceEnabled())  { log.trace("Polling directory: " + dir); }  So if you can enable the TRACE logging on camel 1.5-SNAPSHOT and see what is happening. Also the new feature for exclusive read lock might have an influce. So setting consumer.exclusiveReadLock=false could help also.. What SFTP server are you using?. The hint with "consumer.exclusiveReadLock=false" pointed me in the right direction. I verified if I have write rights on the server... and I do not. I guess that's why nothing was downloaded when I tried with 1.5-SNAPSHOT.  So  I'm happy... bug is fixed in 1.5... I'll continue to use this version.  Thanks for the extensive help Claus.. Hi  Glad its working in 1.5 also for the SFTP part that we dont have a mock test server for.  I am wondering if exclusiveReadLock should be false in the FTP part as having write privileges is not always the normal use-case.. The exclusiveReadLock option is now default false in Camel 1.5.. Closing all 1.5.0 issues. 
Improvement,Willem Jiang,2008-08-19T01:36:48+0000,1219109808,CXF 2.1.2 is released  so we can upgrade CXF version in Camel.,Closing all 1.5.0 issues. 
Improvement,Unassigned,2008-08-19T11:24:46+0000,1219145086,We should support to setup the same route with Spring xml like the below DSL     from("direct:parallel")   .multicast(new BodyOutAggregatingStrategy()  true)   .setThreadPoolExecutor(yourExecutor)   .to("direct:x"  "direct:y"  "direct:z");,Please check out spring xml [1] for example . [1] https://svn.apache.org/repos/asf/activemq/camel/trunk/components/camel-spring/src/test/resources/org/apache/camel/spring/processor/multicastAggregator.xml. Closing all 1.5.0 issues. 
Sub-task,Claus Ibsen,2008-08-21T07:36:02+0000,1219304162,Hadrian implemented the parent ticket - thanks a lot   What we need is also to document it in the wiki at: http://activemq.apache.org/camel/type-converter.html,updated wiki. Closing 1.5 issues. 
New Feature,Jonathan Anstey,2008-08-21T09:16:21+0000,1219310181,http://commons.apache.org/transaction/file/index.html  to get transactional processing of files,In what component should we this? camel-core.jar should be kept to a bare minimum of its .jar dependencies as of today. agreed - maybe a separate component?. This looks neat! I'm gonna take a look into it.. Moving to 2.0. I think Commons TX is a "dead" project.  I dont think we should work on integrating it with Camel. So lets close this ticket?  Jon  what do you say?. Wonder if there's an OSS project out there doing transactions on files?. Yeah  it looks a bit dead to me too... last release was in 2007 and last issue resolved was also in 2007   Though JBoss uses it here  http://www.jboss.org/jbosstm/fileio/  I wonder if there is still value.... Hmm I think we should ditch this. Commons File Transaction has not had a commit in 18 months.  I for sure would not go in production with this stuff that wasnt anyone around to keep supported.. Yeah  and looking at the actual source of the project... no commits have been made in over 2 years :S  I agree Claus  we should close this one.. 
Improvement,Claus Ibsen,2008-08-21T09:43:47+0000,1219311827,An end-user had a route that didn't work and had trouble figure out the problem. Could be the fact that the type converted failed for some reason and no trace in his log.  We should add some DEBUG logging to the type converter stuff what it does  especially in cases where it cant convert. http://www.nabble.com/Marshaling-jdbc-output-with-xstream-td19065283s22882.html  Notice we have another ticket about type converters should fail instead of returning null etc.,Added a debug for no type converter found.. Changed to log a WARN for non camel internal convertions. Closing 1.5 issues. 
Improvement,Claus Ibsen,2008-08-21T10:56:14+0000,1219316174,If you have overloaded setter methods for a given property Camel can only use the first found.       private Expression expression;      public void setExpression(Expression expression) {         this.expression = expression;     }      public void setExpression(String fileLanguageExpression) {         this.expression = FileLanguage.file(fileLanguageExpression);     }    isn't supported. As Camel will try to convert the type before finding the 2nd setter method with the correct type.  Maybe the solution is to improve the code so it finds the String setter if the input is a string property instead of the Expression object  ie find the setter with a 100% match and use it  if not then fallback to type convertions.,Okay got a much better solution now with better end-user feedback  java.lang.IllegalArgumentException: Could not find a suitable setter for property: expression as there isn't a setter method with same type: java.lang.String nor type convertion possbile: Could not convert "${id}.bak" to org.apache.camel.Expression   Would be thrown in case there isn't a setExpression(String stringType) or no type converters from Expression -> String. Adding the setExpression(String stringType) will let Camel pick this overloaded method instead and use it.. rev 687732. Closing 1.5 issues. 
Task,Willem Jiang,2008-08-21T12:59:34+0000,1219323574,Spring just released M6 and I know they have changed quite a lot  at least impacting end-users. Maybe something needs to be changed in our component as well.,
Bug,Hadrian Zbarcea,2008-08-21T15:58:41+0000,1219334321,See following thread for more details.  http://www.nabble.com/Handling-JBI-faults-td19090487s22882.html#a19090487,Closing all 1.5.0 issues. 
Task,Claus Ibsen,2008-08-22T15:49:24+0000,1219420164,We are running the old 1.5.x version. 1.6 has been out for a while but would love to wait for the first point release.  1.6.1RC2 has just been released so hopefully James House will release the GA this fall.,Quartz 1.6.1 has been released. Waiting for it in maven repo. Is in servicemix repo:  <?xml version="1.0" encoding="UTF-8"?><project> <modelVersion>4.0.0</modelVersion> <groupId>opensymphony</groupId> <artifactId>quartz</artifactId> <version>1.6.1</version> <description>POM was created from install:install-file</description> </project>. Closing 1.5 issues. 
Improvement,Claus Ibsen,2008-08-23T15:37:08+0000,1219505828,The bean language is fantastic  but using the java DSL routing without the spring beans is a bit painful as you need to register the beans in the registry before you can use it.  Sometimes you just want it to invoke a method on pojo class so we need to support this style also:  bean(MyPojoClass.class  "helloworld")    Where MyPojoClass will be created on the fly and invoking the helloworld method.  Also if the class is already created we can use a reference to it:  bean(myInstance  "helloworld"),Also the BeanProcessors debug logging isn't useful:  DEBUG BeanProcessor - >>>> invoking method for: Exchange[Message: org.apache.camel.example.reportincident.InputReportIncident@1f78ef1]  It doesn't output what method or pojo or whatever it invokes.. Commited code changes. Need to update wiki. Added wiki documentation to Bean Language. Closing 1.5 issues. 
Improvement,Claus Ibsen,2008-08-23T19:24:00+0000,1219519440,It would be nice if timer component add some header with System.currentTimeMillis() value. I suggest name of header timer.currentTimeMillis. Adding header value should be optional. Uri parameter currentTimeMillis=true/false should regulate setting this header value.  This header value would be very useful for debugging purposes and other purposes (generating simple unique values).  Also  there is need for formating this value: just simple long value or String formated with ISO datetime pattern (yyyy-MM-dd hh:mm:ss),Document the headers that camel-timer adds to the exchange in the wiki  There are already 3 headers. Add the new current time millis as suggested.. timer component done.  The fired time is added as a exchange property as the others. See the wiki documentation. org.apache.camel.timer.firedtime Date Camel 1.5: the current time when the consumer fired. the quartz component already has all this info straight from quartz. Just need to add it to the wiki.  The fire time: map.put("fireTime"  jobExecutionContext.getFireTime());. Added wiki documentation for camel-quartz as it already have the fire time as a header (fireTime) on the message object itself. See the wiki documentation.. Closing all 1.5.0 issues. 
Improvement,Willem Jiang,2008-08-25T03:01:39+0000,1219633299,In CamelTarget   we should support to send the response to the dynamical message channel by checking the return address in then message header.,According to the Spring Integration Reference Manual  the header's RETURN_ADDRESS value just is the fall back.  "This is consistent across both configuration options (namespace and annotations) in that the the endpoint's output channel will be used if available  and the message header's RETURN_ADDRESS value will be the fallback. "  My last commit just makes sure this.. Closing all 1.5.0 issues. 
Improvement,Claus Ibsen,2008-08-25T11:03:11+0000,1219662191,Currently the camel-mina component silently ignores exchanges that is not out capable even though its configured for sync=true (InOut)  What it does now is setting the sync option itself depending on the exchange type.,Hmm the current behaviour will probably break old versions where end-users have forgotten to add sync=true. If we go forward with this we should write in the release notes that people should set the sync mode explicit.. http://www.nabble.com/mina-tcp-client-problem-td19105767s22882.html. Change of tactic  I think camel-mina should be MEP agnostic and only use the sync option as:  MinaProducer  if false  just send data and don't wait for response if true  send data and wait for response. set response on either IN or OUT depending on the MEP  MinaConsumer  if false  just recieve data and don't send a response if true  recieve data and send the response from either IN or OUT depending on the MEP. Also it should be more spring friendly configurable using setters/getters style so we have IDE completion in spring xml files.. sync should be default true as its confusing why camel doesn't wait for a response when calling a remote server.. Default behavior changed  In Camel 1.5 the sync option has changed its default value from false to true  as we felt it was confusing for end-users when they used Mina to call remote servers and Camel wouldn't wait for the response.. Closing 1.5 issues. 
Improvement,Willem Jiang,2008-08-26T03:28:14+0000,1219721294,To avoid the the consumer's parameters configuration spelling error.,Closing all 1.5.0 issues. 
Improvement,Claus Ibsen,2008-08-26T05:23:53+0000,1219728233,The camel-mina component and the endpoint should be spring xml firendly for configuration.  So you can configure the endpoint in the spring xml as a bean and use it in the routing. The configuration in spring should support IDE property completion so can easily see which properties this endpoint supports and set them using simple text values.,
Improvement,Claus Ibsen,2008-08-26T08:58:29+0000,1219741109,camel-mina should preserve headers.,See nabble: http://www.nabble.com/mina-tcp-client-problem-td19105767s22882.html. Closing all 1.5.0 issues. 
Bug,Claus Ibsen,2008-08-26T11:43:31+0000,1219751011,camel:dot doesn't support loading spring .xml files using the configuration option to the plugin. Currently it loads from META-INF/spring/*.xml  The other two: run and embedded has this feature.,Now it supports the applicationContextUri or fileApplicationContextUri configuration as well.. Closing 1.5 issues. 
Test,Jonathan Anstey,2008-08-26T12:14:41+0000,1219752881,Failing with this message org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: file://target/exclusiveread/slowfile?consumer.delay=500&consumer.exclusiveRead=true due to: There are 1 parameters that couldn't be set on the endpoint consumer. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown consumer parameters=[ {exclusiveRead=true} ] at org.apache.camel.impl.ScheduledPollEndpoint.configureConsumer(ScheduledPollEndpoint.java:65) at org.apache.camel.component.file.FileEndpoint.createConsumer(FileEndpoint.java:93)  Simple fix: exclusiveRead should be changed to exclusiveReadLock.,With ASF license..... Thanks jon for spotting this. Applied the patch.. Closing all 1.5.0 issues. 
New Feature,Hadrian Zbarcea,2008-08-27T00:06:04+0000,1219795564,Perform searches in ldap servers.,Committed  awaiting wiki changes.. Hadrian  great work.  However the wiki sample documentation is stating SQL - could be because of copy from the SQL component. Could you double check the wiki documentation is correct. Especially the samples part.  I added the new component to the book page as well. http://cwiki.apache.org/confluence/display/CAMEL/Book+Component+Appendix. Doh  thanks for spotting this . Yeah  I didn't look close enough at comments  it was a cut'n'paste issue.  I also made one more change. the base attribute is no longer mandatory  but optional and the default is "ou=system". I doubt anybody will use the default  but it makes things simpler for tests.. Closing all 1.5.0 issues. 
Task,Hadrian Zbarcea,2008-08-27T00:09:00+0000,1219795740,,Not really sure how useful this would be as the component itself uses only basic j2se (javax.naming).  Apache DS is only used for tests and spring-ldap would only show how to do different tests  using spring  which I am not sure if it should be in Camel's scope. I will move it to 2.0 for now  but if other people think this is not in the scope  we can close it later with "won't fix".. +1 to close it as wont fix. Out of scope. Showing an alternate way of testing the ldap component using spring-ldap would not bring any value to camel.. Closing all 1.5.0 issues. 
New Feature,Willem Jiang,2008-08-27T00:48:30+0000,1219798110,I did up some Eclipse templates for some of the Camel EIPs (both Java and XML). Let me know what you think.,Here are the templates added into the build.  To add them to your workspace  run this:  mvn -Psetup.eclipse -Declipse.workspace.dir=/path/to/your/workspace. Java templates if you want to try them out without building Camel.. XML templates if you want to try them out without building Camel.. Also added a blog post about this here http://janstey.blogspot.com/2008/08/eclipse-templates-for-apache-camel.html. Applied patch with thanks to Jonathan.  Jonathan  Could you also update the wiki page of apache camel ?. BTW I wonder if we should encourage the use of  when().xpath("/foo")   rather than  when(header....)   as the when(). is typically more feature rich and has better IDE smart completion. James  agree with your comment. Having when(header(...)) or when(xpath(...)) is more intuitive and IMO would match the XML template more closely.  Willem  I'll update the build instructions with this info.. Updated notes here http://cwiki.apache.org/confluence/display/CAMEL/Building. I just looked back at my comment here and realized I totally misread James' comment!  James mentioned that this  .when().xpath("$foo = 'bar'").to("mock:x")   would be better than this  .when(header("foo").isEqualTo("bar")).to("mock:x")   The xpath one IS actually closer to the XML template (unlike I mentioned before...). I'll attach a patch for this shortly.. Attaching a patch to change the when syntax a bit.. These two patches were applied into the svn repository.. Closing all 1.5.0 issues. 
Bug,Claus Ibsen,2008-08-27T03:55:11+0000,1219809311,In DefaultCamelContext  the system property should read camel.trace and not canel.trace (I guess from the project name which is Camel and not Canel).      public boolean getTrace() {         final Boolean value = getTracing();         if (value != null)  {             return value;         }  else  {             return SystemHelper.isSystemProperty("canel.trace");         }     },Thanks Carl for reporting this. It was already fixed in 1.5. Closing all 1.5.0 issues. 
Bug,Claus Ibsen,2008-08-27T05:20:25+0000,1219814425,The unit test from CAMEL-794 demonstrates a few issues with the DLC in Camel  	the maximum redelivery is not reached - eg. setting it to 2 will only perform 1 normal attempt + 1 redelivery  and not as expected 2 redeliveries 	when the exchanged could not be redelivered at all then the redeliverycounter has already been incremented and thus is off by +1,Okay is fixing this now.  Camel will now as before do by default: 1 regular attempt + 5 re-deliveries = a total of 6 times to process an exchange before moving to the dead letter channel. Camel does this in 1.4 or older  just the counter was wrong when you was reading it from the dead letter channel after it was moved there.. Also the redelivery boolean flag was always TRUE even though there was no attempt of redelivery. This is also fixed now.. Closing 1.5 issues. 
Bug,Willem Jiang,2008-08-27T07:26:43+0000,1219822003,If we put the log between an InputStream consumer and InputStream producer like below  from("InputStream Consumer").to("log:ShowMessageBody").to("InputStream Producer"); The InputStream Producer can't read the any date from the in message body.,Closing all 1.5.0 issues. 
Improvement,Claus Ibsen,2008-08-27T12:18:15+0000,1219839495,End-user ask for camel-hl7 to be message format agnostic - to not use HAPI  for instance if you need to parse the data yourself.  It was this already but I have fixed a minor issue with the data clipping and added an unit test to demonstrate this  to be updated in the wiki as well.,Updated wiki as well.. Closing 1.5 issues. 
Bug,Claus Ibsen,2008-08-27T13:58:57+0000,1219845537,The DeadLetterChannel does not set the EXCEPTION_CAUSE_PROPERTY.  It looks like a bug in the method: public boolean process(final Exchange exchange  final AsyncCallback callback  final RedeliveryData data)   The property is set by getting the Exception from the exchange: exchange.setProperty(EXCEPTION_CAUSE_PROPERTY  exchange.getException());  but several lines before the Exception ist set to null in exchange: if (exchange.getException() != null) {                 Throwable e = exchange.getException();                 exchange.setException(null); // Reset it since we are handling it.  to fix the bug  i think it is simply done by preserving the Throwable like this Throwable e = exchange.getException(); if (exchange.getException() != null) {                 exchange.setException(null); // Reset it since we are handling it. ... exchange.setProperty(EXCEPTION_CAUSE_PROPERTY  e);,Thanks for the report.  I looked into it and yes the code is a bit "tricky" in the DLC. It actually restores the exception in the incrementRedeliveryCounter method.  However I feel the code could be a bit more "less surprising" so I am re factoring it a bit (based on your suggestions). The fix does not work  the property is not set. Example code :  from("file:/data").convertBodyTo(String.class) .errorHandler(deadLetterChannel("myjms:dead").maximumRedeliveries(2).useExponentialBackOff()) .setHeader("xyz"  xquery("wrong xquery {}").asString()) .to("direct:blabla");  The use case is: in case of an exchange-failure  the cause should be visible in the dead-letter-channel  for later investigate.. Dario it is working as exepected. I have added some more unit test to verify that the original caused exception is on the exchange.  However I can see what your problem is. You DLC is a jms queue. And the JMS spec doesn't allow to send complex objects as properties on a JMSMessage. So the exception object is lost when its send to the JMS queue  only the body and simple properties is sent.  The issue is that we need the JMS producer to send the entire exchange as an object to the JMS queue. I will create a ticket for this feature in JIRA.. See CAMEL-870 about the use of jms for DLC queues.. Thank you for the explanation  i think i have to dive deeper in Apache Camel ... Many thanks! With best regards  Dario. 
Improvement,Claus Ibsen,2008-08-27T16:08:11+0000,1219853291,addEndpoint(uri); removeEndpoint(uri),Moving to 2.0. What is the use case for being able to add / remove endpoints from JMX ?. Not needed. 
Improvement,Claus Ibsen,2008-08-27T16:13:49+0000,1219853629,to support JMX and remote JMX we'll have to be careful.  Maybe we write a simple MXBean that lets us send a simple  concrete  String based payload?  e.g. something kinda like this...   public class ExchangeMXBean {   private MessageMXBean in;    private MessageMXBean out; ... }  public class MessageMXBean {   String body;   String actualBodyType;   Map<String String> headers; }    i.e. so over JMX (and remote JMX) we'd be able to send/receive Camel messages,Moving to 2.0. Rescoping to future and not critical. Overhaul of JMX is planned for Camel 2.1. What is the use case for this?  Using a local jconsole we could expose sendBody / requestBody etc. on the Managed CamelContext so you can send in any string body to any endpoint of choice. But again what is the benefit and use case?. Not needed. 
Improvement,Claus Ibsen,2008-08-27T16:15:30+0000,1219853730,for endpoints that support it we should be able to browse() the endpoint. See 	CAMEL-862 for discussion of an example MXBean for Exchange/Message.   e.g.   interface BrowseableManagedEndpoint extends ManagedEndpoint {   List<ExchangeMXBean> browse(); },Moving to 2.0. Overhaul of JMX is planned for Camel 2.1. Will be part in 2.1 as I have implemented a ManagedBrowseableEndpoint that are exposed in JMX so you can browse the exchanges.. Implemented by CAMEL-1933. 
Improvement,Xueqiang Mi,2008-08-27T16:27:31+0000,1219854451,Overhaul of JMX is planned for Camel 2.1,Moving to 2.0. I think this belongs to the web console that will get such feature to dynamic add routes based on groovy language or XML.  Will mark this as wont fix. I think I can do it as Claus lbsen said.. The create new route link is fixed to supported adding routes through groovy language or XML. http://docs.google.com/View?id=df6drqqg_1417cfh25pcx http://docs.google.com/View?id=df6drqqg_1419dcmqjmdz. 
Improvement,Hadrian Zbarcea,2008-08-27T16:40:23+0000,1219855223,we should really have folders within each camelcontext like this...   camelContext-something/   endpoints/     endpoint-x     endpoint-y   routes/      route-a       route-b   consumers/    consumer-1234    i.e. we should be able to find all the endpoints in JMX easily looking in a single JMX 'folder' ditto for routes,here's a screen shot of running  cd examples/camel-example-spring mvn camel:run   then looking in jconsole.  The routes and endpoints should look like this  from("file:src/data?noop=true").                 to("jms:test.MyQueue");          from("jms:test.MyQueue").                 to("file://target/test?noop=true");          // set up a listener on the file component         from("file://target/test?noop=true").                 bean(new SomeBean());   but for some reason the JMS endpoints don't appear and the routes are a bit cryptic.. btw am thinking mangling the URIs into deeply nested trees is not that helpful for JMX tools and command line tools etc.  Just having 1 folder depth seems better - maybe we just generate unique IDs for each node (endpoint/route) and use that as the name within the Endpoints / Routes folder.  For routes we can use RouteType.idOrCreate() to get a unique ID per camel context. Moving to 2.0. Fix committed. Awaiting documentation updates.. Looks much better.  Shouldn't we also have a producers folder?  Currently they are listed with processeros:  bean1 to1 to2  As we don't have producers we can not invoke start/stop JMX operations.  And the routes we have is basically all the consumers listed again. How should we structure routes? As James write it's hard to have a nested folder structure to represent the complex route paths you can do in the DSL. Currently routes is listed as:  node1 node2 node3  See new attached screenshot. Closing all 1.5.0 issues. 
Improvement,Willem Jiang,2008-08-27T17:35:09+0000,1219858509,see this thread... http://www.nabble.com/switching-JMS-to-use-transacted-mode-by-default-and-to-auto-default-the-TrasactionManager...-tt19180377s22882.html,Willem. I think this one is done  you have added the code in Camel 2.0  See also CAMEL-1475 where I have added a comment on april-13 about JMS being able to auto lookup the spring configured TX manager instead of creating one itself.  I think this ticket can be resolved.. Yeah  the patch was in the trunk for long time. http://svn.apache.org/viewvc?rev=728624&view=rev. Closing all 2.0M2 tickets. 
Test,Willem Jiang,2008-08-28T02:12:40+0000,1219889560,Please ref the nabble[1] for the background.  [1]  http://www.nabble.com/java.lang.IndexOutOfBoundsException-in-cxf-producer-td19181372s22882.html,Closing all 1.5.0 issues. 
Wish,Claus Ibsen,2008-08-29T09:30:59+0000,1220002259,See http://www.nabble.com/JMX-and-starting-stopping-routes-context-tt19214925s22882.html,James added start/stop of routes in the API for Camel 2.0. So I was wondering if this API is exposed to JMX also.. You can now start/stop routes from jconsole. 
Bug,Claus Ibsen,2008-08-29T14:59:04+0000,1220021944,The issue refers to sending emails on one of the stages in the messaging pipeline. I checked all the suggested solutions from the spec and none of the them resulted in an email message with a subject.  I have the following code:   ... private static final String DIRECT_INFECTION_ALERT    = "direct:infectionAlert"' ...        from(DIRECT_INFECTION_ALERT)       .to("xslt:" + infectionAlertXsl)             .process(new Processor() {         public void process(Exchange exchange) throws Exception         {           Message m = exchange.getIn();                     Map<String Object> headers = new HashMap<String  Object>();                     headers.put(TO_HEADER_KEY  recipients.toString());           headers.put(FROM_HEADER_KEY  from);            headers.put(SUBJECT_HEADER_KEY  constant(INFECTION_ALERT_SUBJECT));                    m.setHeaders(headers);                  m.setBody(exchange.getIn().getBody()  MailMessage.class);           MailMessage mail = new MailMessage();           mail.copyFrom(m);           exchange.setIn(mail);                   }})       .to("log:debug" "smtp://" + smtp_server + ":" + port);         and a simple and naive version  ->        from(DIRECT_INFECTION_ALERT)       .to("xslt:" + infectionAlertXsl)             .process(new Processor() {     public void process(Exchange exchange) throws Exception     {                   Message message = exchange.getIn();       Map<String Object> headers = new HashMap<String  Object>();        headers.put(TO_HEADER_KEY  recipients.toString());        headers.put(FROM_HEADER_KEY  from);         headers.put(SUBJECT_HEADER_KEY  constant(INFECTION_ALERT_SUBJECT));                message.setHeaders(headers);            }})       .to("log:debug" "smtp://" + smtp_server + ":" + port);        I tried many other combinations  well all from the camel mail component spec. Upgraded camel to 1.5-SNAPSHOT (comes with fix for disabling authentication on missing username/password for mail server). I can receive email messages  no problem  but never managed to get one with a subject. On debugging  messages always have correct headers (subject  to  from  etc) but then the info is lost somewhere. Thanks Adam,A sample message debug output:  INFO [http-8080-Processor25] (Logger.java:88) - Exchange[BodyType:String  Body: =========================================== Infection Alert: xxxxxxxx ____________________________ Patient Details: Title: FamilyName: Ramirez First Given Name: Alex NHS Number: xxxxxxxxxxx Gender: Male ____________________________ Patient Contact Details: Email: xxxxxxxxxxxxx Telephone: xxxxxxxxxxxx Mobile: xxxxxxxxxxx ____________________________ Initial Condition Details: Condition: CHF TLOS: 96 =========================================== ]. Adam are you still having problem with this one?  Have you tried just setting the mail body as a simple String object? You can still have all the mail headers set as plain headers on the message.  See the unit tests in camel-mail. Hi Claus  Thanks for feedback on that one. I will run a test sometime today with the latest snapshot of camel and get back to you. I have tried setting the mail headers as plain headers before  but the actual mail subject was not passing through. I will have another go. thanks Adam. Some feedback:  I took a look at tests for camel-mail. Please see some snippets from our routeBuilder below:  from(direct:infectionAlert) .to("xslt:" + infectionAlertXsl) .setHeader("subject"  constant("Test")) .to("smtp://" + smtp_server + ":" + port+"?From="from"&To="+recipients.toString());  from(direct:infectionAlert) .to("xslt:" + infectionAlertXsl) .setHeader("subject"  "Test") .to("smtp://" + smtp_server + ":" + port+"?From="from"&To="+recipients.toString());  from(direct:infectionAlert) .to("xslt:" + infectionAlertXsl) .setHeader("Subject"  constant("Test")) .to("log:debug") .to("smtp://" + smtp_server + ":" + port+"?From="from"&To="+recipients.toString());  from(direct:infectionAlert) .to("xslt:" + infectionAlertXsl) .setHeader("Subject"  "Test") .to("log:debug") .to("smtp://" + smtp_server + ":" + port+"?From="from"&To="+recipients.toString());  None of the messages arrived with a subject. Some details of the environment we use:  java 1.5 +  spring 2.5.5  tried mail servers: MS Exchange  james I tried other combinations too (following spec). None of them arrived with a subject. Looking forward to hearing from you (if more details needed  please let me know) thanks Adam. Adam  just to be clear. All mails arrived  however non of them had a subject? All other details in the mail was correct such as from  to  cc  mail body  etc. etc.  I am a bit puzzled why subject is then the only missing? Camel uses spring to assemble the mail and send it.. And the code is very similar to ServiceMix mail component.. There are actually two things: 1. All mails arrived. 2. All of them had correct body. 3. All of them arrived to the intended number of recipients (3 of them in that case  all set via 'To'). 4. For all mails  subject was missing (thirst thing) 5. And (second thing)-> 'From' was not correct  'From' had the value of the last element in 'To' array  which seems to be totally odd. I spend about 3 hours this morning running tests for different combinations  some very trivial ones  and none of the messages arrived with subject (all messages arrived).  One more bit of info: I don't pass authentication details for the mail server (so you need 1.5 SNAPSHOT to run the snippets attached).. Adam could you try to create some java code that sends the email to your mail server to test if that code works and that you get the subject?  You can use Spring Mail to assist you: http://static.springframework.org/spring/docs/2.5.x/reference/mail.html. Hi Claus  Thanks for the hints. Sending plain test messages via spring mail worked just fine. The problem I found was that I was missing spring config for JavaMailSenderImpl. When I added this snippet  <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl"> <property name="host" value="hostValue"/> </bean>  All messages from camel-mail started coming in full fledged (subject  etc). I took a brief look at MailConfiguration for camel-mail and I guess that if a JavaMailSenderImpl is missing from spring config  camel-mail tries to create a default JavaMailSenderImpl bean from the arguments passed. I think that these conclusions can be added to the spec  or some extra plumbing for MailConfiguration/default JavaMailSenderImpl bean. Please close the issue and thanks very much for help.. Hadrian  I have assigned this task to me  to remember to update the camel-mail wiki documentation with the findings and solution from Adam.. Thank Adam and Claus for the work!. Hi Adam  Its kinda strange that adding this spring bean solved everything.  Do you set this property hostValue <property name="host" value="hostValue"/>  as the same as smtp_server as you define in your route?  .to("smtp://" + smtp_server + ":" + port+"?From="from"&To="+recipients.toString());  Because Camel will set the host based on the URI - uri.getHost().. Hi Claus  Value for hostValue is exactly the same as for smtp_server. Agree  it seems bizarre; I will try to trace the way smtp_server value gets init on default config and possibly get back to you. I also tried to trace why this happened ->(...'From' was not correct  'From' had the value of the last element in 'To' array  which seems to be totally odd.... )  but could not find the culprit. I will get back to you once I have more info  probably some time tomorrow. Thanks. More feedback: I did more testing and debugging and indeed if this snippet is missing from the spring config <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl"> <property name="host" value="hostValue"/> </bean> then mails are arriving without header and with incorrect From value. From value happens to be populated from com.sun.mail.smtp.SMTPTransport urlName (why?  sorry I couldn't find). In terms of the message passed from camel-mail  all the header values are correct  so it may be actually issue in spring-mail. That is it for now. Thanks. I have updated the wiki with a warning about this issue and how to use the solution from Adam.  I will leave the ticket open for a little while. Camel does in fact create a new MailSender and populate it. I am wondering it should use anyone from spring configuration if present.  Bottom line: I will need to check the code in camel.  Adam  maybe I need you to test some new fixes where I will try to see if we can avoid having this spring bean declaration. I will get back later.. Hi Claus  I debugged more and I found the reason for my mail sending headaches. The name of the problem is geronimo-javamail_1.4_spec-1.3  transitive dependency from our kernel project. I removed geronimo-javamail_1.4_spec-1.3.jar from classpath  and all the issues were gone. I also tried without <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl"> <property name="host" value="hostValue"/> </bean> and as long as geronimo was not there in the classpath  all emails were coming through full fledged. That is over. Thanks again for your time and help.. Claus  I am happy to do more tests if needed. I will keep watching the area. Sorry for any problems caused.. Adam  thanks for reporting the real cause. So the problem is this geronimo-javamail_1.4_spec-1.3.jar in your classpath?  If yes  then I will change the wiki documentation to be a warning about this .jar can cause unforeseen problems.. Yes  the real cause happened to be geronimo-javamail_1.4_spec-1.3.jar in the classpath. Sorry for any problems caused.. Adam  dont be sorry it was a very subtle bug. Thanks for finding the real cause of the problem.. I looked up the issue and found this very relevant -> http://www.jroller.com/melix/entry/apache_cxf_maven_javamail_awful. Closing all 1.5.0 issues. 
Improvement,Claus Ibsen,2008-08-30T10:59:54+0000,1220093994,If end-users uses JMS queues as DeadLetterChannel it only send the original exchange body and primitive headers. The original caused exception is lost.  The camel-jms component could benefit from the exchangeTransfer option that we introduced to camel-mina to send the exchange itself over the wire. However end-users must make sure if using remote queues that the consumer of the message can deserialize the exchange object.  Also end-users have requests to be able to set the kind of JmsMessage that is used (Text  Byte  Object  etc.),The end-user with the problem. Committed revision 756685.  Updated wiki as well.. Closing all 2.0M2 tickets. 
Bug,Jonathan Anstey,2008-08-30T12:51:01+0000,1220100661,If you have a route that uses data format and you configure the data format using camel xml elements it doesn't work.  See nabble:  http://www.nabble.com/xstream-in-xml-configuration-td19227970s22882.html,Also using child tags works.. Jonathan. Glad you are on it.  I doubt many use this as it doesn't work. So I suggest that we also restructure the XSD so all dataformats isn't avaiable in the camel root but in a nested tag named <dataFormat>  Then when you use IDE for XML editiing you can get a much simpler ctrl + space overview of possible tags. Could you look into that also?  I think many end-users get confused when they press ctrl + space and see artixDS and all the other 10+ dataformats along with package  route and all the other important camel tags.. Agree with the confusing bit. I was thinking this also while looking at all the xml elements available on the CamelContextFactoryBean - whew!  I'll do up your suggestion with this ticket.. Committed revision 695550.. I forgot to update the other components that use the old format. Looking at this now.. Fixed and also updated http://cwiki.apache.org/confluence/display/CAMEL/Data+Format with the new format.. 
Improvement,Hadrian Zbarcea,2008-09-01T09:23:29+0000,1220261009,,This is the third time I attempt this and the change set becomes pretty large  making it quite hard to deal with failures. I will make the fixes in a few stages and this will impact other developers with potential need for merge. It would be great if you could avoid commits for the next 24-48 hours or so (if it's not too much to ask).. I disabled the DataSetSedaTest. Must be reenabled before closing this issue. It used to fail on my randomly in the past  but now it's more frequent  hopefully it will help identify the cause.. There is one thing remaining  but it's more of a side effect of this issue and is tracked in CAMEL-1078.. Closing 2.0m1 tickets. 
Bug,Willem Jiang,2008-09-01T09:27:18+0000,1220261238,I just found MinaTransferExchangeOptionTest don't show how to set fault message and the fault message is not a part of MinaPayloadHolder. You can't set the exception on the exchange in the processor   sine the camel DeadLetterChannel will try to redeliver the message. So we just need to support put the exception which need to send back to the camel client into the fault message body.,Closing all 1.5.0 issues. 
Improvement,Willem Jiang,2008-09-02T09:57:31+0000,1220349451,,Closing all 1.5.0 issues. 
Improvement,Claus Ibsen,2008-09-03T07:41:47+0000,1220427707,See nabble: http://www.nabble.com/Splitter-for-big-files-td19272583s22882.html Gertv suggestion  ExpressionBuilder and its tokenizeXXX methods should test if the body is Stream  Reader etc. and use java.util.Scanner. Maybe even the String based can use Scanner also.,Committed some code changes. See ExpressionBuilderTest.. Claus   How about wrapping the Scanner in an Iterator and returning that instead of a List from the tokenizer Expressions? This would allow the splitter to fetch values from the Scanner as it needs them to fill the batches to send instead of first having to create the entire List in memory. Wdyt?  Gert. Gertv  I wanted to keep the same types returned as before = List. And wanted to get some code in place right away  so I could get feedback = and I did  thanks a lot. This is great about all the openness in this community.  But knowing that we have the batch issue as well on the splitter  that would be a really great idea to return an Iterator as you suggest. However would that break any existing solutions out there?. Gertv will continue the work with CAMEL-876. Closing 1.5 issues. 
Improvement,Gert Vanthienen,2008-09-03T07:44:09+0000,1220427849,See nabble: http://www.nabble.com/Splitter-for-big-files-td19272583s22882.html  Somekind of batch(size) parameter to the splitter() DSL so we can process the exchanges in batches instead of all in one go.,See CAMEL-875 with suggestions for a solution and the IRC chat log as of today.. Gert wanted to give a go as he had the solution in his head. My plan was to use an Iterable instead of a List wherever possible  so the Splitter could read and send exchanges as it gets them from the splitter expression. This would allow us to just add an an aggregator in the dsl to do the batching.  This works fine  but there's only one problem there: the SPLIT_SIZE attribute requires us to know the amount of items being split and we can't know that yet until we have handled all the messages with this approach. How about adding a streaming() flag to the Splitter where people can choose to use the new approach  but we can warn them in the javadoc that this will also mean we can not send the split size along?. +1  Gert if not already there we should also add a current index in the header as well. So end-users know the exchange is number 1 2 3 4 5 ... n. http://svn.eu.apache.org/viewvc?view=rev&revision=693409 allows the splitter to use an Iterable instead of a List to ensure messages get sent as the data for them becomes available. There's still one TODO in the code: for parallel processing  we need a new CountDownLatch implementation  that somehow allows to 'count up' as well.. Gert can you elaborate a bit on the "count up"?. http://svn.eu.apache.org/viewvc?view=rev&revision=695358 shows what I meant – like a CountDownLatch  but which allows to increment() the count as more exchanges are being sent. There now is one more step left: for aggregating the exchanges  we still need the entire list of exchanges. We can aggregate them on the fly as the exchanges get answered  but this no longer guarantees the order of aggregation. Unless someone objects  I'm going to move the streaming flag up from the Splitter to the MulticastProcessor  once again giving people the choice to use the new approach  but warning them about the out-of-order behavior in the the aggregator.. +1  Great work Gert.. http://svn.apache.org/viewvc?view=rev&revision=695502 should be the last piece of the puzzle - this makes it works with streaming and parallel processing enabled. 
Improvement,Willem Jiang,2008-09-03T12:37:18+0000,1220445438,Currently  you can only get the http request parameters by using a getHttpRequest() on the HttpExchange and thus you need java code and can't do it from the Spring XML configuration using simple expression language.   e.g. if the request is http://localhost:8080/test?x=1  then the following route should result in 1 being returned in the body of the html response:  <route>    <from uri="jetty:http://localhost:8080/test" />    <setBody>       <simple><html><body>${in.header.x}</body></html></simple>    </setBody>    <to uri="mock:end"/> </route>,will now add http request parameters to the in header  also the http request headers have moved to a prefix: http.request.header.XXX and the http method is also added as: http.request.Method  so if you send text?x=foo then you can get the header as: ${in.header.x} as the example above.. Update wiki with this new feature. I am behind a poor firewall at the time so cant commit the code  will do later when at home.. Updated wiki as well.  Steven could you test the 1.5-SNAPSHOT?. Steven  see this unit test that is similar to our route:  https://svn.apache.org/repos/asf/activemq/camel/trunk/components/camel-jetty/src/test/java/org/apache/camel/component/jetty/JettySteveIssueTest.java  This should be possible in spring xml also. If the request's method is POST  request.getParameterNames() will parse the post form data. So we just only set the parameterNames() when we get the GET request.. Closing all 1.5.0 issues. 
Improvement,Willem Jiang,2008-09-04T13:55:03+0000,1220536503,See https://issues.apache.org/activemq/browse/CAMEL-460 for the discussion on this.,Patch to fix this issue.. BTW having a predicate within the intercept is still an issue in the Spring DSL... this patch doesn't fix that issue. See CAMEL-879. Applied the patch with thanks to Jonathan.. Closing all 1.5.0 issues. 
Bug,Claus Ibsen,2008-09-05T14:25:34+0000,1220624734,Fixed in 1.x: New Revision: 745870  This was a hard one to get fixed. Took me most of 2 x 0.5 days to get done.,See comment from Willem in CAMEL-460.  " InterceptType also not support take the predicate from XML  if I put a ChoiceType member in the interceptType   I will create a Cycle dependency between the InterceptType and ChoiceType.". Okay its the <stop/> that is the problem  the predicate is supported and it works fine.  However its only the <stop/> that is the problem as it gets global and stops always          <intercept>             <when>                 <simple>${body} contains 'Goofy'</simple>                 <to uri="mock:goofy"/>             </when>             <stop/>         </intercept>   We only want it to stop if the predicate is true. Its silly to stop always as it will intercept all and just stop. So we might wanna do some tricks on the Spring DSL side and only perform stop if the predicate was evaluated to true.. Fixed in trunk Committed revision 745826.. Closing 2.0m1 tickets. 
Bug,Willem Jiang,2008-09-05T18:21:56+0000,1220638916,When running a dynamic script evaluation in a setHeader  the header is lost as the Pipeline chain uses the data from the out body as the source of headers.   So trying to figure this out  I looked into the source  and found that if the getOut is not null  the out message is used to set the header in the setHeader processor. Unfortunately in the script engine this block of code always ensures that it's NOT null.   script builder class line 520 of Camel 1.4           ScriptContext context = engine.getContext();          int scope = ScriptContext.ENGINE_SCOPE;          context.setAttribute("context"  exchange.getContext()  scope);          context.setAttribute("exchange"  exchange  scope);          context.setAttribute("request"  exchange.getIn()  scope);          context.setAttribute("response"  exchange.getOut()  scope);   The place were the out message is used is here in the Pipeline class at line 79               if (first)  {                  first = false;              }  else  {                  nextExchange = createNextExchange(processor  nextExchange);              }    The specifics of my setup were:  Used spring with the following configuration:  	<camel:camelContext> 		<camel:route> 			<camel:from uri="jms://LLAQueue?disableReplyTo=true" /> 			<camel:setHeader headerName="activity.type"> 				<camel:jxpath>exchange.getIn().getBody().getExerciseHighLevelActivity().getActivityType()</camel:jxpath> 			</camel:setHeader> 			<camel:choice> 				<camel:when> 					<camel:javaScript> 						exchange.getIn().getHeader('activity.type') == 3 					</camel:javaScript> 					<camel:transform> 						<camel:javaScript> 							exchange.getIn().getBody().getData() != 							undefined ? 							exchange.getIn().getBody().getData() : "" 						</camel:javaScript> 					</camel:transform> 					<camel:to uri="log:info?showAll=true" /> 				</camel:when> 			</camel:choice> 		</camel:route> 	</camel:camelContext>  I did not test this problem with other exchange types  just the JMS type.,This issue is easy to fix.   // change   context.setAttribute("response"  exchange.getOut()  scope);    // to   context.setAttribute("response"  exchange.getOut(false)  scope);    In this way a new out message will not be create if the exchange's out message is not be set.  I will add new test to verify my change.. Just committed a quick fix for it.. Closing all 1.5.0 issues. 
Bug,Claus Ibsen,2008-09-07T13:32:28+0000,1220794348,If you configure the codec option on camel-mina and you eg make a spelling mistake camel will default to Mina default protocol if not found. We should throw an exception instead so end user knows about this and can fix his spelling mistake.,Closing 1.5 issues. 
Bug,Willem Jiang,2008-09-07T21:51:51+0000,1220824311,SftpEndpoint ignores custom ssh port. It works only if server runs on port 22.,This fixes the custom ssh port problem. Call the getSession with the port.. Applied patch with thanks to Bela.. Closing all 1.5.0 issues. 
Task,Willem Jiang,2008-09-08T06:31:57+0000,1220855517,to pick up the latest changes from cxf.  It looks like there are a few projects using camel (such as smx) that are moving to the latest cxf version to be released next week.  If camel won't move it will make it a bit hard to use them all together.  Based on a few requests  I'll make this critical  but if cxf 2.1.3 will not be released next week as planned  we'll have to revisit this.  Willem already has a patch ready for this.,Freeman why should we depend on a SNAPSHOT release of CXF?  Shouldn't we wait until 2.1.3 is GA?  Well the ticket should be assigned to Willem as he is our CXF man. Hi Claus   For the integration part  I'm used to use the snapshot  which is helpful to find problem earlier  also we can get the new features in time. You can avoid being shocked to see lots of changes when you ues the GA.   Freeman. I think we should never depend on a SNAPSHOT. We would have the same surprises during Camel development  just more often. When we upgrade to a newer version of a dependent project  we take the heat and do the necessary changes. We also don't necessarily need to depend on the latest of the projects we are using  but on the latest stable as much as possible. This is what benefits our users.. we need to pick up the snapshot for merge the cxf''s change quickly.. How far is CXF from getting to a GA of 2.1.3? Is this in line with Camel 1.5.0 that we want to cut a RC really soon?. I am trying my best to get CXF 2.1.3 released  but there are still some issues need to be addressed in CXF 2.1.3 this week. I will cut a new CXF 2.1.3 this weekend  if the vote is OK  CXF 2.1.3 GA will be released in the middle of next week.. Willem  no worries. You have been quite on Camel lately so I guess CXF got your full attention now.  Makes sense to wait for CXF 2.1.3 before we do the first 1.5 cut.. Closing all 1.5.0 issues. 
Bug,Unassigned,2008-09-09T15:03:11+0000,1220972591,the exception (WARNING level) comes in the project where camel and cxf are together. When the camel references are removed  the exception disappear. The actual stubs are generated.,Hi Pawel   I just checked your pom.xml  you add some cxf modules which will introduce the Spring modules 2.0.8 dependencies. You can specify the Spring modules dependencies in your pom like this   if you don't want to remove the cxf additional modules.     <dependency>        <groupId>org.springframework</groupId>        <artifactId>spring-core</artifactId>        <version>${spring-version}</version>     </dependency>      <dependency>        <groupId>org.springframework</groupId>        <artifactId>spring-beans</artifactId>        <version>${spring-version}</version>      </dependency>      <dependency>        <groupId>org.springframework</groupId>        <artifactId>spring-context</artifactId>        <version>${spring-version}</version>      </dependency>      <dependency>        <groupId>org.springframework</groupId>        <artifactId>spring-web</artifactId>        <version>${spring-version}</version>      </dependency>   Please let me know if you have any further questions.  Willem. Willem pointed out that my pom had some explicit references to wrong cxf version and this caused the exception. In a mean time I received confirmation that current version of cxf-codegen has a problem passing the additional arguments (it will be fixed in 2.1.3)  http://www.nabble.com/maven-cxf-codegen-plugin---wsdl2java-lost-arguments-td19391891.html#a19441616 http://www.nabble.com/maven-cxf-codegen-plugin---wsdl2java-lost-arguments-td19391891.html#a19441616  Pawel. Pawel. Can this ticket be closed  as its a bug in CXF?. yes sorry for the confusion. Pawel  – pj. Not a bug in Camel.. Closing all 1.5.0 issues. 
Bug,Claus Ibsen,2008-09-09T15:08:36+0000,1220972916,we should throw an exception if there was a Fault or the exchange contains an Exception,Indeed a stupid behavior in Camel. We should of course throw an exception if the exchange failed.  However this can break existing solutions that rely on the "old odd" behavior. We should document this in the release notes.. All the methods doesn't have any exceptions declared to be thrown. I suggest to wrap the exception as a RuntimeCamelException with the caused exception. Otherwise we need to add throws Exception to all methods.  We could check if the exception already is a runtime exception and throw it as is. Then only wrap the checked.  Any thoughts?. We are gonna break some unit tests that relied on the old odd behaviour of not rethrowning any exception.  This is from testing camel-core  Tests run: 554  Failures: 27  Errors: 40  Skipped: 0. Refined the extract method:  Tests in error:  Tests run: 554  Failures: 0  Errors: 39  Skipped: 0. Okay this is just hard tedious work to refine the unit tests to handle that exceptions is now thrown from the template.sendBodyXXX methods.  16 unit tests to go in camel-core. Then there is just all the other components   Tests run: 554  Failures: 0  Errors: 16  Skipped: 0. Okay got camel-core fixed now. Just the rest. I am proposing this change ==========================  If exchange has exception then throw it (wrapped as RuntimeCamelException as the plain send method does). If has FAULT message then return FAULT message as before  return either IN/OUT based on exchange pattern. Closing all 1.5.0 issues. 
Bug,Jonathan Anstey,2008-09-09T16:12:34+0000,1220976754,In the Java DSL  you can say from("foo").marshal().jaxb().to("bar")  In XML I think it would look like this:  <from uri="..." /> <marshal>   <jaxb /> </marshal> <to uri="..." />  The problem is that you can't use the <jaxb /> element without the contextPath attribute  which the XSD says is required.,Fix committed in revision 695586.  Thanks for reporting this Aaron!. Closing all 1.5.0 issues. 
Task,Jonathan Anstey,2008-09-09T17:30:22+0000,1220981422,We currently depend on a snapshot dependency of Google Guice 1.1. This most likely won't be released before we want Camel 1.5 to go out so we need to create a release ourselves   I've put one together here: http://repo.open.iona.com/maven2/com/google/code/guice/guice/1.1.0-fuse/  Will update build shortly with this fix.,Fixed in rev 693569.. Closing all 1.5.0 issues. 
New Feature,James Strachan,2008-09-10T14:16:40+0000,1221056200,,some progress made finally after being stuck in the weeds on  implicit views in Jersey not really working with explicit @GET methods returning JAXB objects for XML/JSON representations so switching tack to explicit views hit the horrid surefire bug which took ages to figure out why things worked fine in 'mvn jetty:run' but not in 'mvn test'. This is documented here: http://cwiki.apache.org/CAMEL/web-console.html. Closing 2.0m1 tickets. 
Improvement,Jonathan Anstey,2008-09-10T14:20:14+0000,1221056414,you can now use a common descriptor rather than cutting and pasting stuff among 2 different descriptors which is a PITA.  e.g. see the ActiveMQ descriptors... https://svn.apache.org/repos/asf/activemq/trunk/assembly/src/main/descriptors/  in particular the common-bin.xml https://svn.apache.org/repos/asf/activemq/trunk/assembly/src/main/descriptors/common-bin.xml  we should do the same to Camel's descriptors... https://svn.apache.org/repos/asf/activemq/camel/trunk/apache-camel/src/main/descriptors/  Jon - fancy taking a stab?,Oh nice! I didn't know you could ref descriptors like that. I'll take a look at this.. Fixed in revision 693908.. Closing all 1.5.0 issues. 
Bug,Claus Ibsen,2008-09-10T16:57:34+0000,1221065854,It appears the RMI component is not pulling the right name from the URI I defined in my routebuilder.    In a separate application (the one I'm trying to connect and send data to)  I've bound a remote object in the RMI Registry as: "GDRService".  (I even wrote a little app to list the RMI registry entries and it does indeed show up as "GDRService").  However  my camel route:    .to("rmi://localhost:1099/GDRService");  produces this result... java.rmi.NotBoundException: /GDRService         at sun.rmi.registry.RegistryImpl.lookup(RegistryImpl.java:106)         at sun.rmi.registry.RegistryImpl_Skel.dispatch(Unknown Source) ....  I think this is the problem... According to the code for  RMIEndPoint: public String getName() {         String path = uri.getPath();         if (path == null)  {             path = uri.getSchemeSpecificPart();         }         return path;     }  I believe uri.getPath() is returning "/GDRService" and not "GDRService" and thus  Camel can't find the actual service.   Here's a longer stacktrace (just the last of the 5 attempts to route via RMI prior to dead-letter drop).  [          AnonymousIoService-2] DeadLetterChannel              ERROR Failed delivery for exchangeId: ID-dmco500084358/ 683-1221065595195/0-0. On delivery attempt: 5 caught: java.rmi.NotBoundException: /GDRService java.rmi.NotBoundException: /GDRService         at sun.rmi.registry.RegistryImpl.lookup(RegistryImpl.java:106)         at sun.rmi.registry.RegistryImpl_Skel.dispatch(Unknown Source)         at sun.rmi.server.UnicastServerRef.oldDispatch(UnicastServerRef.java:386)         at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:250)         at sun.rmi.transport.Transport$1.run(Transport.java:159)         at java.security.AccessController.doPrivileged(Native Method)         at sun.rmi.transport.Transport.serviceCall(Transport.java:155)         at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:535)         at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:790)         at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:649)         at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885)         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)         at java.lang.Thread.run(Thread.java:619)         at sun.rmi.transport.StreamRemoteCall.exceptionReceivedFromServer(StreamRemoteCall.java:255)         at sun.rmi.transport.StreamRemoteCall.executeCall(StreamRemoteCall.java:233)         at sun.rmi.server.UnicastRef.invoke(UnicastRef.java:359)         at sun.rmi.registry.RegistryImpl_Stub.lookup(Unknown Source)         at org.apache.camel.component.rmi.RmiRegistryBean.lookupBean(RmiRegistryBean.java:44)         at org.apache.camel.component.bean.RegistryBean.getBean(RegistryBean.java:61)         at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:73)         at org.apache.camel.component.rmi.RmiProducer.process(RmiProducer.java:46)         at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncPro essorTypeConverter.java:43)         at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:75)         at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:57)         at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:155)         at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:91)         at org.apache.camel.processor.Pipeline.process(Pipeline.java:101)         at org.apache.camel.processor.Pipeline.process(Pipeline.java:85)         at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:57)         at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:39)         at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:41)         at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:66)         at org.apache.camel.component.mina.MinaConsumer$ReceiveHandler.messageReceived(MinaConsumer.java:95)         at org.apache.mina.common.support.AbstractIoFilterChain$TailFilter.messageReceived(AbstractIoFilterChain.java:5 0)         at org.apache.mina.common.support.AbstractIoFilterChain.callNextMessageReceived(AbstractIoFilterChain.java:299)         at org.apache.mina.common.support.AbstractIoFilterChain.access$1100(AbstractIoFilterChain.java:53)         at org.apache.mina.common.support.AbstractIoFilterChain$EntryImpl$1.messageReceived(AbstractIoFilterChain.java: 48)         at org.apache.mina.filter.codec.support.SimpleProtocolDecoderOutput.flush(SimpleProtocolDecoderOutput.java:58)         at org.apache.mina.filter.codec.ProtocolCodecFilter.messageReceived(ProtocolCodecFilter.java:180)         at org.apache.mina.common.support.AbstractIoFilterChain.callNextMessageReceived(AbstractIoFilterChain.java:299)         at org.apache.mina.common.support.AbstractIoFilterChain.access$1100(AbstractIoFilterChain.java:53)         at org.apache.mina.common.support.AbstractIoFilterChain$EntryImpl$1.messageReceived(AbstractIoFilterChain.java: 48)         at org.apache.mina.filter.executor.ExecutorFilter.processEvent(ExecutorFilter.java:220)         at org.apache.mina.filter.executor.ExecutorFilter$ProcessEventsRunnable.run(ExecutorFilter.java:264)         at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885)         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)         at org.apache.mina.util.NamePreservingRunnable.run(NamePreservingRunnable.java:51)         at java.lang.Thread.run(Thread.java:619) [          AnonymousIoService-2] DefaultListableBeanFactory     DEBUG Creating instance of bean 'org.apache.camel.compo ent.log.LogComponent' [          AnonymousIoService-2] DefaultListableBeanFactory     DEBUG Finished creating instance of bean 'org.apache.ca el.component.log.LogComponent' [          AnonymousIoService-2] DeadLetterChannel              ERROR Exchange[BodyType:String  Body:<?xml version="1.0............,Conrad  thanks for the report. I have commit a fix based on your suggestion.  Can you test it? You can try the latest 1.5-SNAPSHOT version.  See this page how to get the SNAPSHOT: http://activemq.apache.org/camel/download.html. Claus  I tried it and got the same result. I'll attach log output showing I'm using the 1.5-SNAPSHOT and the resulting error.. Log file showing error in 1.5-SNAPSHOT. Conrad. You are very fast. The Apache infrastructure is building the SNAPSHOTS on a regular interval.  I think you should wait some more to be sure the snapshot is with my latest fix. Could you try in 3-4 hours or maybe tomorrow  to really be sure.  If we still have an error then maybe a little test app from you can help me dig into it and fix it. You are also of course welcome to checkout the camel source and build the camel-rmi component and install it in your local repo. Then you have the changes immediately. Then you can also try to fix it yourself. And if you find a good solution  you can create a patch and submit to this ticket.  http://activemq.apache.org/camel/building.html http://activemq.apache.org/camel/contributing.html. I have attached the camel-rmi.jar that is genered on my computer with the fix. You can install/copy this .jar in your local m2 repo.. Super--that works!! (well  at least I've moved on to my next problem... it looks like I've got to include a .policy file somewhere. Cheers Conrad [ AnonymousIoService-2] DeadLetterChannel ERROR Failed delivery for exchangeId: ID-dmco500084358/2062-1221159175926/0-0. On delivery attempt: 0 caught: java.rmi.UnmarshalException: error unmarshalling return; nested exception is: java.lang.ClassNotFoundException: com.foo.gdr.GDRService (no security manager: RMI class loader disabled) java.rmi.UnmarshalException: error unmarshalling return; nested exception is: java.lang.ClassNotFoundException: com.foo.gdr.GDRService (no security manager: RMI class loader disabled). Glad this solved the first step.  The little snippet of stacktrace shown reveals that its something with a class not found. ClassNotFoundException.  Are you sure that com.foo.gdr.GDRService.class is included in the classpath on both the server and client side?. Actually  I wanted my router to be as free as possible from 'knowing' the contents of the messages. RMI will support downloading the class from the RMI server to the client when a SecurityManager exists with proper policy--I tried that  but couldn't get a SecurityManager to work that didn't break a lot of other things in Camel & Spring. So I decided to include the com.foo.gdr.GDRService.class in the client (Camel) after all.  FYI  other errors I was having was due to Camel MINA 'sync' option default changing from false to true in Camel 1.5--since my TCP inbound endpoint is receive only  I had to explicitly say sync=false in my MINA URI for Camel 1.5. That was a surprise  but easy to overcome.  Life is good. Thanks for the super-fast fix. Cheers--Conrad. Conrad. Glad its working now.  And thanks for letting us know about the mina change. It was however documented in the release note http://activemq.apache.org/camel/camel-150-release.html  However 1.5 is still work in progress.. BTW: Maybe Java WebStart is better at distributing software to clients  instead of RMI server with downloaded .jars.. Closing all 1.5.0 issues. 
Task,Claus Ibsen,2008-09-12T06:52:59+0000,1221202379,I think the API has changed so the unit tests fails when you upgrade to the newer version.  Just created this ticket to remember to upgrade and fix the unit tests.,They have changed some parts. Now we need to setup users for more strict control.. Closing 1.5 issues. 
Test,Willem Jiang,2008-09-12T10:04:50+0000,1221213890,Here is the nabble which discusses it.  http://www.nabble.com/Camel%2C-JBI-%2B-JMS-priority-td19390754s22882.html#a19390754,Closing all 1.5.0 issues. 
Bug,Jonathan Anstey,2008-09-13T13:19:38+0000,1221311978,In the XML  you can use <setHeader headerName="foo" value="bar" /> but that is not valid – it requires a child element like <el>  <groovy>  etc.  It doesn't seem like a child should be required if the "value" attribute is used (e.g. if you want to set a header to a constant value).,Jonathan did some improvements already on this. See CAMEL-746.  <setHeader name="foo"  value="bar"/> is @deprecated. You should use a <constant> child. See CAMEL-746 for sample.. The value attribute was removed after Camel 1.4 in favor of a constant expression as the child element. In Camel 1.5 you can do this:        <setHeader headerName="foo">         <constant>bar</constant>               </setHeader>   It should be alright to close this issue I think.. Dang  you're fast Claus!. Closing all 1.5.0 issues. 
Bug,Claus Ibsen,2008-09-13T16:16:07+0000,1221322567,If the login to the FTP server fails then Camel will at the 2nd pool still try to consume files from the ftp server as it has network connection  but end-user is still not connected. Camel will of course not be able to get anything from the server but you get some stacktrace errors,Remember to do the same for the SFTP part as well.. See release notes for impact on upgrading Camel.. Closing 1.5 issues. 
Improvement,Claus Ibsen,2008-09-14T08:25:27+0000,1221380727,URI configuration of endpoints sometimes supports being able to reference a bean in the registry.  For instance camel-mina has the codec option. Currently this is speically manually coded in the component factory.  Would be lovely if setProperties(configBean  parameters) would be able to determine this itself and lookup beans in registry.,Maybe this is a bit to magical.. Maybe not as magic  We could allow any xxxxRef URI option to automatic lookup in the registry and then configure the endpoint if it has a xxx setter.. I had to try a little experiment and got it working very nicely      /**      * Sets the reference properties on the given bean      * <p/>      * This is convention over configuration  setting all <tt>xxxRef</tt> parameters by looking it up in registry      * and setting it on the bean if possible.      */     protected void setRefProperties(Object bean  Map parameters) throws Exception {         Iterator it = parameters.keySet().iterator();         while (it.hasNext()) {             String key = it.next().toString();             if (key.endsWith("Ref")) {                 String value = (String) parameters.get(key);                 Object ref = lookup(value);                 if (ref != null) {                     String name = key.substring(0  key.lastIndexOf("Ref"));                     boolean hit = IntrospectionSupport.setProperty(getCamelContext().getTypeConverter()  bean  name  ref);                     if (hit) {                         LOG.debug("Configued property: " + name + " on bean: " + bean + " with value: " + ref);                         // must remove as its a valid option and we could configure it                         it.remove();                     }                 }             }         }     }   Now it's possible to get rid of duplicated code in components and offer this convention right out-of-the-box for all URI options  making it much easier to set URI options leveraging the Registry. Using Spring XML this is very powerful.  For instance all this code can be removed:          // lookup idempotent repository in registry if provided         String ref = getAndRemoveParameter(parameters  "idempotentRepositoryRef"  String.class);         if (ref != null) {             IdempotentRepository repository = mandatoryLookup(ref  IdempotentRepository.class);             result.setIdempotentRepository(repository);         }          // lookup file filter in registry if provided         ref = getAndRemoveParameter(parameters  "fileFilterRef"  String.class);         if (ref != null) {             FileFilter filter = mandatoryLookup(ref  FileFilter.class);             result.setFilter(filter);         }          // lookup sorter in registry if provided         ref = getAndRemoveParameter(parameters  "sorterRef"  String.class);         if (ref != null) {             Comparator<File> sorter = mandatoryLookup(ref  Comparator.class);             result.setFileSorter(sorter);         }. Dooh I had a 2nd though and would like to propose to use the # syntax that Apache CXF uses (AFAIR)  So you can do this:  file://target/idempotent/?idempotent=true&idempotentRepository=#myRepo&moveNamePrefix=done/   As the value starts with a # then it's looked up in the registry. I am wondering it it should be a mandatory option so Camel will raise an exception if not found and not possible to set?. See proposal on nabble: http://www.nabble.com/-PROPOSAL----Camel-2.0---support---syntax-in-URI-options-td20869957s22882.html. A patch for the implementation of this feature.. Closing 2.0m1 tickets. 
Improvement,Claus Ibsen,2008-09-14T08:29:06+0000,1221380946,The Registry only has lookup methods that return null if the bean was not found. Then we need to manually throw exception if the bean was expected.  We need to expose mandatoryLookup methods that will do null check  For instance:              FTPClientConfig ftpClientConfig = this.getCamelContext().getRegistry().lookup(ref  FTPClientConfig.class);             if (ftpClientConfig == null) {                 throw new IllegalArgumentException("Damm can not find it");             }    Should just be:              FTPClientConfig ftpClientConfig = this.getCamelContext().getRegistry().mandatoryLookup(ref  FTPClientConfig.class);,CamelContextHelper has the mandatory methods and they are provided in the DefaultComponent so no need to expose it on the SPI also. 
New Feature,Claus Ibsen,2008-09-14T08:48:58+0000,1221382138,FTPClientConfig allows end-users to configure the FTP (regular ftp) consumer/producer to be configured according to org.apache.commons.net.ftp.FTPClientConfig. This is useable when you need to poll files from servers that doesn't use standard format supported out-of-the-box by commons net.  This can for instance be FTP servers using locale date formats  or setting the timezone etc.,Closing 1.5 issues. 
New Feature,Claus Ibsen,2008-09-14T10:10:18+0000,1221387018,Currently camel auto detect based on the body type what kind of JMSMessage to use (byte  map  object  text etc.) but we should have an option for end-users to force a specific type to use.,Committed revision 754889.  Added new option jmsMessageType  jmsMessageType null Camel 2.0: Allows you to force to use a specific javax.jms.Message implementation for sending a jms message. Possible values: Bytes  Map  Object  Stream  Text. By default Camel will determine from the IN body type which Jms message type to use. This option allows you to choose it.  See updated wiki for more.. Closing all 2.0M2 tickets. 
Task,Claus Ibsen,2008-09-14T11:38:25+0000,1221392305,Code such as:  catch (Exception e) {    throw new RuntimeCamelException(e); }    should use a wrapper check if the exception is already a RuntimeCamelException. If not then we get nested pointless wrappings. In fact the TraceInterceptor in camel-spring had this and depending on how long your route was you would get N deep wrappings.  The following code should be in camel-core somewhere:      /**      * Wraps the caused exception in a RuntimeCamelException if its not already such an exception      */     private static RuntimeCamelException wrapRuntimeCamelException(Throwable e) {         // TODO: Move to camel-core         if (e instanceof RuntimeCamelException) {             // dont double wrap if already a RuntimeCamelException             return (RuntimeCamelException) e;         } else {             return new RuntimeCamelException(e);         }     },camel-core 'DONE*. Closing 1.5 issues. 
Improvement,Willem Jiang,2008-09-14T15:15:43+0000,1221405343,To provide a generic way to transform the SOAP message into a plain XML string representation in camel-cxf component  so we could use the below spring configuration to do it. <convertBodyTo type="java.lang.String"/>,Closing all 1.5.0 issues. 
Bug,Claus Ibsen,2008-09-14T21:17:42+0000,1221427062,Setup:  Error handler is specified before the thread processor and there are 3 processor after the thread() call. Third processor fails.   Bug #1:  The exchange received by the failed processor (#3) gets redelivered to the first processor in the pipe. It should be redeliver to #3 (this works without the thread processor).  Bug #2:  The specified errorHandler (log:testError) receives the exchange that entered processor #1 (first in the pipe).  See details in the attached unit test. Also take a look at the log4j log (copy attached). The 3rd line from the bottom is the log by testError.,Unit Test. Log messages for the unit test. Ad #1) Not a bug. Your route is a pipeline (pipes and filters) http://activemq.apache.org/camel/pipes-and-filters.html  So the routing is: from -> process1 -> process2 -> process3. So when the message is redelivered it starts all over again at the from and this should be routed through the pipeline again. Ad #2) Not a bug. Its the original exchange that is received  that is passed to the error handler. E.g. so you can move the message to a JMS queue and later move the message back again to consume the original exchange.. #1 Well  not so fast. Take out the thread() and it will behave differently  they way I suggested it  that is it will re-deliver to the #3 processor where the failure occurred.  I guess I mistook a feature for a bug  The doc is not clear about the redelivery behavior (or I should RTFM). My $0.02 is that if we use the pipeline() then it should re-deliver to the pipe otherwise the failing processor.  #2 That makes sense if it re-delivers to the pipe.... #1  Camel is smart but not that smart. When it do redelivery it does not know which route steps last time was successful  it always start all over again.  Okay so there might be a bug/issue if it works different depending if you have thread or no thread. I will look into it.. #2  Ah each step with the processors are again wrapped in a DeadLetterChannel and thus Camel should retry at the processor that failed. And in this case at the last processor.. Could be related to useing seda as the queue. We have seen some timing issues with high concurrency with seda queues.. Using the new handled(true) DSL and onException works.. Also test with direct queue instead of seda. #3 Thread adds a nested pipeline that yet again adds a DLC. Then when the exchange has been failure handled by the inner DLC then its 'thrown' back to the outer DLC that yet again will try to handle it.  ThreadType#createProcessor adds the nested Pipeline. Maybe we can avoid this.  #4 Because of the nested Pipeline and it's copy result nature it creates a new exchange id that get's routed by the outer Pipeline  and thus by magic there is 2 messages being routed  and not only one.. #5 The inner processing in the Pipeline is missing the exception handled check that the outer processor has. #6 And the DLC should also have this exception handled check in it's processing code. TODO: Reminder to me. DefaultExchange when copy from parent - I think we should copy the exchange id as well  I copy the exchange id in Pipeline so the same id is used.. TODO: exchangeId should not be lazy initialized I think  it should not depend on a DEBUG log or toString to init it. Issue #1 fixed Issue #2 fixed Issue #3 working as designed Issue #4 fixed Issue #5 fixed Issue #6 fixed  I got it working now  but it is a bit complicate with the thread as it adds a pipeline as well  so we get double pipelines. I also added some TRACE logging to Pipleline.. My current patch if anyone wants to review as its a bit long haired in the Pipeline. Thanks Claus!  I'll review this. At first sight  log4j.properties should be restored to remove +log4j.logger.org.apache.camel.processor.Pipeline=TRACE. A better patch with the findings from hadrian and gertv. Gertv had a review as well. He spotted that the reuse of exchange id should be better documented. I have improved the code comments (alot). Hadrian have reviewed and committed the patch. I just wanted to say that I plugged in the latest build into my app and everything works as expected. Thanks guys!. Thanks for reporting  and being persistent. It was a hard one to crack as it took some debugging efforts to find the culprit.  Glad it works now. So keep on providing hardball unit tests. 
Bug,Willem Jiang,2008-09-15T07:05:14+0000,1221462314,If you specify an invalided class name in the  convertBodyTo@type  you will get a NPE error  but no detail log information for the type attribute. We need to throw the exception for user to locate the error.,Closing all 1.5.0 issues. 
Improvement,Claus Ibsen,2008-09-15T09:26:57+0000,1221470817,The camel-ftp component uses System.currentTimeMillis stored as last poll time. The remote file timestamp is used for comparing against last poll time if its new and thus a candidate for download.  As timestamps over FTP is not reliable we should not use this feature by default  but turn it off. It should only be there for test or experimental usage. Most FTP servers only sent file timestamp as HH:mm (no seconds). And as a bonus we avoid timezone issues as well.  Instead end-users should use a different strategy for "marking files done" such as:  	delete consumed files 	rename consumed files     See nabble: http://www.nabble.com/Ftp-consumer-td19489526s22882.html,Its actually a critical bug. The last poll timestamp feature is @deprecated. Will be removed in Camel 2.0.  In Camel 1.5 the last poll timestamp will be disabled by default. You enabled it with a new option flag.. Commited fix.  The flag is named: consumer.timestamp its a boolean that is false by default. Set it to true to enable it as it works in Camel 1.4 or older.. TODO: Need to document it in wiki. Updated wiki with a warning and added the option.. Closing 1.5 issues. 
Task,Willem Jiang,2008-09-15T09:52:47+0000,1221472367,The camel-script pom.xml looks a bit odd with deps on retroslaver and using jdk4 classifier.   Background: See chatlog on servicemix for today.,Chatlog: http://servlet.uwyn.com/drone/log/hausbot/servicemix/20080915. Willem  isn't this something you with your maven expertise can look at?  Summary: Should the jdk4 and retroweaver still be there in the pom.xml - we are only jdk5+ only.. Done  now we don't use any jdk4 jars.. 
Task,Claus Ibsen,2008-09-15T11:24:04+0000,1221477844,Many places in camel-core we catch exception and log it at WARN or DEBUG  and then ignore it.  We should consider using the ExceptionHandler for this. Its interface can be improved with more parameters:  	additional message 	severity level (such as the log levels)    By default Camel will log it using LoggingExceptionHandler,Closing 2.0m1 tickets. 
Bug,Claus Ibsen,2008-09-16T07:36:50+0000,1221550610,When sending a JMS message to a destination using camel-jms (JMSProducer) I can't get it to use my requestTimeout option in the endpoint configuration. It always default to 20000.   template.requestBody("activemq:queue:slow?requestTimeout=1000"  "Hello World");    This doesn't work as expected with a timeout of only 1 sec.,Fixed and added the option to the wiki and a small sample as well.. Closing 1.5 issues. 
Improvement,Claus Ibsen,2008-09-16T10:05:22+0000,1221559522,The various languages   http://activemq.apache.org/camel/languages.html  should have a description of the various values available to them.  They are mostly the same variables (in  out  exchange  body and so forth) so we could maybe include the same page on most actual language pages such as  http://activemq.apache.org/camel/el.html,To document in the wiki:  variables in context DONE java examples DONE spring examples DONE maven dependencies DONE annotations DONE static import not needed DONE. To document:  No need for static imports of XXXBuilder. Its not needed since Camel 1.3. Remove the stuff that says you need it. DONE. The XPath language needs to be reviewed. I am a bit puzzled why I can't get the XPath functions executed  and namespace matching as well. DONE. I propose to move: org.apache.camel.builder.xml.XPathLanguage.class to: org.apache.camel.language.xpath  It's the only language that isn't in the language package in camel-core.  DONE. Document how to use any JSR script language (we dont have DSL for out-of-the-box) DONE. XPath and XQuery language pages need review by Jonathan/James etc.. Added xpath function test (http://svn.apache.org/repos/asf/activemq/camel/trunk/camel-core/src/test/java/org/apache/camel/language/XPathFunctionTest.java) and updated wiki doc here http://cwiki.apache.org/confluence/display/CAMEL/XPath.. The rest of the xpath docs look good. I've removed the "in review" warning. If you are wondering  I removed the out-body/out-header functions because they could never be triggered.. Spring example of any scripting language DONE http://cwiki.apache.org/confluence/display/CAMEL/Scripting+Languages. Document this a bit more:  @MessageDriven is a way to create a really simple route without using the DSL. so the annotations are kinda a way of working outside the DSL - but they only work for real simple routes. Closing all 1.5.0 issues. 
Improvement,Claus Ibsen,2008-09-16T10:37:49+0000,1221561469,New description This ticket evolved into a new feature. Allowing the wireTap to send a new Exchange instead of a copy of the original tapped exchange. This allows you to spin of a new Exchange and eg produce a new message and send it as InOnly as a fire and forget style.   Old description The log component should have a new URI option for end users a custom log message to be avail for logging.   This is usable for end users that want to log certain steps in the LOG such as "Validating against XMLSchema"  "Validation OK" etc.,See nabble: http://www.nabble.com/Custom-log-messages-td19508418s22882.html. as I mentioned on that thread  we can use the DSL to set the logging message either using expressions or using templating - e.g.  from("...").          setBody().el("Validating ${in.header.foo} blah").          to("log:Validating");    So am wondering if there's a real need to hack the logging component to deal with this? Am thinking given the power of the transformation capabilities  should we just use them before we invoke the logger?. Yeah looks really nice  but then you need camel-juel and knowledge how to use the languages  but that isn't a bad thing either as they are powerful   But what for a very simple option for quick sending your own expression. We could add expression as an optional 2nd parameter:  log("log:com.mycompany"  constant("Validating before XMLSchema"))   Nice and simple.. Or perhaps even a more general solution  like    from("somewhere").send("log:com.mycompany"  constant("Validating before schema"));   We are now thinking only of logging  but it might be good to be able to just send a small message somewhere en-cours-de-route (like sending heartbeat messages to a queue of whatever other use case we can come up with).. And issue with the log and having a constant as 2nd argument does not work in Spring DSL.  So it should be:  to("log:foo?level=INFO&msg=Validation before scheme")  to("log:foo?level=INFO&msg=Processing after validating scheme")   And the one above will create a new endpoint for each different msg as they are not the same  and you end up with 2 endpoints. And that is actually needed so it can remember that msg.. Like getv suggestion.  Now we can leverage the wireTap and add some sugar so you can pass in an expression for the body. Then we can have a fireAndForget DSL  like send  that wont affect the original exchange.. I got this working now                  from("direct:start")                     .send("direct:foo"  constant("Bye World"))                     .to("mock:result");                  from("direct:foo").to("mock:foo");   eg it will send a totally new Exchange to direct:foo with the body: Bye World. It runs in parallel with the original exchange.. We have agreed it should be merged into the existing wireTap  so the send DSL should be wireTap. Committed revision 758152.. Closing all 2.0M2 tickets. 
Improvement,Claus Ibsen,2008-09-16T15:35:35+0000,1221579335,camel-ftp now has the option consumer.timestamp to disable/enable using timestamp check for new files.  The regular file component should also has this option. Then there is no surprises for end-users. This will allow then to copy files into the folder preserving original timestamp etc. We should consider disabling this by default as its better to use another strategy for detecting new files  such as  	deleting consumed files 	moving consumed files (does this by default),We actually already have the option consumer.alwaysConsume for this. So I am adding consumer.timestamp to let the file and ftp component have same options in this regards. And also adding the wiki warning.  I have marked the code in the file component that computes if a file is changed or not. The code is to messy and we don't want to compute if a file is changed if the file size is different etc. It keeps an internal state of processed files and its lost when you restart Camel. So its should be removed.  End-users should do the same as the ftp. Files to be consumed from a folder should be moved/delete after processing. So new files is not hard to compute = there is a file in the folder.. Closing 1.5 issues. 
Task,Willem Jiang,2008-09-16T17:47:21+0000,1221587241,First of all I think we need to promote this great example some more. Maybe it should be easier to find on our wiki site.  I will post findings in this ticket:  #1 Link to EIP book loan broker sample doesnt work  #2 I think the 2 parts in the introduction should be listed as bullets (one for JMS  one for webservice)  #3 spelling (comman in the sentence below) credit agency   and banks)  #4 Maybe the exchange pattern InOnly  InOut is not easily understood by new users and non JBI/ServiceMix end-users. Maybe use terms such as sync/async instead (and list the MEP in parathes)  #5 Could "test-jms" component name be renamed to jms or activemq or something with non test?  #6 multicast().to() ah clever if its really using a multicast  I didn't know that we have the .to on multicase. Are you sure its working as expected? and it should not be multicase("bank1"  "bank2"  ...) without the to?  #7 Use the getHeader with the expected type as 2nd param  to avoid plain java type cast   String ssn = (String)exchange.getIn().getHeader(Constants.PROPERTY_SSN);  #8 The aggregator. I am wondering if we have or should have a counter build in Camel so you can use a build in header instead of "remebering" to code this yourself result.setProperty("aggregated"  old + 1);  will continue...,#9 its not easily understood how the client can send using the template. Maybe divide the server and client into each section. The client just need much less code than the server.  #10 webservice example. It is not clear that its the true parameter that turns the multicast into parallel mode. This is not documented to well in the code.. Finished #1  #2  #3  #4  #5  #7  #9  10 For #6  yes it works. For #8  yes we could add counter in the MulticastProcessor for completedPredicate.. #8: Yes I think we should provide this out of the box in Camel. In many cases the completed predicate is when you have received the X expected number of messages.  BTW: Do we have a timeout setting as well for the multicast?`So you don't wait forever.. #8 should be resolved in CAMEL-928.. 
Improvement,Willem Jiang,2008-09-16T18:15:47+0000,1221588947,It would be nice if we could create arbitrary proxies for web URLs (web services  especially) that direct requests through Camel.  We should be able to map one URL path to another.  For example: ... from("jetty:http://localhost:8080/myservices/myservice")         .to("http://svchost:80/Service1.asmx"); ...  If I pointed a web browser and sent a GET request to the listening URL (http://localhost:8080/myservices/myservice?wsdl)  I should receive the WSDL for the service.  If I send a POST request with SOAP invoking the service  I should likewise get the SOAP response with the appropriate content type settings  etc.  This allows me to set up an uncomplicated HTTP proxy  while still retaining the ability to intercept and process the message.,See nabble: http://www.nabble.com/Proxying-web-services-td19498936s22882.html. This is now possible with the new bridgeEndpoint option on camel-jetty. See its wiki page.. 
Bug,Willem Jiang,2008-09-16T22:16:34+0000,1221603394,CxfProducer.process() is not setting up the request context correctly during createCxfMessage  so later in that method propagateContext has no request data to propagate.  Also  we need the exchange properties to be added to the request context  so that non-camel components can pass properties into the cxf request context.  I have coded a fix for this  along with a unit test of course.  I'll attach the patch to this JIRA.,Applied the patch with thanks to Mike.. Closing all 1.5.0 issues. 
Improvement,Unassigned,2008-09-17T10:30:18+0000,1221647418,e.g. if you sent a message with headers   CamelReplyTo = activemq:cheese CamelTimerDelay = 1000    it'd send a message to activemq:cheese in a second,We could have quartz when it's a Producer send the exchange to an endpoint based on the actual config. Additionally allowing for overriding/setting values by sending them in the headers.  from("jms:SomeQueue")    .to("quartz://myGroup/myTimer?trigger.repeatInterval=2000&trigger.repeatCount=1&endpoint=jms:topic:SomeTopic");. I don't really understand the use case.  My questions are: 1. What is the relationship between the initial message sent to the timer endpoint and the subsequent messages sent by the timer? Is it the same message or the timer send empty messages as the timer consumers do now? 2. For one message sent to the timer endpoint  how many messages are sent later by the timer? 3. What is the difference between this and starting a new route in response to the message sent?  from("quartz://myGroup/myTimer?trigger.repeatInterval=2000&trigger.repeatCount=1")     .to("jms:topic:SomeTopic");   4. How will exceptions be handled if sending to the endpoint fails? Is the message in-only or in-out? 5. Are transactions supported?  The particular example above could be handled with a combination of loop and delayer.. Tracy and I had a chat on IRC.  I think he misunderstood the ticket and made it overcomplicated.  Basically what it is: a delayed recipient list.  eg you have a message at hand  and what you want to do is: send this message to X endpoint in Y time from now. Its a one-shot message  so it should not repeat or do anything like that.  A use case could be that you process a message  and in 5 min from now you want something to happen. So you can send a message to a timer with +5 min with some payload and tell it to send it to a route  which then routes that message  5 min from now.  Does it make sense?. If we use quarz then it has the ability to persist jobs  so that means you would be able to survive crashes or restarts. If we use the JDK timer its pure memory based.  But I think we should start simple and implement it on the JDK timer first. Then later on quartz when we got it right. I just was cherry picking Jiras pretty randomly. I didn't know about delayer. That does everything I had in my timer code and I think fits James' intent.  Oh well  I did learn a ton playing with different ways to do it.. @Tracy  you did the right thing  I personally appreciate that and your effort is noted.  I am yet to see a credible usecase. My questions 4 and 5 are not yet answered. My question 2 was a dumb question  the answer was in the repeatCount.  I would suggest we either close this issue with a "won't fix" or discuss and define what exactly we want to do. To me it's far from clear. My understanding is that the problem we are trying to solve is scheduled delivery. For instance  I buy Claus a nice watch and send it via DHL  but schedule it to only be delivered on his birthday. DHL (which as far as I know does not provide this kind of service) will act as a store and forward system  take custody of the package  but only deliver at the scheduled time. It's a bit tricky to implement  because it's harder to predict the resources needed. Amazon on the other hand does offer such a service (even with a repeat count). You can place a recurring order (K-cups for your Keurig brewer for instance) and they will be delivered  like clockwork at the scheduled time.  I believe that can be implemented already with camel and I we could have an example demonstrated that. Or it could give us a better idea of what's missing. If I misunderstood and this jira was created with a different scenario in mind  please comment.. Closing old tickets which has no activity. 
Bug,Claus Ibsen,2008-09-17T12:26:38+0000,1221654398,Currently the Maven Plugin attempts to load Camel Routes from both target/classes and target/test-classes.  This causes an issue when you have the same package defined for testing as you have in your Camel Context.  An example problem is using a super class for a test which is only available a test dependency which results in a ClassNotFoundException.  I would propose one of the following:   	Prevent the plugin from using target/test-classes altogther 	Add a mojo parameter to allow for routes under test-classes to be scanned 	 		This should default to False 		If this parameter is set to True then the plugin should add dependencies marked as "test" to the classpath,See http://www.nabble.com/Camel-Maven-Plugin-looking-in-test-classes-td19530527s22882.html. It also seems to be using classpath resources from src/test/resources such as log4j configs.. I will go for option #1.  It looks like it adds the test classes. But neither resources  so that should be added.  I actually doubt that we should add anything from the test? Is an option needed then afterall?. Martin I have commited a fix for this. Now the test-classes is not added to the classpath.  Can you test it? You need to use version 1.5-SNAPSHOT of the plugin. And to add the maven plugin snapshot repo to your maven repo.      <pluginRepositories>         <pluginRepository>             <id>apache-plugin-snapshots</id>             <name>Apache Maven Plugins Snapshot Repository</name>             <url>http://people.apache.org/maven-snapshot-repository</url>             <snapshots>                 <enabled>true</enabled>             </snapshots>             <releases>                 <enabled>false</enabled>             </releases>         </pluginRepository>     </pluginRepositories>. A reminder to myself. Check if test scoped .jar is added as well  they should not.. Okay I have refined it to not include test scoped jars as well.  Also I have added a INFO logging with the classpath resolved just as mvn jetty:run also does. So now end-users can see the classpath when they using this tool.  Martin  let me know how it goes for you.. I have tested the same project and can confirm that it only attempts to load routes from target/classes now  which is fantastic.  However I do not see any INFO logging statements about the classpath. In fact one issue is that without a log4j.properties/xml in src/main resources the only message that the plugin prints out is: [INFO] [camel:run] At first I wasn't even sure if Camel had completed startup. I think a INFO statement saying "Camel route creation complete" or similar would be useful if possible.  When I add a log4j config with the root level set to DEBUG you can nicely see the details of the routes that are being created. I will add this to the wiki page as it is very useful info to see when prototyping your app.. Thanks Martin  The INFO logging of classpath is recent added  so you have to wait until the Apache INFRA has build a new snapshot of the plugin. Wait X hours and try again. It should then have the classpath logged just as jetty does it.  eg a sample from running the spring example on my local laptop  [INFO] [camel:run] [INFO] Classpath = [file:/D:/project/camel/examples/camel-example-spring/target/classes/  file:/C:/Documents and Settings/Claus Ibsen/.m2/repository/org/apache/camel/camel-spring/1.5-SNAPSHOT/camel-spring-1.5-SNAPSHOT.jar  file:/C:/Documents and Settings/Claus Ibsen/.m2/repository/org/apache/camel/c amel-core/1.5-SNAPSHOT/camel-core-1.5-SNAPSHOT.jar  file:/C:/Documents and Settings/Claus Ibsen/.m2/repository/commons-logging/commons-logging-api/1.1/commons-logging-api-1.1.jar  file:/C:/Documents and Settings/Claus Ibsen/.m2/repository/javax/xml/bind/jaxb-api/2.1/jaxb-api-2.1.jar  file:/C:/Docume nts and Settings/Claus Ibsen/.m2/repository/javax/xml/stream/stax-api/1.0-2/stax-api-1.0-2.jar  file:/C:/Documents and Settings/Claus Ibsen/.m2/repository/javax/activation/activation/1.1/activation-1.1.jar  file:/C:/Documents and Settings/Claus Ibsen/.m2/repository/com/sun/xml/bind/jaxb-impl/2.1.6/j axb-impl-2.1.6.jar  file:/C:/Documents and Settings/Claus Ibsen/.m2/repository/org/springframework/spring-core/2.5.5/spring-core-2.5.5.jar  file:/C:/Documents and Settings/Claus Ibsen/.m2/repository/commons-logging/commons-logging/1.1.1/commons-logging-1.1.1.jar  file:/C:/Documents and Settings/Clau s Ibsen/.m2/repository/org/springframework/spring-context/2.5.5/spring-context-2.5.5.jar  file:/C:/Documents and Settings/Claus Ibsen/.m2/repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar  file:/C:/Documents and Settings/Claus Ibsen/.m2/repository/org/springframework/spring-beans/2.5.5/spri ng-beans-2.5.5.jar  file:/C:/Documents and Settings/Claus Ibsen/.m2/repository/org/springframework/spring-tx/2.5.5/spring-tx-2.5.5.jar  file:/C:/Documents and Settings/Claus Ibsen/.m2/repository/org/springframework/spring-aop/2.5.5/spring-aop-2.5.5.jar  file:/C:/Documents and Settings/Claus Ibsen/.m 2/repository/org/apache/camel/camel-jms/1.5-SNAPSHOT/camel-jms-1.5-SNAPSHOT.jar  file:/C:/Documents and Settings/Claus Ibsen/.m2/repository/org/springframework/spring-jms/2.5.5/spring-jms-2.5.5.jar  file:/C:/Documents and Settings/Claus Ibsen/.m2/repository/commons-pool/commons-pool/1.4/commons-pool -1.4.jar  file:/C:/Documents and Settings/Claus Ibsen/.m2/repository/org/springframework/spring-context-support/2.5.5/spring-context-support-2.5.5.jar  file:/C:/Documents and Settings/Claus Ibsen/.m2/repository/org/apache/geronimo/specs/geronimo-jms_1.1_spec/1.1.1/geronimo-jms_1.1_spec-1.1.1.jar  fi le:/C:/Documents and Settings/Claus Ibsen/.m2/repository/org/apache/geronimo/specs/geronimo-jta_1.1_spec/1.1.1/geronimo-jta_1.1_spec-1.1.1.jar  file:/C:/Documents and Settings/Claus Ibsen/.m2/repository/org/apache/activemq/activemq-core/5.1.0/activemq-core-5.1.0.jar  file:/C:/Documents and Settings/ Claus Ibsen/.m2/repository/org/apache/activemq/activeio-core/3.1.0/activeio-core-3.1.0.jar  file:/C:/Documents and Settings/Claus Ibsen/.m2/repository/backport-util-concurrent/backport-util-concurrent/2.1/backport-util-concurrent-2.1.jar  file:/C:/Documents and Settings/Claus Ibsen/.m2/repository/or g/apache/geronimo/specs/geronimo-j2ee-management_1.0_spec/1.1/geronimo-j2ee-management_1.0_spec-1.1.jar  file:/C:/Documents and Settings/Claus Ibsen/.m2/repository/org/apache/activemq/activeio-core/3.1.0/activeio-core-3.1.0-tests.jar] 2008-09-18 12:06:21 org.apache.camel.spring.Main doStart INFO: Apache Camel 1.5-SNAPSHOT starting. Thanks Claus  I will be testing this app over the next few days so it should appear at some point. I have updated the wiki about this change.. Closing all 1.5.0 issues. 
Improvement,Unassigned,2008-09-17T16:48:50+0000,1221670130,It would be nice if users of the camel-http and camel-jetty components could easily configure endpoints to use a custom HeaderFilterStrategy.  This could be done through Spring injection or configuration information in the URI for the route.  See http://www.nabble.com/Proxying-web-services-tt19498936s22882.html#a19536118,CAMEL-911 is the original request.. You can do this in Camel 2.0 in the URI by using the # syntax for lookup in the registry.  from(x).to("http://somesever/myapp?headerFilterStrategy=#myStrategy");. Closing all 2.0M2 tickets. 
New Feature,Unassigned,2008-09-17T17:02:38+0000,1221670958,The current camel-jetty component starts up a new Jetty server instance to host listeners for producing endpoints.  It would be nice if  in an OSGi environment  there were a component that uses the OSGi HttpService to create a producing endpoint instead.  One of the restrictions over this component would be that the end user would not be able to configure the port number in the URI as the HttpService uses the system property org.osgi.services.http.port to determine the port setting.  Use case: I should be able to configure a route in a manner similar to camel-jetty:  ... from("osgi-http:localhost:8192/services/myservice").     .to(...) ...  The host name (or address) and port number would necessarily be ignored.  See http://www.nabble.com/Proxying-web-services-tt19498936s22882.html#a19536118,See the new camel-servlet component which may be useable for you http://camel.apache.org/servlet.html. I'd like to close this issue  as the camel-servlet component support to use the HttpService Here is a helper activator[1] to do registrer work.  [1]https://svn.apache.org/repos/asf/camel/trunk/tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/servlet/support/ServletActivator.java. 
Improvement,Willem Jiang,2008-09-18T02:04:54+0000,1221703494,We should leverage the Camel's exception handler to processing the exceptions. When camel-cxf component working as the proxy router  we need to configure the DeadLetterChannel for ignoring the soap fault.,TODO need to update the wiki page for this change of camel-cxf. Updated the camel 1.5 release note.. Closing all 1.5.0 issues. 
Improvement,Unassigned,2008-09-18T18:49:03+0000,1221763743,,more details in this thread http://www.nabble.com/Headers-in-XSLT-tp19552778s22882p19556970.html. Closing 2.0m1 tickets. 
Bug,Claus Ibsen,2008-09-19T06:52:10+0000,1221807130,Suspected reason: Looking at the code reveals that the initalization of the routebuilder actually sets the routes in the injected CamelContext  but does not populate the local list of routes.   Consequence: One is not able to replace routes in the CamelContext by fetching routes from routebuilders  and then set the list of routes in the camel context.     List<Routes> routeList = new ArrayList();  //Some method fetching all my builders List<Routes> routesList = getRouteBuilders();  //Build a list of all routes  thereby updating my camel context with fresh routes... for(Routes routes:routesList){      //Fetches an empty list  but the builder now sets the route in the context     List<Route> routeListFromBuilder = routes.getRouteList();      //I am now adding an empty list to my list of routes     routeList.addAll( routeListFromBuilder );  }  //Sets an empty list into the context  thereby clearing all routes camleContext.setRoutes( routeList );       Possible solution:  in RouteBuilder replace:  protected void populateRoutes(List<Route> routes) throws Exception {         CamelContext camelContext = getContext();         if (camelContext == null) {             throw new IllegalArgumentException("No CamelContext has been injected!");         }         routeCollection.setCamelContext(camelContext);         camelContext.addRouteDefinitions(routeCollection.getRoutes()); }   with  protected void populateRoutes(List<Route> routes) throws Exception {         CamelContext camelContext = getContext();         if (camelContext == null) {             throw new IllegalArgumentException("No CamelContext has been injected!");         }         routeCollection.setCamelContext(camelContext);         routes.addAll(routeCollection.getRoutes()); },Thanks for reporting this.  The Route is hardly used in Camel as we use the model RoutesType to build the route paths.. Hardly used by end-users I mean. End-users usually add the routing using a route builder that uses the models. But I think I got it fixed now.. Currently Camel doesn't properly support removing existing routes and adding new dynamically. This is scheduled for Camel 2.x.  You should use the camelContext.addRoutes(routeList) to add you new routes to an existing context.  At present time we can not add a fix for this as it will break to much at current time.. I will cleanup the unused routes in RouteBuilder and add a throws UnsupportedOperationException for setRoutes in CamelContext.. Changing to fixed.. Notice that you should use addRoutes. setRoutes is not possible until Camel 2.x. Closing all 1.5.0 issues. 
Bug,Claus Ibsen,2008-09-19T08:47:15+0000,1221814035,file component consumer.regexPattern does not work as expected  example : from("file://d:/the_input_dir?consumer.regexPattern=.*\.xml$".to(whatever)  (should match only files  that has extention .xml)  the result of the above regexPattern is  that no file will be proccessed  regardless if an existing filename matches the pattern. FileConsumer.pollFileOrDirectory() applies the regexPattern on the starting directory (the_input_dir) which will not match.,Will look into it this weekend.. Well is there any use cases for being able to exclude/regex directories also? I doubt it  I will change the matching to be files only except that any directories starting with a "." (dot) will also be skipped.. Remember the FTP component could have similar problem. TODO: update wiki that directories is not matched against against regexp or exclude names etc. TODO: Only directories starting with a dot (.) is skipped. Dario  if you please try the latest snapshot to test if the fix works for you.. It works  many thanks. 
Bug,Willem Jiang,2008-09-19T10:25:31+0000,1221819931,java.io.FileNotFoundException: /org/apache/camel/converter (No such file or directory)         at java.io.FileInputStream.open(Native Method)         at java.io.FileInputStream.<init>(FileInputStream.java:106)         at org.apache.camel.util.ResolverUtil.loadImplementationsInJar(ResolverUtil.java:476)         at org.apache.camel.util.ResolverUtil.find(ResolverUtil.java:362)         at org.apache.camel.util.ResolverUtil.find(ResolverUtil.java:277)         at org.apache.camel.util.ResolverUtil.findAnnotated(ResolverUtil.java:253)         at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.load(AnnotationTypeConverterLoader.java:66)         at org.apache.camel.impl.converter.DefaultTypeConverter.checkLoaded(DefaultTypeConverter.java:218)         at org.apache.camel.impl.converter.DefaultTypeConverter.convertTo(DefaultTypeConverter.java:64)         at org.apache.camel.util.IntrospectionSupport.convert(IntrospectionSupport.java:216)         at org.apache.camel.util.IntrospectionSupport.setProperty(IntrospectionSupport.java:194)         at org.apache.camel.util.IntrospectionSupport.setProperties(IntrospectionSupport.java:167)         at org.apache.camel.impl.DefaultComponent.setProperties(DefaultComponent.java:181)         at org.apache.camel.component.timer.TimerComponent.createEndpoint(TimerComponent.java:54)         at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:81)         at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:253)         at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:52)         at org.apache.camel.model.RouteType.resolveEndpoint(RouteType.java:100)         at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:102)         at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:108)         at org.apache.camel.model.FromType.resolveEndpoint(FromType.java:73)         at org.apache.camel.impl.DefaultRouteContext.getEndpoint(DefaultRouteContext.java:77)         at org.apache.camel.model.RouteType.addRoutes(RouteType.java:214)         at org.apache.camel.model.RouteType.addRoutes(RouteType.java:90)         at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:520)         at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:512)         at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:149)         at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:47)         at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:103)         at org.springframework.context.event.SimpleApplicationEventMulticaster$1.run(SimpleApplicationEventMulticaster.java:78)         at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:49)         at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:76)         at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:275)         at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:737)         at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:384)         at org.apache.servicemix.common.xbean.AbstractXBeanDeployer.deploy(AbstractXBeanDeployer.java:86)         at org.apache.servicemix.camel.CamelSpringDeployer.deploy(CamelSpringDeployer.java:71)         at org.apache.servicemix.common.BaseServiceUnitManager.doDeploy(BaseServiceUnitManager.java:88)         at org.apache.servicemix.common.BaseServiceUnitManager.deploy(BaseServiceUnitManager.java:69)         at org.apache.servicemix.jbi.deployer.impl.ServiceUnitImpl.deploy(ServiceUnitImpl.java:89)         at org.apache.servicemix.jbi.deployer.impl.Deployer.deployServiceAssembly(Deployer.java:306)         at org.apache.servicemix.jbi.deployer.impl.Deployer.register(Deployer.java:170)         at org.apache.servicemix.jbi.deployer.impl.AbstractBundleWatcher.onBundleStarted(AbstractBundleWatcher.java:80)         at org.apache.servicemix.jbi.deployer.impl.AbstractBundleWatcher.access$000(AbstractBundleWatcher.java:34)         at org.apache.servicemix.jbi.deployer.impl.AbstractBundleWatcher$1.bundleChanged(AbstractBundleWatcher.java:53)         at org.apache.felix.framework.util.EventDispatcher.invokeBundleListenerCallback(EventDispatcher.java:690)         at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:619)         at org.apache.felix.framework.util.EventDispatcher.fireBundleEvent(EventDispatcher.java:532)         at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:3601)         at org.apache.felix.framework.Felix._startBundle(Felix.java:1616)         at org.apache.felix.framework.Felix.startBundle(Felix.java:1544)         at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:371)         at org.apache.servicemix.kernel.filemonitor.FileMonitor.refreshPackagesAndStartOrUpdateBundles(FileMonitor.java:550)         at org.apache.servicemix.kernel.filemonitor.FileMonitor.onFilesChanged(FileMonitor.java:297)         at org.apache.servicemix.kernel.filemonitor.FileMonitor$1.filesChanged(FileMonitor.java:140)         at org.apache.servicemix.kernel.filemonitor.Scanner.reportBulkChanges(Scanner.java:433)         at org.apache.servicemix.kernel.filemonitor.Scanner.reportDifferences(Scanner.java:322)         at org.apache.servicemix.kernel.filemonitor.Scanner.scan(Scanner.java:254)         at org.apache.servicemix.kernel.filemonitor.Scanner$1.run(Scanner.java:214)         at java.util.TimerThread.mainLoop(Timer.java:512)         at java.util.TimerThread.run(Timer.java:462) 18:10:15 452 | ERROR | Timer-1          | ResolverUtil                     | g.apache.camel.util.ResolverUtil  489 | Could not search jar file '/org/apache/camel/converter' for classes matching criteria: annotated with @Converter due to an IOException: /org/apache/camel/converter (No such file or directory) java.io.FileNotFoundException: /org/apache/camel/converter (No such file or directory)         at java.io.FileInputStream.open(Native Method)         at java.io.FileInputStream.<init>(FileInputStream.java:106)         at org.apache.camel.util.ResolverUtil.loadImplementationsInJar(ResolverUtil.java:476)         at org.apache.camel.util.ResolverUtil.find(ResolverUtil.java:362)         at org.apache.camel.util.ResolverUtil.find(ResolverUtil.java:277)         at org.apache.camel.util.ResolverUtil.findAnnotated(ResolverUtil.java:253)         at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.load(AnnotationTypeConverterLoader.java:66)         at org.apache.camel.impl.converter.DefaultTypeConverter.checkLoaded(DefaultTypeConverter.java:218)         at org.apache.camel.impl.converter.DefaultTypeConverter.convertTo(DefaultTypeConverter.java:64)         at org.apache.camel.util.IntrospectionSupport.convert(IntrospectionSupport.java:216)         at org.apache.camel.util.IntrospectionSupport.setProperty(IntrospectionSupport.java:194)         at org.apache.camel.util.IntrospectionSupport.setProperties(IntrospectionSupport.java:167)         at org.apache.camel.impl.DefaultComponent.setProperties(DefaultComponent.java:181)         at org.apache.camel.component.timer.TimerComponent.createEndpoint(TimerComponent.java:54)         at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:81)         at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:253)         at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:52)         at org.apache.camel.model.RouteType.resolveEndpoint(RouteType.java:100)         at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:102)         at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:108)         at org.apache.camel.model.FromType.resolveEndpoint(FromType.java:73)         at org.apache.camel.impl.DefaultRouteContext.getEndpoint(DefaultRouteContext.java:77)         at org.apache.camel.model.RouteType.addRoutes(RouteType.java:214)         at org.apache.camel.model.RouteType.addRoutes(RouteType.java:90)         at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:520)         at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:512)         at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:149)         at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:47)         at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:103)         at org.springframework.context.event.SimpleApplicationEventMulticaster$1.run(SimpleApplicationEventMulticaster.java:78)         at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:49)         at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:76)         at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:275)         at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:737)         at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:384)         at org.apache.servicemix.common.xbean.AbstractXBeanDeployer.deploy(AbstractXBeanDeployer.java:86)         at org.apache.servicemix.camel.CamelSpringDeployer.deploy(CamelSpringDeployer.java:71)         at org.apache.servicemix.common.BaseServiceUnitManager.doDeploy(BaseServiceUnitManager.java:88)         at org.apache.servicemix.common.BaseServiceUnitManager.deploy(BaseServiceUnitManager.java:69)         at org.apache.servicemix.jbi.deployer.impl.ServiceUnitImpl.deploy(ServiceUnitImpl.java:89)         at org.apache.servicemix.jbi.deployer.impl.Deployer.deployServiceAssembly(Deployer.java:306)         at org.apache.servicemix.jbi.deployer.impl.Deployer.register(Deployer.java:170)         at org.apache.servicemix.jbi.deployer.impl.AbstractBundleWatcher.onBundleStarted(AbstractBundleWatcher.java:80)         at org.apache.servicemix.jbi.deployer.impl.AbstractBundleWatcher.access$000(AbstractBundleWatcher.java:34)         at org.apache.servicemix.jbi.deployer.impl.AbstractBundleWatcher$1.bundleChanged(AbstractBundleWatcher.java:53)         at org.apache.felix.framework.util.EventDispatcher.invokeBundleListenerCallback(EventDispatcher.java:690)         at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:619)         at org.apache.felix.framework.util.EventDispatcher.fireBundleEvent(EventDispatcher.java:532)         at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:3601)         at org.apache.felix.framework.Felix._startBundle(Felix.java:1616)         at org.apache.felix.framework.Felix.startBundle(Felix.java:1544)         at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:371)         at org.apache.servicemix.kernel.filemonitor.FileMonitor.refreshPackagesAndStartOrUpdateBundles(FileMonitor.java:550)         at org.apache.servicemix.kernel.filemonitor.FileMonitor.onFilesChanged(FileMonitor.java:297)         at org.apache.servicemix.kernel.filemonitor.FileMonitor$1.filesChanged(FileMonitor.java:140)         at org.apache.servicemix.kernel.filemonitor.Scanner.reportBulkChanges(Scanner.java:433)         at org.apache.servicemix.kernel.filemonitor.Scanner.reportDifferences(Scanner.java:322)         at org.apache.servicemix.kernel.filemonitor.Scanner.scan(Scanner.java:254)         at org.apache.servicemix.kernel.filemonitor.Scanner$1.run(Scanner.java:214)         at java.util.TimerThread.mainLoop(Timer.java:512)         at java.util.TimerThread.run(Timer.java:462),Closing all 1.5.0 issues. 
Bug,Hadrian Zbarcea,2008-09-19T16:06:50+0000,1221840410,I mentioned a while ago a warning I couldn't explain in eclipse related to the use of @UniqueConstraint in camel-jpa.  It turned out to be due to the fact that camel-jpa has a dependency on persistence api  but used for testing openjpa that has a dependency on geronimo-jpa_3.0_spec.  So camel-jpa pulls in two different implementation of the same spec.  So far so good.  It also turns out that the definition of the @UniqueConstraint annotation is different in the two jars  the persistence-api (and the camel-jpa code as implemented) being non spec compliant.  I found other inconsistencies in the persistence-api impl and it seems to be based on an older version of the spec.  (More precisely persistence api annotates the @interface UniqueConstraint with @Target( {TYPE} ) whereas the spec and the geronimo impl use: @Target({}))  My recommendation is to replace the dependency on persistence-api with the geronimo version.  I will commit a change for this in the next hour or so  but leave this issue open.  If anybody has any objections please shout and I will revert the change.,+1  maybe set the version of the dependency as a property in the uber pom.xml. Its a good overview of all the deps we commonly use and easy to upgrade to a newer version.. Thanks Claus. Yeah  the version stuff is already done that way .. Closing all 1.5.0 issues. 
Sub-task,Jonathan Anstey,2008-09-19T17:50:31+0000,1221846631,,Fixed in revision 697170.. Closing all 1.5.0 issues. 
Bug,Willem Jiang,2008-09-19T20:46:12+0000,1221857172,Related nabble: http://www.nabble.com/xstream-marshalling-td19542712s22882.html  We need to fixate the xml writer created in camel-xstream via javax.xml.stream.XMLOutputFactory (we need xstream component in Jira). Otherwise factory falls into unpredictable writer and in case of com.sun.xml.internal.stream.XMLOutputFactoryImpl it refuses to work if file.encoding is set to something different then UTF-8.  May be propert implementation would be to attempt to use com.ctc.wstx.stax.WstxOutputFactory and if it fails  then produce a warning and use whatever is available.   Also for those who know what they are doing we can provide a setting in camel context which factory to use.,I think we need some kind of property you can set to use a fixed xml factory.  Vadim is there any API to set this? from a standard javax or from the XStream?. Willem could you take a look if this ticket is not related to yours?. I think this issue will not appear on JDK 1.5  since the stax API begin to be a part of JDK since 1.6. Here are the algorithm of XMLOutputFactory.newInstance() method determines the specific XMLInputFactory implementation class to load by using the following lookup procedure: 1. Use the javax.xml.stream.XMLOutputFactory system property. 2. Use the lib/xml.stream.properties file in the JRE directory. 3. Use the Services API  if available  to determine the classname by looking in the META-INF/services/javax.xml.stream.XMLOutputFactory files in jars available to the JRE. 4. Use the platform default XMLOutputFactory instance.  Since Camel just call the XStream lib to do the job  there is no explicate camel way(through URI) to do that  so I suggest you set the XMLOutputFactoryImpl as you want through upper ways (I prefer the system property way more).  TODO We need to add this into Camel FAQ.. Super work Willem.  I will add something to the wiki about how the factory is discovered in Java 1.5 then we can resolve this ticket.. Updated wiki  http://cwiki.apache.org/confluence/display/CAMEL/XStream. 
Bug,Claus Ibsen,2008-09-21T10:18:11+0000,1221992291,Currently it logs at WARN level that camel could not rename/delete the consumer file after processing.  However as end-users might not notice this "could be bigger problem" we should throw an IOException instead. PS: The File API is terrible as it returns a boolean of this operation (will be fixed in NIO2 with a much better API).  The bigger problem is that if you don't want to consume the file twice you should get a "exception" to track down the problem. WARN logs can be harder to track down.,Closing 1.5 issues. 
Improvement,Claus Ibsen,2008-09-21T17:37:09+0000,1222018629,The ScriptBuilder has nice DSL for all the supported languages except BeanShell. We might as well add the DSL for it.   Isn't beanshell a included script language in Java6? Or I am mistaking?,need to add use b5 of beanshell  <groupId>org.beanshell</groupId> <artifactId>bsh</artifactId> <version>2.0b5</version>  This is the one that is supported by SUN https://scripting.dev.java.net/  However the bsh-engine <groupId>com.sun.script</groupId> <artifactId>bsh-engine</artifactId> <version>20080611</version>  doens't support beanshell scripts on java5 yet.  java.lang.Error: unimplemented at bsh.engine.BshScriptEngine.compile(BshScriptEngine.java:175) at bsh.engine.BshScriptEngine.compile(BshScriptEngine.java:154) at org.apache.camel.builder.script.ScriptBuilder.compileScript(ScriptBuilder.java:515) at org.apache.camel.builder.script.ScriptBuilder.checkInitialised(ScriptBuilder.java:493) at org.apache.camel.builder.script.ScriptBuilder.getEngine(ScriptBuilder.java:421). bsh v2.0b5. Added beanShell as Expression as well so we can use it just as all the other languages.. Upgraded to bsh 2.0b5. Gert was so kind to add it to the servicemix repo. Closing 1.5 issues. 
Bug,Claus Ibsen,2008-09-22T06:09:04+0000,1222063744,Turn trace on. Run this route: 		from("timer://kickoff_1?period=10000&delay=1"); As expected there is output from Trace Interceptor every 10 sec.  Now run this route: 		from("timer://kickoff_1?period=10000&delay=1"). 		from("timer://kickoff_2?period=10000&delay=2"); You will get exception: 2008-09-22 06:03:01 871 [d=10000&delay=2] INFO  TraceInterceptor               - ID-ubuntu/50540-1222063381751/2-1 -> interceptor1 Interceptor[Delegate(null)] InOnly Properties: {org.apache.camel.timer.name=kickoff_2  org.apache.camel.timer.firedTime=Mon Sep 22 06:03:01 GMT 2008  org.apache.camel.timer.period=10000}  Headers: {firedTime=Mon Sep 22 06:03:01 GMT 2008}  BodyType:null Body:Message: null 2008-09-22 06:03:01 872 [d=10000&delay=2] ERROR DeadLetterChannel              - Failed delivery for exchangeId: ID-ubuntu/50540-1222063381751/0-0. On delivery attempt: 0 caught: java.lang.NullPointerException java.lang.NullPointerException 	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:69) 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:41) 	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:50) 	at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:50) 	at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:79) 	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:67) 	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:69) 	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:174) 	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:96) 	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:57) 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:41) 	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:50) 	at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:50) 	at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:79) 	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:67) 	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:43) 	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:39) 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:41) 	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:66) 	at org.apache.camel.component.timer.TimerConsumer.sendTimerExchange(TimerConsumer.java:98) 	at org.apache.camel.component.timer.TimerConsumer$1.run(TimerConsumer.java:49) 	at java.util.TimerThread.mainLoop(Timer.java:512) 	at java.util.TimerThread.run(Timer.java:462)   Why single input works fine and two produce an exception?,Vadim I have tried to reproduce the bug with an unit test. camel-core\src\test\java\org\apache\camel\issues\TwoTimerWithJMSIssue.java I can not provoke the error.  Can you get the error every time? What is your route  isn't there any destination from the timer? = i.e. there is no TO. I upgraded to the current trunk and I still see exception every time I run it. Claus  there is a bug in the unit test: in my 2nd example two routes are concatenated by dot  not by semicolon. In other words it is a single java statement. Could you check it please? If you still can not reproduce it then I'll keep digging. Yes  when there is any output then double input works fine. I'm playing with my DSL and I'm testing weird combinations. Ah so you are actually making silly routes as:  from(x).from(y);   Okay then there could of course be some quirks.. Vadim and others  I think we should add a check in the builder when you do silly stacks so as: from().from()  we should raise an exception stating its not valid to do like this.  Any thoughts?  We have a few of those checks for other bad combos.. Ah of course you can stack inputs as well   so from().from() should basically be supported. But the don't have outputs and thus causes the bug. Ah the culprit is the JMX stuff that assumes that there is an output.. TODO: Add unit tests with multi inputs  from.from from(x  y). Well  I filed this bug not because I worry about selseless combo from().from(); but because I see some inconsistency in error handling.  In case of "from();" there is the same exception happen internally. A processor tries to call the next processor withing the chain and fails with NPE. This exception is intercepted and message is marked as "failed". But you can not see anything wrong logged to the console. But in case of double inputs  exception becomes visible. So I suspect that actually "from.from" produces correct behavior when "from" hides an error.  I don't think that "from.from" is totally bogus. Lets say we want to drain some data source and we are not interested in the result.  Am I right that processes shoud call this.proceed instead of calling next processor in the chain explicitly? Anyway  my concern is invisible exception in the single "from" case. There is still NPE happening  why I can't see it in the output?. Vadim  that is a valid use-case but I guess its seldom used.  However a NPE is a NPE and its in camel-core so we should fix it. It happends because of the JMX instruments the routing and assumes it can process it to the next in the chain.. Closing all 1.5.0 issues. 
Improvement,Willem Jiang,2008-09-22T09:42:41+0000,1222076561,You can use this property for the aggregator's completed predicate.  from("direct:aggregator").aggregator(header("cheese")  new BodyInAggregatingStrategy()).                 completedPredicate(header(Exchange.AGGREGATED_COUNT).isEqualTo(3)).to("mock:result");,Closing all 1.5.0 issues. 
Task,Gert Vanthienen,2008-09-23T06:06:03+0000,1222149963,See nabble: http://www.nabble.com/JBI-Operation-name-td19607533s22882.html,Should be documented at: http://activemq.apache.org/camel/jbi.html. Added information about the URI parameter (operation) and matching header property (jbi.operation) to the documentation page.. Closing all 1.5.0 issues. 
Improvement,Claus Ibsen,2008-09-23T07:45:02+0000,1222155902,the file expression language   file-producer: date and bean expressions are very usefull  but works only with a FileExchange.  example:    from("sftp://user@host//path?password=password&consumer.setNames=true").   .setHeader(FileComponent.HEADER_FILE_NAME  file("${date:now:yyyyMMMdd}.out"))    to("file://output_dir");  The above code will result in a ClassCastException  because the file expresssion language relies on having a FileExchange.  Proposal:    	move the date:now and bean: expression from file to simple 	let sftp send FileExchange  rather than DefaultExchange 	let the file expression language work with DefaultExchange (use header-entries instead of FileExchange.getFile())    With best regards  Dario,Daria a good idea.  bullet #1 is doable  and then the simple language in general will be improved with this feature +1  bullet #2 java.io.File is required for FileExchange so I doubt its easy to abstract a remote FTP file -1  bullet #3 as bullet #2 the file language needs access to java.io.File so you can use all the file methods such as: getName  getCanoicalName  getPath etc. -1. Dario I have given it some more though.  I think you are right about bullet #2 and #3 in that sense I would like Camel FileLanguage to support other file transports than just java.io.File. So I am thinking about introducing either some kind of Camel FileInfo interface that exposes methods for the information you can use in the file language and then have implementations for this in camel-core with java.io.File and in camel-ftp with the two FTP types for regular ftp and sftp.  I am not to keen on adding a bunch of headers with the file information to the message as just String values.. Hello Claus  thank you for your fast reply.  bullet #3 as bullet #2 the file language needs access to java.io.File so you can use all the file methods such as: getName  getCanoicalName  getPath etc.  The SFTP component allready can set the FileComponent.HEADER_FILE_NAME (consumer.setNames=true)   so it can be accessed in following steps. Why not set all the file attributes (like name  canonicalName  path  creationDate etc.) as headers and let the file expression language work with this headers. This would make it possible to "simulate" a file exchange from every component and route  also it would be possible to let a "virtual" file travel (with all its attributes) over any channel.  With best regards  Dario. Hello Claus   we edit this in paralel  so that i haven't seen your second answer before. By the way  ther is a small "bug"  my name is Dario. Ups sorry Daria is maybe a girls name   I will give the headers a 2nd thought. It is after all very flexible and friendly for future changes/new integrations.. Commited first part: move stuff from file language to simple language so we can do the date and bean on the simple language now.  Still to do the File parts to get rid of FileExchange. TODO: bean language as ${bean:MyBean} should be able to be used just as .bean(MyBeanClass.class} = just giving the classname and Camel will instantiate it automatically.. Added file:length as well. And file:absoute is renamed to file:absolute.path to be consistent.  I have added it as headers to the IN message using the Camel 2.0 style pattern. This allows us to let the ftp/sftp components as well use these headers and thus the file language support as well.. Closing all 1.5.0 issues. 
Improvement,Claus Ibsen,2008-09-23T12:07:24+0000,1222171644,When using imap  the mail component defaults should be to not delete incoming mail  and only process unread messages.,Atle  what if your suggestion is the default for all mail protocols? To keep it consistent?. Yes i agree. I mentioned imap in particular since users usually expect that the messages stay on the server (since that is the main motivation for using imap instead of pop3).  If the defaults are changed for all protocols  it should be accompanied with a a paragraph in the documentation that clearly states the delete / read behaviour. (wich is not the expected behaviour for pop3...). Atle  if you have a good default for the different protocols  pop3 imap  And maybe for sending as well  smtp  Then feel free to write them here. However I would be a bit confused if Camel would default to different settings depending if I had pop3 or imap. This is hard to guess / read.  However I do think that deleting=true is a bit to harsh  maybe its best to force end-users to configure this to true if the need it. However only processing unread mail is what I would like to be default  as I would not suspect consuming the same mail message again on next polling.. Yes  the defaults should be the same for all protocols  because even if pop3 is meant to download messages  it makes sense to tell the users of camel that "camel-mail does not delete your mail on the server  and only reads unread mail by default". Then the users can override this behavior if necessary.  defaults should be: deleteProcessedMessages = false processOnlyUnseenMessages = true. Yes  the defaults should be the same for all protocols  because even if pop3 is meant to download messages  it makes sense to tell the users of camel that "camel-mail does not delete your mail on the server  and only reads unread mail by default". Then the users can override this behavior if necessary.  defaults should be: deleteProcessedMessages = false processOnlyUnseenMessages = true. Thanks for reporting this. I have changed the defaults and updated the wiki and the release notes as well.. Closing all 1.5.0 issues. 
Sub-task,Jonathan Anstey,2008-09-23T13:27:01+0000,1222176421,,@Jon  For starters  removeOutHeader is not quite in the DSL  it's in the ProcessorBuilder. I would not deprecate removeOutHeader  I would remove it completely! You are right it doesn't make much sense  I doubt it is used  so deprecation (as a path to a better model) is not the better option imho. So yeah  get rid of it  deprecated or not.. It is actually in the DSL (see ProcessorType) but I do like the idea of removing it completely. No one could be depending on something that does nothing  could they?. +1 to remove. Removed removeOutHeader in revision 698544.. Also added a note about the removal in the Camel 1.5 release notes.. Closing all 1.5.0 issues. 
New Feature,Jonathan Anstey,2008-09-23T16:56:56+0000,1222189016,Add the Claim-Check EIP pattern to Camel allowing a process to store an out of band object and receive a claim ticket that can then be used by a later process to retrieve the object.    An example of this pattern is implemented in ActiveMQ via BlobMessages which allows out-of-band storage of a stream of data by HTTP  FTP  SCP or other protocols.  A benefit to the system is that you can allow data that cannot reasonably go into a message to be carried along with the message (by the claim ticket) and only retrieved when needed or appropriate.  Examples of that include overly large files that should not be routed to nodes that do not use the body of the file; or secure information that needs to be made available to nodes but not contained within the messaging system.,Jonathan have created it: http://camel.apache.org/claim-check.html. Closing 2.0m1 tickets. 
Bug,Willem Jiang,2008-09-24T01:59:20+0000,1222221560,http://www.nabble.com/Is-there-an-HTTPS-producer-endpoint--td19635772s22882.html,Closing all 1.5.0 issues. 
Improvement,Claus Ibsen,2008-09-24T11:54:45+0000,1222257285,Antother ESB product has this feature to set a delay pattern as:  Redelivered messages can be delayed before delivery; specify a list of delays in this form: [Nth redelivery: delay in ms]. E.g. 3:10; 5:100 causes 0 ms delay on the 1st  2nd redelivery  10 ms delay on the 3rd and 4th redelivery; 100 ms delay on each redelivery thereafter.  An example:: 3:1000;5:3000;10:5000;20:10000;30:30000  0-2 = 0 delay 3-4 = 1000 millis 5-9 = 3000 millis 10-19 = 5000 millis 20-29 = 10000 millis 30+ = 30000 millis,Committed revision 746489.. Closing 2.0m1 tickets. 
Task,Hadrian Zbarcea,2008-09-24T18:38:14+0000,1222281494,Add the 1.4.0 version of the spring schema http\://activemq.apache.org/camel/schema/spring/camel-spring-1.4.0.xsd=camel-spring.xsd to the list of camel schemas.,Closing all 1.5.0 issues. 
Sub-task,Jonathan Anstey,2008-09-25T16:44:48+0000,1222361088,,This method is actually deprecated  Please use convertBodyTo instead.. Closing all 1.5.0 issues. 
Bug,Willem Jiang,2008-09-26T07:46:52+0000,1222415212,I just found current Camel kit didn't include the manual doc in the bin distribution.,Closing all 1.5.0 issues. 
Bug,Jonathan Anstey,2008-09-26T12:15:24+0000,1222431324,,Just fixed a compile error in camel-core but also found two other errors:  1. In camel-spring  looks like the schemagen plugin doesn't work on AIX.  Error starting apt         at com.sun.tools.jxc.AptBasedTask$InternalAptAdapter.execute(AptBasedTask.java:68)         at com.sun.tools.jxc.AptBasedTask.compile(AptBasedTask.java:108)         at com.sun.tools.jxc.maven2.SchemaGenAdapter.execute(SchemaGenAdapter.java:111)         at com.sun.tools.jxc.maven2.SchemaGenMojo.execute(SchemaGenMojo.java:161)         at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:451)         ...         at org.codehaus.classworlds.Launcher.main(Launcher.java:375) Caused by: java.lang.ClassNotFoundException: com.sun.tools.apt.Main         at java.lang.Class.forName(Class.java:130)         at com.sun.tools.jxc.AptBasedTask$InternalAptAdapter.execute(AptBasedTask.java:52)   2. In camel-core I get this  org.apache.camel.builder.xml.InvalidXPathExpression: Invalid xpath: java:org.apache.camel.builder.xml.XPathTest.func(string(/header  value)). Reason: javax.xml.xpath.XPathExpressionException: org.apache.xpath.XPathException: Can not convert #STRING to a NodeList! at org.apache.camel.builder.xml.XPathBuilder.evaluateAs(XPathBuilder.java:443) at org.apache.camel.builder.xml.XPathBuilder.evaluate(XPathBuilder.java:110) at org.apache.camel.TestSupport.assertExpression(TestSupport.java:197) at org.apache.camel.builder.xml.XPathTest.assertExpression(XPathTest.java:84) at org.apache.camel.builder.xml.XPathTest.testUsingJavaExtensions(XPathTest.java:69) Caused by: javax.xml.xpath.XPathExpressionException: org.apache.xpath.XPathException: Can not convert #STRING to a NodeList! at org.apache.xpath.jaxp.XPathExpressionImpl.evaluate(XPathExpressionImpl.java:103) at org.apache.camel.builder.xml.XPathBuilder.evaluateAs(XPathBuilder.java:429) ... 30 more Caused by: org.apache.xpath.XPathException: Can not convert #STRING to a NodeList! at org.apache.xpath.objects.XObject.error(XObject.java:707) at org.apache.xpath.objects.XObject.nodelist(XObject.java:453) at org.apache.xpath.jaxp.XPathExpressionImpl.xObjectToObject(XPathExpressionImpl.java:226) at org.apache.xpath.jaxp.XPathExpressionImpl.evaluate(XPathExpressionImpl.java:91) ... 31 more   Looking into these issues now.. I think the only way to get around #1 would be to remove camel-spring from the build on AIX. The schema generation just isn't going to fly on that platform. Of course  we still need to test the camel-spring tests on AIX... I'm running these now.  I propose to have a separate project (under <camel-root>/tests perhaps) that would download camel-spring built elsewhere on another platform  and then just run the tests. This would be enabled only for AIX.. Fixed #2 in revision 700090. The test was supposed to be ignored when Xalan was not on the CP.. Disabled build of camel-spring/rest on AIX in revision 700186. Still working on getting the tests running for this.. Got the camel-spring/rest tests running by simply ignoring the schemagen plugin on AIX and downloading the last deployed xsd instead.. I'm taking a long weekend so I figured I would put up whats left to get Camel working on AIX.  1. LDAP not working LdapRouteTest.testLdapRoute (org.apache.camel.component.ldap)  ApacheDS seems to be using the SunX509 KeyManagerFactory directly  which is obviously not in the IBM JDK... not sure how were going to get around this besides patching Apache DS...  2. Ruby not working RubyExpressionTest.testSendMatchingMessage (org.apache.camel.builder.script) RubyExpressionTest.testSendNonMatchingMessage (org.apache.camel.builder.script) Jsr223Test.testLanguageNames (org.apache.camel.builder.script) RubyFilterTest.testSendMatchingMessage (org.apache.camel.builder.script.example)  and  org.apache.camel.ruby.RouteUsingNestedScopesTest file:/home/janstey/.m2/repository/org/jruby/jruby/1.1.4/jruby-1.1.4.jar!/builtin/javasupport.rb:47:in `require': IO error – builtin/java/regex (LoadError) from file:/home/janstey/.m2/repository/org/jruby/jruby/1.1.4/jruby-1.1.4.jar!/builtin/javasupport.rb:47 from file:/home/janstey/.m2/repository/org/jruby/jruby/1.1.4/jruby-1.1.4.jar!/builtin/javasupport.rb:17:in `require' from /x1/janstey/apache/camel/trunk/components/camel-ruby/target/classes/camel.rb:17 from /x1/janstey/apache/camel/trunk/components/camel-ruby/target/classes/camel.rb:17:in `require' from src/test/java/org/apache/camel/ruby/scopes.rb:17  Basically  all are failing to load the jruby library  3. Python test failing PythonLanguageTest.testLanguageExpressions (org.apache.camel.language.script)  At first glance  looks to be just a timing issue on slower machines. Should be an easy one.. I provided a fix to ApacheDS that resolves the camel-ldap failure (https://issues.apache.org/jira/browse/DIRSERVER-1279). We'll just need a new release of it to incorporate the fix in Camel. I'm thinking of putting up a patched ApacheDS 1.5.4 at repo.open.iona.com/maven2. Submitted a fix for the python test case in rev 706330.  Remaining issues:  jruby failing to load  camel should depend on a patched version of apache ds.. I did up my own release of ApacheDS with the aforementioned fix. Camel now depends on this version which works fine on AIX - yay!. Disabled ruby scripting tests for IBM JDK only. I think this issue is release notable since we have a bunch of other scripting languages to choose from. When this gets fixed in JRuby (JRUBY-3073) we should upgrade JRuby and enable the tests again. I'll create a JIRA reminder for this & update the 1.5 release notes.. Running final tests now with IBM JDK on AIX and Linux to see if any new issues cropped up.. I'm still getting some failures in my CI environment but everything passes when I run the same tests myself. I'm calling this task complete  for 1.5 too!   I'll investigate these CI environment issues offline.. Closing all 1.5.0 issues. 
Bug,Claus Ibsen,2008-09-27T06:29:51+0000,1222496991,Currently it will constantly poll without any support for delays etc.  We should extend ScheduledPollConsumer instead that has all the delay support  See nabble: http://www.nabble.com/Expected-behavior-of-Ibatis-delay-option.-td19678507s22882.html,Well I have been wrong here. We should actually use a timer or some other mechanism to trigger when to consume from iBatis. It does not support out-of-the-box to be scheduled to read from the database every 10th seconds etc.. I have updated the wiki with example how to use a scheduled polling with iBatis.. 
Sub-task,Claus Ibsen,2008-09-27T11:45:14+0000,1222515914,The FTP Component should add the CamelFileXXX headers to support the file language out-of-the-box. Also add some unit tests to verify this.,TODO: Add wiki documentation and write what file language headers is supported. Update wiki for file language to list what tokens is supported by file/ftp consumer/producer.. Closing 1.5 issues. 
Bug,Willem Jiang,2008-09-28T04:02:35+0000,1222574555,When I came across to fix the FileRouteToJMSTest failure  I found the JMSComponent can't handle the message header with the Data object rightly.  org.springframework.jms.MessageFormatException: Only objectified primitive objects  String  Map and List types are allowed but was: Sun Sep 28 09:52:36 CST 2008 type: class java.util.Date; nested exception is javax.jms.MessageFormatException: Only objectified primitive objects  String  Map and List types are allowed but was: Sun Sep 28 09:52:36 CST 2008 type: class java.util.Date 	at org.springframework.jms.support.JmsUtils.convertJmsAccessException(JmsUtils.java:273) 	at org.springframework.jms.support.JmsAccessor.convertJmsAccessException(JmsAccessor.java:168) 	at org.springframework.jms.core.JmsTemplate.execute(JmsTemplate.java:474) 	at org.springframework.jms.core.JmsTemplate.send(JmsTemplate.java:548) 	at org.apache.camel.component.jms.JmsProducer.process(JmsProducer.java:227) 	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:43) 	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:75) 	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:57) 	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:174) 	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:96) 	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:57) 	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:39) 	at org.apache.camel.component.file.FileConsumer.pollFile(FileConsumer.java:153) 	at org.apache.camel.component.file.FileConsumer.pollFileOrDirectory(FileConsumer.java:89) 	at org.apache.camel.component.file.FileConsumer.pollFileOrDirectory(FileConsumer.java:99) 	at org.apache.camel.component.file.FileConsumer.poll(FileConsumer.java:65) 	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:66) 	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:417) 	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:280) 	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:135) 	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:65) 	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:142) 	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:166) 	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675) 	at java.lang.Thread.run(Thread.java:595) Caused by: javax.jms.MessageFormatException: Only objectified primitive objects  String  Map and List types are allowed but was: Sun Sep 28 09:52:36 CST 2008 type: class java.util.Date 	at org.apache.activemq.command.ActiveMQMessage.checkValidObject(ActiveMQMessage.java:432) 	at org.apache.activemq.command.ActiveMQMessage.setObjectProperty(ActiveMQMessage.java:397) 	at org.apache.activemq.command.ActiveMQMessage.setObjectProperty(ActiveMQMessage.java:385) 	at org.apache.activemq.command.ActiveMQBytesMessage.setObjectProperty(ActiveMQBytesMessage.java:844) 	at org.apache.camel.component.jms.JmsBinding.appendJmsProperty(JmsBinding.java:254) 	at org.apache.camel.component.jms.JmsBinding.appendJmsProperties(JmsBinding.java:220) 	at org.apache.camel.component.jms.JmsBinding.makeJmsMessage(JmsBinding.java:198) 	at org.apache.camel.component.jms.JmsProducer$2.createMessage(JmsProducer.java:229) 	at org.springframework.jms.core.JmsTemplate.doSend(JmsTemplate.java:570) 	at org.springframework.jms.core.JmsTemplate$4.doInJms(JmsTemplate.java:551) 	at org.springframework.jms.core.JmsTemplate.execute(JmsTemplate.java:471) 	... 23 more,Closing all 1.5.0 issues. How was this fiexd? I also encountered the problem that it is not possible to send java.util.Date header via JMS. Must I enable something for this to work?. Do not comment on old tickets.  Use the mailing list / user forum / stackoverflow to ask this kind of question. 
Improvement,Willem Jiang,2008-09-28T04:08:55+0000,1222574935,Here is the discussion in the user thread http://www.nabble.com/Camel-HTTP-producer-successful-on-404--td19681729s22882.html  TODO When we need to update the wiki page before we resolve this issue.,Updated the release note of Camel 1.5.0.. Closing all 1.5.0 issues. 
Improvement,Claus Ibsen,2008-09-28T11:41:58+0000,1222602118,Currently the tracer also outputs interceptors such as delegation to the DLC that is wrapped in the pipeline.  Would be nice with an option to enable/disable this (disabled by default) so all the interceptors isn't logged and confuses end-users.,TraceInterceptor should be more easily configurable from Tracer. Updated wiki as well. Now you can configure Tracer.. TODO: Update wiki how to configure these new options / exposed options in spring XML DONE. Spring configuration of logginglevel should be easier  currently its an enum that can't be set using a String. Sorry it works  my bad. Closing 1.5 issues. 
Sub-task,Claus Ibsen,2008-09-29T08:42:36+0000,1222677756,Currently it will always log at org.apache.camel.XXX  We should allow end-users to set their own category so it can be appended and logged in their logs etc. As of now we have to potential enable camel logging when he need tracing.  It would be easier for him/her to just set a category such as: com.mycompany.messageflow,Updated wiki as well. The option is: logName. Closing 1.5 issues. 
Improvement,Unassigned,2008-09-29T12:17:19+0000,1222690639,We should improve the <package> or to allow setting 1..N classes instead or ref to spring ids. The <package> is sometimes a bit to "magic" for new users.   Also when doing unit testing it would be great to be sure only YOUR route is loaded and not all in the same package.,There is somekind of routebuilder ref you can add to ref to a single class.  However we could consider restrucutre the DSL a bit so the package / routebuilderef or what we call it is in a configuration element. We could move all the jmx and other stuff in that one too.  so you have a <configuration> element to start with where we can add all the weird camel stuff. And then have a more clean root element with fewer high level tags to select among.. Yeah  I like the configuration element idea. I was thinking this would be nice to have when I was putting the data formats into a dataFormats element. I held off making those changes because it would be a big change for users upgrading from 1.4. For 2.0 though  its fair game!. We will keep the current configuration as is.. Closing all 2.0M2 tickets. 
Sub-task,Jonathan Anstey,2008-09-29T18:10:16+0000,1222711816,The methodCall element does not match the method() call in Java. We should change 'methodCall' to 'method' in the Spiring DSL.  Java DSL: method(bean  method) Spring DSL: methodCall(bean  method)   See also http://activemq.apache.org/camel/bean-language.html,Fixed in revision 711642. Updated the bean language wiki page too.. Closing 2.0m1 tickets. 
Improvement,Willem Jiang,2008-09-30T06:16:24+0000,1222755384,e.g. we should include the tutorials  maybe some of the cook book and am sure there's other useful documentation to include - like the recent changes to XPath / XQuery and other languages. Maybe some reformatting is needed too - missing images and so forth.  The various sections of the book are  here in the wiki http://activemq.apache.org/camel/book.html  here is the entire book... http://activemq.apache.org/camel/book-in-one-page.html,1) Added cookbook and tutorials into the book page. 2) Fixed the missing images error 3) Added the Languages Appendix page. Closing all 1.5.0 issues. 
Improvement,Unassigned,2008-09-30T07:30:23+0000,1222759823,Support for multi-threaded  reliable resequencing has been discussed in http://www.nabble.com/forum/ViewPost.jtp?post=19344150&framed=y&skin=22882.,Martin is working on a patch.. Martin  if possible this feature should also supprt the aggregaor as well.  They both use BatchProcessor  so I guess it should be possible. The Resequencer EIP is due to an overhaul due community ask for support for persistence support. Then we can take a look at see what it takes to support something along the lines of the features we added to the aggregator EIP. 
Task,Claus Ibsen,2008-09-30T15:10:03+0000,1222787403,Beanshell as a scripting language should be marked for @deprecation. It can be used using the generic script DSL that accepts a language parameter.,Closing 1.5 issues. 
Task,Claus Ibsen,2008-10-01T06:06:25+0000,1222841185,The aggregator EIP is documented here: http://activemq.apache.org/camel/aggregator.html  However we should have more example and improved documentation how to use it.  	aggregate all exchanges into a combined exchange (aggregate collection) 	as the loan broaker  splitter -> aggregator to find the best "deal" 	and more    See nabble: http://www.nabble.com/How-to-use-Aggregator-and-AggregationCollection--td19739918s22882.html,Add an unit test to demonstrate how to use it  as we don't have one.. Added code changes  now I need to update the wiki.. Updated wiki  TODO: Using custom AggregationCollection example DONE  TODO: A new aggregation collection that batch everything by default TODO: Batch everything using a file example  TODO: Consider if the fluent builder should support the predicate  for easier configuration.. TODO: BatchProcessor should log at TRACE level to avoid log being spammed with 1 sec polling all the time DONE. The rest of the TODO has been postponed to Camel 2.0 in CAMEL-971.. Closing 1.5 issues. 
Improvement,James Strachan,2008-10-01T13:08:02+0000,1222866482,e.g. having sections   	injecting resources (endpoints  ProducerTemplate etc) 	consuming messages via @MessageDriven / @Consumes 	sending mesages (injecting ProducerTemplate via @EndpointInject or @Produces 	binding messages to method parameters and the use of expressions,see http://cwiki.apache.org/CAMEL/bean-integration.html. Closing all 1.5.0 issues. 
New Feature,James Strachan,2008-10-01T13:20:41+0000,1222867241,e.g.   class Cheese {    @RecipientList   String[] route(@Header("foo") bar) {        return new String[] { "file:/foo/" + bar };   } }    the method should return an object which can be converted to either a collection/array of something convertable to Endpoint/String or an object convertable to Endpoint/String,added an initial implementation and test case. see the documentation http://cwiki.apache.org/CAMEL/recipientlist-annotation.html. Closing all 1.5.0 issues. 
Improvement,James Strachan,2008-10-01T13:23:23+0000,1222867403,this pattern... http://www.enterpriseintegrationpatterns.com/DynamicRouter.html  needs adding to the catalogue  http://activemq.apache.org/camel/enterprise-integration-patterns.html  as its basically a dynamic recipient list... http://activemq.apache.org/camel/recipient-list.html  where a Java method is called to query a database / file / endpoint for the list of endpoints required.   We could also link to the CAMEL-953 as an implementation too as it can be implemented by using a Dynamic Recipient List,see http://cwiki.apache.org/CAMEL/dynamic-router.html. Closing all 1.5.0 issues. 
Improvement,Hadrian Zbarcea,2008-10-02T01:53:51+0000,1222912431,So that we can manages JMS endpoint for instance  that are not singletons.,Fix committed. Need to update documentation.  I'd also suggest deprecating addSingletonEndpoint() and removeSingletonEndpoint() and use add/removeEndpoint instead. The deprecated api's would just delegate to the new ones and would be removed in 2.0.. +1  Remember to update the 150 release notes about the API change on CamelContext. Release notes updated too.. Closing all 1.5.0 issues. 
Task,Unassigned,2008-10-02T08:33:57+0000,1222936437,we seem to have lots of javadoc warnings that need tidying up,fixed up the core javadoc for camel-core and camel-spring. Closing all 1.5.0 issues. 
Bug,Jonathan Anstey,2008-10-02T12:39:06+0000,1222951146,I'm getting the following error from camel-spring on the HP-UX platform. I should be able to reuse a fix I made to a similar problem in CAMEL-939  [18:53:50]: [ERROR] FATAL ERROR [18:53:50]: [INFO] ------------------------------------------------------------------------ [18:53:50]: [INFO] com/sun/mirror/apt/AnnotationProcessorFactory [18:53:50]: [INFO] ------------------------------------------------------------------------ [18:53:50]: [INFO] Trace [18:53:50]: java.lang.NoClassDefFoundError: com/sun/mirror/apt/AnnotationProcessorFactory [18:53:50]: at com.sun.tools.jxc.maven2.SchemaGenMojo.execute(SchemaGenMojo.java:143) [18:53:50]: at org.apache.maven.plugin.DefaultPluginManager.executeMojo(DefaultPluginManager.java:451),Committed a fix for this in revision 701109. I did need to get around this http://jira.codehaus.org/browse/MNG-1753 maven issue with a few duplicated plugins but its not too bad. Closing all 1.5.0 issues. 
Bug,Claus Ibsen,2008-10-02T14:31:50+0000,1222957910,The mail thread at http://tinyurl.com/47bqre seems to contradict the documentation at http://activemq.apache.org/camel/recipient-list.html – not sure if this is a doc issue  or a camel behavioural issue.,See nabble: http://www.nabble.com/Regarding-multiple-%3Cto..%3E-recipients-td19799388s22882.html  For more mistakes in wiki. About wiretab:  We state on the wiki doc that the tab gets the message before the destination. This can only be support as it currently does with the pipeline using to(tab  destination).  However the EIP page states its route as a recipient list.  I guess we should be safe and change the samples to use multicast.. Fixed the wiretab examples. Closing all 1.5.0 issues. 
Improvement,James Strachan,2008-10-02T16:25:04+0000,1222964704,currently there is no automatic transaction commit inside the send of the request when doing InOut with JMS; so the transaction won't commit if the component/endpoint is transacted - then the message won't reach the request and things will time out.  This will be confusing to users.  So if things are transacted; lets default to using non-transacted for InOut - and force a new property  transactedInOut to allow that to be transacted if folks really want that (which they usually won't I'd have thought).,For the Queue to Queue with InOut ExchangePattern   we will face another issue. If the transacted is set to be true but the transactedInOut is false  since we don't want to use the JMS transaction  do we still need to inject the JMSTransacationManager for the jms MessageListenerContainer ?  Since the jms consumer doesn't know the message exchange pattern  I'd like to change current JMSConfig to take consideration of transactedInOut and transacted flags at the same time. If they are all true  we can inject the transactionManager into the MessageListenerContainer  if any of them is false   we won't inject the transactionManger into MessageListenerContainer even the TransactionManager is configured into the JMSConfig.. This change just has a side effect   if you want to set use the transaction and JMSTransactionManager in camel-jms componnent   you need to set the transacted and transactedInOut all to be true.. Remember to update the wiki at: http://activemq.apache.org/camel/jms.html  At least update  add it as an option in the big list consider adding a h3. section about using transactedInOut to explain what it's used for. Maybe James can help with a good description and sample.  Willem see this patch for trunk  maybe it should be in 1.5.1 since this ticket is also target for 1.5.1 http://svn.apache.org/viewvc/activemq/camel/trunk/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsConfiguration.java?rev=719851&r1=719850&r2=719851&view=diff. Assigning this to James as he promised to update the camel-jms wiki page with a bit on this new transactedInOut option and why it's there.  Willem have commited the code.. have updated the JMS page... http://cwiki.apache.org/CAMEL/jms.html. User should avoid the situation of configure the same transaction manager for two jms component in the same route rule for the InOut message.   from("activemq:queue:mainStage?replyTo=queue:mainStage.reply").to("activemq:queue:request?replyTo=queue:request.reply");   If not   you will get transaction time out exception  since the message sending to the second queue will never be committed in a single local transaction.. Closing 2.0m1 tickets. 
Improvement,Hadrian Zbarcea,2008-10-06T07:19:18+0000,1223277558,Currently the DeadLetterChannel sets the orignal caused exception on the exchange after it has been failure handled. We should support somekind of option to enable/disable this feature. We could support:  	option on the endpoint to set this for all exchanges 	support a special header key that end-users can insert per exchange to be more dynamic 	maybe methods on Exchange to set this more easily 	maybe some refinements in isFailureHandled() to cater for this    And we should consider use a better keyname in the DLC where it stores the original exception.   See nabble: http://www.nabble.com/JMS-%2B-Fault-td19778503s22882.html  We might need to push this for Camel 2.0 but I think it is a feature that end-users would need sooner.  Any thoughts  please write here?,See this one as well: http://www.nabble.com/Exception-Handling-td19863662s22882.html. Hadrian did you start on this one? Its very important for 1.5? Otherwise I have time this weekend.. I think I can get this fixed pretty quickly  but I am not sure I understand the issue well. There is fairly good set of tests in ExceptionBuilderTest.java. From what I understand your point is that if one specifies something like:  onException(IOException.class).maximumRedeliveries(0).to("mock:handled"); from("direct:a").to("mock:result");   then the following code (which works today) is wrong:  try {   template.sendBody("direct:a"  "Hello world");   fail("Should have thrown a MyBusinessException"); } catch (RuntimeCamelException e) {   assertTrue(e.getCause() instanceof MyBusinessException);   // expected }   and RuntimeCamelException should not be thrown because the exception was actually handled in a satisfactory way. The test should only have:    MockEndpoint result = getMockEndpoint("mock:result");   result.expectedMessageCount(0);   MockEndpoint handled = getMockEndpoint("mock:handled");   handled.expectedMessageCount(1);    template.sendBody("direct:a"  "Hello world");   // no exception  mock:result does not get a message  mock: handled gets one  no redelivery attempts   result.assertIsSatisfied();   handled.assertIsSatisfied();   For other exceptions that are not specified in an onException statement  or if onException only modifies the redelivery policy  the behavior should stay the same  and the RuntimeCamelException is to be expected.  Is my understanding correct?. Hadrian  yes the unit test is what we want  but I do think that this behavior should be configurable from  a new fluent build syntax to indicate its handled. a special header on the message to indicate its handled (eg you can do some java coding in a processor and set that you handled it or not) onException should not handle it by default (but interesting thought) failureHandled fluent syntax also supports a predicate so you can use  So something like a failureHandled fluent builder  errorHandler(deadLetterChannel().maximumRedeliveries(3).failureHandled(true)   Also on the onException that I think is a cool feature  onException(IOException.class).maximumRedeliveries(0).failreHandled(true).to("mock:handled");   And to let end users do some java coding of their own and set a special header to indicate handled or not  onException(IOException.class).maximumRedeliveries(0).process(myFailureHandlerCode);  public class MyFailureHandlerCode implements Processor { ...    public void process(Exchange exchange) throws Exception {     .. // do something      // ah I can handle it so I set this special header     exchange.getIn().setHeader("CamelFailureHandled"  true); }   And with the predicate for the fluent builder  errorHandler(deadLetterChannel().maximumRedeliveries(3).failureHandled(header("CanIDoIt"))  errorHandler(deadLetterChannel().maximumRedeliveries(3).failureHandled(bean(CanIHandleThis.class))   Also supporting on the onException as well:  onException(IOException.class).maximumRedeliveries(0).failreHandled(bean(CanIHandleThis.class).to("mock:handled");   BTW: The fix should be in restoreExceptionOnExchange in DeadLetterChannel.. @Claus  but that is already possible today (with the exception of the failureHandled() api). What you added to my comment is that you want it explicit  not implicit. Correct? (I am on irc  btw)  One more question. If you want it explicit what should the default be? If it's handled by onException() should we throw the RuntimeCamelException by default (if failureHandled(boolean) is not invoked) or consider it handled?  RE: BTW: The fix should be in restoreExceptionOnExchange in DeadLetterChannel. Right  but i thought about not invoking restore... at all if this code above was executed (i.e. processor is not null) and there is no other exception:  if (processor != null) {   data.failureProcessor = processor; }. What should the default be for failureHandled? Currently it is false all the time.  So the caller will know that the exchange failed and what the caused exception was. If we set failureHandled=true as default then the caller will newer know this and not get a correct response either.  What we want to support with this is that you can change this and say it is OK and also set another response if you like  something like this:  onException(NoOrderException.class).maximumRedeliveries(0).failreHandled(true).transform(constant("No Order");   And the caller would get the "No Order" text as a response instead of a NoOrderException.. @Hadrian  No/yes its possible today  but we have a catch-22 situation where you have a route path using DLC and want it eg. to move a failued exchanges to a JMS queue.  errorHandler(deadLetterChannel().to("jms:failed"); from("jms:queue.a").to("bean:doSomething"  "jms:queue.b");   If you use transacted JMS then you can not handle the exchange currently in Camel. If bean:doSomething throws an Exception it is caught by the DLC that will try to failure handle it and move it to jms:failed. This is possible  but then it restoresTheOriginalException and then transaction handler in Camel will rethrow this and then the TX is marked for rollback.  So what we want is to alter the restoreExceptionOnExchange method in DeadLetterChannel  to NOT set the exception. But of course it should be configurable when to do this. @Claus  I got your point. I agree  the default should be false.  Again  the transform(...) is already possible. The only thing missing is the failureHandled() api  which could be actually implemented (I guess) to remove the FAILURE_HANDLED_PROPERTY property which contains the exception from the exchange. I'll probably use an expression there  not just a boolean. Piece of cake.  I think this fully solves the problem. Do we agree on the solution?. @Hadrian  if (processor != null) {   data.failureProcessor = processor; }   A good idea  however the default processor in DLC is a Logger that logs at ERROR  so the processor is by default != null. I don't think logging it at ERROR should be considered as handled. But yet again the default currently in Camel with DLC and TransctedExchanges etc. is up for a revision in Camel 2.0.  With your idea then the catch-22 from above will work. Could you try the change and see how many unit tests breaks. +1  just make sure the API also supports setting a boolean directly  not having to wrap it in a Expression such as constant(true) etc. that can be a bit confusing.. PS: I should have logged on IRC   but I usually dont do this before leaving for work.. @Claus  I think we agree on that.  [..] alter the restoreExceptionOnExchange method in DeadLetterChannel  to NOT set the exception  or removing the FAILURE_HANDLED_PROPERTY property will lead to the same thing: at the end of the day we don't what the exception back in the exchange if failureHandled(true) was invoked during handling  right?  I am just trying to avoid using extra headers. Maybe reset the value of FAILURE_HANDLED_PROPERTY to null  and then check that in restoreExceptionOnExchange()  not sure yet what works best  but the idea is to not put the exception back in the exchange. Agree?. Yeah  of course I'll put one method that takes a boolean  but I'll overload with something more flexible/dynamic too. I think we nailed this one. Thanks! I'll get it done first thing in the morning and I'll issue the 1.5 rc.. +1  Check out the DefaultExchange.isFailed() as we use this one to test if the exchange is OK or NOT.. Committed revision 703622.. Hadrian I think the fluent builder handled is needed on the DeadLetterChannelBuilder itself?  Now you can only let it be handled if you use the onException stuff.. Closing all 1.5.0 issues. 
Improvement,Hadrian Zbarcea,2008-10-06T08:30:31+0000,1223281831,We tried to setup a route where some exceptions where caught by the dead letter queue for retry and some exceptions where reported back to the jms message requester in an in-out exchange style request.  There are two problems with this. First: The dead letter queue is an all or nothing handler. There is currently no way to give some excludes to the handled exceptions. Second: Exceptions are not serialized and returned by the jms listener on reponse  but instead a camel runtime exception is logged and the jms request thread gets a timeout.  In the attached example the IOException should be returned to the jms:someQueue endpoint as answer to the request. All other exceptions should be handled by the dead letter queue.,Thanks for the test case! We highly appreciate when an issue is accompanied by code that demonstrates it. Makes our lives easier  and you'll get your issue resolved much faster.  I looked into this and made a couple of minor fixes but essentially all's the same. I don't really see a problem with the code  so let's see if I understand your issue properly.  There is a test: org.apache.camel.builder.ExceptionBuilderTest already in the trunk that is very similar to your test. The only significant difference is that in that test the onException() clause is followed by an alternate route  which I assume is what you intend to do (please see http://cwiki.apache.org/confluence/display/CAMEL/Exception+Clause).  I am a bit thrown off by the statement that "IOException should be returned to the jms:someQueue endpoint as answer to the request". from() specifies the url where a consumer would consume from  so returning something (especially with a polling consumer) won't mean much. The consumer creates an exchange that is passed down to the route to be handled. If an error arises the error handler is invoked no matter what (and you want it that way). What I understand you saying is that for some exceptions you need an alternate way of processing and exception() (well  that's deprecated  onException()) provides you the means to do just that.  What exactly do you want to happen if an IOException gets thrown? Am I missing something?. Can we close this one with a "won't fix"?  @Markus  I think CAMEL-960 will solve your problem.. No  it's not the same  and CAMEL-960 won't fix our problem. To be more specific  we tried to setup an InOut-Exchange using JMS as transport. If during the processing with camel an exception is thrown  then on the client side (which started the request) there is only a timeout. No way to identify what when wrong.  In our specific case the dead letter queue should catch some of the exceptions and do exception handling  while others should be reported back to the client to be handled there.. Exceptions or Exchange objects is not propagated over the JMS wire  only payload and primitive headers. The JMS spec is somewhat limitied what can be sent.  Are you using Camel on the client side as well?  If for instance the Exchange is sent over the wire as ObjectMessage then it requires that you have the same .class on the classpath on both the client and server side. And currently we do not have a eg. camel-jms-client.jar etc. or camel-client.jar.  What kind of response do you want to be returned when there has been a failure?  I will check if I can find the other related tickets on this issue.. Also if sending objects back over the JMS wire they must be serializable  but yet again exceptions tend to be that. But if you want to send an Exchange object back populated with payload  then the payload itself also must be serializable.. I'm new to JMS so I'm not aware that there is no reliable way to transfer an error or do any error reporting at all. It seems that there are the same limitations like in RMI (all classes on both sides...).  First I've tried to set a fault on the exchange and realized with JMS this is silently dropped in camel. It would be good to issue a warning on this. Or IMHO to convert the fault to an out body and set a header. Then on the client side let the camel Exchange.isFault return true in this case. The exception must not be there and deserializable  but it would be good to have at least an error message or stacktrace as string. So the client could realize the error and maybe handle or output it to the user.. Oh  thats already discussed in the related bugs.... Markus could you try 1.5-SNAPSHOT as CAMEL-585 added support of returning FAULT messages in the camel jms consumer. So it should not silently be dropped.. In Camel 2.0 you can enable transferring exceptions over JMS with the transferException option.. Closing all 2.0M2 tickets. 
New Feature,Unassigned,2008-10-06T22:53:30+0000,1223333610,This pattern is explained at http://www.enterpriseintegrationpatterns.com/ReturnAddress.html  Simply  it means that when there is a request-reply MEP in the route  that the message contains the return address in a header.,The JMS has this feature using JMSReplyTo.  I dont think we need to extend that to a generic Camel solution as its to protocol specific whether that is possible. For example with HTTP you can return the reply using the supplied HttpServletResponse object.. I have added Return Address to the Camel EIP catalog and specified it as a kind of JMS thing.. 
Task,Unassigned,2008-10-07T12:22:09+0000,1223382129,right now we are making way too many copies of an Exchange within a route - partly due to the generics issue.,There's a little load test project that might be useful here...  http://svn.apache.org/repos/asf/activemq/trunk/activemq-camel-loadtest/. Gonna take a look into this one over the next while.. Haven't looked at this in a while now and am working on other things at the moment. I'm attaching the test code I was using to compare raw/Camel JMS performance so I won't lose it.. See the other ticket about do not copy exchanges.  We will address this in Camel 2.1. This requires the API changes from CAMEL-1817 and the copy facade as well  See more http://camel.apache.org/camel-2x-speed-optimizations.html. Tuning will be on a more general level. And you can use options on JMS now to disable auto mapping etc. if you are bridging JMS.. Closing all resolved tickets from 2010 or older. 
Improvement,Claus Ibsen,2008-10-07T12:27:55+0000,1223382475,Please see attached patch which changes the default level created by the LoggingErrorHandlerBuilder to ERROR instead of INFO.  Also some of the methods on this builder to not return "this".  This breaks the chain when attempting to use the builder resulting in:  LoggingErrorHandlerBuilder errorBuilder = loggingErrorHandler("my.logger.name"); errorBuilder.setLevel(LoggingLevel.ERROR); errorHandler(errorBuilder);  instead of:  errorHandler(loggingErrorHandler("mylogger.name").level(LoggingLevel.ERROR));  I have added on builder methods for "level" and for "log".  I have left the properties that currently exist as following the pattern on DeadLetterChannelBuilder the builder method names should not include "set".  Whoever applies the patch may wish to remove the getters and setters  depending how they feel this will affect existing users.,Martin please re-attach the patch with Apache license granted. Patch reattached.. Applied patch with thanks. Closing all 1.5.0 issues. 
Bug,Guillaume Nodet,2008-10-07T16:33:13+0000,1223397193,,Sending components/camel-osgi/src/main/java/org/apache/camel/osgi/CamelContextFactoryBean.java Transmitting file data . Committed revision 702569.. Closing all 1.5.0 issues. 
Task,Unassigned,2008-10-07T17:24:32+0000,1223400272,There are a ton of Thread.sleeps used in tests. This makes them prone to failure on slower machines and makes the build take longer. This should be fixed at some point.,For anyone out there wishing to take a look at this one... a simple way to do this for some tests is to use a mock endpoint at the end of a route that expects a message.  See the following commit for an example: http://svn.apache.org/viewvc/activemq/camel/trunk/components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsRouteToFileTest.java?r1=702548&r2=702547&pathrev=702548  Of course  we wouldn't want this kinda thing showing up in wiki snippets so use with caution. Its really just an example of what it means to remove the sleeps in tests  in case my description was not clear. camel-core - the file component unit testing has been improved now. Committed revision 722828.. I added two methods on MockEndpoint to set expections for existence of a file  public void expectedFileExists(final String name) { public void expectedFileExists(final String name  final String content) {. Got rid of many sleeps in the ftp component cutting down approx 45 secs.. Much better now with FTP and File testing. Dont think we can get it much faster now.. Closing 2.0m1 tickets. 
Bug,Willem Jiang,2008-10-08T07:13:31+0000,1223450011,org.apache.camel.RuntimeCamelException: Failed to poll: Endpoint[ibatis:selectAllAccounts]. Reason: com.ibatis.common.jdbc.exception.NestedSQLException: — The error occurred in org/apache/camel/component/ibatis/Account.xml. — The error occurred while executing query. — Check the      select * from ACCOUNT   . — Check the SQL Statement (preparation failed). — Cause: java.sql.SQLException: Table not found in statement [     select * from ACCOUNT   ]         at org.apache.camel.component.ibatis.IBatisPollingConsumer.receiveNoWait (IBatisPollingConsumer.java:50)         at org.apache.camel.impl.DefaultScheduledPollConsumer.poll(DefaultScheduledPollConsumer.java:46)         at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:66)         at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:417)         at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:280)         at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:135),the polling Consumer should support delay parameter.. William see: http://activemq.apache.org/camel/ibatis.html  Use a timer to delay. We are planning for a much better scheduling i camel 2.0 to move this responsibility out of each component but into a common feature that is much more flexible and supporting fluent builders.  See the camel-dev topic where we have a discussion about this.. Closing all 1.5.0 issues. 
Improvement,Claus Ibsen,2008-10-08T12:04:29+0000,1223467469,Currently if you subclass the org.apache.camel.spring.Main class  then the command line options of Main are available  but using -h produces a list of options headed by:  "Apache Camel Runner takes the following options"  It would be nice to be able to change this in the sub-class. Overriding showOptions() is not satisfactory and the option list is stored a a private field with no getter  meaning the list of options cannot be generated.  I have provided a patch for one possible solution  that allows for just the header part of showOptions() to be overriden. (it also moves the generation of the information line into the Option class instead of the showOptions method itself to allow for further customisation  if required.,Geoff  could you re attach the patch file granting license to ASF. We can not accept the patch without this license.. Geoff if you need this in 1.5 then you should re attach the patch ASAP. We are starting to cut a RC really soon.. Applied path with thanks.. Closing all 1.5.0 issues. 
Bug,Claus Ibsen,2008-10-08T14:16:39+0000,1223475399,The javaDoc for CamelContext.setRoutes() states:  "Sets the routes for this context  replacing any current routes"  Yet when used  and the context started  startRouteDefinitions() is used first  causing any existing routes created through the definitions (such as those from RouteBuilders) to be re-created and started before the new routes provided to setRoutes() are started.,Thanks for reporting this.  You should use addRoutes instead  as overriding existing routes is not supported yet  use addRoutes instead. Closing all 1.5.0 issues. 
Bug,Hadrian Zbarcea,2008-10-08T17:40:06+0000,1223487606,,Closing all 1.5.0 issues. 
Improvement,Claus Ibsen,2008-10-08T19:00:54+0000,1223492454,The BatchProcessor that is used for the aggregator we should consider adding some sort of GroupedExchange or the like where you can group all the batches exchanges into a single exchange going out (per correlation of course)  This was a feature I was working for on 1.5 but I moved it to 2.0 as the GroupedExchange is a new class needed in camel-core and I want feedback from the other core comitters.  See CAMEL-951,Work in progress patch. See nabble: http://www.nabble.com/How-to-use-Aggregator-and-AggregationCollection--td19739918s22882.html. I like the GroupedExchange idea Claus  it would be very useful in a bunch of scenarios. Here's a +1 from me!. Yeah I gotta get this into the core and add a test/wiki. Committed revision 745139.. Closing 2.0m1 tickets. 
Bug,Jonathan Anstey,2008-10-09T15:52:50+0000,1223567570,When camel is built with -Prelease  the schemagen stuff in camel-spring gets disabled (it is in an activeByDefault profile),Activation conditions in Maven profiles are pretty limited so it doesn't look like this can be fixed. The workaround is to just pass in -Prelease enable-schemagen instead of -Prelease  which isn't so bad  I'll update the release documentation.. Fixed with the workaround mentioned.. Closing all 1.5.0 issues. 
Bug,Gert Vanthienen,2008-10-10T19:29:45+0000,1223666985,I have upgraded to the latest of Camel and when I attempt to use the content based router pattern - its now throwing an error.  The contents of the Message passed is a StringSource object and from debugging camel - the BodyType is a StringSource but it is attempting to convert from a StreamCache to a StringSource.   I will try and put a testcase together but if anyone has any ideas of its cause in the meantime ?  The error it throws it below.  thanks  Edell.  No type converter available to convert from type: class org.apache.servicemix.camel.JbiMessage to the required type: org.w3c.dom.Document with value JbiMessage: org.apache.servicemix.jbi.runtime.impl.NormalizedMessageImpl@1d03b5b org.apache.camel.NoTypeConversionAvailableException: No type converter available to convert from type: class org.apache.servicemix.camel.JbiMessage to the required type: org.w3c.dom.Document with value JbiMessage: org.apache.servicemix.jbi.runtime.impl.NormalizedMessageImpl@1d03b5b 	at org.apache.camel.impl.converter.DefaultTypeConverter.convertTo(DefaultTypeConverter.java:117) 	at org.apache.camel.impl.converter.DefaultTypeConverter.convertTo(DefaultTypeConverter.java:65) 	at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:69) 	at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:51) 	at org.apache.camel.builder.xml.XPathBuilder.getDocument(XPathBuilder.java:528) 	at org.apache.camel.builder.xml.XPathBuilder.evaluateAs(XPathBuilder.java:420) 	at org.apache.camel.builder.xml.XPathBuilder.matches(XPathBuilder.java:98) 	at org.apache.camel.builder.xml.XPathBuilder.matches(XPathBuilder.java:63) 	at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:47) 	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:75) 	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:174) 	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:96) 	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:63) 	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:47) 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:41) 	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:66) 	at org.apache.servicemix.camel.CamelProviderEndpoint.handleActiveProviderExchange(CamelProviderEndpoint.java:115) 	at org.apache.servicemix.camel.CamelProviderEndpoint.process(CamelProviderEndpoint.java:73) 	at org.apache.servicemix.common.AsyncBaseLifeCycle.doProcess(AsyncBaseLifeCycle.java:600) 	at org.apache.servicemix.common.AsyncBaseLifeCycle.processExchange(AsyncBaseLifeCycle.java:554) 	at org.apache.servicemix.common.AsyncBaseLifeCycle.processExchangeInTx(AsyncBaseLifeCycle.java:456) 	at org.apache.servicemix.common.AsyncBaseLifeCycle$2.run(AsyncBaseLifeCycle.java:341) 	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:650) 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:675) 	at java.lang.Thread.run(Thread.java:595),I don't know if it relates to CAMEL-520 and CAMEL-858.  From the stack trace  it looks like camel can't find a JbiMessage to Document converting method.. Willem I think you need to align this with ServiceMix. Hadrian changed the type converter strategy to throw a NoTypeConversionAvailableException if no type converter found. Before Camel silently ignored this. ServiceMix should adjust by using try .. .catch (NoTypeConversionAvailableException e) and ignore it  or provide the missing type converter out-of-the-box in their camel-jbi.jar  I think this issue is a blocker for servicemix  that it needs to adjust to this change in camel 1.5. Part of the problem is that our current StreamCacheInterceptor is caching Source types that do not need any caching. An example: a StringSource can be read multiple times without any problem  but because it extends StreamSource it is still being 'streamcached'  http://svn.eu.apache.org/viewvc?view=rev&revision=703990 should fix this end of the problem.. While looking into this issue  I created a new test case (cfr. http://svn.eu.apache.org/viewvc?view=rev&revision=704638).  This test fails if you remove the convertBodyTo(String.class) from the route  although one would expect that the StreamSource would have been cached with the solution for CAMEL-520. Not sure why that is yet  so let me assign this issue to myself while I figure it out.. Gertv. Looks like you latest changes to the StreamCache have fixed this one as well.  I think this ticket is fixed in Camel 1.6.0. Fixed as part of CAMEL-1271. Closing all 1.6.0 issues. 
Bug,Claus Ibsen,2008-10-11T00:23:39+0000,1223684619,I get this kind of failures in the DataSetSedaTest now and then:  Tests run: 1  Failures: 0  Errors: 1  Skipped: 0  Time elapsed: 4.731 sec <<< FAILURE! test(org.apache.camel.component.dataset.DataSetSedaTest)  Time elapsed: 4.49 sec  <<< ERROR! java.lang.AssertionError: dataset:foo Failed due to caught exception: java.lang.AssertionError: Header: camelDataSetIndex does not match. Expected: 33 but was: 32 on Exchange[Message: <hello>world!</hello>] with headers:  {camelDataSetIndex=32}         at org.apache.camel.component.mock.MockEndpoint.fail(MockEndpoint.java:712)         at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:255)         at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:214)         at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:141)         at org.apache.camel.ContextTestSupport.assertMockEndpointsSatisfied(ContextTestSupport.java:283)         at org.apache.camel.component.dataset.DataSetSedaTest.test(DataSetSedaTest.java:35)   I am not sure yet if it's just a test issue (quite probable) or there's a more serious underlying issue.  If anybody else experienced this please add a comment.,I do think there were some high concurrency issue with the seda component. Willem fixed a problem with copying exchanges  but I used once in a while to get such errors as well.  But not for 2+ months or so.  See also CAMEL-901 that somehow could be related  If you change it to use direct queues then I am sure it works all the time.. You can also slow down the dataset producer by adding produceDelay=numOfMilliseconds. The default is 3 (milliseconds) but maybe this is not large enough?. @Claus  I saw that mail exchange  but didn't look into it  since you were on top of it   @Jon  well  the question is if there is some subtle problem in the seda component  of course we can work it around.  It doesn't happen often  it never happens in eclipse  i didn't see it if i enable logging  it's definitely some timing issue.. Hadrian  yeah  we don't want to just mask the problem  I just remember having this issue in routes that did not have any seda endpoint  See: http://svn.apache.org/repos/asf/activemq/trunk/activemq-camel-loadtest/src/test/resources/org/apache/activemq/soaktest/LoadTest-context.xml  In that route  removing the produceDelay (which will then default it to 3 ms) will cause the same problem you see in DataSetSedaTest.. DataSet expects the data to receive in order  but the seda is async so some exchanges can arrive out of order. I have added the produceDelay to the unit test and fixed the seda consumer to not minimum sleep for 4 millis.  trunk: 766288. Closing all 2.0M2 tickets. 
Improvement,Unassigned,2008-10-11T03:15:08+0000,1223694908,,With thanks to Charles we have a great tutorial on this now http://activemq.apache.org/camel/tutorial-osgi-camel-part1.html. Closing all 1.6.0 issues. 
Sub-task,Claus Ibsen,2008-10-11T10:13:28+0000,1223720008,,See error handler and exception clause documentation. Looks like you're beating me to it . Awsome  thanks!. Yeah its team-work  Please review it.  I was curious how this worked so adding documentation and unit testing is a great technique to learn it.. Closing 1.5 issues. 
Sub-task,Claus Ibsen,2008-10-11T11:47:59+0000,1223725679,,See my comment on parent. @Claus  why do you think this is needed?  My understanding is that for some exceptions that we know about and we'd know how to handle  we add the onException and mark them as handled  so the producer doesn't get an exception. But doing it for all of them sounds a bit odd to me. And any way this is as good as using:  onException(Exception.class).handled(true);. To be more clear  I can't see in what circumstance would someone use this method.. Yeah that might be a bit overkill since you can add the onException as well  but end-users dont really know the onException that much. But I guess we should promote this feature and show some more wiki examples etc.. And yet again you can have fallback policies  so I guess it still have its place  but this is getting rather advanced.. Okay overkill. 
Improvement,Claus Ibsen,2008-10-12T07:15:41+0000,1223795741,camel-mail need a type converter to InputStream  Currently we have type converters to String  See nabble: http://www.nabble.com/Process-Mail-Attachment-InvalidPayloadException-Camel-1.4.0-td19937573s22882.html,Closing 1.5 issues. 
Improvement,Claus Ibsen,2008-10-12T10:57:27+0000,1223809047,Currently the simple language does not support constant expressions  that actually is useable in the file component that uses simple language to set file names  So if an end-user want to produce a file with a fixed name  then its not possible   expression=MyBigFile.txt    Is not possible.  But this is:  expression=MyBigFile-${header.foo}.txt    is as there is a ${} placeholder and then the simple language can evaluate it.,The problem is to determine if its an error or not if an end user enters  in.heder.foo   That was supposed to be:  in.header.foo   Currently you get an Exception.. Moving the FileLanguage so we can preserve the current behavior of simple language. Updated wiki as well. Closing 1.5 issues. 
Bug,Claus Ibsen,2008-10-13T07:20:02+0000,1223882402,See nabble: http://www.nabble.com/Problem-with-FileEndpoint-td19940096s22882.html  Workaround Use .convertBodyTo(String.class) in the route so the file is read into memory  and the java.io.File handler shouldn't be open/locked when camel attempts to delete it after wards.,I have attached a complete example for file endpoint with jaxb and bean processor. The readme.txt explains how to use the example and how to reproduce this issue.  Please write back if the example works and also shows you the issue.. Christian. The jaxb stuff 'com.sun.tools.xjc.maven2' can not be found in the maven repo you have in the pom.xml. Have to add this to pom.xml      <pluginRepositories>         <pluginRepository> 			<id>java.net</id>  			<name>java.net Maven Repository</name>  			<url>http://download.java.net/maven/1/</url>  			<layout>legacy</layout>  			<releases> 				<enabled>true</enabled>  			</releases> 			<snapshots> 				<enabled>false</enabled>  			</snapshots>         </pluginRepository>     </pluginRepositories>. Christian can you either supply a pom.xml that works out-of-the-box and can download all the needed .jars. Or switch to another jaxb maven plugin that actually works and is installable.  Googling looks like you need to install manually and/or rename all versions to jswdp.  https://jaxb.dev.java.net/jaxb-maven2-plugin/ http://maven-plugins.sourceforge.net/maven-jaxb-plugin/  Downloading: http://download.java.net/maven/2/jwsdp/jaxb-api/jwsdp.1.5/jaxb-api-jwsdp.1.5.pom Downloading: http://repository.jboss.org/maven2/jwsdp/jaxb-api/jwsdp.1.5/jaxb-api-jwsdp.1.5.pom Downloading: http://mirrors.ibiblio.org/pub/mirrors/maven2/jwsdp/jaxb-api/jwsdp.1.5/jaxb-api-jwsdp.1.5.pom Downloading: http://download.java.net/maven/2/jwsdp/jaxb-api/jwsdp.1.5/jaxb-api-jwsdp.1.5.pom Downloading: https://maven-repository.dev.java.net/repository/jwsdp/jaxb-api/jwsdp.1.5/jaxb-api-jwsdp.1.5.pom Downloading: http://repo1.maven.org/maven2/jwsdp/jaxb-api/jwsdp.1.5/jaxb-api-jwsdp.1.5.pom Downloading: http://download.java.net/maven/2/jwsdp/jaxb-impl/jwsdp.1.5/jaxb-impl-jwsdp.1.5.pom Downloading: http://repository.jboss.org/maven2/jwsdp/jaxb-impl/jwsdp.1.5/jaxb-impl-jwsdp.1.5.pom Downloading: http://mirrors.ibiblio.org/pub/mirrors/maven2/jwsdp/jaxb-impl/jwsdp.1.5/jaxb-impl-jwsdp.1.5.pom Downloading: http://download.java.net/maven/2/jwsdp/jaxb-impl/jwsdp.1.5/jaxb-impl-jwsdp.1.5.pom Downloading: https://maven-repository.dev.java.net/repository/jwsdp/jaxb-impl/jwsdp.1.5/jaxb-impl-jwsdp.1.5.pom Downloading: http://repo1.maven.org/maven2/jwsdp/jaxb-impl/jwsdp.1.5/jaxb-impl-jwsdp.1.5.pom Downloading: http://download.java.net/maven/2/jwsdp/jaxb-xjc/jwsdp.1.5/jaxb-xjc-jwsdp.1.5.pom Downloading: http://repository.jboss.org/maven2/jwsdp/jaxb-xjc/jwsdp.1.5/jaxb-xjc-jwsdp.1.5.pom Downloading: http://mirrors.ibiblio.org/pub/mirrors/maven2/jwsdp/jaxb-xjc/jwsdp.1.5/jaxb-xjc-jwsdp.1.5.pom Downloading: http://download.java.net/maven/2/jwsdp/jaxb-xjc/jwsdp.1.5/jaxb-xjc-jwsdp.1.5.pom Downloading: https://maven-repository.dev.java.net/repository/jwsdp/jaxb-xjc/jwsdp.1.5/jaxb-xjc-jwsdp.1.5.pom Downloading: http://repo1.maven.org/maven2/jwsdp/jaxb-xjc/jwsdp.1.5/jaxb-xjc-jwsdp.1.5.pom Downloading: http://download.java.net/maven/2/jwsdp/jaxb-libs/jwsdp.1.5/jaxb-libs-jwsdp.1.5.pom Downloading: http://repository.jboss.org/maven2/jwsdp/jaxb-libs/jwsdp.1.5/jaxb-libs-jwsdp.1.5.pom Downloading: http://mirrors.ibiblio.org/pub/mirrors/maven2/jwsdp/jaxb-libs/jwsdp.1.5/jaxb-libs-jwsdp.1.5.pom Downloading: http://download.java.net/maven/2/jwsdp/jaxb-libs/jwsdp.1.5/jaxb-libs-jwsdp.1.5.pom Downloading: https://maven-repository.dev.java.net/repository/jwsdp/jaxb-libs/jwsdp.1.5/jaxb-libs-jwsdp.1.5.pom Downloading: http://repo1.maven.org/maven2/jwsdp/jaxb-libs/jwsdp.1.5/jaxb-libs-jwsdp.1.5.pom Downloading: http://download.java.net/maven/2/jwsdp/jax-qname/jwsdp.1.5/jax-qname-jwsdp.1.5.pom Downloading: http://repository.jboss.org/maven2/jwsdp/jax-qname/jwsdp.1.5/jax-qname-jwsdp.1.5.pom Downloading: http://mirrors.ibiblio.org/pub/mirrors/maven2/jwsdp/jax-qname/jwsdp.1.5/jax-qname-jwsdp.1.5.pom Downloading: http://download.java.net/maven/2/jwsdp/jax-qname/jwsdp.1.5/jax-qname-jwsdp.1.5.pom. I guess the failure can be simulated by just throwing an exception in the processor instead of all the jaxb failing?. I have attached a new example with a working pom. Sorry .. did not check if it works with an empty repo.. Thanks Christian.  Sorry I was a bit grumpy. It was late and I wasn't in the mood to fight with maven.. It was indeed quite a fight with maven. There are several different versions out there in several repositories and most do not work. The documentation from the plugin website also does not really help. ;-(  About your comment on using a processor to show the failure. I am not sure if it is possbile to do so. It depends where the file will be opened. I guess when I simply add a processor after the file endpoint the file will not be opened at all. So I would guess the error will not show.. Christian when I run your sample using camel 1.4.0 and drop first the ok and then the error file I get:  C:\cameltest>dir /s /b C:\cameltest\in C:\cameltest\ok C:\cameltest\error C:\cameltest\ok\shiporder_ok.xml C:\cameltest\ok\shiporder_error.xml C:\cameltest\error\shiporder_error.xml  There is no files in the in folder that is locked etc. However you get the error files twice and as it's in the ok folder and the error folder. We might consider the moveNamePrefix option to only work if the processing was a success (no exceptions).. Christian what OS are you using? I am on Windows XP.. Sorry forgot about the convertBodyTo(String.class). I think this is OS dependent. I have tried 1.4.0 and 1.5-SNAPSHOT with and without the convertBodyTo and all moves the file from IN.. However I am wondering if we should support a more flexible rename strategy so you can  move to a folder if OK delete if OK move to another folder if ERROR delete if ERROR  Where you can mix and match what you need.  Well something to consider for Camel 2.0. Christian can you also try 1.5-SNAPSHOT as the file component had some changes as well  also regarding this WARN can not rename.  See camel download page for maven snapshot repo http://activemq.apache.org/camel/download.html. Hi Claus   I am running Windows Vista but I don´t think this is a OS dependent issue. Could you reproduce the error when you leave out the convertBodyTo ?  I have debugged the error. The problem seems to be in: org.apache.camel.converter.jaxb.FallbackTypeConverter line 90  InputStream inputStream = parentTypeConverter.convertTo(InputStream.class  value); if (inputStream != null)  { >>>> Object unmarshalled = unmarshaller.unmarshal(inputStream); return type.cast(unmarshalled); }  It opens an inputstream and calls unmarshall. I am not sure how unmarshall should work. Does it close the stream when all goes well? In any case it leaves the stream open if some exception happens. So I think there should be a try {} finally {} in FallbackTypeConverter that tries to close the stream. Of with a try catch on close.  This block is probably also necessary for the other variants following.  What do you think?. Christian  Well spotted. I am working on a patch to properly close the stream after use.  Could you then test it using 1.5-SNAPSHOT on your system to see if it works?. I have committed a fix. It should take 2+ hours for the new 1.5-SNAPSHOT to be published to the maven repo.  Maybe you can try tomorrow morning.. Hi Claus   I just updated my checkout and compiled myself. The issue does not occur anymore. Thanks for this fast fix.  Greetings  Christian. That is so great. Thanks Christian for taking the time to provide a test app and pin point the issue.  I have looked elsewhere and have fixed a few other data formats as well where resources should be closed as well.. Closing 1.5 issues. 
Task,Claus Ibsen,2008-10-13T09:28:32+0000,1223890112,See nabble: http://www.nabble.com/BeanProcessor---wrapping-throwable-why--td19931143s22882.html,MethodInvocation#proceed is changed to throws Exception instead of Throwable. Closing 1.5 issues. 
New Feature,Hadrian Zbarcea,2008-10-13T12:54:21+0000,1223902461,Hi   May I suggest to create a new component that will allow Camel to communicate with NIO framework(s)/Bayeux protocol like cometd/grizzly  ... (more information about what you can do with such framework can be found here : http://cometdproject.dojotoolkit.org/  http://www.tutorialized.com/view/tutorial/Create-event-driven-Web-apps-using-Continuous-and-Reverse-Ajax/27495  http://www.ibm.com/developerworks/web/library/j-jettydwr/)  When you design a reverse ajax application where you want to use the 'push' technology at the serverside  you need to use a servlet modified using java New I/O API (see wiki : http://en.wikipedia.org/wiki/Comet_(programming) for detailed info). Such modified servlet already exist in Tomcat/Jetty/Glassfish/Grizzly servers because they have implemented the comet framework.  Next  in order for a client to be notified (through push technology) that something happens at the server side  an event listener must be created and link to the comet API. Every time that an action occurs  the event will send back the information to the browser. Such technology already works today in DWR package (Direct Web Remoting)  Google/Gears  Flex/BlazeDS and the famous DojoToolkit.  My proposition is to integrate Camel with Cometd/Bayeux protocol in such a way that we can work with event published. A event available through bayeux protocol could be exposed as an endpoint to allow to use it through the routing.  e.g.  At the camel side  the idea is to use the routing as usual :  from(jms:queue) to(comet:event)  When a message arrives in the queue  we send it to the cometd:event or bayeux:event endpoint,I added a camel-cometd component that provides both a consumer and provider for exchanging events using the cometd/bayeux protcol. The patch has been attached. I'm going to document the component's usage the camel wiki very soon. For the moment this component allows only sending and receiving strings. The bayeux protocol is based on JSON  so it should be possible to send more structured data. In the next version  I'll put the capability to manage more structured events. The SSL support has not yet tested even if it has been implemented  this is something to do for the next release. Regards  David. David sent me this link: http://cometdaily.com/2008/01/07/20000-reasons-that-comet-scales/  Good to know for those interested in using camel-cometd.. New version with an SSL test. Patch applied with many thanks to David. Documentation updated.. Sorry Hadrian  in the provided patch I forgot to add a folder under src/test/resources needed for running the interactive test as explained in the readme file. I'll post the new patch.. New patch with the missing directory. The webapp directory was in the original patch. Not adding it was my mistake. localhost.ks was missing though and I added it  the ssl test was failing without it.  Thanks for pointing it out. It's fixed now.. Closing 2.0m1 tickets. 
Bug,Claus Ibsen,2008-10-13T19:05:35+0000,1223924735,See nabble: http://www.nabble.com/BeanInfo.chooseMethodWithMatchingBody-throws-an-AmbiguousMethodCallException-when-there%27s-no-ambiguity-td19959124s22882.html,A patch with a solution.  I would like review of this patch. PS: The methods should be named override*s*ExistingMethod (a s is missing). Bruce did a review and the code in the patch should use continue and not return false:  Hi  Ah of course it should be continue  I coded it with the laptop on my lap on the couch with the wife grumping why I looked at the computer and not hear. But I wanted quickly to throw in some code for review and suggestions.  I was a bit surprised to not find an API to be able to easier identify if a method is overridden. I have been working with the IDEA API for my generate toString() plugin for 6+ years and they have such a nice API where you can get tons of information about your code.  I would like the change to be tested more thoroughly before we can commit it. So feel free to add more unit tests that test with more methods in the inherited classes  without inheritance etc. We are closing in on 1.5 and I would be sad to break something this late in the game.. Should be:  private boolean overrideExistingMethod(MethodInfo methodInfo) { + for (MethodInfo info : operationsWithBody) { + + // name test + if (!info.getMethod().getName().equals(methodInfo.getMethod().getName()))  { + continue; + } + + // parameter types + if (info.getMethod().getParameterTypes().length != methodInfo.getMethod().getParameterTypes().length) {+ continue;+ }  + + for (int i = 0; i < info.getMethod().getParameterTypes().length; i++) { + Class type1 = info.getMethod().getParameterTypes()[i]; + Class type2 = methodInfo.getMethod().getParameterTypes()[i]; + if (!type1.equals(type2))  { + continue; + }  + } + + // sanme name  same parameters  then its overrides an existing class + return true; + } + + return false; + }. James suggested to use a comparator: create a Set(NameAndParamTypesComparator). Working on a better patch.. Commited a fix. See SVN log (JIRA has such a tab). The last commit failed camel-spring and some unit tests. Reverted the fix until I get this working as well.. Should be fixed now.. Closing 1.5 issues. 
Task,Claus Ibsen,2008-10-14T11:22:44+0000,1223983364,Need to explain that when using non transacted error handler such as DLC then the Exchange that is sent to the error queue  or onException is the original one  not the one from inflight processing.  See nabble: http://www.nabble.com/Error-Handler-and-OutHeaders-td19970966s22882.html,See http://cwiki.apache.org/confluence/display/CAMEL/Error+handling+in+Camel  Could any Camel riders please review?. Nice work Claus! I made a few minor edits but overall it looks awesome.. thanks for the review. I was wondering if the wording - orchestrating is good. I kinda think about BPEL and workflow engines.  Any better wording?. Yeah  I like orchestrated. Sounds nice. But if you are worried about users getting confused with bpel/workflow terms  then maybe just "handled" is better? i.e. "...is enabled out-of-the-box and handled by Camel itself. The transaction type is handled by a backing system...". Okay we got a bit of starter documentation that can get end users on the right track.. Closing 2.0m1 tickets. 
Improvement,Jonathan Anstey,2008-10-14T12:13:35+0000,1223986415,If you are doing error handling using POJO beans to do some error handling code and using bean binding annoations to get the stuff from the exchange  we are missing an annotation to get the caused exception  Such as a @Exception or @Fault if that is a better name  See nabble: http://www.nabble.com/Error-Handler-and-OutHeaders-td19970966s22882.html  jstrachan using @Exception or @Fault or whatever on a bean method call to pull out the Exchange's fault/exception right?  14:02 jstrachan if so definitely!,Adding camel-core/src/main/java/org/apache/camel/ExchangeException.java Sending camel-core/src/main/java/org/apache/camel/builder/ExpressionBuilder.java Sending camel-core/src/main/java/org/apache/camel/component/bean/BeanInfo.java Adding camel-core/src/test/java/org/apache/camel/component/bean/BeanWithExchangeExceptionAnnotationTest.java Adding camel-core/src/test/java/org/apache/camel/component/bean/MyCustomException.java Transmitting file data ..... Committed revision 719574.. Will add wiki stuff next.. Closing 2.0m1 tickets. 
Task,Claus Ibsen,2008-10-14T18:10:53+0000,1224007853,We need gertv to upload new version of .jar to servicemix repo,Closing 1.5 issues. 
Bug,Willem Jiang,2008-10-15T02:12:05+0000,1224036725,I use apache-camel-1.4.0 and apache-cxf-2.1.1 in my application.  My application is a web service application.Which receive a soap header + soap body  and then response a soap header + soap body.   I use WSDLToJava tool to create the java code from wsdl  it creates an interface for me as follow:   @WebService(targetNamespace = "http://com.aspire/"  name = "SreServicePortType") @XmlSeeAlso( {aspire.com.xsd.ObjectFactory.class} ) @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)  public interface SreServicePortType {  /*  	 */        @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)     @WebMethod     public void serviceContentFetchReq(         @WebParam(partName = "request"  name = "serviceContentFetchReq"  targetNamespace = "http://com.aspire/xsd")         aspire.com.xsd.ServiceContentFetchReq request          @WebParam(partName = "requestHeader"  name = "serviceHeader"  targetNamespace = "http://com.aspire/xsd"  header = true)         aspire.com.xsd.ServiceHeader requestHeader          @WebParam(partName = "response"  mode = WebParam.Mode.OUT  name = "serviceContentFetchReqResponse"  targetNamespace = "http://com.aspire/xsd")         javax.xml.ws.Holder<aspire.com.xsd.ServiceContentFetchReqResponse> response          @WebParam(partName = "responseHeader"  mode = WebParam.Mode.OUT  name = "serviceHeader"  targetNamespace = "http://com.aspire/xsd"  header = true)         javax.xml.ws.Holder<aspire.com.xsd.ServiceHeader> responseHeader     ); }  Then  I implement the routing rules in the xml file:          <process ref="ipValidateProcessor" />         <choice>             <when>                  <!-- First predicate -->                  <el>${in.headers.IP_VALIDATE_RESULT == 'true'}</el>                  <to uri="cxf:bean:serviceEndpoint" />                  <process ref="responseProcessor" />             </when>            <otherwise>                   <process ref="invalidIPProcessor" />            </otherwise>      </choice>  In the ipValidateProcessor   I set  in.headers.IP_VALIDATE_RESULT = false  so the invalidIPProcessor will run.In the invalidIPProcessor   I only need set response body and response header. I have traced the exchange object in the processor  the exchange.out element is null  and the exchange.in element is a CxfMessage object. The exchange.in.body element is a MessageContentList object: Object[0] is a ServiceContentFetchReq   Object[1] is a ServiceHeader  Object[2] is a Holder<T>  Object[3] is a Holder<T>.   So i put response body into Object[2]  and put response header into Object[3]:                  org.apache.camel.Message in = exchange.getIn();            List inBody = (List) in.getBody();            Holder holderBody = (Holder)inBody.get(2);            holderBody .value = body;// body is a ServiceContentFetchReqResponse object                 Holder holderHeader = (Holder)inBody.get(3);            holderHeader .value = header;//header is a ServiceHeader object   But  when I run the application  I got an Exception:java.lang.OutOfMemoryError: Java heap space.  I debuged into program  there is an Infinite Loop occured at the  org.apache.cxf.jaxws.interceptors.HolderOutInterceptor(72):                   for (int x = 0; x < inObjects.size(); x++) {                      Object o = inObjects.get;                      if (o instanceof Holder)  {                          outObjects.set(x + 1  o);                      }                   }   I have traced and found: inObjects == outObjects is true  which leads to an Infinite Loop.   Stack trace:   2008-10-14 9:40:19 sun.reflect.NativeMethodAccessorImpl invoke0  严重: EXCEPTION  java.lang.OutOfMemoryError: Java heap space  2008-10-14 9:40:19 org.apache.cxf.phase.PhaseInterceptorChain doIntercept  信息: Interceptor has thrown exception  unwinding now  org.apache.cxf.binding.soap.SoapFault: Error reading XMLStreamReader.  at org.apache.cxf.binding.soap.interceptor.ReadHeadersInterceptor.handleMessage(ReadHeadersInterceptor.java:183)  at org.apache.cxf.binding.soap.interceptor.ReadHeadersInterceptor.handleMessage(ReadHeadersInterceptor.java:54)  at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:221)  at org.apache.cxf.endpoint.ClientImpl.onMessage(ClientImpl.java:449)  at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.handleResponse(HTTPConduit.java:1996)  at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.close(HTTPConduit.java:1832)  at org.apache.cxf.transport.AbstractConduit.close(AbstractConduit.java:66)  at org.apache.cxf.transport.http.HTTPConduit.close(HTTPConduit.java:591)  at org.apache.cxf.interceptor.MessageSenderInterceptor$MessageSenderEndingInterceptor.handleMessage(MessageSenderInterceptor.java:62)  at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:221)  at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:296)  at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:242)  at org.apache.cxf.frontend.ClientProxy.invokeSync(ClientProxy.java:73)  at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:178)  at $Proxy48.serviceContentFetchReq(Unknown Source)  at com.aspire.archtype.camel.Client.invoke(Client.java:77)  at com.aspire.archtype.camel.spring.Main.main(Main.java:19)  Caused by: com.ctc.wstx.exc.WstxEOFException: Unexpected EOF in prolog   at [row col  {unknown-source}]: [1 0]  at com.ctc.wstx.sr.StreamScanner.throwUnexpectedEOF(StreamScanner.java:661)  at com.ctc.wstx.sr.BasicStreamReader.handleEOF(BasicStreamReader.java:2134)  at com.ctc.wstx.sr.BasicStreamReader.nextFromProlog(BasicStreamReader.java:2040)  at com.ctc.wstx.sr.BasicStreamReader.next(BasicStreamReader.java:1069)  at com.ctc.wstx.sr.BasicStreamReader.nextTag(BasicStreamReader.java:1095)  at org.apache.cxf.binding.soap.interceptor.ReadHeadersInterceptor.handleMessage(ReadHeadersInterceptor.java:83)  ... 16 more  javax.xml.ws.soap.SOAPFaultException: Error reading XMLStreamReader.  at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:199)  at $Proxy48.serviceContentFetchReq(Unknown Source)  at com.aspire.archtype.camel.Client.invoke(Client.java:77)  at com.aspire.archtype.camel.spring.Main.main(Main.java:19)  Caused by: org.apache.cxf.binding.soap.SoapFault: Error reading XMLStreamReader.  at org.apache.cxf.binding.soap.interceptor.ReadHeadersInterceptor.handleMessage(ReadHeadersInterceptor.java:183)  at org.apache.cxf.binding.soap.interceptor.ReadHeadersInterceptor.handleMessage(ReadHeadersInterceptor.java:54)  at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:221)  at org.apache.cxf.endpoint.ClientImpl.onMessage(ClientImpl.java:449)  at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.handleResponse(HTTPConduit.java:1996)  at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.close(HTTPConduit.java:1832)  at org.apache.cxf.transport.AbstractConduit.close(AbstractConduit.java:66)  at org.apache.cxf.transport.http.HTTPConduit.close(HTTPConduit.java:591)  at org.apache.cxf.interceptor.MessageSenderInterceptor$MessageSenderEndingInterceptor.handleMessage(MessageSenderInterceptor.java:62)  at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:221)  at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:296)  at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:242)  at org.apache.cxf.frontend.ClientProxy.invokeSync(ClientProxy.java:73)  at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:178)  ... 3 more  Caused by: com.ctc.wstx.exc.WstxEOFException: Unexpected EOF in prolog   at [row col {unknown-source} ]: [1 0]  at com.ctc.wstx.sr.StreamScanner.throwUnexpectedEOF(StreamScanner.java:661)  at com.ctc.wstx.sr.BasicStreamReader.handleEOF(BasicStreamReader.java:2134)  at com.ctc.wstx.sr.BasicStreamReader.nextFromProlog(BasicStreamReader.java:2040)  at com.ctc.wstx.sr.BasicStreamReader.next(BasicStreamReader.java:1069)  at com.ctc.wstx.sr.BasicStreamReader.nextTag(BasicStreamReader.java:1095)  at org.apache.cxf.binding.soap.interceptor.ReadHeadersInterceptor.handleMessage(ReadHeadersInterceptor.java:83)  ... 16 more,I think this is a camel-cxf component bug.. Can you show me the code of ipValidateProcessor and the other processors? I think you may set a wrong response message in the processor. Here is an example[1] of how to deal with the holders  please pay attentions to the below codes          // Set the response message  first element is the return value of the operation          // the others are the holders of method parameters         exchange.getOut().setBody(new Object[] {null  personId  ssn  name});   [1] http://cwiki.apache.org/CAMEL/cxf.html#CXF-HowtoconsumethemessagefromthecamelcxfendpointinPOJOdataformat. I'm very sorry for reply so late.I have waited for an email notify when sombody commented on this bug  but i didn't receive anyone. And when i log in JIRA today  i found you have replied. Very sorry!  I hava uploaded my processors  pls see the attachments.Thanks again!. I found i filled a mis-spelling email address  and correct it now. I saw this line in the ResponseProcess  this.setOutBody(this.getInBody());  You did not change any holder's value  can you try out the codes that I showed in my last comment.  NOTE: You need put the return value of the method as the first array element into the out message body.. The infinite loop occurs in invalidIProcessor  and it wouldn't run in ResponseProcessor.  I try you last comment  and modified InvalidProcessor like this:  private void buildResponse() { //get body ServiceContentFetchReq req = (ServiceContentFetchReq) this.getInBody(); ProcessorRequest request = req.getRequest();  ServiceContentFetchReqResponse serviceResponse = new ServiceContentFetchReqResponse(); ProcessorResponse response = new ProcessorResponse(); response.setHret("21000000"); response.setVersion(request.getVersion()); response.setTransactionID(request.getTransactionID()); serviceResponse.setReturn(response);  ServiceHeader serviceHeader = new ServiceHeader(); Header header = new Header(); header.setTargetIP("10.1.3.63"); serviceHeader.setHeader(header);  org.apache.camel.Message in = exchange.getIn(); List inBody = (List) in.getBody(); Holder holderHeader = (Holder)inBody.get(2); holderHeader.value = serviceResponse; Holder holderValue = (Holder)inBody.get(3); holderValue.value = serviceHeader;  this.exchange.getOut().setBody(new Object[]  {inBody.get(0)  inBody.get(1)  holderValue  holderHeader}  );  Then it runs ok  and i would modify other processors in the same way. I just close this issue  as we have example and document to show how to set the hold response.. hello  Willem.After I walk around this trouble  I meet another trouble. I do a pressure testing on this application with LoadRunner.  My test case is as follows: 1. loadrunner does a request 2. server receive a request  and then forward it to IPValidateProcessor 3. IPValidateProcessor set exchange.getIn().setHeader("IP_VALIDATE_RESULT"  "true"); 4. do <to uri="cxf:bean:serviceEndpoint" /> 5. do <process ref="responseProcessor" /> 6. end  Route logic as follows  I just want to test the <when> clause: <route> <from uri="cxf:bean:routerEndpoint" /> <try> <process ref="ipValidateProcessor" /> <choice> <when> <!-- First predicate --> <el>${in.headers.IP_VALIDATE_RESULT == 'true'}</el> <to uri="cxf:bean:serviceEndpoint" /> <process ref="responseProcessor" /> </when> <otherwise> <process ref="invalidIPProcessor" /> </otherwise> </choice> <catch> <exception>com.aspire.archtype.camel.exception.AppException</exception> <process ref="sreExceptionHandler"></process> </catch> </try> </route>  When only an virtual user runs the test case once  it runs ok. But when have 30 virtual users run for 1 minute  some of the transactions run failure  and logic run into <otherwise> clause.I found that the in.headers.IP_VALIDATE_RESULT is null  so logic run into <otherwise>.  I don't now why  the same request  some run into <when>  some run into <otherwith>?. Hi Sky   Shall we start a new thread in the mail list to discuss this issue ? Since it does not relate to this JIRA's topic.  Willem. OK  I will fill a new JIRA to discuss.. I have created a new issue: https://issues.apache.org/activemq/browse/CAMEL-1019. Closing all 1.5.0 issues. 
Bug,Claus Ibsen,2008-10-15T16:17:53+0000,1224087473,,Should be fixed now.. Closing all 1.5.0 issues. 
Sub-task,James Strachan,2008-10-15T16:24:56+0000,1224087896,,there's now a Main in the camel-guice module for booting up modules using a jndi.properties file to load a context. see the documentation  http://cwiki.apache.org/CAMEL/guice-maven-plugin.html http://cwiki.apache.org/CAMEL/guice.html. Closing all 1.5.0 issues. 
Improvement,Hadrian Zbarcea,2008-10-16T11:35:25+0000,1224156925,Today TypeConverter detection is based on org.apache.camel.@Converter annotation. Allow user to override this by using meta-annotation. This can be useful to hide camel dependencies  when extending the framework.  ie  this can be done:  package some.package.of.mine; @Retention(RetentionPolicy.RUNTIME) @Target( {ElementType.TYPE  ElementType.METHOD } ) @org.apache.camel.Converter public @interface OwnConverterAnnotation { }  import some.package.of.mine.OwnConverterAnnotation;  @OwnConverterAnnotation public class FileToXXXConverter {      @OwnConverterAnnotation      public static XXX toWorkflowEntry(File file) throws IOException  {         return new XXX();                 }  },Patch With License. We must remember to update the wiki with this new feature (if patch is committed) http://activemq.apache.org/camel/type-converter.html  Do you mind writing a snippet what such documentation should be? As accepting a patch is only really useable if we also updates and improves the related documentation as well.  However I feel your idea is great. Maybe there should be a camel-annotation.jar that just contains the few annotations needed and with your strategy end-users can use their own annotations and thus imports.. Claus  I'll try to write a snippet  and will think about the camel-annotation.jar mechanism you suggest. Will come back when done.. BTW - its not really a big deal to use annotations from any particular framework in your code as annotations are a soft dependency.  e.g. adding Camel annotations to your code doesn't add any direct dependency on camel. You can then use your code totally fine without any camel jars on the classpath.  So there's not a huge need to 'hide' dependencies on Camel annotations - as you only need them to compile your source code.  But using indirect annotations can be useful; e.g. you can have a foo.jar which defines a @Foo annotation which builds itself with camel - then folks can just add foo.jar to their classpath to get camel goodness without adding camel jars to the build. So you could introduce a kinda macro annotation that includes various framework annotations on it (say spring and camel and guice annotations. The original need is the following: Let's say I build a Routing System based on Camel. Of course my System will depend on Camel. But I don't want the end user of my System (who will be responsible for adding routes  converters...) to depend on any camel jar. Your solution is better (and also more time consuming than my simple metaannotation patch )  will think about it.. James  can you give more details on how your solution would work exactly ?. Patch applied with many thanks. I made a few manual modifications  because the code changed a bit from the version the patch was created against.. Closing all 1.5.0 issues. 
Improvement,Jonathan Anstey,2008-10-16T12:56:23+0000,1224161783,Maven goal camel:dot should use overridden <mainClass/> when used as in pom.xml:    <build>     <plugins>       <!-- Allows the routes to be run via 'mvn camel:run' -->       <plugin>         <groupId>org.apache.camel</groupId>         <artifactId>camel-maven-plugin</artifactId>         <version>${pom.version}</version> 		<!-- optional  default value: org.apache.camel.spring.Main --> 		<configuration> 			<mainClass>mypackage.boot.camel.CamelStartup</mainClass> 		</configuration>       </plugin>     </plugins>   </build>,Is useable for some of the other maven goals as well: camel:run etc.. Seb  could you re attach your patch and grant the ASF license? We cannot apply any patches that don't have this granted.. Seb  could you re attach the patch with the ASF license granted. You should not attach files while creating the tickets as the radiobutton for granting this license is only possible afterwards.  So please use "Attach File" and upload it again with the license.  We can only accept patches with this license. Jon  remember to document it on the wiki as well. Claus  looks like camel:run already had this functionality. Will update the wiki after the patch is applied.. Patch With the license. @Claus and Jonathan  Yes camel:run had this overriding possibility but camel:dot would'nt use it.. Your patch was applied in revision 705236. Thanks!. Updated wiki doc here http://cwiki.apache.org/confluence/display/CAMEL/Camel+Maven+Plugin. Closing all 1.5.0 issues. 
Bug,Claus Ibsen,2008-10-16T14:48:06+0000,1224168486,Component spring "event" is not auto registered by Camel. Add a Event file in the folder META-INF/services/org/apache/camel/compoment of camel-spring.,I have tested the correction with the last snapshot and this error does not appear anymore. Incident can be closed.. 
Bug,Claus Ibsen,2008-10-17T07:50:24+0000,1224229824,This configuration causes NPE:  		from("timer://kickoff_5?period=10000"). 		setHeader("a").constant("aa").setBody().constant("a b c a_1 b_1"). 		splitter(body().tokenize(" ")). 		setHeader("aggreagation_header").body(). 		aggregator(header("aggreagation_header")). 		to("mock:out");     2008-10-17 07:47:11 321 [ Polling Thread] DEBUG DefaultAggregationCollection   - put exchange:Exchange[Message: null] for key:null 2008-10-17 07:47:12 237 [ Polling Thread] ERROR Aggregator                     -  java.lang.NullPointerException 	at org.apache.camel.processor.interceptor.TraceFormatter.getBreadCrumbID(TraceFormatter.java:150) 	at org.apache.camel.processor.interceptor.TraceFormatter.format(TraceFormatter.java:45) 	at org.apache.camel.processor.interceptor.TraceInterceptor.format(TraceInterceptor.java:94) 	at org.apache.camel.processor.Logger.logMessage(Logger.java:219) 	at org.apache.camel.processor.Logger.process(Logger.java:124) 	at org.apache.camel.processor.interceptor.TraceInterceptor.logException(TraceInterceptor.java:119) 	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:87) 	at org.apache.camel.processor.BatchProcessor.processExchange(BatchProcessor.java:190) 	at org.apache.camel.processor.BatchProcessor.processBatch(BatchProcessor.java:168) 	at org.apache.camel.processor.BatchProcessor.run(BatchProcessor.java:68) 	at java.lang.Thread.run(Thread.java:619),This bug is because of CAMEL-393 where the aggregator attaches itself directly to the consumer (from) so all the stuff in between is bypassed.  So you need to divide the route into two parts  such as:                  from("timer://kickoff?period=10000").                     setHeader("id").constant("foo").setBody().constant("a b c").                     splitter(body().tokenize(" ")).to("seda:splitted");                  from("seda:splitted").                     aggregator(header("id")).                     to("mock:result");. Closing all 1.5.0 issues. I am experiencing the same problem in 1.6.0  without an aggregator. My route logic (in XML) is  <route errorHandlerRef="myErrorHandler"> <from uri="jbi:service:urn:distributor.dmf.company.com:DistributorService"/> <convertBodyTo type="java.lang.String"/> <inOnly uri="direct:packetQueue"/> </route>  My stack trace is  java.lang.NullPointerException at org.apache.camel.processor.interceptor.TraceFormatter.getBreadCrumbID(TraceFormatter.java:202) at org.apache.camel.processor.interceptor.TraceFormatter.getExchangeAndNode(TraceFormatter.java:271) at org.apache.camel.processor.interceptor.TraceFormatter.format(TraceFormatter.java:54) at org.apache.camel.processor.interceptor.TraceInterceptor.format(TraceInterceptor.java:97) at org.apache.camel.processor.Logger.logMessage(Logger.java:234) at org.apache.camel.processor.Logger.process(Logger.java:125) at org.apache.camel.processor.interceptor.TraceInterceptor.logException(TraceInterceptor.java:122) at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:90) at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:80) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:41) at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:55) at org.apache.camel.processor.LoggingErrorHandler.process(LoggingErrorHandler.java:54) at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:43) at org.apache.camel.processor.Pipeline.process(Pipeline.java:115) at org.apache.camel.processor.Pipeline.process(Pipeline.java:89) at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:68) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:41) at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:55) at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:50) at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:79) at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:84) at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:43) at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:64) at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:41) at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:66) at org.apache.servicemix.camel.CamelProviderEndpoint.handleActiveProviderExchange(CamelProviderEndpoint.java:109) at org.apache.servicemix.camel.CamelProviderEndpoint.process(CamelProviderEndpoint.java:81) at org.apache.servicemix.common.AsyncBaseLifeCycle.doProcess(AsyncBaseLifeCycle.java:631) at org.apache.servicemix.common.AsyncBaseLifeCycle.processExchange(AsyncBaseLifeCycle.java:585) at org.apache.servicemix.common.AsyncBaseLifeCycle.processExchangeInTx(AsyncBaseLifeCycle.java:480) at org.apache.servicemix.common.AsyncBaseLifeCycle$2.run(AsyncBaseLifeCycle.java:349) at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) at java.lang.Thread.run(Thread.java:619)  The code in TraceFormatter.java looks like this:  protected Object getBreadCrumbID(Exchange exchange)  { UnitOfWork unitOfWork = exchange.getUnitOfWork(); return unitOfWork.getId(); }  But there is code in UnitOfWorkProcessor.process() which seems to indicate that exchange.getUnitOfWork() will sometimes return null. This method begins by saying  if (exchange.getUnitOfWork() == null) { // If there is no existing UoW  then we should start one and // terminate it once processing is completed for the exchange.  Would it be possible to enhance TraceFormatter to simply check for this? I'm going to try  protected Object getBreadCrumbID(Exchange exchange) { UnitOfWork unitOfWork = exchange.getUnitOfWork(); if (unitOfWork != null)  { return unitOfWork.getId(); }  else  { return "[unknown UOW]"; }  }  If this doesn't work  I'll follow up with a message here.. Fixed the NPE in 1.x: 782893 Was already fixed in 2.0. Thanks Robert for reporting. I have fixed the NPE in 1.x. Will be in the next Camel release 1.6.2. 
Bug,Unassigned,2008-10-17T08:17:11+0000,1224231431,Hi   I have the following error generated :  [                          main] DefaultCamelContext            INFO  JMX enabled. Using InstrumentationLifecycleStrategy. [                          main] DefaultCamelContext            DEBUG Adding routes from: Routes: [Route[ [From[event://default]] -> [To[mock:test]]]] routes: [] [                          main] DefaultInstrumentationAgent    DEBUG Starting JMX agent on server: com.sun.jmx.mbeanserver.JmxMBeanServer@1503a3 [                          main] DefaultInstrumentationAgent    DEBUG Registered MBean with objectname: org.apache.camel:context=dell-charles/camel-1 name=context [                          main] DefaultComponentResolver       DEBUG Found component: event via type: org.apache.camel.component.event.EventComponent via META-INF/services/org/apache/camel/component/event [                          main] DefaultComponent               DEBUG Creating endpoint uri=[event://default]  path=[default]  parameters=[{}] [                          main] DefaultCamelContext            DEBUG event://default converted to endpoint: Endpoint[event://default] by component: org.apache.camel.component.event.EventComponent@872380 [                          main] DefaultInstrumentationAgent    DEBUG Registered MBean with objectname: org.apache.camel:context=dell-charles/camel-1 type=endpoints name="event://default?id=0xdaebda6" [                          main] DefaultInstrumentationAgent    DEBUG Registered MBean with objectname: org.apache.camel:context=dell-charles/camel-1 type=processors nodeid=to1 name="To[mock:test]" [                          main] DefaultComponentResolver       DEBUG Found component: mock via type: org.apache.camel.component.mock.MockComponent via META-INF/services/org/apache/camel/component/mock [                          main] DefaultComponent               DEBUG Creating endpoint uri=[mock:test]  path=[test]  parameters=[{}] [                          main] DefaultCamelContext            DEBUG mock:test converted to endpoint: Endpoint[mock:test] by component: org.apache.camel.component.mock.MockComponent@e0b6f5 [                          main] DefaultInstrumentationAgent    DEBUG Registered MBean with objectname: org.apache.camel:context=dell-charles/camel-1 type=endpoints name="mock:test?id=0x1f9866cb" [                          main] DefaultInstrumentationAgent    DEBUG Registered MBean with objectname: org.apache.camel:context=dell-charles/camel-1 type=routes name="node1" [                          main] DefaultInstrumentationAgent    DEBUG Registered MBean with objectname: org.apache.camel:context=dell-charles/camel-1 type=consumers name=EventConsumer(0x97a560) [                          main] ProducerCache                  DEBUG >>>> Endpoint[event://default] Exchange[Message: Hello there!] [                          main] ResolverUtil                   DEBUG Searching for annotations of org.apache.camel.Converter in packages: [org.apache.camel.converter  org.apache.camel.component.cxf.converter  org.apache.camel.spring.converter] [                          main] ResolverUtil                   DEBUG Using only regular classloaders [                          main] ResolverUtil                   DEBUG Loading from jar: C:\.m2\repository\org\apache\camel\camel-core\1.5-SNAPSHOT\camel-core-1.5-SNAPSHOT.jar [                          main] ResolverUtil                   DEBUG Using only regular classloaders [                          main] ResolverUtil                   DEBUG Loading from jar: C:\.m2\repository\org\apache\camel\camel-cxf\1.5-SNAPSHOT\camel-cxf-1.5-SNAPSHOT.jar [                          main] ResolverUtil                   DEBUG Using only regular classloaders [                          main] ResolverUtil                   DEBUG Found: [class org.apache.camel.converter.stream.StreamCacheConverter  class org.apache.camel.converter.CamelConverter  class org.apache.camel.converter.IOConverter  class org.apache.camel.converter.jaxp.DomConverter  class org.apache.camel.converter.jaxp.StaxConverter  class org.apache.camel.converter.jaxp.StreamSourceConverter  class org.apache.camel.converter.ObjectConverter  class org.apache.camel.converter.NIOConverter  class org.apache.camel.component.cxf.converter.CxfConverter  class org.apache.camel.converter.jaxp.XmlConverter  class org.apache.camel.converter.CollectionConverter] [                          main] AnnotationTypeConverterLoader  DEBUG Loading converter class: org.apache.camel.converter.stream.StreamCacheConverter [                          main] AnnotationTypeConverterLoader  DEBUG Loading converter class: org.apache.camel.converter.CamelConverter [                          main] AnnotationTypeConverterLoader  DEBUG Loading converter class: org.apache.camel.converter.IOConverter [                          main] AnnotationTypeConverterLoader  DEBUG Loading converter class: org.apache.camel.converter.jaxp.DomConverter [                          main] AnnotationTypeConverterLoader  DEBUG Loading converter class: org.apache.camel.converter.jaxp.StaxConverter [                          main] AnnotationTypeConverterLoader  DEBUG Loading converter class: org.apache.camel.converter.jaxp.StreamSourceConverter [                          main] AnnotationTypeConverterLoader  DEBUG Loading converter class: org.apache.camel.converter.ObjectConverter [                          main] AnnotationTypeConverterLoader  DEBUG Loading converter class: org.apache.camel.converter.NIOConverter [                          main] AnnotationTypeConverterLoader  DEBUG Loading converter class: org.apache.camel.component.cxf.converter.CxfConverter [                          main] AnnotationTypeConverterLoader  DEBUG Loading converter class: org.apache.camel.converter.jaxp.XmlConverter [                          main] DefaultTypeConverter           WARN  Overriding type converter from: StaticMethodTypeConverter: public static java.lang.String org.apache.camel.converter.IOConverter.toString(javax.xml.transform.Source) throws javax.xml.transform.TransformerException java.io.IOException to: InstanceMethodTypeConverter: public java.lang.String org.apache.camel.converter.jaxp.XmlConverter.toString(javax.xml.transform.Source) throws javax.xml.transform.TransformerException [                          main] AnnotationTypeConverterLoader  DEBUG Loading converter class: org.apache.camel.converter.CollectionConverter org.apache.camel.RuntimeCamelException: java.lang.NullPointerException         at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:685)         at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:90)         at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:85)         at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:102)         at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:108)         at com.xpectis.test.ProcessEvent.startCamel(ProcessEvent.java:44)         at com.xpectis.test.ProcessEvent.main(ProcessEvent.java:63) Caused by: java.lang.NullPointerException         at org.apache.camel.component.event.EventEndpoint$1.process(EventEndpoint.java:68)         at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:151)         at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:88)         ... 5 more  when I run the code above :  /**  	Licensed to the Apache Software Foundation (ASF) under one or more 	contributor license agreements.  See the NOTICE file distributed with 	this work for additional information regarding copyright ownership. 	The ASF licenses this file to You under the Apache License  Version 2.0 	(the "License"); you may not use this file except in compliance with 	the License.  You may obtain a copy of the License at  * 	http://www.apache.org/licenses/LICENSE-2.0  * 	Unless required by applicable law or agreed to in writing  software 	distributed under the License is distributed on an "AS IS" BASIS  	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND  either express or implied. 	See the License for the specific language governing permissions and 	limitations under the License.  */ package com.xpectis.test;    import org.apache.camel.CamelContext; import org.apache.camel.Exchange; import org.apache.camel.ProducerTemplate; import org.apache.camel.builder.RouteBuilder; import org.apache.camel.impl.DefaultCamelContext; import org.apache.commons.logging.Log; import org.apache.commons.logging.LogFactory;  public class ProcessEvent {          private static final transient Log LOG = LogFactory.getLog(ProcessEvent.class);          protected CamelContext camelContext;          protected Object body = "Hello there!";         protected String uri = "event://default";         protected ProducerTemplate<Exchange> template = null;          public void startCamel() throws Exception  {                 camelContext = new DefaultCamelContext();                                 camelContext.addRoutes(createRouteBuilder());                 camelContext.start();                  template = camelContext.createProducerTemplate();                 template.sendBody(uri  body);         }      protected RouteBuilder createRouteBuilder() throws Exception {         return new RouteBuilder() {             @Override                         public void configure() throws Exception  {                 from("event://default").to("mock:test");             }         };     }          /**  	@param args          */         public static void main(String[] args) {                    ProcessEvent event = new ProcessEvent();                 try  {                         event.startCamel();                 }  catch (Exception e)  {                         e.printStackTrace();                 }         }  },Charles you need to use spring as well as the event component is spring events.  What is needed is to set the spring application context on the endpoint before it can be used.. Closing all 1.5.0 issues. 
Task,Claus Ibsen,2008-10-17T08:55:48+0000,1224233748,The event component should be renamed to spring-event in the service file and the wiki doc as well.  It's to confusing with just event  as it's the Spring events it is used for (ApplicationContext),davsclaus btw I was think the event component should we rename it to spring-event ? 10:53 jstrachan yeah  good idea. Closing 1.5 issues. 
Task,Claus Ibsen,2008-10-19T09:13:33+0000,1224407613,See blog http://shotgunsandpenguins.blogspot.com/2008/10/unexpected-chapter.html  Note should be much better in Camel 2.0 when we get rid of the generics and should avoid all the copies.,The NPE is fixed by CAMEL-785.  And the file-file thingy should use mutlicast to send the same message to multiple destinations.. Closing 1.5 issues. 
Improvement,Claus Ibsen,2008-10-19T10:23:38+0000,1224411818,The code in HttpProducer should be smarter to select the correct method to use.  Algorithm: 1) if the method is provided in a header 2) GET if a querystring is provided in a header 3) GET if endpoint is configured with a query string 4) POST if there is data to send 5) GET fallback to get  Also the HttpOperationFailedException is missing a message  so you get the error code and description in the stack-trace,See nabble: http://www.nabble.com/camel-http-instructions-for-Query-string-handling-don%27t-work-td20048788s22882.html. Also add some logging to the http producer. Add an option to set follow redirects on/off. Updated with with algorithm used. Closing 1.5 issues. 
Improvement,Claus Ibsen,2008-10-19T11:58:37+0000,1224417517,When creating components manually etc. you tend to forget to call setCamelContext  A component is much less useful if it doesn't have access to the camel context. And it can cause a few side effects. So we should check that this is set,Also added check in doStart() so if end user have manually created an endpoint and uses eg. createEndpoint with the 3 parameters then the check for camel context provided is bypassed. Now this is in doStart as well so we ensure its there.. Closing 1.5 issues. 
Improvement,Gert Vanthienen,2008-10-19T19:35:28+0000,1224444928,Allow Scala DSL RouteBuilder classes to be discovered from the classpath  just like the Java DSL RouteBuilder.,Fixed by scanning for Routes implementations in http://svn.eu.apache.org/viewvc?view=rev&revision=706059. Closing all 1.5.0 issues. 
Bug,Hadrian Zbarcea,2008-10-20T07:58:11+0000,1224489491,Hi   I have tried to activated the tracing inside my java class like this :          Tracer tracer = new Tracer();         tracer.setLogLevel(LoggingLevel.DEBUG);         tracer.setTraceInterceptors(true);         tracer.getFormatter().setShowBody(true);         tracer.getFormatter().setShowBodyType(true);         camelContext.addInterceptStrategy(tracer);  or inside the springcamel-context file :  <?xml version="1.0" encoding="UTF-8"?> <beans xmlns="http://www.springframework.org/schema/beans"         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"         xsi:schemaLocation="        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd        http://activemq.apache.org/camel/schema/spring http://activemq.apache.org/camel/schema/spring/camel-spring.xsd     ">          <bean id="camelTracer" class="org.apache.camel.processor.interceptor.Tracer">                 <property name="traceExceptions" value="false" />                 <property name="traceInterceptors" value="true" />                 <property name="logLevel" value="DEBUG" />         </bean>          <bean id="traceFormatter" class="org.apache.camel.processor.interceptor.TraceFormatter">                 <property name="showBody" value="true" />                 <property name="showBodyType" value="false" />                 <property name="showHeaders" value="true" />                 <property name="showBreadCrumb" value="false" />         </bean>          <camelContext id="camel" trace="true"                 xmlns="http://activemq.apache.org/camel/schema/spring">                 <route>                         <from uri="event://default" />                         <to uri="stream:out" />                 </route>         </camelContext> </beans>  but the log does not display the header/body ... information  Here is the trace using log4j - DEBUG :  [                          main] DefaultCamelContext            INFO  JMX enabled. Using InstrumentationLifecycleStrategy. [                          main] CamelContextFactoryBean        DEBUG Found JAXB created routes: [Route[ [From[event://default]] -> [To[stream:out]]]] [                          main] SpringCamelContext             DEBUG Publishing event: org.springframework.context.event.ContextRefreshedEvent[source=org.springframework.context.support.ClassPathXmlApplicationContext@dd87b2: display name [org.springframework.context.support.ClassPathXmlApplicationContext@dd87b2]; startup date [Fri Oct 17 12:23:04 CEST 2008]; root of context hierarchy] [                          main] SpringCamelContext             DEBUG Starting the CamelContext now that the ApplicationContext has started [                          main] DefaultInstrumentationAgent    DEBUG Starting JMX agent on server: com.sun.jmx.mbeanserver.JmxMBeanServer@70be88 [                          main] DefaultInstrumentationAgent    DEBUG Registered MBean with objectname: org.apache.camel:context=dell-charles/camel name=context [                          main] DefaultComponent               DEBUG Creating endpoint uri=[event://default]  path=[default]  parameters=[{}] [                          main] DefaultCamelContext            DEBUG event://default converted to endpoint: Endpoint[event://default] by component: org.apache.camel.component.event.EventComponent@19fe451 [                          main] DefaultInstrumentationAgent    DEBUG Registered MBean with objectname: org.apache.camel:context=dell-charles/camel type=endpoints name="event://default?id=0xdaebda6" [                          main] DefaultInstrumentationAgent    DEBUG Registered MBean with objectname: org.apache.camel:context=dell-charles/camel type=processors nodeid=to1 name="To[stream:out]" [                          main] DefaultComponentResolver       DEBUG Found component: stream via type: org.apache.camel.component.stream.StreamComponent via META-INF/services/org/apache/camel/component/stream [                          main] DefaultComponent               DEBUG Creating endpoint uri=[stream:out]  path=[out]  parameters=[{}] [                          main] DefaultCamelContext            DEBUG stream:out converted to endpoint: Endpoint[stream:out] by component: org.apache.camel.component.stream.StreamComponent@111ded2 [                          main] DefaultInstrumentationAgent    DEBUG Registered MBean with objectname: org.apache.camel:context=dell-charles/camel type=endpoints name="stream:out?id=0xb3679825" [                          main] DefaultInstrumentationAgent    DEBUG Registered MBean with objectname: org.apache.camel:context=dell-charles/camel type=routes name="node1" [                          main] DefaultInstrumentationAgent    DEBUG Registered MBean with objectname: org.apache.camel:context=dell-charles/camel type=consumers name=EventConsumer(0x1353249) [                          main] DefaultComponent               DEBUG Creating endpoint uri=[event:default]  path=[default]  parameters=[{}] [                          main] DefaultCamelContext            DEBUG event:default converted to endpoint: Endpoint[event:default] by component: org.apache.camel.component.event.EventComponent@19fe451 [                          main] DefaultInstrumentationAgent    DEBUG Registered MBean with objectname: org.apache.camel:context=dell-charles/camel type=endpoints name="event:default?id=0x1c3b4b06" [                          main] ProducerCache                  DEBUG >>>> Endpoint[event://default] Exchange[Message: Hello there!] [                          main] ResolverUtil                   DEBUG Searching for annotations of org.apache.camel.Converter in packages: [org.apache.camel.converter  org.apache.camel.component.cxf.converter  org.apache.camel.spring.converter] [                          main] ResolverUtil                   DEBUG Using only regular classloaders [                          main] ResolverUtil                   DEBUG Loading from jar: C:\.m2\repository\org\apache\camel\camel-core\1.5-SNAPSHOT\camel-core-1.5-SNAPSHOT.jar [                          main] ResolverUtil                   DEBUG Using only regular classloaders [                          main] ResolverUtil                   DEBUG Loading from jar: C:\.m2\repository\org\apache\camel\camel-cxf\1.5-SNAPSHOT\camel-cxf-1.5-SNAPSHOT.jar [                          main] ResolverUtil                   DEBUG Using only regular classloaders [                          main] ResolverUtil                   DEBUG Found: [class org.apache.camel.component.cxf.converter.CxfConverter  class org.apache.camel.converter.CollectionConverter  class org.apache.camel.converter.jaxp.StreamSourceConverter  class org.apache.camel.converter.NIOConverter  class org.apache.camel.converter.stream.StreamCacheConverter  class org.apache.camel.converter.jaxp.XmlConverter  class org.apache.camel.converter.CamelConverter  class org.apache.camel.converter.IOConverter  class org.apache.camel.converter.jaxp.DomConverter  class org.apache.camel.converter.ObjectConverter  class org.apache.camel.converter.jaxp.StaxConverter] [                          main] AnnotationTypeConverterLoader  DEBUG Loading converter class: org.apache.camel.component.cxf.converter.CxfConverter [                          main] AnnotationTypeConverterLoader  DEBUG Loading converter class: org.apache.camel.converter.CollectionConverter [                          main] AnnotationTypeConverterLoader  DEBUG Loading converter class: org.apache.camel.converter.jaxp.StreamSourceConverter [                          main] AnnotationTypeConverterLoader  DEBUG Loading converter class: org.apache.camel.converter.NIOConverter [                          main] AnnotationTypeConverterLoader  DEBUG Loading converter class: org.apache.camel.converter.stream.StreamCacheConverter [                          main] AnnotationTypeConverterLoader  DEBUG Loading converter class: org.apache.camel.converter.jaxp.XmlConverter [                          main] AnnotationTypeConverterLoader  DEBUG Loading converter class: org.apache.camel.converter.CamelConverter [                          main] AnnotationTypeConverterLoader  DEBUG Loading converter class: org.apache.camel.converter.IOConverter [                          main] DefaultTypeConverter           WARN  Overriding type converter from: InstanceMethodTypeConverter: public java.lang.String org.apache.camel.converter.jaxp.XmlConverter.toString(javax.xml.transform.Source) throws javax.xml.transform.TransformerException to: StaticMethodTypeConverter: public static java.lang.String org.apache.camel.converter.IOConverter.toString(javax.xml.transform.Source) throws javax.xml.transform.TransformerException java.io.IOException [                          main] AnnotationTypeConverterLoader  DEBUG Loading converter class: org.apache.camel.converter.jaxp.DomConverter [                          main] AnnotationTypeConverterLoader  DEBUG Loading converter class: org.apache.camel.converter.ObjectConverter [                          main] AnnotationTypeConverterLoader  DEBUG Loading converter class: org.apache.camel.converter.jaxp.StaxConverter [                          main] SpringCamelContext             DEBUG Publishing event: org.apache.camel.component.event.CamelEvent[source=Endpoint[event://default]]   KR   Charles Moulliard,I was curious who's gonna open issue #1000. Charles  when will meet  the beer's on me .. Beers from me 2 but he's from a lovely beer country so I guess it's best that I come to Luxembourg instead.   Sorry wrong country. Hi   I live in Belgium. So  the beers will be Belgian (Leffe  Maredsous  Duvel  ...).  KR   Charles. Works fine:  [ main] TraceInterceptor INFO ID-claus-ibsens-macbook-pro-local-51578-1234270744241-2-0 >>> spring-event:default --> to(mock:result)  Pattern:InOnly  BodyType:org.springframework.context.event.ContextRefreshedEvent  Body:org.springframework.context.event.ContextRefreshedEvent[source=org.springframework.context.support.ClassPathXmlApplicationContext@336006: display name [org.springframework.context.support.ClassPathXmlApplicationContext@336006]; startup date [Tue Feb 10 13:59:02 CET 2009]; root of context hierarchy]. 
Bug,Claus Ibsen,2008-10-20T15:33:27+0000,1224516807,ExceptionType handledPolicy is not exposed in the XSD.   See nabble thread http://www.nabble.com/RE%3A-How-to-express-new-%22handled%22-predicate-in-Spring-DSL-p20069223.html.,The spring DSL is really not easily usable for the more complex stuff you can do in Java.. Hi Claus   Yes  Spring DSL is limiting. However  would it be possible to simply expose the "HandledPolicy" setter so that I can dependency inject a value using Spring?  Ron. CAMEL-1014 is needed to allow using expressions/predicates. That will be in Camel 2.0  So I am thinking of setting a boolean you can use for handled as this is the most common use-case anyway?  What do you think Ron? <handled>true</handled>. Yes  that would be great.  Thanks   Ron. Great I have the java DSL example from here: http://activemq.apache.org/camel/exception-clause.html  Now working with Spring DSL. So I need to tidy it up and add some snippets so we can have the spring sample in the wiki doc as well.. See wiki for sample  http://cwiki.apache.org/confluence/display/CAMEL/Exception+Clause. Hi Claus   Thanks for the excellent support!  /Ron. Hey guys   If you want to use other expression languages in the handled element  I've just added support for this. So the simple boolean case now looks like  <handled>   <constant>true</constant> </handled>. Closing all 1.5.0 issues. 
Improvement,Hadrian Zbarcea,2008-10-20T16:13:24+0000,1224519204,See http://www.nabble.com/Clustered-Quartz-td20068086s22882.html  Currently Quartz only has CamelJob which implements Quartz's Job interface.  There is no option to use an implemenation of StatefulJob.  This causes problems when you may want to use a JDBC JobStore and have Quartz running on multiple machines  as you may end up with multiple jobs running together.  StatefulJob in effect allows for a blocking singleton style job on one machine.  Attached is a patch which adds a new URI parameter named "stateful"  which defaults to false.  When set to true it uses StatefulCamelJob.  One significant change to the QuartzComponent is that a reference to the CamelContext is now stored in the Quartz Scheduler.  This idea is taken from Spring's SchedulerFactoryBean which stores a reference to a Spring ApplicationContext.  This is needed as when using stateful jobs the URI of the Endpoint is stored instead of a reference to the endpoint.  This is to allow for the use of JDBC JobStore as the URI can be serialised and shared beteen participating schedulers.  Current Faults: Still has no notion of volatility Difference in operation between CamelJob and StatefulCamelJob is not strictly needed.   It may be less confusing if both versions simply store the URI instead of an endpoint reference. You need to use stateful if you want to use clustering at all due to the reason above.  This is mixing together clustering support and blocking functionality. In Camel 2 we may want to try rewriting this Component as it is becoming a little messy.  It would be nice to try and harness the power of Spring's SchedulerFactoryBean.,Working on new patch for 2.0. @Martin  do you mind if I take care of this? I think it would be good to have it in both 1.5.1 and 2.0.. Not at all Hadrian. I would love to see this in 1.5.1 as it is something we need to use fairly soon  but I have not had time to start the patch.  I would take a look at my comments above about "Current Faults". Refactoring my existing patch so that both stateful and non-stateful jobs use my new way of locating the endpoint will prevent having to maintain two ways of doing the same thing in the future.  The only other thing I have thought of is writing a test to show that quartz.properties is loaded correctly so that JDBC job stores and clustering can be configured.  If you get it into the trunk then I am more than happy to help write some tests and document it on the wiki when I start using it.  Thanks for your help.. Patch applied with thanks to Martin on both trunk and camel-1.x branch.. Closing 2.0m1 tickets. 
Bug,Claus Ibsen,2008-10-21T05:42:14+0000,1224567734,See attached patch for details  Unit test inspired by nabble: http://www.nabble.com/Wait-for-condition-td20064420s22882.html,Got a +1 from James. Closing 1.5 issues. 
New Feature,James Strachan,2008-10-21T08:20:07+0000,1224577207,There should be some way to stop a Route from either the XML (e.g. by routeID) or from a RouteBuilder,see the test case  http://svn.apache.org/repos/asf/camel/trunk/camel-core/src/test/java/org/apache/camel/impl/StartAndStopRoutesTest.java  for how we can start/stop routes based on their definition. Closing 2.0m1 tickets. 
Improvement,Claus Ibsen,2008-10-21T08:32:48+0000,1224577968,e.g.   public class Cheese {   public void foo(String bar) {...}    @Handler   public void bar(String cheese) {...}    Then if we did   from("seda:foo").bean(Cheese.class);    it'd be obvious.   I guess its pretty low priority as follks could always do   public class Cheese {   public void foo(String bar) {...}    public void bar(@Body String cheese) {...},Should definitely have a better name than @Handler  The @Body workaround is maybe not to obvious but will of course work as Camel will prefer annotated methods.. James what if there are other annotations?  public class Cheese {   public void foo(@Body String bar) {...}    @Handler    public void bar(String cheese) {...}     public void baz(Object ham)    What should happen? It should choose the foo method  but the @Handler does stand out much more since its a method annotation.  So I am not keen on this. What if it was the reverse. That it would always choose the @Handler if there are multiple choices?. If there are multiple possible methods then the same logic as we support now should kick in - throwing an exception due to ambiguous methods.  I guess we could repurpose the @Consumes method but just let folks omit any URI / ref?. What if @Consumes had a special parameter for this purpose  if we can get a good name?. I think I'd rather a new annotation than require a parameter value on an existing one.. Yes better with a new one  but then we gotta come up with a good name and parameter  or just name.  The purpose is to quickly being able to mark a method as the one Camel should invoke in a class that might have many methods and thus it could be hard to pick the best one. And to use annotations for meta data instead of specifying method=xxx in the Camel route?  Is @Handler the best name? Isnt it associated with all the web frameworks?. Yes @Handler is the best name. When its defined Camel will use this when it looks for method candidates.. trunk: 775955.  Updated wiki page as well for Bean Integration.  @Handler is the name. Closing all 2.0M2 tickets. 
Task,Claus Ibsen,2008-10-21T10:57:53+0000,1224586673,Write some more about that using @Headers Map headers you can also add new headers to the exchange. Whereas the @Header('headerId') is a read-only binding  eg you can add a new key with: headers.put("newKey"  "newValue");,Updated wiki at: http://activemq.apache.org/camel/parameter-binding-annotations.html. Closing 1.5 issues. 
Task,Unassigned,2008-10-21T11:14:49+0000,1224587689,I wonder if there's some way to create a better 'camel news blog' so we can have a simple RSS/Atom feed of all camel related news so folks can track it easier?   e.g. we tend to add stuff to the articles page... http://activemq.apache.org/articles.html  and we have a news page for ActiveMQ and for Camel. I wonder is there some simple way to kinda aggregate them all together so folks can subscribe to "ActiveMQ and Camel News' or something and get updates to any of these 3 feeds?,Something like what we did for http://servicemix.apache.org/servicemix-in-blogosphere.html?. yeah - that looks good. Folks can track using twitter  google search and whatnot today.. 
Task,Unassigned,2008-10-21T11:55:23+0000,1224590123,there are a number of DSL methods in the base class which can be kinda used anywhere - which can lead to confusion... e.g.  http://www.nabble.com/Non-registry-beans-td20088181s22882.html  as part of 2.0.0 we should try zap most of the public methods which don't make much sense - so we encourage folks to use the context based methods.  e.g. rather than   filter(someStaticMethod).to()    we should prefer   filter().xpath("..".to()    i.e. using filter(). in an IDE will show a better completion list than allowing any static method import,But sometimes you need to former when you need to build predicates  filter(header("type").in("gold silver")).to   You cannot do that in the fluent builder  filter().header("type").in("gold silver")).XXXX compiler gets fuzzed and you only have eg java.lang.Object methods  you can not continue the route to. 
Sub-task,James Strachan,2008-10-21T13:39:53+0000,1224596393,,see the documentation: http://cwiki.apache.org/CAMEL/guice-maven-plugin.html. Closing all 1.5.0 issues. 
Improvement,Unassigned,2008-10-21T13:51:50+0000,1224597110,particularly when running with 'mvn camel:run' or 'mvn guice:dot' then it tends to generate slightly messy looking diagrams,Closing all 1.5.0 issues. 
Improvement,James Strachan,2008-10-21T14:42:17+0000,1224600137,Just showing 'Bean Ref" is not terribly useful,Closing all 1.5.0 issues. 
Sub-task,Jonathan Anstey,2008-10-21T15:43:48+0000,1224603828,,Currently RedeliveryPolicyType will be generated into 7 sub elements. Why not use attributes for the 7 simple types?. I agree. Attributes are more suitable here. I've committed the change for this.. Closing 1.5 issues. 
Bug,Claus Ibsen,2008-10-21T16:03:34+0000,1224605014,It looks like children processors of load balancer are not being wrapped by interceptor strategy.  As a result  sendTo processors may not be debuggable by Debugger or monitored by JMX.,William  do you mind double check if there are other model types in camel-core that has this issue as well?. Sure Claus. I'll do a quick search.. Applied patch with thanks. I haven't found any other processor that's having the similar issue. I'll raise a JIRA when I do see any.. I think we should get rid of the casting to SendProcessor. It does not make too much sense.. Closing all 1.5.0 issues. 
Sub-task,Jonathan Anstey,2008-10-21T16:03:38+0000,1224605018,,Damm in ExpressionType everything is more or less @XmlTransient. Is this really needed? Don't we use ExpressionType in the Spring DSL already? For instance  I just used it in the ExceptionType... Maybe I'm missing something obvious here. Yeah sort of  you had to add a new class HandledPredicate to get it in the XSD for the onException. If we need it in other areas as well we have to add new classes there as well. There might be something we can do generally.  If not then .. well then we gotta add the needed classes.. Ah  I think I get it. You'd like to have a reusable JAXB class for creating an expression in an element  like:  <someProcessor>   <someConfigurableNameHere>     <xpath>...</xpath>   </someConfigurableNameHere> </someProcessor>   instead of including say the expression type directly  <someProcessor>   <xpath>...</xpath> </someProcessor>   Make sense?. I just committed a fix for this. Now to get something like this  <someProcessor>   <someConfigurableNameHere>     <xpath>...</xpath>   </someConfigurableNameHere> </someProcessor>   You need to add this to your model class:  @XmlElement(name = "someConfigurableNameHere"  required = false) private ExpressionSubElementType foo;. Closing 1.5 issues. 
Sub-task,Unassigned,2008-10-21T18:33:28+0000,1224614008,see    	http://activemq.apache.org/camel/bean-injection.html 	http://activemq.apache.org/camel/pojo-consuming.html 	http://activemq.apache.org/camel/pojo-producing.html,See the test cases EndpointInjectTest  ConsumeTest and ProduceTest in camel-guice. Closing all 1.5.0 issues. 
Bug,Jonathan Anstey,2008-10-21T21:51:10+0000,1224625870,In the org.apache.camel.util.MainSupport class  the option "-ad" (aggregate-dot) conflicts with the option "-a" (applicationContext) defined in org.apache.camel.spring.Main. Both start with "a". See MainSupport.java:437: fullName.startsWith(arg) yields true with -a and aggregate-dot.  I'm not sure if this is camel-spring or camel-core issue  it depends what was created first. It was working before so I guess the camel-core brought it in recently.  One of the options should be renamed. I would rename the -a to -ac in the camel-spring Main class. So the apps that used -a would barf on the non-existing option so people will know what's going on. What happens now is it just silently ignores your spring config file. Let me know if you need a patch for the change.,I forgot. Temporary woraround is using the full option name: -applicationContext instead of -a.. Nice catch Bela  thanks! I've committed a fix for this.. Closing all 1.5.0 issues. 
Sub-task,Jonathan Anstey,2008-10-22T04:01:34+0000,1224648094,,Sorry my bad  now I see the point. 
Improvement,Willem Jiang,2008-10-22T06:40:51+0000,1224657651,Imagine a use case when the target systems  where http messages have to be sent to  are maintained in a database. In that case the http uri is cannot be set in the camelcontext but it should come from the header of the message. So the http client should check first if there is an uri in the header and if not than use the one given in the camelcontext (like for querystring).,Patch replaced with the one based on the latest svn revision.. Applied patch with thanks to Balazs.  Also updated the wiki page.. Closing 2.0m1 tickets. 
Bug,Willem Jiang,2008-10-23T07:41:03+0000,1224747663,I develop an application on camel.It's routing logic as follows: <route> 	<from uri="cxf:bean:routerEndpoint" /> 	<try> 		<process ref="ipValidateProcessor" /> 		<choice> 			<when> 				<!-- First predicate --> 				<el>${in.headers.IP_VALIDATE_RESULT == 'true'}</el> 				<to uri="cxf:bean:serviceEndpoint" /> 				<process ref="responseProcessor" /> 			</when> 			<otherwise> 				<process ref="invalidIPProcessor" /> 			</otherwise> 		</choice> 		<catch> 			<exception>com.aspire.archtype.camel.exception.AppException</exception> 			<process ref="sreExceptionHandler"></process> 		</catch> 	</try> </route>  I do a pressure testing on this application with LoadRunner. My test case is as follows: 1. loadrunner send a reqeust 2. server receive the request  and then forward it to IPValidateProcessor 3. IPValidateProcessor set exchange.getIn().setHeader("IP_VALIDATE_RESULT"  "true");  4. do <to uri="cxf:bean:serviceEndpoint" /> 5. do <process ref="responseProcessor" /> 6. end  I only want to test the <when> clause in the routing logic. When only one virtual user runs the test case once  it runs ok. But when have 30 virtual users concurrent run for 1 minute  some of the transactions run into <otherwise> clause.I found that   they run into <otherwise> because in.headers.IP_VALIDATE_RESULT is null.  I don't now why  the same requests  most run into <when> clause  few  run into <otherwith> clause?,Are your virtual users using the same IP address to send the request ? Can you write the log in the responseProcessor for tracing the request?  I don't think it is a concurrent issue of camel  here are some document about it[1]. [1] http://activemq.apache.org/camel/parallel-processing-and-ordering.html. Did you try to send the request with 5   10  20 virtual user ?. IPValidateProcessor doesn't care about requestor's IP address  I hard code follow logic in the processor: exchange.getIn().setHeader("IP_VALIDATE_RESULT"  "true");. I try 10 virtual users  the same result.  I have upload my processors in the attachments.. some output log in the invalidIPProcessor: ... IP_VALIDATE_RESULT is [null] Request ServiceID is [2674] IP_VALIDATE_RESULT is [null] Request ServiceID is [2674] Request ServiceID is [2674] IP_VALIDATE_RESULT is [null] Request ServiceID is [2674] Request ServiceID is [2674] Request ServiceID is [2674] IP_VALIDATE_RESULT is [null] Request ServiceID is [2674] IP_VALIDATE_RESULT is [null] Request ServiceID is [2674] IP_VALIDATE_RESULT is [null] Request ServiceID is [2674] IP_VALIDATE_RESULT is [null] Request ServiceID is [2674] IP_VALIDATE_RESULT is [null] Request ServiceID is [2674] IP_VALIDATE_RESULT is [null] Request ServiceID is [2674] IP_VALIDATE_RESULT is [null] Request ServiceID is [2674] IP_VALIDATE_RESULT is [null] Request ServiceID is [2674] IP_VALIDATE_RESULT is [null] Request ServiceID is [2674] IP_VALIDATE_RESULT is [null] .... After went through your code  I found you made a great mistake in your processor. You can't store the exchange as the object member  which is the critical variable when you run the processor in the multi-thread environment. Since more than one thread can change the exchange object in the IPValidateProcessor  that will explain why your IPValidateProcessor can't set the right exchange's message header. You need to keep your processors to use the original process method  which makes sure your processor's process method is reentrant function(可重入函数).. This is a user code error.. Willem  you are right.I have a mistake understanding about processor. Thanks a lot for your help!. Closing all 1.5.0 issues. 
Improvement,Willem Jiang,2008-10-23T12:37:15+0000,1224765435,http://www.nabble.com/Correlation-of-request-and-response-td20118949s22882.html,Closing all 1.5.0 issues. 
Bug,Claus Ibsen,2008-10-23T17:57:39+0000,1224784659,This is a ticket holding some issues I have seen with the examples we ship in Camel. Please add if you find any issues as well,camel-example-spring-jms  Throws a Spring exception during starup. Looks like a Spring Bug: http://jira.springframework.org/browse/SPR-4524 NO Ah it was the fact that the Camel Spring Main main arguments changed from a to ac to indicate which spring xml file to load. DONE. camel-example-spring-xquery  doesn't transform and output the first and lastname of James. So the name xml tag is empty in the output file in: target\outputFiles DONE. camel-example-guice-jms  The ANT build.xml file is a copy from another example DONE The readme.txt should also state that you need to download GUICE and GUICEFRUIT as well. DONE. camel-example-docs  Should not use DEBUG logging for Camel DONE. I can't find the way to download the guicyfuit without help of maven. Maybe we need to add a assembly module in guicyfuit to generate the kit.. @Willem. Yeah those wanna download the guicy stuff are in bad luck if not using maven. There is probably a ton of .jars to go hunt for in the repos   I am sure James would love some help/patches to his project so he could generate a nice .zip for non maven users as well. http://code.google.com/p/guiceyfruit/. @Claus  I just submitted a patch for adding an assembly module for guiceyfruit. Hope James will commit it soon.. 
Bug,Claus Ibsen,2008-10-23T18:10:29+0000,1224785429,The pipeline route such as:         from("seda:pipeline.in").to("seda:pipeline.out1"  "seda:pipeline.out2"  "seda:pipeline.out3");  Is not rendered correct. It looks like the multicast instead.,See also CAMEL-1021 where it warns about some images not being proper when generating the docs example. The choice DSL is rendered as a empty yellow box. If possible we should add the choice as text  Also the when text is written below the yellow box  if possible insert it into the box instead. See the docs example. I think actually I fixed there in the last 1.5 RC. Duplicate and already fixed in 1.5. 
Bug,Claus Ibsen,2008-10-24T05:51:53+0000,1224827513,And it has a few other areas as well that could be polished.,Committed a fix. Closing all 1.5.0 issues. 
Improvement,Unassigned,2008-10-24T08:12:59+0000,1224835979,mostly they are about setting key/value pairs and firing the expression off. I wonder if we could refactor the implementations of the languages so we mostly have a common bit of code that binds the state (exchange / headers / properties / body etc) and have a non-camel-exchange specific API so we could invoke the expressions from other libraries?,We had an API overhaul for 2.0. Lets keep it as is now.. 
Improvement,Unassigned,2008-10-24T08:14:28+0000,1224836068,I'd have thoughts lots of libraries would find the type conversion mechanism very useful?   No biggie but I wonder how Camel API dependent it really is - e.g. does it really need to depend on Exchange?,It depends on Exchange because then it can get hold on CamelContext to get hold of the TypeConverterRegistry where we can leverage other type converters.  Depending on Exchange also allows us to read properties/headers set for eg desired charset. For instance used by the byte[] converters.  So it is somewhat dependent on this. I dont think its feasable to break this to allow the type converter to be 100% not dependent on the Camel API.. Lets stick Camel to Camel. 
Bug,Hadrian Zbarcea,2008-10-24T10:25:05+0000,1224843905,Here is the non-blocking error appearing on the console in debug mode of Camel 1.4  2008-10-24 12:18:59 449 [00&period=60000] DEBUG ManagementContext              - Failed to create local registry java.rmi.server.ExportException: internal error: ObjID already in use 	at sun.rmi.transport.ObjectTable.putTarget(Unknown Source) 	at sun.rmi.transport.Transport.exportObject(Unknown Source) 	at sun.rmi.transport.tcp.TCPTransport.exportObject(Unknown Source) 	at sun.rmi.transport.tcp.TCPEndpoint.exportObject(Unknown Source) 	at sun.rmi.transport.LiveRef.exportObject(Unknown Source) 	at sun.rmi.server.UnicastServerRef.exportObject(Unknown Source) 	at sun.rmi.registry.RegistryImpl.setup(Unknown Source) 	at sun.rmi.registry.RegistryImpl.<init>(Unknown Source) 	at java.rmi.registry.LocateRegistry.createRegistry(Unknown Source) 	at org.apache.activemq.broker.jmx.ManagementContext.createConnector(ManagementContext.java:365) 	at org.apache.activemq.broker.jmx.ManagementContext.findMBeanServer(ManagementContext.java:293) 	at org.apache.activemq.broker.jmx.ManagementContext.getMBeanServer(ManagementContext.java:148) 	at org.apache.activemq.broker.jmx.ManagementContext.start(ManagementContext.java:77) 	at org.apache.activemq.broker.BrokerService.start(BrokerService.java:441) 	at org.apache.activemq.transport.vm.VMTransportFactory.doCompositeConnect(VMTransportFactory.java:119) 	at org.apache.activemq.transport.vm.VMTransportFactory.doConnect(VMTransportFactory.java:53) 	at org.apache.activemq.transport.TransportFactory.doConnect(TransportFactory.java:47) 	at org.apache.activemq.transport.TransportFactory.connect(TransportFactory.java:76) 	at org.apache.activemq.ActiveMQConnectionFactory.createTransport(ActiveMQConnectionFactory.java:235) 	at org.apache.activemq.ActiveMQConnectionFactory.createActiveMQConnection(ActiveMQConnectionFactory.java:250) 	at org.apache.activemq.ActiveMQConnectionFactory.createActiveMQConnection(ActiveMQConnectionFactory.java:222) 	at org.apache.activemq.ActiveMQConnectionFactory.createConnection(ActiveMQConnectionFactory.java:170) 	at org.apache.activemq.pool.PooledConnectionFactory.createConnection(PooledConnectionFactory.java:125) 	at org.apache.activemq.pool.PooledConnectionFactory.createConnection(PooledConnectionFactory.java:110) 	at org.apache.activemq.pool.PooledConnectionFactory.createConnection(PooledConnectionFactory.java:86) 	at org.springframework.jms.support.JmsAccessor.createConnection(JmsAccessor.java:184) 	at org.springframework.jms.core.JmsTemplate.execute(JmsTemplate.java:461) 	at org.springframework.jms.core.JmsTemplate.send(JmsTemplate.java:548) 	at org.apache.camel.component.jms.JmsProducer.process(JmsProducer.java:227) 	at org.apache.camel.processor.MulticastProcessor.process(MulticastProcessor.java:190) 	at org.apache.camel.processor.RecipientList.sendToRecipientList(RecipientList.java:75) 	at org.apache.camel.processor.RecipientList.process(RecipientList.java:59) 	at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:50) 	at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:79) 	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:84) 	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:43) 	at org.apache.camel.processor.Pipeline.process(Pipeline.java:115) 	at org.apache.camel.processor.Pipeline.process(Pipeline.java:89) 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:41) 	at org.apache.camel.processor.Pipeline.process(Pipeline.java:57) 	at org.apache.camel.processor.MulticastProcessor.process(MulticastProcessor.java:190) 	at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:50) 	at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:79) 	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:84) 	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:75) 	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:172) 	at org.apache.camel.processor.DeadLetterChannel.process(DeadLetterChannel.java:93) 	at org.apache.camel.processor.Pipeline.process(Pipeline.java:115) 	at org.apache.camel.processor.Pipeline.process(Pipeline.java:89) 	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:63) 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:41) 	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:50) 	at org.apache.camel.processor.DelegateProcessor.processNext(DelegateProcessor.java:50) 	at org.apache.camel.processor.DelegateProcessor.proceed(DelegateProcessor.java:79) 	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:84) 	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:43) 	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:47) 	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:41) 	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:66) 	at org.apache.camel.component.timer.TimerConsumer.sendTimerExchange(TimerConsumer.java:98) 	at org.apache.camel.component.timer.TimerConsumer$1.run(TimerConsumer.java:49) 	at java.util.TimerThread.mainLoop(Unknown Source) 	at java.util.TimerThread.run(Unknown Source)  Here is the route   <?xml version="1.0" encoding="UTF-8"?> <beans xmlns="http://www.springframework.org/schema/beans" 	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context" 	xsi:schemaLocation="        http://www.springframework.org/schema/beans         http://www.springframework.org/schema/beans/spring-beans-2.5.xsd        http://www.springframework.org/schema/context         http://www.springframework.org/schema/context/spring-context-2.5.xsd        http://activemq.apache.org/camel/schema/spring         http://activemq.apache.org/camel/schema/spring/camel-spring.xsd">  	<!--  ActiveMQ brokerURL using VM protocol --> 	<bean id="jms" class="org.apache.activemq.camel.component.ActiveMQComponent"> 		<property name="brokerURL" value="vm://localhost:61616?broker.persistent=false" /> 	</bean>  	<bean id="camelTracer" class="org.apache.camel.processor.interceptor.Tracer"> 		<property name="traceExceptions" value="false" /> 		<property name="traceInterceptors" value="true" /> 		<property name="logLevel" value="DEBUG" /> 		<property name="logName" value="com.xpectis.tracker" /> 	</bean>  	<bean id="traceFormatter" class="org.apache.camel.processor.interceptor.TraceFormatter"> 		<property name="showBody" value="true" /> 		<property name="showHeaders" value="true" /> 		<property name="showBodyType" value="false" /> 		<property name="showBreadCrumb" value="false" /> 	</bean>  	<bean id="myXstreamDataFormat" class="com.xpectis.model.Formatter" 		factory-method="createInstance"> 		<constructor-arg value="com.xpectis.model.StockPrice" /> 	</bean>  	<bean id="stockPriceGenerator" class="com.xpectis.service.common.impl.StockPriceGenerator" />  	<camelContext id="camel" trace="true" 		xmlns="http://activemq.apache.org/camel/schema/spring"> 		<jmxAgent id="agent" createConnector="true" />  		<route> 			<from uri="timer:generateStockPrice?fixedRate=true&delay=100&period=60000" /> 			<to uri="bean:stockPriceGenerator" /> 			<marshal ref="myXstreamDataFormat" /> 			<splitter> 				<xpath>//price</xpath> 				<setHeader headerName="stock"> 					<xpath>//price/@stock</xpath> 				</setHeader> 				<recipientList> 					<simple>jms:topic:STOCK.${in.header.stock}</simple> 				</recipientList> 			</splitter> 		</route> 	</camelContext> </beans>,The error is not generated when I disable the jmx agent in camel context : <!-- <jmxAgent id="agent" createConnector="true" /> -->. This seems to happen actually in activemq  not in camel (org.apache.activemq.broker.jmx.ManagementContext.createConnector).  It looks like activemq is creating a new RMI registry when one already exists in the same VM (see the call to sun.rmi.registry.RegistryImpl's constructor). That said  I cannot reproduce this with 1.5. In camel-example-spring-jms  setting in log4j.properties both: log4j.logger.org.apache.camel=DEBUG log4j.logger.org.apache.activemq=DEBUG  ... does not give the error you described. Could you please try 1.5.0-RC1? Or RC2 if you wait until tomorrow.. Closing all 1.5.0 issues. 
Bug,Willem Jiang,2008-10-27T08:30:13+0000,1225096213,The toString() codes of  ConvertBodyType   public String toString() {         return "convertBodyTo[" + getType() + "]";  }    if the ConvertBodyType's  typeClass member is set  the toString() method will not not reflect that.  Here is the mail thread which talks about it. http://markmail.org/message/irikh3gxsff6vnlg?q=Problems+with+convertBodyTo+in+Java+DSL,Closing all 1.5.0 issues. 
Bug,Unassigned,2008-10-27T11:08:18+0000,1225105698,Don't require a login in the send mail URI because internal relay mail servers don't require them.  If you do include one  the mail server gets confused and thinks that you are looping and it will bounce the email so this is a bit inconvenient bug.  Thread [Thread: 1 org.apache.camel.component.mail.MailComponent@663ec] (Suspended (exception NullPointerException))	 	Properties(Hashtable<K V>).put(K  V) line: 394	 	MailConfiguration.createJavaMailProperties() line: 146	 	MailConfiguration.createJavaMailSender() line: 107	 	MailEndpoint.createProducer() line: 53	 	ProducerCache<E>.getProducer(Endpoint<E>) line: 50	 	ProducerCache<E>.send(Endpoint<E>  Processor) line: 84	 	DefaultProducerTemplate<E>.send(Endpoint<E>  Processor) line: 84	 	DefaultProducerTemplate<E>.sendBodyAndHeaders(Endpoint  Object  Map<String Object>) line: 143	 	DefaultProducerTemplate<E>.sendBodyAndHeaders(String  Object  Map<String Object>) line: 139	 	LogEmailThrowsAdvice.sendEmail(String) line: 64	 	LogEmailThrowsAdvice.afterThrowing(Method  Object[]  Object  Exception) line: 42	 	NativeMethodAccessorImpl.invoke0(Method  Object  Object[]) line: not available [native method]	 	NativeMethodAccessorImpl.invoke(Object  Object[]) line: 39	 	DelegatingMethodAccessorImpl.invoke(Object  Object[]) line: 25	 	Method.invoke(Object  Object...) line: 597	 	ThrowsAdviceInterceptor.invokeHandlerMethod(MethodInvocation  Throwable  Method) line: 146	 	ThrowsAdviceInterceptor.invoke(MethodInvocation) line: 131	 	ReflectiveMethodInvocation.proceed() line: 171	 	JdkDynamicAopProxy.invoke(Object  Method  Object[]) line: 204	 	$Proxy24.process(Exchange) line: not available	 	BeanProcessor.process(Exchange) line: 81	 	BeanEndpoint(ProcessorEndpoint).onExchange(Exchange) line: 92	 	ProcessorEndpoint$1.process(Exchange) line: 66	 	AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(Exchange  AsyncCallback) line: 43	 	SendProcessor.process(Exchange  AsyncCallback) line: 75	 	InstrumentationProcessor.process(Exchange  AsyncCallback) line: 57	 	DeadLetterChannel.process(Exchange  AsyncCallback  DeadLetterChannel$RedeliveryData) line: 155	 	DeadLetterChannel.process(Exchange  AsyncCallback) line: 91	 	InstrumentationProcessor.process(Exchange  AsyncCallback) line: 57	 	UnitOfWorkProcessor.process(Exchange  AsyncCallback) line: 39	 	AsyncProcessorHelper.process(AsyncProcessor  Exchange) line: 41	 	UnitOfWorkProcessor(DelegateAsyncProcessor).process(Exchange) line: 66	 	MailConsumer.processMessage(Message) line: 169	 	MailConsumer.processMessages(Message[]) line: 151	 	MailConsumer.poll() line: 105	 	MailConsumer(ScheduledPollConsumer<E>).run() line: 65	 	Executors$RunnableAdapter<T>.call() line: 441	 	FutureTask$Sync.innerRunAndReset() line: 317	 	ScheduledThreadPoolExecutor$ScheduledFutureTask<V>(FutureTask<V>).runAndReset() line: 150	 	ScheduledThreadPoolExecutor$ScheduledFutureTask<V>.access$101(ScheduledThreadPoolExecutor$ScheduledFutureTask) line: 98	 	ScheduledThreadPoolExecutor$ScheduledFutureTask<V>.runPeriodic() line: 181	 	ScheduledThreadPoolExecutor$ScheduledFutureTask<V>.run() line: 205	 	ThreadPoolExecutor$Worker.runTask(Runnable) line: 885	 	ThreadPoolExecutor$Worker.run() line: 907	 	Thread.run() line: 619	   Code: AOPExceptionHandler: 	private void sendEmail(String errors)  { 		template = camelContext.createProducerTemplate(); 		StringBuffer body = new StringBuffer("Hello Techops.\n"); 		body.append("Got an exception please handle.\n\nRegards Reportdev.\n\n"); 		body.append(errors); 		template.sendBodyAndHeaders(emailServerUri  body  emailProperties); 	}  applicationContext.xml <bean id="logThrowsAdvice" class="com.contextweb.advice.LogEmailThrowsAdvice"> 		<property name="camelContext" ref="camel" /> 		<property name="sendMail" value="true" /> 		<!-- username=reportdev&to=DPeterson@apache.com --> 		<property name="emailServerUri" 			value="smtp://mail.apache.corp" /> 		<property name="emailProperties"> 			<map> 				<entry key="From"> 					<value>"ReportDev@apache.com"</value> 				</entry> 				<entry key="Subject"> 					<value>"Exception in 3rd Party Reporting Email 						Processing"</value> 				</entry> 				<entry key="To"> 					<value>"DPeterson@apache.com"</value> 				</entry> 			</map> 		</property> 		<property name="logFactory" ref="LogFactoryBean" /> 	</bean>  Workaround is to use URI for "To" and put the username after the ? in the URI.  This will fool the mail relay server into routing the email bypassing it's loop detection logic: 	<!-- Define the ThrowsAdvice bean --> 	<bean id="logThrowsAdvice" class="com.contextweb.advice.LogEmailThrowsAdvice"> 		<property name="camelContext" ref="camel" /> 		<property name="sendMail" value="true" /> 		<property name="emailServerUri" 			value="smtp://mail.contextweb.corp?username=reportdev&to=DPeterson@apache.com" /> 		<property name="emailProperties"> 			<map> 				<entry key="From"> 					<value>"ReportDev@apache.com"</value> 				</entry> 				<entry key="Subject"> 					<value>"Exception in 3rd Party Reporting Email 						Processing"</value> 				</entry> 			</map> 		</property> 		<property name="logFactory" ref="LogFactoryBean" /> 	</bean>,Changed eclipse to catch the actual NullPointerException so replacing the stack trace w/ a better one.. David I think this one is fixed in Camel 1.5.  Can you try with 1.5-SNAPSHOT?. This seems to be fixed in 1.5-SNAPSHOT. Feel free to close this.. Yes  it is fixed in 1.5-SNAPSHOT.  Thanks.. However  I have to stay with my workaround for now. I cannot switch to 1.5-SNAPSHOT until this gets fixed (was working in 1.4  broken in 1.5).  http://www.nabble.com/processOnlyUnseenMessages%3Dtrue-not-working-in-1.4.0--tt20120636s22882.html#a20169282. David  Isn't he problem with processOnlyUnseenMessages not because of POP3? If you use IMAP does it not work in 1.5?. Yes  I'm speaking about the new error #2. Sorry  it's a bit buried down in the Forum thread  but here is a snippet of it along with Janstey's comment that it will be fixed in the next snapshot.  2.  New Exception in trying to process Excel files.  This works in 1.4.0 so something got broken in 1.5-SNAPSHOT.  [org.apache.camel.NoTypeConversionAvailableException] thrown by target class [com.contextweb.mail.MailReader] and method [public abstract void org.apache.camel.Processor.process(org.apache.camel.Exchange) throws java.lang.Exception]org.apache.camel.NoTypeConversionAvailableException: No type converter available to convert from type: class com.sun.mail.util.BASE64DecoderStream to the required type: org.apache.commons.logging.Log with value com.sun.mail.util.BASE64DecoderStream@aa4bf8         at org.apache.camel.impl.converter.DefaultTypeConverter.convertTo(DefaultTypeConverter.java:117)  Janstey response:  #2 should be fixed in the next SNAPSHOT deploy.. David  #2 Yes it should be fixed in 1.5.  Jonathan have committed the fix: Author: janstey Date: Sat Oct 25 18:38:39 2008 New Revision: 707928. 
Test,Willem Jiang,2008-10-27T13:43:34+0000,1225115014,http://markmail.org/message/woulrs2c63zhwrwe?q=SOAP+message+schema+validation+with+CXF+endpoint  We need to add a test to verify it.,Closing all 1.5.0 issues. 
Task,Jonathan Anstey,2008-10-27T16:27:51+0000,1225124871,When http://jira.codehaus.org/browse/JRUBY-3073 is resolved  we should upgrade to that release and enable the ruby script tests on IBM JDK again.  This is the merge where I disabled the ruby tests: http://svn.apache.org/viewvc?view=rev&revision=708229  See https://issues.apache.org/activemq/browse/CAMEL-939 for history of issues on IBM JDK.,Update: JRUBY-3073 has been fixed and will be included in JRuby 1.1.7. This FAQ should be updated when its fixed: http://camel.apache.org/does-camel-work-on-ibms-jdk.html. JRuby 1.2.0 contains the needed fix for this.. Closing all 2.0M2 tickets. 
New Feature,Jonathan Anstey,2008-10-28T07:50:54+0000,1225180254,I think we should add a mvel-component and/or language support as well. It's moving forward opposed to velocity  http://mvel.codehaus.org/  It's Apache 2.0 license http://mvel.codehaus.org/About  And hopefully in the central maven repo so it's easy to get started  .,Find attached a MVEL component very like the one for OGNL. Looks good Przemyslaw. Thanks for the contribution! I'll commit your patch shortly.  Before this is added to the build/distribution  a couple more things need to be done:  Allow mvel expressions to be used in an expression clause (grep for 'ognl' in camel-core to see an example of this) Add wiki documentation. Do you have rights for this?  Also a handy tip for future patches is to run CheckStyle first so it picks up any formatting issues. You can add a profile to do this  mvn install -Psourcecheck. Yes I knew that and I decided not to integrate with the core. Let me know if you want me to do that to avoid us doing the same things. As for the wiki - yes I have access and I'll put some info as soon as I find some time hopefully today. As for the formatting I thought every commiter has the Apache formatting rules in the IDE (I personally don't) so when veryfing the code does formating for himself (my assumption)  but if not so - ok I will take that into account next time.. Go for it if you're interested. No biggie if you're not though (I can put that in next week). The wiki bit is the more important one anyways.  Cheers and I'm looking forward to more contributions from you. Keep up the good work!. camel-core updated. my wiki-edit rights have gone (guess it worked few months ago). could you re-grant me that ?. Whats your username on wiki?. Przemyslaw Budzik  Thanks for the patch. There were a few other places you needed to add stuff. I have committed it to trunk.  jaxb.index for example is a file we always forget to alter. Otherwise it's not there in the Spring DSL/XML. TODO: Update wiki. Wiki is now updated. Closing 2.0m1 tickets. 
Improvement,Unassigned,2008-10-28T10:33:24+0000,1225190004,We need some wiki documentation such as  	FAQ about how to consumer concurrency (eg JMS  and if there are other components that has this feature) 	What thread DSL is useful for etc.    See nabble: http://www.nabble.com/activemq-endpoint-and-thread-pools-tt20187089s22882.html,There is a FAQ entry also  but I guess it is a bit hard to find this gem as it's the consumer that is responsible for concurrency  and not the thread pool.  http://activemq.apache.org/camel/why-does-my-jms-route-only-consume-one-message-at-once.html  Also the jms component has some documentation how to configure concurrency: http://activemq.apache.org/camel/jms.html  And some notes about concurrency here: http://activemq.apache.org/camel/parallel-processing-and-ordering.html  A good tip is to use the search inputbox (menu to the right) on the camel site. http://activemq.apache.org/camel/  I think what is needed is a wiki page about the thread DSL and what it can be used for. And with links to relevant pages such as some of the ones above.. Need some more documentation for SEDA and Direct queues as well. At least they should link to each other. Also about using concurrency with these.. 
Improvement,James Strachan,2008-10-29T11:10:14+0000,1225278614,,You can now use code like this  MessageListener listener = CamelMessageListener.newInstance(camelContext  "direct:foo");   where "direct:foo" is whatever Camel URI you want to use to process the incoming JMS message.  So this code can be easily wrapped up in an MDB or JMS framework if you prefer.  Though if you are using Spring we recommend using the JMS endpoint directly. Closing 2.0m1 tickets. 
Bug,Jonathan Anstey,2008-10-29T14:09:25+0000,1225289365,Perhaps some subtle configuration issue  but a Camel stream resequencer that is a route between 2 ActiveMQ queues fails to deliver all ordered messages. In fact  using the defaults for a StreamResequencer only 1 out of 100 messages are delivered. However  all 100 messages have been removed from the Producer queue by the resequencer and are not moved to the consumer queue either (even unordered).   Relevant points:  	Broker is run external to Camel route (non-embedded  no VM transport) 	Producer is a Camel ProducerTemplate 	Consumer is a Camel route that listens on another delivery queue and delivers message to a simple stdout Processor 	Resequencer uses stream defaults (100  1000ms) 	Trace warns of some Converter override (see attached trace) and throws a breadcrumb error 	Resequencer fails delivery whether using body (long) or seqnum header (long) 	all JMS components are configured for AutoAcks,BTW does the test work when using regular requencer rather than the stream one?. Same thing with batch...just one message gets through with default config.. Peter   thanks for your detailed report. Attached is a patch that fixes the issue with the StreamResequencer.  The issue with the regular resequencer (the one that extends the BatchProcessor) remains because the process(Exchange) method is empty. In addition to the BatchProcessor's polling consumer  an additional JmsConsumer is created by the JMS endpoint that competes with the polling consumer. The JmsConsumer then calls the empty process(Exchange) method and the exchange is lost. I had no time so far to fix the issues for the BatchProcessor. Hope the fix for the StreamResequencer helps you so far.. Thanks for this Martin! I've committed your fix in revision 709173.  Peter  would you mind trying out the latest code from trunk?. Works great for stream. Thanks all!. Could we create a new ticket or sub ticket with the renaming work on the non stream that Martin mentions  so we wont forget it. Maybe if Martin has a bit time in the future he will commit a fix for that issue as well.. Created CAMEL-1037 to track this issue.. Closing 2.0m1 tickets. 
Bug,Willem Jiang,2008-10-30T10:25:39+0000,1225362339,Using Apache Camel 1.5-SNAPSHOT with Eclipse RCP 3.x I get a java.io.FileNotFoundException on loading the converters (see stacktrace below).  It seems that issue CAMEL-774 is not fixed.   I tried to debug the source code:   — SOURCE: ResolverUtil.java ----               Method mth = loader.getClass().getMethod("getBundle"  new Class[] {});              if (mth != null) {                  // it's osgi bundle class loader  so we need to load implementation in bundles                  if (LOG.isDebugEnabled())  {                      LOG.debug("Loading from osgi buindle using classloader: " + loader);                  }                   loadImplementationsInBundle(test  packageName  loader  mth);                  return;              }   — END SOURCE —   "loader.getClass().getMethod("getBundle"  new Class[] {});" returns null because the loader is of type "org.eclipse.core.runtime.internal.adaptor.ContextFinder" and does not have a "getBundle" method.  Please see discussion at: http://www.nabble.com/ResolverUtil-under-Eclipse-RPC-(OSGi)-error%3A-Could-not-read-entries-in-url%3A-bundleresource%3A--36-org-apache-camel-converter-to20205017s22882.html  Sample project can be downloaded at: http://www.fastshare.org/download/eclipse_camel_test.zip  Unzip the project and import it to you Eclipse Workspace. You have to use Eclipse because it's an Eclipse plugin.  Instructions to start the project: 1.	Download  unzip and start an ActiveMQ server. 2.	Run "ServiceServer" as "Java-Application". 3.	Open plugin.xml and click on "Launch an Eclipse Application"; 4.	A new Eclipse instance will be start. Select "Sample Menu"  "Sample Action" in the new Eclipse window. 5.	Check the errors in the console view.   — START TRACE LOG —  28.10.2008 16:18:17 org.apache.camel.util.ResolverUtil findAnnotated FEIN: Searching for annotations of org.apache.camel.Converter in packages: [org.apache.camel.converter  org.apache.camel.spring.converter] 28.10.2008 16:18:17 org.apache.camel.util.ResolverUtil find AM FEINSTEN: Searching for: annotated with @Converter in package: org/apache/camel/converter using classloader: org.eclipse.core.runtime.internal.adaptor.ContextFinder 28.10.2008 16:18:17 org.apache.camel.util.ResolverUtil find AM FEINSTEN: It's not an osgi bundle classloader 28.10.2008 16:18:17 org.apache.camel.util.ResolverUtil getResources AM FEINSTEN: Getting resource URL for package: org/apache/camel/converter with classloader: org.eclipse.core.runtime.internal.adaptor.ContextFinder@983d95 28.10.2008 16:18:17 org.apache.camel.util.ResolverUtil find AM FEINSTEN: URL from classloader: bundleresource://36/org/apache/camel/converter 28.10.2008 16:18:17 org.apache.camel.util.ResolverUtil find AM FEINSTEN: Decoded urlPath: /org/apache/camel/converter 28.10.2008 16:18:17 org.apache.camel.util.ResolverUtil find AM FEINSTEN: Scanning for classes in [/org/apache/camel/converter] matching criteria: annotated with @Converter 28.10.2008 16:18:17 org.apache.camel.util.ResolverUtil find WARNUNG: Could not read entries in url: bundleresource://36/org/apache/camel/converter java.io.FileNotFoundException: \org\apache\camel\converter (Das System kann den angegebenen Pfad nicht finden)         at java.io.FileInputStream.open(Native Method)         at java.io.FileInputStream.<init>(FileInputStream.java:106)         at org.apache.camel.util.ResolverUtil.find(ResolverUtil.java:371)         at org.apache.camel.util.ResolverUtil.find(ResolverUtil.java:279)         at org.apache.camel.util.ResolverUtil.findAnnotated(ResolverUtil.java:255)         at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.load(AnnotationTypeConverterLoader.java:66)         at org.apache.camel.impl.converter.DefaultTypeConverter.checkLoaded(DefaultTypeConverter.java:218)         at org.apache.camel.impl.converter.DefaultTypeConverter.convertTo(DefaultTypeConverter.java:64)         at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:59)         at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:50)         at org.apache.camel.processor.interceptor.TraceFormatter.getBodyAsString(TraceFormatter.java:115)         at org.apache.camel.processor.interceptor.TraceFormatter.format(TraceFormatter.java:39)         at org.apache.camel.processor.interceptor.TraceInterceptor.format(TraceInterceptor.java:68)         at org.apache.camel.processor.Logger.logMessage(Logger.java:218)         at org.apache.camel.processor.Logger.process(Logger.java:88)         at org.apache.camel.processor.interceptor.TraceInterceptor.logExchange(TraceInterceptor.java:124)         at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:55)         at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:43)         at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:39)         at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:41)         at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:66)         at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:47)         at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:149)         at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:134)         at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:92)         at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:74)         at org.apache.camel.component.cxf.transport.CamelConduit$CamelOutputStream.commitOutputMessage(CamelConduit.java:168)         at org.apache.camel.component.cxf.transport.CamelConduit$CamelOutputStream.doClose(CamelConduit.java:151)         at org.apache.cxf.io.CachedOutputStream.close(CachedOutputStream.java:156)         at org.apache.cxf.io.CacheAndWriteOutputStream.postClose(CacheAndWriteOutputStream.java:47)         at org.apache.cxf.io.CachedOutputStream.close(CachedOutputStream.java:159)         at org.apache.cxf.transport.AbstractConduit.close(AbstractConduit.java:66)         at org.apache.cxf.interceptor.MessageSenderInterceptor$MessageSenderEndingInterceptor.handleMessage(MessageSenderInterceptor.java:62)         at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:221)         at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:296)         at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:242)         at org.apache.cxf.frontend.ClientProxy.invokeSync(ClientProxy.java:73)         at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:178)         at $Proxy84.gibAlleDimensionenUndDescriptoren(Unknown Source)         at net.enbw.etg.rcm.pfc.marktdaten.MarktDatenProviderImpl.getAlleDimensionenUndDescriptoren(MarktDatenProviderImpl.java:183)         at net.enbw.etg.rcm.pfc.proxies.ServiceLocator.getAlleDimensionenUndDeskriptoren(ServiceLocator.java:187)         at net.enbw.etg.rcm.pfc.view.navigator.Navigator$2.doInBackground(Navigator.java:181)         at net.enbw.etg.rcm.pfc.view.navigator.Navigator$2.doInBackground(Navigator.java:1)         at javax.swing.SwingWorker$1.call(SwingWorker.java:278)         at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)         at java.util.concurrent.FutureTask.run(FutureTask.java:138)         at javax.swing.SwingWorker.run(SwingWorker.java:317)         at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885)         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)         at java.lang.Thread.run(Thread.java:619) 28.10.2008 16:18:17 org.apache.camel.util.ResolverUtil find AM FEINSTEN: Searching for: annotated with @Converter in package: org/apache/camel/converter using classloader: org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader 28.10.2008 16:18:17 org.apache.camel.util.ResolverUtil find AM FEINSTEN: It's not an osgi bundle classloader 28.10.2008 16:18:17 org.apache.camel.util.ResolverUtil getResources AM FEINSTEN: Getting resource URL for package: org/apache/camel/converter with classloader: org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader@cec0c5 28.10.2008 16:18:17 org.apache.camel.util.ResolverUtil find AM FEINSTEN: URL from classloader: bundleresource://36/org/apache/camel/converter 28.10.2008 16:18:17 org.apache.camel.util.ResolverUtil find AM FEINSTEN: Decoded urlPath: /org/apache/camel/converter 28.10.2008 16:18:17 org.apache.camel.util.ResolverUtil find AM FEINSTEN: Scanning for classes in [/org/apache/camel/converter] matching criteria: annotated with @Converter 28.10.2008 16:18:17 org.apache.camel.util.ResolverUtil find WARNUNG: Could not read entries in url: bundleresource://36/org/apache/camel/converter java.io.FileNotFoundException: \org\apache\camel\converter (Das System kann den angegebenen Pfad nicht finden)         at java.io.FileInputStream.open(Native Method)         at java.io.FileInputStream.<init>(FileInputStream.java:106)         at org.apache.camel.util.ResolverUtil.find(ResolverUtil.java:371)         at org.apache.camel.util.ResolverUtil.find(ResolverUtil.java:279)         at org.apache.camel.util.ResolverUtil.findAnnotated(ResolverUtil.java:255)         at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.load(AnnotationTypeConverterLoader.java:66)         at org.apache.camel.impl.converter.DefaultTypeConverter.checkLoaded(DefaultTypeConverter.java:218)         at org.apache.camel.impl.converter.DefaultTypeConverter.convertTo(DefaultTypeConverter.java:64)         at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:59)         at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:50)         at org.apache.camel.processor.interceptor.TraceFormatter.getBodyAsString(TraceFormatter.java:115)         at org.apache.camel.processor.interceptor.TraceFormatter.format(TraceFormatter.java:39)         at org.apache.camel.processor.interceptor.TraceInterceptor.format(TraceInterceptor.java:68)         at org.apache.camel.processor.Logger.logMessage(Logger.java:218)         at org.apache.camel.processor.Logger.process(Logger.java:88)         at org.apache.camel.processor.interceptor.TraceInterceptor.logExchange(TraceInterceptor.java:124)         at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:55)         at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:43)         at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:39)         at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:41)         at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:66)         at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:47)         at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:149)         at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:134)         at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:92)         at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:74)         at org.apache.camel.component.cxf.transport.CamelConduit$CamelOutputStream.commitOutputMessage(CamelConduit.java:168)         at org.apache.camel.component.cxf.transport.CamelConduit$CamelOutputStream.doClose(CamelConduit.java:151)         at org.apache.cxf.io.CachedOutputStream.close(CachedOutputStream.java:156)         at org.apache.cxf.io.CacheAndWriteOutputStream.postClose(CacheAndWriteOutputStream.java:47)         at org.apache.cxf.io.CachedOutputStream.close(CachedOutputStream.java:159)         at org.apache.cxf.transport.AbstractConduit.close(AbstractConduit.java:66)         at org.apache.cxf.interceptor.MessageSenderInterceptor$MessageSenderEndingInterceptor.handleMessage(MessageSenderInterceptor.java:62)         at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:221)         at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:296)         at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:242)         at org.apache.cxf.frontend.ClientProxy.invokeSync(ClientProxy.java:73)         at org.apache.cxf.jaxws.JaxWsClientProxy.invoke(JaxWsClientProxy.java:178)         at $Proxy84.gibAlleDimensionenUndDescriptoren(Unknown Source)         at net.enbw.etg.rcm.pfc.marktdaten.MarktDatenProviderImpl.getAlleDimensionenUndDescriptoren(MarktDatenProviderImpl.java:183)         at net.enbw.etg.rcm.pfc.proxies.ServiceLocator.getAlleDimensionenUndDeskriptoren(ServiceLocator.java:187)         at net.enbw.etg.rcm.pfc.view.navigator.Navigator$2.doInBackground(Navigator.java:181)         at net.enbw.etg.rcm.pfc.view.navigator.Navigator$2.doInBackground(Navigator.java:1)         at javax.swing.SwingWorker$1.call(SwingWorker.java:278)         at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)         at java.util.concurrent.FutureTask.run(FutureTask.java:138)         at javax.swing.SwingWorker.run(SwingWorker.java:317)         at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:885)         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:907)         at java.lang.Thread.run(Thread.java:619) 28.10.2008 16:18:17 org.apache.camel.util.ResolverUtil find AM FEINSTEN: Searching for: annotated with @Converter in package: org/apache/camel/spring/converter using classloader: org.eclipse.core.runtime.internal.adaptor.ContextFinder 28.10.2008 16:18:17 org.apache.camel.util.ResolverUtil find AM FEINSTEN: It's not an osgi bundle classloader 28.10.2008 16:18:17 org.apache.camel.util.ResolverUtil getResources AM FEINSTEN: Getting resource URL for package: org/apache/camel/spring/converter with classloader: org.eclipse.core.runtime.internal.adaptor.ContextFinder@983d95 28.10.2008 16:18:17 org.apache.camel.util.ResolverUtil find AM FEINSTEN: No URLs returned by classloader 28.10.2008 16:18:17 org.apache.camel.util.ResolverUtil find AM FEINSTEN: Searching for: annotated with @Converter in package: org/apache/camel/spring/converter using classloader: org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader 28.10.2008 16:18:17 org.apache.camel.util.ResolverUtil find AM FEINSTEN: It's not an osgi bundle classloader 28.10.2008 16:18:17 org.apache.camel.util.ResolverUtil getResources AM FEINSTEN: Getting resource URL for package: org/apache/camel/spring/converter with classloader: org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader@cec0c5  — END TRACE LOG —,I think a workaround is to register the needed type converters manually.  If you can get hold of DefaultTypeConverter there is an addTypeConverter() method. But of course it would be great if the annotation based classloading works as well.  I have this Eclipse: Version: 3.3.0 Build id: I20070621-1340  Do I need to download any other Eclipse stuff to get working  or is all the needed .jars in the .zip project?. >I think a workaround is to register the needed type converters manually. >If you can get hold of DefaultTypeConverter there is an addTypeConverter() method.  Thanks for the tipp. I will try this.  >Do I need to download any other Eclipse stuff to get working  or is all the needed .jars in the .zip project?  The project contains all needed JARs. You only need Eclipse with plugins for "RCP / Plugin Developers" (see http://www.eclipse.org/downloads/).. You should get the DefaultTypeConverter from CamelContext.getTypeConverter(). Just cast it to DefaultTypeConverter.  We should however consider exposing the TypeConverterRegistry from CamelContext so end users more easily can get hold of it and add new converters.. After adding the converters manually to the context  the code is now working as Eclipse plugin. The suggested workaround is OK for now.  Thank you very much for your help!. Okay I got Eclipse and have tried it a few times and can get the error as well.  But damm I hate SUN for their java util logging. I dont know how many times I have messed with getting the ****** switch to use log4j.properties instead of their dreadful logger. With log4j.properties I can control what gets logged and at what level.  Now it logs using JUL at INFO level and cant get it switch to TRACE level.. Okay got the logging with log4j - needed on classpath and to change it in commons-logging.properties. Eduard  does it work if you do not start it using from an existing Eclipse? Basically I am asking for does it work when its deployed/installed as it should be?  Since what we get hold of is non OSGi classloaders that Eclipse RCP gives us. And their API is rather verbose and non intuitive how to get hold of the OSGi bundler classloaders.  [ main] ResolverUtil TRACE Not an OSGi classloader: org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader@101bb2c [ main] ResolverUtil TRACE Not an OSGi classloader: org.eclipse.core.runtime.internal.adaptor.ContextFinder@14e45b3. Well the DefaultClassLoader is OSGi aware but it doesnt expose getBundle or any methods to get hold of the OSGI API where we can find entries using the existing OSGi resolver code in Camel. All the Camel .jars is added as a classpath to your eclipse application. After some work to get the OSGi discovery working with the IBM eclipse stuff I gut stuck with the problem that the type converters is in the camel .jars on the classpath.  How do I get the Bundle-ClassPath information using standard OSGi?  Manifest-Version: 1.0 Bundle-ManifestVersion: 2 Bundle-Name: Eclipse Camel Test Plug-in Bundle-SymbolicName: eclipse_camel_test; singleton:=true Bundle-Version: 1.0.0 Bundle-Activator: test.Activator Require-Bundle: org.eclipse.ui   org.eclipse.core.runtime Bundle-ActivationPolicy: lazy Bundle-RequiredExecutionEnvironment: J2SE-1.5 Bundle-ClassPath: lib/log4j-1.2.14.jar   lib/activation-1.1.jar   lib/aopalliance-1.0.jar   lib/asm-2.2.3.jar   lib/bcprov-jdk14-136.jar   lib/camel-core-2.0-SNAPSHOT.jar   lib/camel-cxf-1.5-SNAPSHOT.jar   lib/camel-jms-1.5-SNAPSHOT.jar   lib/camel-spring-1.5-SNAPSHOT.jar   lib/commons-io-1.3.2.jar   lib/commons-lang-2.4.jar   lib/commons-logging-1.1.1.jar   lib/commons-pool-1.3.jar   lib/cxf-api-2.1.1.jar   lib/cxf-common-schemas-2.1.1.jar   lib/cxf-common-utilities-2.1.1.jar   lib/cxf-rt-bindings-soap-2.1.1.jar   lib/cxf-rt-bindings-xml-2.1.1.jar   lib/cxf-rt-core-2.1.1.jar   lib/cxf-rt-databinding-jaxb-2.1.1.jar   lib/cxf-rt-frontend-jaxws-2.1.1.jar   lib/cxf-rt-frontend-simple-2.1.1.jar   lib/cxf-rt-ws-addr-2.1.1.jar   lib/cxf-rt-ws-security-2.1.1.jar   lib/cxf-tools-common-2.1.1.jar   lib/FastInfoset-1.2.2.jar   lib/geronimo-annotation_1.0_spec-1.1.1.jar   lib/geronimo-javamail_1.4_spec-1.3.jar   lib/geronimo-jaxws_2.1_spec-1.0.jar   lib/geronimo-jms_1.1_spec-1.1.1.jar   lib/geronimo-jta_1.1_spec-1.1.1.jar   lib/geronimo-stax-api_1.0_spec-1.0.1.jar   lib/geronimo-ws-metadata_2.0_spec-1.1.2.jar   lib/jaxb-api-2.1.jar   lib/jaxb-impl-2.1.6.jar   lib/jaxb-xjc-2.1.6.jar   lib/junit-3.8.1.jar   lib/neethi-2.0.4.jar   lib/opensaml-1.1.jar   lib/saaj-api-1.3.jar   lib/saaj-impl-1.3.jar   lib/spring-aop-2.5.5.jar   lib/spring-beans-2.5.5.jar   lib/spring-context-2.5.5.jar   lib/spring-context-support-2.5.5.jar   lib/spring-core-2.5.5.jar   lib/spring-jms-2.5.5.jar   lib/spring-tx-2.5.5.jar   lib/stax-api-1.0-2.jar   lib/velocity-1.4.jar   lib/velocity-dep-1.4.jar   lib/wsdl4j-1.6.1.jar   lib/wss4j-1.5.4.jar   lib/wstx-asl-3.2.4.jar   lib/xalan-2.7.0.jar   lib/xml-resolver-1.2.jar   lib/XmlSchema-1.4.2.jar   lib/xmlsec-1.4.0.jar   .   lib/activemq-core-5.1.0.jar   lib/geronimo-j2ee-management_1.0_spec-1.0.jar. CAMEL-1043 should cater for this in the long run.  Currently the workaround that Eduard is using is suitable  by manually adding the needed type converters.. >Eduard  does it work if you do not start it using from an existing Eclipse? >Basically I am asking for does it work when its deployed/installed as it should be?  The code is working fine if you start it from a usual main-method. You can test it yourself by using the class "ServiceClient". This class access a webservice using camel from a main-Method. But it's not working as eclipse plugin in any way.  > I gut stuck with the problem that the type converters is in the camel .jars on the classpath. > How do I get the Bundle-ClassPath information using standard OSGi?  I have the same problem here. At the moment I have no idea. I will chat with an eclipse expert in our company.... It should work by using the spring-osgi's BundleDelegateClassLoader to load type converters. Please check out the camel latest version for verification.. Closing 2.0m1 tickets. 
Improvement,Jonathan Anstey,2008-10-30T14:03:20+0000,1225375400,Right now  when Camel tries to redeliver an message a number of times (using the DLC)  the exceptions are logged as ERROR. Sometimes though  these retries may be considered part of normal operation. I'm going to put in DSL options to configure this log level. Something like this will be possible:   onException(AException.class).maximumRedeliveries(5)             .retriesExhaustedLogLevel(LoggingLevel.DEBUG)             .retryAttemptedLogLevel(LoggingLevel.DEBUG)             .process(new MyExceptionProcessor("I got an Exception."));,Committed Java DSL changes in revision 709164. Will cook up a Spring DSL test case after lunch.. Nice feature.  Remember to document it on the wiki at::  http://activemq.apache.org/camel/dead-letter-channel.html. There is a section for "Redelivery default values" And the class javadoc for: org.apache.camel.processor.RedeliveryPolicy. Added the Spring test case  updated the wiki  and improved the javadoc. Marking this one as resolved.. Closing 2.0m1 tickets. 
Bug,William Tam,2008-10-30T16:00:11+0000,1225382411,Martin describes the issue as follows in CAMEL-1034:  "The issue with the regular resequencer (the one that extends the BatchProcessor) remains because the process(Exchange) method is empty. In addition to the BatchProcessor's polling consumer  an additional JmsConsumer is created by the JMS endpoint that competes with the polling consumer. The JmsConsumer then calls the empty process(Exchange) method and the exchange is lost.",CAMEL-642 also mentions race between event-driven JMS consumer and BatchProcessor's polling consumer.. Not sure if this issue is also related to CAMEL-393. I just mention it here so that I don't forget to investigate.. Attached is a patch that fixes this issue and also issue CAMEL-393. What has been done in this patch:  I removed the polling consumer from the BatchProcessor because it competes with other threads e.g. those that consume messages from a JMS queue (already described in CAMEL-642 and CAMEL-1034). it consumes messages directly from the starting-endpoint of the current route (obtained via routeContext.getEndpoint()). This caused CAMEL-393. BatchProcessor now queues up exchanges which are then sent by a separate thread. The separate thread is needed to deal with timeouts. The old BatchProcessor implementation also stored exchanges in memory so there is at least no decrease in QoS with this patch. Reliable batch processing (and stream-resequencing) will be addressed with issue CAMEL-949 (for which I don't have a patch yet). CAMEL-393 was reported for the aggregator but the same problems arise for the batch resequencer and stream resequencer. All three can now be used in route definitions as requested in CAMEL-393. (This required to remove the polling consumer from the StreamResequencer too).  CAMEL-1037 came up because because in Camel 1.4 the org.apache.camel.Processor interface was introduced for the BatchProcessor with an empty process(Exchange) implementation. The JMS consumer threads competed with the polling thread of the batch processor where all exchanges delivered via the JMS consumer threads have been lost (i.e. process(Exchange) ignored those exchanges).  So far I created this patch for the Camel-1.x branch because I'm not sure if you (comitters  others) already thought about a different solution to this problem for Camel 2.0. If you don't have any objections to this patch please tell me and I'll create one for the current trunk.. At the very first peek it looks like a yet again a really great patch Martin.  To my knowledge we haven't thought of a different solution for this in Camel 2.0. Hadrian / Jonathan what do you say?. Very thorough patch + description Martin. Great work!  To my knowledge we haven't come up with another solution in Camel 2.0. Would be good to get this fix into trunk as well.. ... here it is. The file camel-2.0.patch fixes the aforementioned issues on the trunk.. Nice work  Martin! I am looking to apply this patch but testBatchResequencer() is failing on me. Do you have any suggestion? I'm on 1.x currently.  java.lang.AssertionError: mock:result body == 9 failed on Exchange[JmsMessage: ActiveMQObjectMessage {commandId = 5  responseRequired = true  messageId = ID:lenw500-55044-1228766892918-2:113:1:1:1  originalDestination = null  originalTransactionId = null  producerId = ID:lenw500-55044-1228766892918-2:113:1:1  destination = queue://out  transactionId = null  expiration = 0  timestamp = 1228766893813  arrival = 0  brokerInTime = 1228766893813  brokerOutTime = 1228766893813  correlationId = null  replyTo = null  persistent = true  type = null  priority = 4  groupID = null  groupSequence = 0  targetConsumerId = null  compressed = false  userID = null  content = org.apache.activemq.util.ByteSequence@56f2c96c  marshalledProperties = null  dataStructure = null  redeliveryCounter = 0  size = 1106  properties =  {num=11}    readOnlyProperties = true  readOnlyBody = true  droppable = false}] with left value <11> right value <9> at org.apache.camel.builder.BinaryPredicateSupport.assertMatches(BinaryPredicateSupport.java:57) at org.apache.camel.builder.BinaryPredicateSupport.assertMatches(BinaryPredicateSupport.java:1) at org.apache.camel.component.mock.AssertionClause.applyAssertionOn(AssertionClause.java:114) at org.apache.camel.component.mock.MockEndpoint$8.run(MockEndpoint.java:496) at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:249) at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:214) at org.apache.camel.component.jms.issues.JmsResequencerTest.testResequencer(JmsResequencerTest.java:66) at org.apache.camel.component.jms.issues.JmsResequencerTest.testBatchResequencer(JmsResequencerTest.java:51) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) at java.lang.reflect.Method.invoke(Method.java:585) at junit.framework.TestCase.runTest(TestCase.java:164) at org.springframework.test.context.junit38.AbstractJUnit38SpringContextTests.runManaged(AbstractJUnit38SpringContextTests.java:307) at org.springframework.test.context.junit38.AbstractJUnit38SpringContextTests.access$000(AbstractJUnit38SpringContextTests.java:94) at org.springframework.test.context.junit38.AbstractJUnit38SpringContextTests$1.run(AbstractJUnit38SpringContextTests.java:193) at org.springframework.test.context.junit38.AbstractJUnit38SpringContextTests.runTest(AbstractJUnit38SpringContextTests.java:270) at org.springframework.test.context.junit38.AbstractJUnit38SpringContextTests.runTestTimed(AbstractJUnit38SpringContextTests.java:228) at org.springframework.test.context.junit38.AbstractJUnit38SpringContextTests.runBare(AbstractJUnit38SpringContextTests.java:191) at junit.framework.TestResult$1.protect(TestResult.java:106) at junit.framework.TestResult.runProtected(TestResult.java:124) at junit.framework.TestResult.run(TestResult.java:109) at junit.framework.TestCase.run(TestCase.java:120) at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:130) at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386) at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196). The resequencer seems to be working properly. I wonder the during the sending from activemq.queue:out to mock:result could mess up the message order? If I change the routes to forward output of the resequencer directly to mock:result  it still verifies the working of the resequencer and tests pass.   from("activemq:queue:in1").resequence().body().batch().size(100).timeout(10000L).to("mock:result");  from("activemq:queue:in2").resequence().header("num").stream().timeout(2000L).to("mock:result");   One question on the patch: The BatchSender uses a private queue to buffer incoming messages. The queue is drained to the "collection" until the batch of messages should be sent. My concern is that the protected method getCollection() can fool the caller thinking the batch is empty. I don't know if getCollection() is really needed  though. It is only referenced by Aggregator to read the size of the collection.. We can possibly remove the protected method BatchProcessor.getConnection().. Committed revision 724629 to camel-1.x. Committed revision 724619 to trunk. Martin  many thanks to your patch. I've checked it in with a modification to the test mentioned above. Feel free to reopen with a new patch if you have a better way to do it.. William   thanks for applying the patch. You are completly right that during the sending from activemq.queue:out to mock:result the exchange order is messed up because I've configured 10 concurrent consumers. This is needed to test concurrent access to the resequencers but doesn't make any sense for sending re-ordered messages to the mock endpoint - sorry for messing that up. An alternative is to register a second JMS component configured with only one consumer  then the messages are kept in order (but this doesn't bring any better test because all related issues came from interaction with the first JMS queue (activemq.queue:in in our example. So we should leave it as you suggested).  Regarding getCollection: The way how it is used in Aggregator doesn't make sense to me either (even before the patch). In my opinion  it does make sense to keep the getCollection method but it shouldn't be used to determine the current batch size. For that a separate getBatchSize method should be provided that operates on the private queue (buffer) of the batch processor.. Maybe you can use expectedInAnyOrder mock assertions for the concurrent consumer test?. Closing 2.0m1 tickets. 
Sub-task,Jonathan Anstey,2008-10-31T13:58:04+0000,1225461484,,See http://www.nabble.com/How-to-set-custom-aggregation-collection-in-Spring-XML-td20261318s22882.html. Merged a fix for this in revision 711655.  Still to update docs at http://activemq.apache.org/camel/aggregator.html. I also noticed that you can't specify an empty expression section (which is valid in the Java DSL). You need to specify the ugly <expression/> element. Going to see if I can make this neater.. Just committed the fix to remove the ugly <expression/> bit. I didn't merge it to 1.x because it changes the Spring DSL for aggregator. So  when specifying a aggregation collection in 2.0  do this:        <aggregator batchTimeout="500" collectionRef="aggregatorCollection">         <to uri="mock:result"/>       </aggregator>   in 1.x        <aggregator batchTimeout="500" collectionRef="aggregatorCollection">         <expression/>         <to uri="mock:result"/>       </aggregator>   In order to do this I had to change the regular aggregator syntax in 2.0 as well:        <aggregator>         <correlationExpression>           <simple>header.cheese</simple>         </correlationExpression>         <to uri="mock:result"/>       </aggregator>   Will be updating the wiki shortly to reflect this.. Wiki has been updated.. Closing 2.0m1 tickets. 
Improvement,Jonathan Anstey,2008-10-31T17:49:04+0000,1225475344,,Will need to update http://activemq.apache.org/camel/tracer.html when this is done.. Added support and updated wiki. Looking to see if the Spring side works now. Added Spring test case for this.. Closing 2.0m1 tickets. 
Improvement,Jonathan Anstey,2008-10-31T18:56:23+0000,1225479383,,Committed a fix for this in revision 711599.  Need to update various wiki bits now with the new config info.. Updated Splitter wiki doc and merged this fix to Camel 1.x.. Closing 2.0m1 tickets. 
Sub-task,Jonathan Anstey,2008-10-31T21:01:01+0000,1225486861,,TODO: Add wiki docs for this.. Closing 2.0m1 tickets. 
Improvement,Claus Ibsen,2008-11-01T17:08:18+0000,1225559298,If end-users need to access the type converter registry to add their own type converter manually (not using @Converter) they can not easily get hold of the registry from the camel context.  We should expose the registry in the public API  so as getTypeConverterRegistry() on the CamelContext  etc.  See CAMEL-1035 for background of the issue,TypeConverterRegistry is in the impl package. We might need a spi class for the registry itself. Sending camel-core\src\main\java\org\apache\camel\CamelContext.java Sending camel-core\src\main\java\org\apache\camel\TypeConverter.java Sending camel-core\src\main\java\org\apache\camel\impl\DefaultCamelContext.java Sending camel-core\src\main\java\org\apache\camel\impl\ReportingTypeConverterLoader.java Sending camel-core\src\main\java\org\apache\camel\impl\ReportingTypeConverterRegistry.java Sending camel-core\src\main\java\org\apache\camel\impl\converter\AnnotationTypeConverterLoader.java Sending camel-core\src\main\java\org\apache\camel\impl\converter\CachingInjector.java Sending camel-core\src\main\java\org\apache\camel\impl\converter\DefaultTypeConverter.java Sending camel-core\src\main\java\org\apache\camel\impl\converter\TypeConverterLoader.java Deleting camel-core\src\main\java\org\apache\camel\impl\converter\TypeConverterRegistry.java Sending camel-core\src\main\java\org\apache\camel\model\ProcessorType.java Adding camel-core\src\main\java\org\apache\camel\spi\TypeConverterRegistry.java Adding camel-core\src\test\java\org\apache\camel\impl\TypeConverterRegistryTest.java Transmitting file data ............ Committed revision 713950.. Closing 2.0m1 tickets. 
Improvement,Willem Jiang,2008-11-01T18:57:09+0000,1225565829,ResolverUtil has some internal code that detects if the classloader(s) is OSGi aware or not. ResolverUtil should expose strategy methods to allow us to create sub classes  or inject resolvers that cater for this OSGi resolution.  Maybe expose some public API for end-users to customize this at configuration time  so they can let Camel run in any OSGi platform of choice.  This is especially a problem with the dynamic type converters discoverer. That scans all bundles.,I rather think we should try to leverage the OSGi registry more when using Camel on an OSGi platform. If we enhance our bundles and add a bundle activator to register their own converters and components  we can avoid having to scan across bundles and running into this kind of OSGi platform incompatibilities.  Using this approach  we would also have a foundation for starting to react more dynamically when bundles are added and removed from the platform. We could e.g. start/stop routes as bundles with components are started/stopped or (in the future) add some kind of interceptor that can be started/stopped from a bundle.. I'll give it a try myself  if that's OK with you guys.... Fantastic Gert. Please give a go.. Now there is an Activator in Camel-osig which takes care of the searching the META-INFO of the camel components bundles for components   type converters and language. In this way   other components will not do any additional work to be osgi friendly  and the ResolverUtil's will not need to check the classloader for loading the bundles.  TODO we need to refactor the ResolverUtil to pull the osgi relating codes into camel-osgi module.. @Willem  The file and ftp component use org.apache.camel.util.FactoryFinder to load classes based on META-INF. See FileEndpoint#createFileStrategy() and RemoteFileEndpoint#createRemoteFileStrategy()  Maybe the is something to be done for OSGi as well here.. @Claus  Thanks for pointing FactoryFinder out  I will create sub task to trace that issue.. @Willem  CamelNamespaceHandler in camel-spring has some Class.forName in the init() method for detecting OSGi classes. Maybe it could be a problem? Well please take a look. @Willem  And also org.apache.camel.converter.jaxp.XmlConverter uses a Class.forName. @Claus I think the "Class.forName()" call is safe in OSGI platform  the under layer class loader will take care of it. We just need to make sure the camel-osgi package is imported in the camel-spring bundle.. Closing 2.0m1 tickets. 
Improvement,Claus Ibsen,2008-11-02T00:18:29+0000,1225585109,There should be an option to enable passive mode in the ftp endpoint. If not  when deploying the camel rules on a host with a firewall the default active mode is useless.,Max I have added passive mode support.  You can try to 2.0-SNAPSHOT from with the fix http://activemq.apache.org/camel/download.html  Would be great if you could test it on your system.. That was quick! Thanks Claus it works great.. 
Task,Claus Ibsen,2008-11-02T09:06:20+0000,1225616780,http://commons.apache.org/net/  Commons Net 2.0 has just been released. We should upgrade to this newer version.,
New Feature,Unassigned,2008-11-03T08:47:44+0000,1225702064,Attached Camel native DSL. The work in progress.,
Bug,Unassigned,2008-11-03T10:19:39+0000,1225707579,See forum entry http://www.nabble.com/forum/ViewPost.jtp?post=20293296&framed=y&skin=22882   With (mysql db)    <from uri="timer://pollTheDatabase?delay=10000" />    <setBody>      <constant>select username as userid from mdl_user           where firstname='' or lastname = '' or email = '' or idnumber=''      </constant>    </setBody>   <to uri="jdbc:moodleDB" />  I get the error   Column 'username' not found.   If I remove "as userid" the route works...,the problem is not camel but the java library ...  http://bugs.mysql.com/bug.php?id=37038. 
New Feature,Claus Ibsen,2008-11-03T18:21:29+0000,1225736489,For example we may want to do this route...   <route>   <requires>     <el>${broker2.queueSize('AnotherQueue') == 0}</el>   </requires>   <from uri="broker1:MyQueue"/>   <to uri="broker2:AnotherQueue"/> </route>    i.e. only implement a specific route while some predicate is true (e.g. only route while a condition is met; disable when its not met).  Maybe we need to allow endpoints to define if they are ready yet? e.g. only send to a certain queue if its got capacity?,Another use-case: listen to a control queue and start/stop route:  from control_queue case when xpath "/headers/message_type"='"stop"    el: ${routes["route_a"].stop} case when xpath "/headers/message_type"='"start"    el: ${routes["route_a"].start}. What is needed is also a background task that can run and enable/disable the routes depending on the predicate.  For example we dont want a event driven consumer to be active and consume an incoming message to only find out the predicate was false.. And how should the Java DSL syntax be?  We could have requires prelude the from.  require().el("${broker2.queueSize('AnotherQueue') == 0") .from("broker1:MyQueue").to("broker2:AnotherQueue");. CAMEL-2110 allows us to get hold of number of current in flight exchanges for a given route which can help in the predicate evaluation to implement a dynamic throttler based on max number of in flight exchanges.. See discussion at http://www.nabble.com/Discussion---Route-Policy-feature-in-Camel-2.1-td26090277.html. First cut committed: 830861.. Added an example camel-example-route-throttling  trunk: 830901.. Add documentation to the wiki and release notes DONE. Now you can manage the policy from JMX  trunk: 831859.. Added example wiki documentation DONE. Renamed the throttler as we should add another throttler in the future for the messages per time unit style.  trunk: 832342.. 
Improvement,Willem Jiang,2008-11-03T20:49:02+0000,1225745342,The shouldStartContext flag should be configurable with the spring configuration (CamelContextFactoryBean). The attached patch has the enhancements. The second patch is for a typo in a log message if the start is skipped.,Hi Andreas   Thanks for you patches. Since your patches are not granted with ASF license  we can't apply them into the apache repository. Can you resubmit the patches from this url[1] ?  BTW  We are prefer to use svn diff to generate the patch file.  [1] https://issues.apache.org/activemq/secure/ManageAttachments.jspa?id=28454  Willem. Hi Willem   Re-submitted the patches with ASF license and svn diff format.. Applied patches with thanks to Andreas.. The patch was not fully applied. The setter and getter was missing. I'll attach a patch with testcase.. new patch for missing getter and setter and testcase.. new patch with missing setter and getter. added testcase for the new attribute.. I have these setter/getter in SpringCamelContext in the trunk code  public void setShouldStartContext(boolean shouldStartContext)  { this.shouldStartContext = shouldStartContext; }  public boolean getShouldStartContext()  { return shouldStartContext; }  Why do you need the setter/getter on the CamelContextFactoryBean?. Hi Claus   Because the configuration want's to set this property if it is configured in the spring bean definition file. If you run the org.apache.camel.spring.config.CamelContextFactoryBeanTest with the configuration from the patch (with the new bean camel4) you can see the problem.  Andi. The patch should be in trunk and camel-1.x branch.. 
Task,Claus Ibsen,2008-11-04T07:24:41+0000,1225783481,,Closing 2.0m1 tickets. 
Bug,Willem Jiang,2008-11-04T07:42:14+0000,1225784534,Here is a the smx-camel thread to hang issue[1]   it is caused by HandleFaultProcessor doesn't implement the AsyncProcessor interface. Since it is a DelegateProcessor  if it wrappes an AsycProcessor   the AsycProcessor's callback.done() method will never be called.  [1] https://issues.apache.org/activemq/browse/SM-1673,Closing 2.0m1 tickets. 
Improvement,Willem Jiang,2008-11-04T09:52:31+0000,1225792351,[EventDrivenConsumerRoute[Endpoint[myAsync:start] ->  Delegate(Delegate(DeadLetterChannel[Delegate(HandleFaultProcessor(Pipeline[org.apache.camel.processor.asyc.AsnycProcessorErrorHandlerTest$1$1@1edc073  sendTo(Endpoint[mock:result])]))   RecipientList[log:org.apache.camel.DeadLetterChannel?level=error]]))]]  There are too many Delegate  I can't tell which DelegateProcessor child class that is in my router rule?,Closing 2.0m1 tickets. 
Bug,Willem Jiang,2008-11-05T00:21:13+0000,1225844473,Thread is here http://www.nabble.com/-HEADS-UP--camel-spring-integration-issue-td20331450s22882.html,Its a way bigger change than I thought  Here's what I have so far if anyone wants to take a look over night.. Willem fixed this last night on trunk and 1.x.. Closing 2.0m1 tickets. 
Task,Unassigned,2008-11-05T00:48:36+0000,1225846116,The api has changed  plus there are tests failures anyway that need to be addressed  but i think better is to upgrade.,Yeah  I've started down the upgrade path in CAMEL-1053.. 
Improvement,Unassigned,2008-11-05T18:09:25+0000,1225908565,Yes  I know you should just do things correctly  but sometimes we don't. When the CamelContext is created/retrieved as follows  the error message is somewhat misleading as to the actual problem. The root exception does state "No applicationContext has been injected!"  but the bulk of the other exceptions are referring to the "beanPostProcessor".  If we could somehow throw a more concise exception  that would be great.    # import org.springframework.core.io.Resource; # import org.springframework.core.io.ClassPathResource; # import org.springframework.beans.factory.BeanFactory; # import org.springframework.beans.factory.xml.XmlBeanFactory; # import org.apache.camel.CamelContext; #  # public class JamesTest { #  #     public static void main(String[] args)  { #         Resource res = new ClassPathResource("/james.xml"); #         BeanFactory factory = new XmlBeanFactory(res); #   #         final CamelContext cc = (CamelContext) factory.getBean("camelContext"); #   #     } # } #  #  #  # james.xml # <?xml version="1.0" encoding="UTF-8"?> # <beans xmlns="http://www.springframework.org/schema/beans" #        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" #        xmlns:context="http://www.springframework.org/schema/context" #        xmlns:camel="http://activemq.apache.org/camel/schema/spring" #        xsi:schemaLocation=" #       http://www.springframework.org/schema/beans #       http://www.springframework.org/schema/beans/spring-beans-2.5.xsd #       http://www.springframework.org/schema/context #       http://www.springframework.org/schema/context/spring-context-2.5.xsd #       http://activemq.apache.org/camel/schema/spring #       http://activemq.apache.org/camel/schema/spring/camel-spring.xsd"> #  #     <camel:camelContext id="camelContext"> #     </camel:camelContext> #  # </beans> #  #  # stack # INFO  - XmlBeanDefinitionReader    - Loading XML bean definitions from class path resource [james.xml] # Exception in thread "main" org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'camelContext': Cannot resolve reference to bean 'camelContext:beanPostProcessor' while setting bean property 'beanPostProcessor'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'camelContext:beanPostProcessor': Cannot resolve reference to bean 'camelContext' while setting bean property 'camelContext'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'camelContext': FactoryBean threw exception on object creation; nested exception is java.lang.IllegalArgumentException: No applicationContext has been injected! #         at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:275) #         at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:104) #         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1245) #         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1010) #         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:472) #         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:409) #         at java.security.AccessController.doPrivileged(Native Method) #         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:380) #         at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:264) #         at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:221) #         at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:261) #         at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:185) #         at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164) #         at JamesTest.main(JamesTest.java:13) #         at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) #         at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) #         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) #         at java.lang.reflect.Method.invoke(Method.java:585) #         at com.intellij.rt.execution.application.AppMain.main(AppMain.java:90) # Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'camelContext:beanPostProcessor': Cannot resolve reference to bean 'camelContext' while setting bean property 'camelContext'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'camelContext': FactoryBean threw exception on object creation; nested exception is java.lang.IllegalArgumentException: No applicationContext has been injected! #         at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:275) #         at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:104) #         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1245) #         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1010) #         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:472) #         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory$1.run(AbstractAutowireCapableBeanFactory.java:409) #         at java.security.AccessController.doPrivileged(Native Method) #         at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:380) #         at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:264) #         at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:221) #         at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:261) #         at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:185) #         at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164) #         at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:269) #         ... 18 more # Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'camelContext': FactoryBean threw exception on object creation; nested exception is java.lang.IllegalArgumentException: No applicationContext has been injected! #         at org.springframework.beans.factory.support.FactoryBeanRegistrySupport$1.run(FactoryBeanRegistrySupport.java:127) #         at java.security.AccessController.doPrivileged(Native Method) #         at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.doGetObjectFromFactoryBean(FactoryBeanRegistrySupport.java:116) #         at org.springframework.beans.factory.support.FactoryBeanRegistrySupport.getObjectFromFactoryBean(FactoryBeanRegistrySupport.java:98) #         at org.springframework.beans.factory.support.AbstractBeanFactory.getObjectForBeanInstance(AbstractBeanFactory.java:1285) #         at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:217) #         at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:185) #         at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:164) #         at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:269) #         ... 31 more # Caused by: java.lang.IllegalArgumentException: No applicationContext has been injected! #         at org.apache.camel.spring.CamelContextFactoryBean.getApplicationContext(CamelContextFactoryBean.java:354) #         at org.apache.camel.spring.CamelContextFactoryBean.createContext(CamelContextFactoryBean.java:473) #         at org.apache.camel.spring.CamelContextFactoryBean.getContext(CamelContextFactoryBean.java:305) #         at org.apache.camel.spring.CamelContextFactoryBean.getObject(CamelContextFactoryBean.java:130) #         at org.springframework.beans.factory.support.FactoryBeanRegistrySupport$1.run(FactoryBeanRegistrySupport.java:121) #         ... 39 more #,I think the error is caught and handled by Spring and report as Spring does it by standard.  Do you have any suggestions for a more concise exception?. Spring standard eror message.. 
New Feature,Willem Jiang,2008-11-05T21:30:01+0000,1225920601,,attached a patch which enables users to inject jaxws handler to CXF producer and client.  <cxf:cxfEndpoint ...>  <cxf:handlers> <ref bean="myJaxwsHandler"/> </cxf:handlers>  </cxf:cxfEndpoint>  <bean id="myJaxwsHandler" class="org.apache.camel.wsdl_first.JaxwsTestHandler"/>. Applied patch with thanks to William.. Closing 2.0m1 tickets. 
Bug,Claus Ibsen,2008-11-07T00:56:37+0000,1226019397,When using XQuery the getOut() function is called on the message so if it is not used at a place where the out is filled an empty out message will be created. With this xquery cannot be used for example in setBody  setHeader... and anywhere where the out is not filled. An example where this causes real trouble:  <choice>   <when>     <xquery>...</xquery>     <to uri="direct:follow" />   </when> </choice>  ... <from uri="direct:follow"> <to ...> <to ...>  In the patch the out property in the xquery context is filled only if it is not null. With it all of my pipelines seem to work well for me.,Balazs could you re attach the patch with the ASF license granted. We can not accept patches without this license.  The general rule with JIRA is not to attach files while creating the ticket. Only attach files afterwards since then there is a checkbox where you can grant the ASF license.. Hi  here is the file with the license.. Applied patch with thanks to Balazs. Closing 2.0m1 tickets. 
Bug,Willem Jiang,2008-11-07T05:34:11+0000,1226036051,To make sure the check fault work to be done first.,Closing 2.0m1 tickets. 
Improvement,Claus Ibsen,2008-11-07T08:30:41+0000,1226046641,When Camel is mapping to/from javax.jmx.XXX to the Camel message body it does not properly support the javax.jms.StreamMessage,Not needed. 
Improvement,William Tam,2008-11-07T10:02:44+0000,1226052164,When using the maven plugins camel:run it logs nicely that Camel has been started (with version number).  [pache.camel.spring.Main.main()] MainSupport                    INFO  Apache Camel 2.0-SNAPSHOT starting    I think we should add such a feature into camel core itself.  I think we need two logs  	starting 	started    Such as ActiveMQ does:  BrokerService                  INFO  ActiveMQ 5.1.0 JMS Message Broker (localhost) is starting BrokerService                  INFO  ActiveMQ JMS Message Broker (localhost  ID:claus-acer-1667-1226052031671-0:0) started,To highlight the problem. The logging is from camel-spring with the Main class.  However we should add it to the DefaultCamelContext or (maybe better) the LifecycelStrategy  or add some methods with this event if any missing.. It looks like we can add this kind of logging to CamelContext. We can log the name of the CamelContext that it is starting. I can get started on this if it makes sense.. It looks like we can add this kind of logging in CamelContext. We can include the CamelContext name that it is being started. If this makes sense  I can get started on it.. Oops. I didn't see the Claus's comment. (I was in "Change History" view). I'll look into it.. Added the logging to DefaultCamelContext since it is probably more reliable than in LifeCycleStrategy. (A LifeCycleStrategy impl may forget to log the messages). The version number comes from the manifest so it is available in unit test.  Modified: activemq/camel/trunk/camel-core/src/main/java/org/apache/camel/impl/DefaultCamelContext.java activemq/camel/trunk/camel-core/src/main/java/org/apache/camel/impl/ServiceSupport.java activemq/camel/trunk/camel-core/src/main/java/org/apache/camel/util/MainSupport.java. Are we sure this is working. When I ran a unit test in camel-spring it didn't print the version number. And there was a double space in the logging as well.. Claus  I saw a blank version as well so I made this change last night http://svn.apache.org/viewvc?view=rev&revision=722317  Did you do an svn up or do we have another problem?. Works fine now  thanks  [ main] DefaultCamelContext INFO Apache Camel 2.0-SNAPSHOT (CamelContext:camel-1) started. 
Task,Jonathan Anstey,2008-11-07T15:03:03+0000,1226070183,There are a ton of things that are deprecated and need to be removed for Camel 2.0,Just removed several things. Checked the change in so I can scour the wiki for required changes.. The queue component in camel-core should be removed as well. Anyone objects?  And we actually also have some empty java src folders in some components here and there.  And should we consider moving some abandoned components into a sandbox?  camel-jface camel-supercsv camel-jmxconnect. Pojo component should be removed as well  http://activemq.apache.org/camel/pojo.html  I dont think it harms to remove it from the components list anyway as you should use bean instead.  The same goes for queue it can be removed from the list also = use seda instead.. I removed the queue component last week. Seems there is still some clean up to w.r.t. to empty dirs though. Will do that once the deprecated things are gone.  I agree  pojo: can go as well.  Hmmm... didn't know we had abandoned components  Do you mean no-one has committed to them in a while? Or they are half-finished/unusable?. Hmmm... confluence seems to be hanging when I try and edit the 2.0.0 release page so I'll update that later with the changes relating to my last commit.. wiki comment should be:  On Endpoint  getContext() and setContext(CamelContext) have been renamed to getCamelContext() and setCamelContext(CamelContext) To set the ignored headers in the http component you must use the HeaderPropagationStrategy instead of setIgnoredHeaders(...) JettyHttpProducer has been removed. Use org.apache.camel.component.http.HttpProducer instead. In MailConfiguration  getDestination() and setDestination(...) have been renamed to getRecipients() and setTo(...).. Going to call this one complete. The only deprecated thing remaining is the timestamp stuff in the file/ftp component. As a part of the removal of the timestamp algorithm  I plan to add the ability to preserve state of what files have been consumed. Will be creating a new JIRA for this since its kind of an improvement.. Closing 2.0m1 tickets. 
Bug,Hadrian Zbarcea,2008-11-07T15:26:21+0000,1226071581,The test fails with an IllegalStateException: Queue full.  I believe the reason for this is that there are 10000 messages sent  but the default queue size is 1000.   On a fast machine  the queue fills up before the consumer gets a chance to pop the messages from the queue.,Closing 2.0m1 tickets. 
Bug,Claus Ibsen,2008-11-08T08:57:41+0000,1226134661,See nabble: http://www.nabble.com/Camel-SQL-Component---dataSource-property-td20386559s22882.html,Closing 2.0m1 tickets. 
Bug,Hadrian Zbarcea,2008-11-08T11:30:40+0000,1226143840,If the ActiveMQ broker is shut down and then started again while a Camel ActiveMQ endpoint based program is listening on its queue  the program does not pick the queue back up for consuming when ActiveMQ is back up. Anything subsequently posted to the new broker becomes available only when the Camel program is restarted.  This is a problem in production style scenarios where the broker has to be restarted for some reason e.g. so that modifications to its configuration can be made.  I have been able to observe the above behaviour with the camel-example-jms-file project and attach a modified version of the CamelJmsToFileExample.java file. My modifications bind to the broker at tcp://localhost:61616 and cause the example to pause for 20s before sending out any messages. In this time  if the broker (which has to be started externally prior to executing the example) is shutdown and then started again  no messages are received.  Here are the actual recommended steps to reproduce the problem: 1. Start the ActiveMQ broker in one terminal window 2. Run the example via mvn compile exec:java 3. When the message displays stating that you have 20s  Ctrl-C the broker in the broker terminal window 4. When the broker stops  start it again  At this point no messages are displayed - you would expect them to be - they have actually been sent out. This can be verified also:  5. Type mvn compile exec:java again 6. Let the example continue without interfering with the broker.  You will now see the messages posted previously prior while the program waits for 20 seconds (remember no messages have been posted at this point). Letting the example continue demonstrates that after the 20 seconds  the messages are sent out and then received quickly given that we have not touched the broker.  The original thread posting can be found at:  http://www.nabble.com/Camel-ActiveMQ-service-not-recovering-from-lost-broker-to20379163s22882.html,Modified camel-example-jms-file project file from the Camel 1.4.0 distribution. The modifications allow time for a broker to be shutdown subsequently to the consumer environment being set up  but before any messages are sent out.. @Christopher thanks for spotting it and for the detailed steps and example. This is indeed a serious problem. I will upgrade this to critical and we'll look into it as soon as possible.. Hadrian did you have a look at it?. Not yet . Let me look into this this week.. I appreciate that life is full and busy  but has anybody been able to identify a potential work-around for this issue? I'm looking to move my Camel based service into production next week so it'd be great to have a resolution one way or another. Thank you for your help.. Hi Christopher   Not sure if I got all of your problem but if you change the url for the connection factory from tcp://localhost:61616 to failover:tcp://localhost:61616 it uses failover transport that does reconnect and you will receive messages after the broker is back again (at least it did when I started your test).. Thanks for this - this sounds like a viable work around and I shall test it shortly. I presume that this is indeed regarded as a work-around though and that the issue remains to be fixed?  Thanks again.. Hi Hadrian   Any further advice on the investigation of this issue?  Kind regards  Christopher. using failover:tcp://localhost:61616 as the connection URL is the correct approach for dealing with reconnection to the broker in case of broker failure or network issues causing temporary socket loss.  in 5.2.0 or later of ActiveMQ the connection factory and ActiveMQ camel component use failover in the default URL by default to avoid folks having to know about the failover configuration. i.e. if you don't configure anything you will get failover and so auto-reconnection. Thanks for this. Was this a 1.6.0 fix for Camel? You implied that the ActiveMQ Camel component was changed also; or is it because of 5.2.0's connection factory change that Camel's component inherits the fix?. 
Improvement,Claus Ibsen,2008-11-09T12:57:55+0000,1226235475,An end-user is using the reqestXXX method where the requestBodyAndHeaders is missing. The one being able to send multiple headers.  Check out that the sendXXX and requestXXX is in sync. And maybe add more convienient methods if needed.,Added some missing requestBody methods that accepts a Map of headers. Polished javadoc.. Closing 2.0m1 tickets. 
Improvement,Unassigned,2008-11-10T10:19:56+0000,1226312396,When using a Spring PropertyPlaceholderConfigurer  properties are not replaced into the Camel DSL.  A use case for using property substitution is to change the component type used in different deployments of the same app (such as between SEDA and JMS).  You can then also use the same config file for testing by replacing JMS endpoints with mock ones.  For example:  <camel:camelContext trace="${traceMode}" useJmx="false">   <camel:route>     <camel:from uri="${queue.incoming}" />     <camel:to uri="${queue.outgoing}" />   </camel:route> </camel:camelContext>    In Camel 1.5 the resulting routes are still named ${queue.incoming} instead of being replaced  with jms:myQueue etc.,See FAQ: http://activemq.apache.org/camel/how-do-i-use-spring-property-placeholder-with-camel-xml.html. Lowering priority - cant be critical.  Requires Spring 3.0 as spring has to do some internal changes to allow custom spring handlers to get access to the property place holder stuff. There should be a JIRA ticket in the spring roadmap filed by James Strachan about this.. I also think we have a ticket for this request in our tracker somewhere.. I think it is this issue http://jira.springframework.org/browse/SPR-4466. Updated FAQ with the entry to the SPR issue.. We have the Camel properties component which supports property placeholders fully.  Using Spring property placeholders is not possible unless Spring Framework makes that possible.. Closing all resolved tickets from 2010 or older. 
Task,Claus Ibsen,2008-11-10T11:25:48+0000,1226316348,The list component is a bit misleading and confusing name. It is used for browsing endpoints such as the exchanges that they have processed.  Renaming it to: browse would better mark its purpose.,D:\project\camel\camel-core>svn commit --message "CAMEL-1067: camel-list renamed to camel-browse" Adding camel-core\src\main\java\org\apache\camel\component\browse Adding camel-core\src\main\java\org\apache\camel\component\browse\BrowseComponent.java Adding camel-core\src\main\java\org\apache\camel\component\browse\BrowseEndpoint.java Deleting camel-core\src\main\java\org\apache\camel\component\browse\ListComponent.java Deleting camel-core\src\main\java\org\apache\camel\component\browse\ListEndpoint.java Sending camel-core\src\main\java\org\apache\camel\component\browse\package.html Deleting camel-core\src\main\java\org\apache\camel\component\list Adding camel-core\src\main\resources\META-INF\services\org\apache\camel\component\browse Deleting camel-core\src\main\resources\META-INF\services\org\apache\camel\component\list Adding camel-core\src\test\java\org\apache\camel\component\browse Adding camel-core\src\test\java\org\apache\camel\component\browse\BrowseRouteTest.java Adding camel-core\src\test\java\org\apache\camel\component\browse\BrowseTest.java Deleting camel-core\src\test\java\org\apache\camel\component\browse\ListRouteTest.java Deleting camel-core\src\test\java\org\apache\camel\component\browse\ListTest.java Deleting camel-core\src\test\java\org\apache\camel\component\list Transmitting file data ...... Committed revision 722803.. Closing 2.0m1 tickets. dimitrisli opened a new pull request #2319: CAMEL-1067 Fixing broken build URL: https://github.com/apache/camel/pull/2319  Following up from the discussion here: https://github.com/apache/camel/pull/2303  Project currently succeeds mvn install as well as checkstyle but fails during surfire:test. As there are no tests and [following from this example](https://github.com/apache/camel/blob/3e07a6385b8ba57ba4eb666bd7d2b13ea53306fb/examples/camel-example-spring-boot-geocoder/pom.xml#L37) we can skip that phase all together with this parameter.  ---------------------------------------------------------------- This is an automated message from the Apache Git Service. To respond to the message  please log on GitHub and use the URL above to go to the specific comment.  For queries about this service  please contact Infrastructure at: users@infra.apache.org. GitHub user dimitrisli opened a pull request:  https://github.com/apache/camel/pull/2319  CAMEL-1067 Fixing broken build  Following up from the discussion here: https://github.com/apache/camel/pull/2303  Project currently succeeds mvn install as well as checkstyle but fails during surfire:test. As there are no tests and [following from this example](https://github.com/apache/camel/blob/3e07a6385b8ba57ba4eb666bd7d2b13ea53306fb/examples/camel-example-spring-boot-geocoder/pom.xml#L37) we can skip that phase all together with this parameter.  You can merge this pull request into a Git repository by running:  $ git pull https://github.com/dimitrisli/camel CAMEL-10671  Alternatively you can review and apply these changes as the patch at:  https://github.com/apache/camel/pull/2319.patch  To close this pull request  make a commit to your master/trunk branch with (at least) the following in the commit message:  This closes #2319  commit 27e492aa17637f9148f38e4bc57ae6782114975d Author: Dimitrios Liapis <dimitrisli@...> Date: 2018-05-06T00:07:01Z  CAMEL-1067 Fixing broken build. dimitrisli commented on issue #2319: CAMEL-1067 Fixing broken build URL: https://github.com/apache/camel/pull/2319#issuecomment-386844160  @PascalSchumacher can you please review  ---------------------------------------------------------------- This is an automated message from the Apache Git Service. To respond to the message  please log on GitHub and use the URL above to go to the specific comment.  For queries about this service  please contact Infrastructure at: users@infra.apache.org. asfgit closed pull request #2319: CAMEL-1067 Fixing broken build URL: https://github.com/apache/camel/pull/2319  This is a PR merged from a forked repository. As GitHub hides the original diff on merge  it is displayed below for the sake of provenance:  As this is a foreign pull request (from a fork)  the diff is supplied below (as it won't show otherwise due to GitHub magic):  diff --git a/examples/camel-example-ceylon/pom.xml b/examples/camel-example-ceylon/pom.xml index d794894b38c..3e9a1ec505c 100644 — a/examples/camel-example-ceylon/pom.xml +++ b/examples/camel-example-ceylon/pom.xml @@ -36 6 +36 7 @@ <properties> <category>Other Languages</category> <ceylon.version>1.3.3</ceylon.version> + <skipTests>true</skipTests> </properties>  <dependencies>  ---------------------------------------------------------------- This is an automated message from the Apache Git Service. To respond to the message  please log on GitHub and use the URL above to go to the specific comment.  For queries about this service  please contact Infrastructure at: users@infra.apache.org. Github user asfgit closed the pull request at:  https://github.com/apache/camel/pull/2319. PascalSchumacher commented on issue #2319: CAMEL-1067 Fixing broken build URL: https://github.com/apache/camel/pull/2319#issuecomment-386900795  Thanks!  Merged in https://github.com/apache/camel/commit/1ed76d66a023495b3dfe802cbd7d71a8890893f2  Let's give it a try.  ---------------------------------------------------------------- This is an automated message from the Apache Git Service. To respond to the message  please log on GitHub and use the URL above to go to the specific comment.  For queries about this service  please contact Infrastructure at: users@infra.apache.org. dimitrisli opened a new pull request #2325: CAMEL-1067 Broken build fix URL: https://github.com/apache/camel/pull/2325  Skipping non-existent tests in Ceylon example project attempting to fix the broken build.  ---------------------------------------------------------------- This is an automated message from the Apache Git Service. To respond to the message  please log on GitHub and use the URL above to go to the specific comment.  For queries about this service  please contact Infrastructure at: users@infra.apache.org. GitHub user dimitrisli opened a pull request:  https://github.com/apache/camel/pull/2325  CAMEL-1067 Broken build fix  Skipping non-existent tests in Ceylon example project attempting to fix the broken build.  You can merge this pull request into a Git repository by running:  $ git pull https://github.com/dimitrisli/camel CAMEL-1067  Alternatively you can review and apply these changes as the patch at:  https://github.com/apache/camel/pull/2325.patch  To close this pull request  make a commit to your master/trunk branch with (at least) the following in the commit message:  This closes #2325  commit 3834709bcebdd0913752fbcc2cea17822518ecf2 Author: Dimitrios (Dimi) Liapis <dimitrisli@...> Date: 2018-05-07T20:51:22Z  CAMEL-1067 Broken build fix  Skipping non-existent tests in Ceylon example project attempting to fix the broken build.. 
New Feature,Claus Ibsen,2008-11-10T15:48:34+0000,1226332114,We have some URI options to set some regexp for filtering files.  But good old java.io.FileFilter should be there as well for end-users to use. And also add an option for using Camel predicate's for filtering file names.  This only applies for the file consumer of course.,Commited by CAMEL-1112  D:\project\camel\camel-core>svn commit --message "CAMEL-1112: Added filter option to file consumer to allow end user to use a filter to skip files. Started on the sorter as well." Sending camel-core\src\main\java\org\apache\camel\component\file\FileComponent.java Sending camel-core\src\main\java\org\apache\camel\component\file\FileConsumer.java Sending camel-core\src\main\java\org\apache\camel\component\file\FileEndpoint.java Adding camel-core\src\test\java\org\apache\camel\component\file\FileConsumerFileFilterTest.java Sending camel-core\src\test\java\org\apache\camel\component\file\FileConsumerSkipDotFilesTest.java Transmitting file data ..... Committed revision 721719.. Closing 2.0m1 tickets. 
New Feature,Claus Ibsen,2008-11-10T15:51:20+0000,1226332280,The mail API has SearchTerm to allow filtering a mail folder when consuming.  We should allow options/configuration to set a reference to a class implementing javax.mail.search.SearchTerm so end users can code their own filter how to filer mails.  We could consider adding some kind of expression support for the most common SearchTerm:  	subject 	from 	to 	body 	flags,Closing all resolved tickets from 2010 or older. See nabble as its been requested now http://camel.465427.n5.nabble.com/Fetch-size-in-mail-component-tp5721048.html. The idea would roughly be to add a getter/setter on the mail configuration for a  private SearchTerm filter;   Then end users can implement this class  and configure it on the mail component / endpoint. If directly in endpoint you do  from("imap:xxxx?filter=#myFilter")  ...   Then in the mail consumer  you would need to grab the filter and apply it to the Java Mail API that does the mail scanning.. There is now a searchTerm option on mail endpoint you can use.  I updated the mail doc page with details and examples.. 
Bug,Claus Ibsen,2008-11-10T16:38:32+0000,1226335112,I must use                         if (exchange.getIn().getAttachments().size() > 0) { Instead of                         if (exchange.getIn().hasAttachments()) { As the latter always returns false. Or at least returns false even though the size is > 0,Closing 2.0m1 tickets. 
Task,Jonathan Anstey,2008-11-10T17:42:22+0000,1226338942,The description is a bit skimpy here: http://activemq.apache.org/camel/normalizer.html  I'm going to fill it out a bit with a concrete example.,Example committed here http://svn.eu.apache.org/viewvc?view=rev&revision=712712  Wiki update as well http://cwiki.apache.org/confluence/display/CAMEL/Normalizer. Why are you filtering the message afterwards? If for no reason I think it should be removed to give the end-user a more clear picture what the normalizer is.. Or state that the filtering has nothing to do with the normalizer EIP but its there to show what you can do next.. Actually the stuff is already there you can use it in e.g. Camel 1.4. Its for no reason at all really. I definitely don't want anything to be confusing so I'll remove it!. But we should add it to the release notes so we have yet another EIP pattern in Camel.. Well it was a supported EIP for a while. Its just that the wiki doc was really skimpy so new users may not have a clue how to implement it.. I simplified the example a bit in revision 712821. That filter was really useless. Closing 2.0m1 tickets. 
Improvement,Claus Ibsen,2008-11-10T20:06:32+0000,1226347592,We should support an option to set a upload suffix for the FTP/SFTP producers  so Camel can upload fixes to a temporary name and after upload is complete it can rename it to the correct name   ServiceMix has such a feature.,Copy what you are doing in the FileProducer to do the same for the FTP/SFTP component. Now has same option as the file component: tempPrefix for both the FTP and SFTP producer  D:\project\camel>svn commit --message "CAMEL-1072: Added tempPrefix option to FTP/SFTP producers  so you can upload using a temp filename and after upload rename it to the real name." Sending camel-core\src\main\java\org\apache\camel\component\file\FileProducer.java Sending components\camel-ftp\src\main\java\org\apache\camel\component\file\remote\FtpProducer.java Sending components\camel-ftp\src\main\java\org\apache\camel\component\file\remote\RemoteFileConfiguration.java Sending components\camel-ftp\src\main\java\org\apache\camel\component\file\remote\RemoteFileProducer.java Sending components\camel-ftp\src\main\java\org\apache\camel\component\file\remote\SftpProducer.java Adding components\camel-ftp\src\test\java\org\apache\camel\component\file\remote\FtpProducerTempPrefixTest.java Transmitting file data ...... Committed revision 721662.. Closing 2.0m1 tickets. This is great  but what about people who really do need a suffix? I've got an external system that needs me to write with a .tmp suffix  if I use a prefix  it still picks up my files.  Will I just have to handle the renaming myself?. The file/ftp components in Camel 2.0 is much smarter and flexible than 1.x.  So we can improve the tempPrefix to be expression based so you can type a syntax as you like  for example tempFileName=${file:name}.tmp  Which then will write using .tmp and then afterwards rename it back to the real name.. CAMEL-2121 is the ticket to improve this. 
Bug,Willem Jiang,2008-11-10T22:05:57+0000,1226354757,CXF message and payload mode endpoints do not honor CXF features that are injected by Spring configuration.,Applied path into trunk and camel-1.x branch with thanks to William.. Closing 2.0m1 tickets. 
Bug,Willem Jiang,2008-11-11T00:21:20+0000,1226362880,using .unmarshal(new JaxbDataFormat("com.foo.bar") is returning a JAXBElement instead of the desired object that was generated by xjc.,The JAXBElement is create by the ObjectFactory's "public JAXBElement<PersonType> createPerson(PersonType value) " method. You can get the PersonType instance by calling the JAXBElement's getValue() method.  If you just want to get the PersonType after the unmashalling  you just need to comment out the JAXBElement createPerson method. May be you can tell xjc don't create the JAXBElement by passing some arguments when you generate the code from xsd.. It is a JAXB ObjectFactory issue. BTW  you can remove the ObjectFactory   just leave the jaxb.index file along  we can still get a PersonType instance after unmarshalling.  jaxb.index works for the code first programming model and ObjectFactory is generated for the schema first programming model.. This is a workaround and not a fix.. I could add an option int he JaxbDataFormat to let it return the value of JAXBElement  so you don't do additional hacking on the ObjectFactory.. Also updated the wiki page.. Hi Tim  Could you try out the latest Camel 1.5.1-snapshot and 2.0-snapshot with you test case ? Please let me know if there is any question   Willem. Closing 2.0m1 tickets. 
New Feature,Chad Beaulac,2008-11-11T16:13:49+0000,1226420029,Mina Component does not support async InOut connections.   Many applications require two way or out only async tcp connections this is not supported.  See a more full discussion on this here: http://www.nabble.com/Can-mina::tcp-do-asyncronous-bidirectional-messages--tc20431804s22882.html,Hi Jeff  I still don't get what you think is needed.  aysync InOut  how is that possible? Isn't it contradictorily (opposite of each other).  InOut (option sync=true) Camel support both client and server  #1 Server: Camel exposes a TCP listener. This listener will wait for requests and send a reply to the caller (in out)  #2 Client: Camel calls an external TCP server and sends a request and waits for a reply (in out)  InOnly (option sync=false) Camel support both client and server  #3 Server: Camel exposes a TCP listener. This listener will wait for requests and not send a reply to the caller (in only). Note: The client is supposed to not wait for a reply.  #4 Client: Camel calls an external TCP server and sends a request and do not waits for a reply (in only)  This can be used for instance as a TCP logger server  where clients can send logs to the TCP server.  What am I missing in the picture?. In the case of: tcp mode=server;sync=false: Not Connected  Listener is waiting for connections Outbound - messages are discarded. Inbound - messages do not occur. (camel is waiting for producer to produce message)  Connected  Outbound - messages are send over socket Inbound - data coming from client is converted to messages and sent through producer to camel  In the case of: tcp.mode=client;sync=false:  A connection is made to client at startup when consumer is created. (Also  it would need to be re-established if connection is lost.) Outbound - messages are sent over socket Inbound - data coming from remote server is converted to messages and sent through producer to camel  Further to the logging example above  what if you want to be the client posting logs to another system?. Jeff I posted 4 scenarios above I will re-edit to make them stand out.. > Further to the logging example above  what if you want to be the client posting logs to another system? This is excatly what #4 does.  producerTemplate.sendBody("mina:tcp://externalserver:1234?sync=false&textline=true"  "Hello World");   In the code above we send the text "Hello World" from Camel (where we is a client) to an external system (the externalserver) using TCP on port 1234. We use sync=false as we as the client do not want to wait for a response from the external server.. Thanks Claus   Can I do that in XML to route messages?  None the less  my needs are to be able to open a tcp socket and have two way async message flow over that same socket. I suggest others would be interested in this as well.  Re: #3 it would be useful if Camel could expose a listener and the send messages to the client once the connection is established.  Re: #4 it would be useful if Camel could connect to a server and receive messages from the server.. Jeff   Yes all the routing can be done with Spring DSL (XML) eg:  <route>    <from uri="mina:tcp://localhost:1234?sync=false&textline=true"/>    <to uri="log:logRequest"/> </route>   This route above could be the TCP lister as example #3.. > Re: #3 it would be useful if Camel could expose a listener and the send messages to the client once the connection is established. See the route above with the Spring DSL (XML). What do you mean with once the connection is established? If you need more control of the listener you can use plain Apahca Mina that gives your plenty of options.  Re: #4 it would be useful if Camel could connect to a server and receive messages from the server. Such as this sample below where we send a request to the externalserver on TCP port 1234 with the text "Hello World" and waits for a response.  Object out = producerTemplate.requestBody("mina:tcp://externalserver:1234?sync=true&textline=true"  "Hello World"); System.out.println(out);   And the out is the response from the server such as "Bye World"  See the mina documentation at: http://activemq.apache.org/camel/mina.html  And then try for yourself  it's about time you started "asking the computer" and get some hands on experience. Camel is very fast for rapid prototyping.. Re: #4  We're talking: "connect to a server and receive massages"  not connect to a server and send "Hello World" and wait for a response  that's syncronous.  I'm talking asyncronous. Connect to a server  leave the connection open and if it sends a message  route the message  otherwise keep the socket alive and keep waiting.  We know the system can do InOut syncronous. but what I am talking about is: Two way message routing of asyncronous messages irrespective of the means to establish the connection.  With all due respect  I have been prototyping and reading the code. You are misinterpreting me.  I am trying to point out a need that I have with the system that is lacking for the greater good of Camel Mina. I will be solving my problem with a hand cobbled component  but I just wanted to point out the issue. If I end up with something of quality I will post it in the forum.. Sorry Jeff. I got it now.  This use-case that you state last isn't something I have stumbled into in my 10+ years in the field. Usually messaging is used for that kind of use-case.  Yeah we love contributions so if you crank up something usable please feel free to post it on the forum. http://activemq.apache.org/camel/contributing.html. I'm really new to camel so my point is perhaps totally wrong but ... In fact  i had excatly the same problem. I have a custom server which bind to a socket and wait for some client to connect. Once connected  server and client can exchange messages but not in a request/reply way. Each end could send message to the other end from its own authority.  When i discovered the (great) camel  i firstly thought i would be able to re-implement my custom server (based on mina) completly using apache camel and i fall in the same "trap" than you. From what i understood of camel your problem isn't solvable in that way. I mean you cannot use the mina component in that way. And as you said  you have to implement a custom component.  So i wrote my own "customserver" component (so easily  thanks to camel great API). Rather than doing from("mina:tcp//...") (which cause the problem of the communication from server -> client in a non request/reply scenario) i'm currently doing a from("customserver://serverName") and a to("customserver://serverName"). My server is registered into the camel registry using spring and is known as "serverName". Then from the consumer part of my component i fetch the server instance (using uri and registry) and add a listener to it (my consumer component is then listening for incoming message from my custom server. In fact  client messages). On the producer part i'm listening for incoming message from camel. When message arrives i simply forward them to the "myServer" instance.  The problem of mapping message to client is done by an internal clientID which is set on the header of each messages.  I don't had time yet to test my implementation  but it should work.  Hope that helps you.. Yannick  thanks for reporting your experience and the layout of your solution.. With CAMEL-2151 we have the pieces in camel-core for the foundation for async request/reply.  When we upgrade to Mina 2.0 (when its GA) then Mina itself should have some support for this as well AFAIR. Requires Mina 2.0. [18:14] <jgenender> cibsen: Hehe... you need to get creative on that  [18:15] <jgenender> cibsen: I used Hashmaps with message ID s [18:15] <jgenender> cibsen: Many ways to do it [18:15] <cibsen> and the message ids then have to part of the data send over the wire? [18:15] <jgenender> cibsen: You can do it via session id [18:15] <cibsen> what if I use some old custom text based protocol which does not offer a field for that [18:16] <jgenender> The socket session is unique [18:16] <cibsen> ah cool that is what I liked to hear [18:16] <cibsen> yeah then a map is sufficient [18:16] <jgenender> So create a Hashmap that correlates teh session id (the socket) to information on the client and you have what you need [18:16] <jgenender> You can even create state and store it in the hashmap [18:16] <cibsen>  like it already. camel-netty producer is now fully non blocking async. We will work on this when we have upgraded to use Mina 2.0.x. There is a ticket about this.. Dup of CAMEL-2624. 
Improvement,Unassigned,2008-11-11T17:26:42+0000,1226424402,Mina component only supports server mode socket (listener).   Many systems to be interfaced are themselves server mode sockets. To support such connections a client mode should be provided in which the component will connect to the target server on startup or in a lazily like lazySessionCreation.  one way would be to add a parameter like: tcp.mode="client" or tcp.mode="server" with server mode bing default.,MinaEndpoint supports both createConsumer and createProducer  need more information before this issue is created  may not be a problem.. 
Improvement,Willem Jiang,2008-11-11T19:24:33+0000,1226431473,Internally    MinaProducer is coded to create a Mina connector (client mode socket). MinaConsumer is coded to create a Mina acceptor (server mode socket).  Additionally  it appears a producer (client mode socket) is created for a "to" route mapping and a consumer (server mode socket) is created for a "from" route mapping.  This means an endpoint cannot be created in which the session is initiated by a client and messages are routed "to" the client.   The opposite is also true  an endpoint with a "from" route mapping cannot establish a connection to a tcp server.  This is a major limitation  as we do not often have control over the systems with which we are interfacing.  Perhaps  the mina::tcp URI could have a parameter the sets the socket mode: tcp.mode=server or tcp.mode=client.  Hope this make sense  thanks!,An org.apache.camel.Endpoint has methods to create either a:  consumer producer See the javadoc: http://activemq.apache.org/camel/maven/camel-core/apidocs/index.html  So you should be able to create the type you need.  However most people use the fluent route builder (Java DSL or Spring DSL) to construct routes where the type is explicit given as you type.  from(xx) = consumer to(yy) = producer  So the URI is neutral and you can then create either a consumer or producer depending what you need.. It seems to me producer / consumer is a concept for message flow  whereas client mode / server mode is a TCP connection specific concept that only really comes into play for connection establishment.  A server mode socket can consume or produce messages  but will listen for a client.  A client mode socket will also consume or produce messages  but will connect to a server at startup or through some lazy establishment policy.. Jeff excatly. Maybe we could improve the wiki documentation for the camel-mina component http://activemq.apache.org/camel/mina.html  Do you have any suggestions?. Maybe the "mina:" endpoint is a mina client - connecting to a remote socket and sending/receiving messages. Then we have a separate "mina-server" endpoint which does the reverse - for TCP based transports it opens a server socket etc?. Thanks for following up on this James!  Does that mean the mina-server would act a a client if defined in a "from" mapping? Which is the opposite of the current mina component.  It seems to me that there is are two phases to the component usage:  1) connection establishment — server mode (uses mina acceptor) / client mode (uses mina connector)  2) message handling — async mode / syncronous mode (processes outbound message as an exchange)  The behavior in the two phases should be independently configurable and not bound together as they are today.. Yeah - I think the client and server endpoints would act similar; you could route from them or to them. Whether there are 4 (including async + sync) or whether sync/async mode is an extension or configuration of the endpoint is maybe separate.  The main difference is the server endpoint would use the different connection establishment.  Having  from("mina-server:localhost").bean(Somethings.class);   could then create a custom mina server with routing logic inside it. If folks send to "mina:server:localhost" then it could use the connection details of the server endpoint to know how to basically create a normal mina client producer to talk to the server's socket etc. Sounds like we're on the same page. I like it.. James what is the difference between  from("mina-server:localhost").bean(Somethings.class);   And what we have now in camel-mina?  from("mina:tcp:localhost").bean(Somethings.class);   I.e. reading this user guide from Mina http://mina.apache.org/quick-start-guide.html  Shows how to setup Mina as a TCP server and this is excatly what we do in camel-mina today in the MinaConsumer.. Are there any plans to pursue this? I'm in the process of of unwinding my use of came-mina since I need my mina-server(acceptor) to the message-producer and my mina-client(connector) to the be message-receiver.. Barry  no its not on the roadmap in the near future.  As always we love contributions so please feel free to give it a go and try implement this feature.. Actually  I implemented this yesterday just after I posted the comment. It was really quite simple. Here's what I did:  created an interface MinaService from MinaConsumer extracted MinaAcceptor extends MinaService  leaving an instance of MinaService from MinaProducer extracted MinaConnector extends MinaService  leaving an instance of MinaService Added the 'service= {acceptor|connector}  ' property to MinaConfiguration along with a factory method to create a concrete MinaService (used by MinaConsumer/Producer).  All tests are green  but I have not yet added tests for the case where consumer is the connector and visa versa. But this is how my application works (as well as many FIX engines) and I am doing some smoke testing. The problem I am hitting is how to formulate a route in which the the producer/acceptor binds. (I'll probably figure it out  but any advice would be appreciated.)  Since I need a Ping in my application I will setup a route on the producer side like: from("mina:...&service=acceptor").to("direct:ping).  But really a more general solution is needed. If I can get to this work I'll add tests within camel-mina and submit a patch.. I think we should address this for the new camel-netty component.  Netty is clearly taking over mina as the better asynchronous communication framework.. is there any news on this one? or some code examples for Barry Kaplans solution?. GitHub user yuruki opened a pull request:  https://github.com/apache/camel/pull/303  CAMEL-1077 Added remote address support to camel-netty consumer  This pull request adds clientMode parameter to netty component. When clientMode is true netty consumer will listen to the given address as a client.  Bear in mind that my experience with netty is about two days and the approach used here might be completely wrong. My local unit tests seem to work but there are no tests for clientMode in this pull request yet.  If the implementation proves solid we might want to switch the clientMode on automatically for non-local addresses (http://stackoverflow.com/questions/2406341/how-to-check-if-an-ip-address-is-the-local-host-on-a-multi-homed-system).  You can merge this pull request into a Git repository by running:  $ git pull https://github.com/yuruki/camel netty-client-consumer  Alternatively you can review and apply these changes as the patch at:  https://github.com/apache/camel/pull/303.patch  To close this pull request  make a commit to your master/trunk branch with (at least) the following in the commit message:  This closes #303  commit 0e07c5d337b4c73d34022be244fa526c8b84974d Author: Jyrki Ruuskanen <yuruki@kotikone.fi> Date: 2014-10-17T14:45:18Z  Added remote address support to camel-netty consumer. Github user yuruki closed the pull request at:  https://github.com/apache/camel/pull/303. Applied the patch into camel master branch.. We need to update the wiki page for it.. Has this been implemented yet on camel-netty component?. There is a clientMode option. We have to retrieve data from an external system that is not directly reachable from our network due to some firewall restrictions. But the other way round works pretty fine (other system opens a socket to our system).  Thus we want to provide a server-socket on our system that allows the other system to frequently poll the requests. Unfortunately I haven't had success in establishing a server-socket by using the <to...> phrase at all.  Since this seems to be related to client / server and consumer / producer mode I would highly appreciate if someone may give us some hints.   Here is an example which requires the XML requests to put into a folder just for testual purposes. But the given <to...> phrase always tries to establish a client connection  no matter how I set the clientMode option.  <route id="polling-data-request-example">     <from uri="file:/tmp/requests/"/>     <setExchangePattern pattern="OutIn"/>     <to uri="netty4:tcp://0.0.0.0:11111?sync=true&amp;textline=true&amp;decoderMaxLineLength=8192&amp;clientMode=true"/>     <to uri="bean:requestProcessor"/> </route>. If you just want to let the client to access the file from your camel route  you can just define the camel route like this  and use requestProcessor to access the file according to the request message.  <route id="polling-data-request-example">    <from uri="netty4:tcp://0.0.0.0:11111"/>    <to  uri="bean:requestProcessor"/>. Yes  but in our case we have an OutIn pattern  since we have to provide the request message to the client that connects to our server-socket. Unfortunately we can not directly open a socket to the other system due to firewall restrictions. Thus the other party needs to poll our requests from our server-socket that is opened on our system and send the answer back through this socket.  I already tried this simplified example which handles the request file inside the processor. But unfortunately the incoming connection on our server-socket (without sending anything) does not trigger the OutIn route.  <route id="polling-data-request-example">     <from uri="netty4:tcp://0.0.0.0:11111?sync=true&textline=true&decoderMaxLineLength=8192"/>     <setExchangePattern pattern="OutIn"/>     <to uri="bean:requestProcessor"/> </route>. After playing around with the additional netty options I figured out that an incoming connection (without sending anything) actually can trigger the processor but you need to disable the 'textline' and 'allowDefaultCodec' options.  This example is pretty closer to our use-case:  <route id="polling-data-request-example">     <from uri="netty4:tcp://0.0.0.0:11111?sync=true&textline=false&allowDefaultCodec=false"/>     <setExchangePattern pattern="OutIn"/>     <convertBodyTo type="java.lang.String"/>     <to uri="bean:requestProcessor"/>     <convertBodyTo type="io.netty.buffer.ByteBuf"/> </route>. I have to correct myself: The example given above at least requires that any character is send to trigger the route (not necessarily a newline). Unfortunately in our use-case the incoming client just silently connects to our server-socket but does not send anything (instead it is waiting for the request).  njiang do you have any other suggestion how to switch the consumer / producer role even if a server-socket is used?  According to the camel netty documentation you can switch a <from...> consumer to clientMode but unfortunately it looks as you can not switch a <to...> producer to serverMode.. It's hard to camel netty to know if the request message is ready if there is no any request message is send out. But if you are using netty directly  you can just setup the handler to handle the connection before receiving the request message.. I have the same issue  Is it possible to configure "To" adapter in server-socket mode. I need to set up one-way communication level. "From" connects to a remote service as client socket and starts receiving text stream  then I need to forward this stream into server socket. No request-response logic just streaming  from("netty4:tcp://remote:54321?textline=true&sync=false&clientMode=true&reconnectInterval=1000") .to("netty4:tcp://0.0.0.0:12345?transferExchange=true&textline=true&clientMode=false&sync=false")  For "From" instruction it works  but "To" instruction does not want to an open server socket  it tries to connect localhost:12345 while I want to open the server socket on port 12345. Hi Dima  Current camel doesn't support to create a server socket from the "To" endpoint. If you want to open a socket to listen to port 12345  you need to setup a route just like this.  from("netty4:tcp://0.0.0.0:12345?transferExchange=true&textline=true&clientMode=false&sync=false").... 
Improvement,Hadrian Zbarcea,2008-11-11T22:34:27+0000,1226442867,The code in DefaultEndpoint.createExchange(Exchange exchange)  calls on getExchangeType() to figure out if a new copy of Exchange needs be created.  The code relies though on the generic argument of the Endpoint type to figure out the actual Exchange type.  With the generics removed part of CAMEL-872  getExchangeType() always returns null  forcing a copy every time.  There is no real need to extend Exchange  so the proposal for this to make the Exchange final and move the component specific bits  if any   in the Message.,Removal of generics caused this.. Exchange specialized classes to be removed: [DONE] - BeanExchange [DONE] - CxfExchange [DONE] - DummyExchange [DONE] - FileExchange [DONE] - HttpExchange [DONE] - IrcExchange [DONE] - JhcExchange [DONE] - JmsExchange [DONE] - JMXExchange [DONE] - MailExchange [DONE] - MinaExchange [DONE] - MyExchange [DONE] - QuartzExchange [DONE] - RemoteFileExchange [DONE] - SpringIntegrationExchange [DONE] - TraceEventExchange [DONE] - XmppExchange [DONE]- GroupedExchange  And some hard ones: [DONE] - GenericFileExchange [DONE] - RemoteFileExchange. +1  camel-extra has no specialized Exchanges  so we are safe there.. Hadrian - removing the generics doesn't mean we should remove the specialised Exchange implementations!  They can be a massive optimisation!  e.g. if you are routing from JMS to JMS and you don't modify the payload at all - you could just forward the JMS message on. Or you can expose the full JMS message to JMS aware consumers.  So I don't see why we need to remove the custom exchange implementations if they add some possible value!. For performance btw we don't wanna construct a Camel Exchange / Message until we really really need one - and preferably avoid doing conversions if we can help them.  e.g. don't force the deserialisation of all the JMS Message properties until folks really look at them in a route.. BTW the main reason to zap generics was it forced a pointless copy of an exchange when sending to - say - a JMS endpoint. However when consuming from a JMS endpoint - using a JmsExchange makes sense - and is a good optimisation IMHO. after having more coffee (mmm!) - I guess custom exchange implementations don't add a huge value - other than typesafe getters for custom Message objects; so its not a huge biggie.  Custom Message implementations though is a biggie. So let me add my thoughts on it.  I believe Exchange don't have to be specialized and moreover messages should be not. To become consistent across all message types and components I believe we should use generic Message class that has an access to original message received from the endpoint.  This solution might have few benefits:  Consistent look at the message independent of actual component used For example in JMS some headers are stored in the JMS message itself  while some in Camel's map of headers  because not every name can be used as JMS property name) In few cases I can retrieve a headers via getHeader(String)  but they doesn't exists in the map returned by getHeaders() - I believe it was in JBI some time ago. This solution would eliminate those problems at all! If we keep original technology-specific message in camel exchange in read-only fashion  we can always access original request that came to the endpoint - it might be generally Object  so it can be used by any component. We can also keep some 'dirty' flag that can make solutions more optimal like JMS<->JMS bridge  that can detect unchanged JMS message and send it directly I believe because of Camel message model being not always 100% compatible with any technology we should avoid synchronizing camel message with underlying message as it is not always possible or meaningful. It involves marshaling/unmarshaling process when message arrives  but I would really like to keep all camel headers/body in one place - in DefaultMessage. Now when you debug  you never know  The only usage of subclasses of DefaultMessage I see is to delay marshaling/unmarshaling process like lazy-creating body or headers map when you retrieve them. And my beloved topic about one message per exchange - no in/out/fault distinction  but it is different story   I know that all those things can be (in majority) fixed by tailing bugs  but simplification of the concept itself seems to be more bug-proof   Maybe not all of those things should be targeted for 2.0  but those are my thoughts on Camel message model. @Roman  I will work on finishing this issue this week  so we could have it in 2.0-M2. I am not sure I agree with the no specialized Messages proposal  I hope others will pitch in. I think it's actually a "cleaner" solution than you "dirty" flag (sorry  couldn't resist it  ).. @Hadrian  I think it requires a bit more work than its possible to do over a weekend.  I would like to propose that this work should not hold up 2.0m2 release. I would really like that to get out as its a major leap over 2.0m1. We have done tons of work since and if it was a 1.x series it it would have constituted a new x.+1 release alone.  After the m2 I would love to give us the time needed to research and work with the API to find the right solution.. This requires a bit of work indeed  I discovered for instance that the xmpp component requires a bit of love.  I agree that this should not hold the 2.0-M2 release.. Hadrian there are only 2-3 left so lets get them done before 2.0 is final.  That would be great as then there are no API changes needed for the performance improvements we can do under the covers.  We could even consider making DefaultExchange final so people wont create their own classes. Then the copy can be avoided.. Hadrian only 1 left. Do you work on it or should I give a stab? Would be great to have it done by start of next week so we can get started on a RC build of Camel 2.0.  This is really the last API changes we must get done before a 2.0 can be cut.. Last one done  so we now only have the DefaultExchange.  Should it be final?. I have created a wiki page for design ideas of optimizations for Camel 2.x.  Please continue the discussion at this page.  http://cwiki.apache.org/confluence/display/CAMEL/Camel+2.x+Speed+optimizations. Made DefaultExchange final.  Changed ticket subject.  Lets discuss at the design page and then create tickets after Camel 2.0 release and when got the time to do some optimizations.. Closing all 2.0M3 tickets. 
Bug,Willem Jiang,2008-11-11T23:01:25+0000,1226444485,If mycamel-cxf (non-pojo mode) endpoint is configured by Spring  to inject CXF other features  CxfProducer drops  MessageDataFormatFeature or PayLoadDataFormatFeature that it has added when endpoint.configure(cfb) is invoked.,working on a patch.. @William  make sure you add a unit test too. Thanks.. @Hadrian  sure.. Applied apach into trunk and 2.1.x branch.. Closing 2.0m1 tickets. 
Bug,Willem Jiang,2008-11-12T08:23:00+0000,1226478180,org.apache.camel.component.dataset.DataSetSedaTest.test  ================= java.lang.AssertionError: dataset:foo Failed due to caught exception: java.lang.AssertionError: Header: camelDataSetIndex does not match. Expected: 363 but was: 362 on Exchange[Message: <hello>world!</hello>] with headers:  {camelDataSetIndex=362} 	at org.apache.camel.component.mock.MockEndpoint.fail(MockEndpoint.java:712) 	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:255) 	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:214) 	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:141) 	at org.apache.camel.ContextTestSupport.assertMockEndpointsSatisfied(ContextTestSupport.java:274) 	at org.apache.camel.component.dataset.DataSetSedaTest.test(DataSetSedaTest.java:35),Closing 2.0m1 tickets. 
Improvement,Claus Ibsen,2008-11-12T18:40:37+0000,1226515237,We should try to align the two components  	jdbc 	sql    so they are more the same to configure with eg the datasource.,wiki can not be updated right now.  Changes to wiki: readSize is now default 0  so camel will return all data.. We might consider aligning the update count header to be the same for both component.  camel-sql uses: org.apache.camel.sql.update-count camel-jdbc uses: jdbc.updateCount. Closing 2.0m1 tickets. 
Task,Willem Jiang,2008-11-13T03:40:46+0000,1226547646,Some user asked the questions about how the use the PAYLOAD date format in camel-cxf component  we need to add  the example and documentation for it.,Updated the code and wiki page.. Closing 2.0m1 tickets. 
Improvement,Claus Ibsen,2008-11-13T07:05:24+0000,1226559924,Currently we do not store the content if there was a eg HTTP error 500 returned. But throw a HttpOperationFailedException.  We should store the content also so end-users have access to this one as well. Maybe add some strategy methods on the HttpProducer so end users can override this class and create their own implementation.  See nabble: http://www.nabble.com/HttpProducer%3A-how-to-access-the-body-of-an-error-page-i-td20475651s22882.html,You can get the error content in Camel 1.4.0. A patch with a fix. Would like review by fellow committers. The patch also fixes CAMEL-1093.  To review:  in case of exception should we return response code 500 should we write the exception message and exception stracktrace as response body do we need a convient methods response body as string on the HttpOperationFailedException. Hi Claus  I reviewed your patch  I think it is necessary for us to send the camel router's internal's error back. But I didn't find any the strategy methods in the HTTPProducer to override the implmentation of error content store.  Do you plan to address it in this JIRA ?  Cheers   Willem. @Willem  Well spotted  I will add the strategy method so end users can customize this behavior.  I was wondering if the current behavior to return the exception as: MESSAGE STACKTRACE  Maybe should just be a plain STACKTRACE. @Claus   I think the plain STACKTRACE should be OK. HTTP is a kind of request-reply communication   the client should already know what he send out.. CAMEL-1107  CAMEL-1083  CAMEL-1095  CAMEL-1093: Major improvements to camel-jetty and camel-http. camel-jetty: Now properly returns fault and exception camel-http: repsonse body is avaiable on HttpOperationFailedException camel-jetty: introduce HttpBinding as interface and to be referenced in Registry for end users to customize how response should be written camel-jetty: now returns content-type and content-length if possible to calculate both: minor URI parsing so internal Camel options is not exposed  Adding components\camel-http\src\main\java\org\apache\camel\component\http\DefaultHttpBinding.java Replacing components\camel-http\src\main\java\org\apache\camel\component\http\HttpBinding.java Sending components\camel-http\src\main\java\org\apache\camel\component\http\HttpComponent.java Sending components\camel-http\src\main\java\org\apache\camel\component\http\HttpEndpoint.java Sending components\camel-http\src\main\java\org\apache\camel\component\http\HttpMessage.java Sending components\camel-http\src\main\java\org\apache\camel\component\http\HttpOperationFailedException.java Sending components\camel-http\src\main\java\org\apache\camel\component\http\HttpProducer.java Sending components\camel-jetty\src\main\java\org\apache\camel\component\jetty\JettyHttpComponent.java Adding components\camel-jetty\src\test\data Adding (bin) components\camel-jetty\src\test\data\logo.jpeg Adding components\camel-jetty\src\test\java\org\apache\camel\component\jetty\JettyContentTypeTest.java Adding components\camel-jetty\src\test\java\org\apache\camel\component\jetty\JettyHttpBindingRefTest.java Adding components\camel-jetty\src\test\java\org\apache\camel\component\jetty\JettyHttpClientOptionsTest.java Adding components\camel-jetty\src\test\java\org\apache\camel\component\jetty\JettyImageFileTest.java Adding components\camel-jetty\src\test\java\org\apache\camel\component\jetty\JettyResponseBodyWhenErrorTest.java Transmitting file data .............. Committed revision 719662.. Wiki updated. merged to 1.5.1:  D:\project\camel-1x>svn ci -F svnmerge-commit-message.txt Sending . Adding components\camel-http\src\main\java\org\apache\camel\component\http\DefaultHttpBinding.java Replacing components\camel-http\src\main\java\org\apache\camel\component\http\HttpBinding.java Sending components\camel-http\src\main\java\org\apache\camel\component\http\HttpComponent.java Sending components\camel-http\src\main\java\org\apache\camel\component\http\HttpEndpoint.java Sending components\camel-http\src\main\java\org\apache\camel\component\http\HttpMessage.java Sending components\camel-http\src\main\java\org\apache\camel\component\http\HttpOperationFailedException.java Sending components\camel-http\src\main\java\org\apache\camel\component\http\HttpProducer.java Sending components\camel-jetty\src\main\java\org\apache\camel\component\jetty\JettyHttpComponent.java Adding components\camel-jetty\src\test\data Adding (bin) components\camel-jetty\src\test\data\logo.jpeg Adding components\camel-jetty\src\test\java\org\apache\camel\component\jetty\JettyContentTypeTest.java Adding components\camel-jetty\src\test\java\org\apache\camel\component\jetty\JettyHttpBindingRefTest.java Adding components\camel-jetty\src\test\java\org\apache\camel\component\jetty\JettyHttpClientOptionsTest.java Adding components\camel-jetty\src\test\java\org\apache\camel\component\jetty\JettyImageFileTest.java Adding components\camel-jetty\src\test\java\org\apache\camel\component\jetty\JettyResponseBodyWhenErrorTest.java Transmitting file data ...... Committed revision 719673.. Closing 2.0m1 tickets. 
Improvement,Claus Ibsen,2008-11-13T08:53:54+0000,1226566434,Hi   In class ProducerTemplate  to perform an InOnly Request  we can use     Object sendBodyAndHeader(String endpoint                                           ExchangePattern pattern                                           final Object body                                           final String header     If we have only a single header    and     Object sendBodyAndHeaders(String endpointUri                                             final Object body                                             final Map<String  Object> headers)   If we have multiple headers.   To perform InOut Requests  it is recommended to use requestXXX method.  The only method requestXXX that exist is with a single hearder (no 's' at the end of the method)    Object requestBodyAndHeader(String endpointUri  Object body  String header  Object headerValue);  So  we cannot perform a request with multiple headers. The following method is missing:    Object requestBodyAndHeaders   (with a 's' at the end)    Regards  Guillaume,Just need to backport CAMEL-1065 to 1.5.1. Closing 2.0m1 tickets. 
Task,Claus Ibsen,2008-11-13T10:43:07+0000,1226572987,We should add to the simple example (5 mins tutorial) that .to is not the end of the world  So you do  from(a).process(b).to(c)    That you can do  from(a).process(b).to(c).process(d),http://cwiki.apache.org/confluence/display/CAMEL/Walk+through+another+example. Closing 2.0m1 tickets. 
Bug,Willem Jiang,2008-11-14T06:00:57+0000,1226642457,The "from" endpoint instead of the "to" cxf endpoint object is left in the cxf exchange by CxfClient  which can cause problems for CXF interceptors that depend on cxf endpoint object in the exchange.,Note: the patch was created from the 1.x branch.. Applied patch with thanks to William.. Closing 2.0m1 tickets. 
Task,Claus Ibsen,2008-11-14T07:12:41+0000,1226646761,The javadoc should be reivised in ProcessorType and the other models as well as it's used for the Java DSL.  We have a few errors with copypaste etc.,I added a few TODO in the ProcessorType to look into. Only policy is not documented.  interceptor gertv davsclaus: not sure why it returns a choicetype here 14:43 gertv davsclaus: it only appears to be adding a conditional interceptor 14:45 gertv davsclaus: sorry  the choicetype actually goes in the interceptor there  my mistake 14:45 davsclaus must be the when that triggers the choicetype to return? 14:45 davsclaus .when 14:46 gertv yes  it is 14:46 gertv but I don't know how you would use that 14:46 davsclaus ah could make sence to intercept only when predicate is true  but the return type is choice which confused me 14:47 davsclaus .intercept(header("foo").isEqualTo("bar")).to("mock:foobar") something like that? 14:47 gertv yes  that would make sense  but I don't see how you would use that from the DSL though 14:47 davsclaus yeah it laks a unit test  14:47 gertv yeah  but how would you continue the route after that? 14:47 gertv because it only makes sense to intercept if you can go on with what you were doing afterwards 14:48 davsclaus ah maybe you can continue on the choice type builder? 14:48 davsclaus intercept has a proceed() and a stop() to determine what to do 14:48 davsclaus .stop() will break the route 14:48 davsclaus .proceed() will continue from original point of interception as if nothing happened 14:49 davsclaus but better to ask the computer and add some unit tests for it   dataformat  davsclaus btw I think we have a few to many marshal / unmarshal DSL as well that accepts the xxxType class? I was wondering why? 14:51 davsclaus see TODO in the code 14:57 gertv davsclaus: yeah  you would have expected the DataFormatClause to be implementing using the SPI classes instead of the *Type classes 14:57 gertv implenting -> implemented. This is a task that I from time to time will work on. Okay the Java DSL builders should have javadoc now. Closing 2.0m1 tickets. 
Bug,Willem Jiang,2008-11-14T07:15:27+0000,1226646927,When I added a unit test to show how to get the SOAP header from a PAYLOAD camel-cxf endpoint   I found the soap header stuff is not working.,Also updated the wiki page.. Closing 2.0m1 tickets. 
Task,Claus Ibsen,2008-11-14T08:58:41+0000,1226653121,We need some Spring DSL samples for the error handling stuff http://activemq.apache.org/camel/error-handler.html,We can use samples from: https://svn.apache.org/repos/asf/activemq/camel/trunk/components/camel-spring/src/test/resources/org/apache/camel/spring/config/  Also the onException should be documented as well (if not already). Added spring sample: http://cwiki.apache.org/confluence/display/CAMEL/Error+Handler. Closing 2.0m1 tickets. 
Bug,Gary Tully,2008-11-14T15:28:52+0000,1226676532,from the apache-camel-load test:  2008-11-14 15:27:01 114 [mponent@1296d1d] INFO  aset:myDataSet?produceDelay=10 - Sent: 600 messages so far. Last group took: 0 millis which is: 85.106 messages per second. average: 80.128  The ThroughputLogger used by DataSet resets the duration before reporting it.,resolved in r714032. Hi Gary  Current Camel trunk's version is 2.0-snapshot  if you wants this patch to be applied into the 1.5.1-snapshot   you need merge it from trunk to camel-1.x branch. Don't worry  I will do the merge for you in a minute   Willem. The patch is in camel trunk and camel1.x branch now.. Closing 2.0m1 tickets. 
Bug,Roman Kalukiewicz,2008-11-14T16:54:13+0000,1226681653,http://www.nabble.com/Jetty-and-Mina%3A-how-to-bind-to-%22anylocal%22-AKA-%22wildcard%22-address--tp20475674s22882p20494645.html,Warning is added when someone creates flow that refers to 'localhost' and it proposes 0.0.0.0 instead. Warning appears once per jetty connector (host+port pair) so if you have 10 flows with localhost:80 you have only one warning.. Rom it doesn't compile on jdk1.5. Camel should be build with 1.5 only.. And maybe the 0.0.0.0 stuff cant be tested on unix as you normally cant bind to ports under < 1024. Jonathan can help test on all sort of platforms.. janstey@mojo:/x1/apache/camel-trunk/components/camel-jetty$ svn ci -m "CAMEL-1091 - Fix compilation issue on Java 1.5" Sending camel-jetty/src/test/java/org/apache/camel/component/jetty/InterfacesTest.java Transmitting file data . Committed revision 718279.  Roman  would you mind reviewing my fix for this test? It should work now on Java 1.5/1.6.. Another note by Willem:  (02:04:43 PM) willem: There'r a MalformedURLException http://rafb.net/p/8s9PsR33.html when I run the InterfacesTest  It looks like the URL doesn't support IPV6's address. I ran the test on my Windows Vista box with JDK 1.5.0_13.  From http://rafb.net/p/8s9PsR33.html  java.net.MalformedURLException: For input string: "0:0:0:0:5efe:c0a8:76%21:4567" 	at java.net.URL.<init>(URL.java:601) 	at java.net.URL.<init>(URL.java:464) 	at java.net.URL.<init>(URL.java:413) 	at org.apache.camel.component.jetty.InterfacesTest.testLocalInterfaceHandled(InterfacesTest.java:48) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) 	at java.lang.reflect.Method.invoke(Method.java:585) 	at junit.framework.TestCase.runTest(TestCase.java:164) 	at junit.framework.TestCase.runBare(TestCase.java:130) 	at junit.framework.TestResult$1.protect(TestResult.java:106) 	at junit.framework.TestResult.runProtected(TestResult.java:124) 	at junit.framework.TestResult.run(TestResult.java:109) 	at junit.framework.TestCase.run(TestCase.java:120) 	at junit.framework.TestSuite.runTest(TestSuite.java:230) 	at junit.framework.TestSuite.run(TestSuite.java:225) 	at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:130) 	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386) 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196). I committed the test that I believe should work for IPv6. Unfortunately I don't have IPv6 interface at my machine so I cannot test it out. If someone that has IPv6 enabled (I can see Willem has) could run this test it would be great. If you find some obvious errors  please fix them  as IPv6 is something I can hardly test.. Hi Roman   The IPV6 test does not work in my Vista box with JDK1.5.0_13 or JDK1.6.0_6. After struggling this for an hour  I found It's a known issue of SUN's JDK[1].  So I will disable the test of IPV6.  [1] http://bugs.sun.com/view_bug.do;jsessionid=70afcb213c8795d4c8b77a9d4175?bug_id=6230761  Willem. Hey Willem   I had no chance to hit this problem without IPv6 interface on my Windows XP . On the other hand test passes on my linux box at home that have IPv6. Anyway of course we don't want to hurt anyone with Windows with this test   Thank you for finding it out.. From a skin read of the sun bug report it looks like they will only fix the Windows IPv6 on JDK7  that seems a bit harsh I think. But I could be mistaking.. Closing 2.0m1 tickets. 
Bug,Hadrian Zbarcea,2008-11-14T18:57:47+0000,1226689067,When running a Camel router scenario  I am getting a ClassNotFoundError  for the OSGi Bundle class from the ResolverUtil class. It seems like this code should be in the camel-osgi bundle or perhaps should be more reflection based.,Seumas do you run it in an OSGi platform?  The imports for OSGi bundle classes should only kick in if Camel have determine that the classloader is a OSGi bundle loader.  You can enable TRACE logging (eg Log4j set level to TRACE) and it will spit out a lot of useful logs for Hadrian to check out.  BTW: I am wondering if we should add somekind of flag to control this behavior so you can force it to not scan OSGi bundles. And Gerv has some ideas to improve the OSGi stuff for 2.0. There is another ticket somewehere about this.. Also  you don't want to have camel-osgi jar in your classpath  if you are using Spring to inject CamelContext but not running camel in OSGi container. Otherwise  the org.apache.camel.osgi.CamelNamespaceHandler takes over and it tries to load classes from OSGi packages.. This is not entirely accurate. It depends on the namespace. For camel-osgi  camelContext is in the "http://activemq.apache.org/camel/schema/osgi" namespace. If that namespace is used org.apache.camel.osgi.CamelNamespaceHandler takes over.. I wasn't entirely accurate. Here is what I saw. If both camel-osgi and spring-osgi-core jars are present in the classpath  then the OSGI version of the SpringCamelContext will kick in even though the namespace does not specify the osgi one. I am not sure how it happens. Any enlightenment would be appreciated. Spring must have pulled some magic.  It is nice because the route configuration does not have to know anything about osgi (namespace) and it just works in either environment. The attached test case can demonstrate that behavior. Uncomment the spring-osgi-core-1.1.2.jar line in the build.xml and set it to the jar location  then run "ant router" target It will fail with "java.lang.NoClassDefFoundError: org/osgi/framework/BundleContext". Before running the ant.  1) Get 1.5.0 binary distribution and untar it. 2) Set CAMEL_HOME to the camel installation directory 3) Untar the test.tar to CAMEL_HOME directory. @William  thanks for the test. I banged my head against this one for 2 days now. I think I know what the problem is. OSGI awareness is sort built into the core assuming that osgi is always used with camel-osgi  which is obviously not the case. I think it's our bug  not Spring's magic.  I think I'm almost done with this. I only have a chicken'n'egg bootstrapping issue to fix  but I badly need a bit of luck.. Thanks Hadrian. Good luck with the fix. I believe we are actually talking about different issues. I guess mine isn't really an issue. FYI  my mystery has been solved. It is the org.apache.camel.spring.handler.CamelNamspaceHandler.init() method doing the trick.. I think this issue is resolved with CAMEL-1240. Closing all 1.6.0 issues. 
Bug,Claus Ibsen,2008-11-15T11:01:11+0000,1226746871,The code below:       protected RouteBuilder createRouteBuilder() throws Exception {         return new RouteBuilder() {             public void configure() throws Exception {                 errorHandler(noErrorHandler());                 from("jetty:http://localhost:8080/myapp/myservice").process(new MyBookService());             }         };     }      public class MyBookService implements Processor {         public void process(Exchange exchange) throws Exception {             throw new IllegalArgumentException("Damm");         }     }    Will return http response code 200. We should let end users easily set what response code they want and in case of route failures we should probably return 500 and return the stracktrace in the body,HttpBinding should test for failures. Closing 2.0m1 tickets. 
Bug,Willem Jiang,2008-11-15T15:36:49+0000,1226763409,Here is a email thread on this issue.   Basically  the CxfProducer rrelies on Jaxws/ClientFactoryBean to create a client object.  However  JaxwsClientFactoryBean does not support setting and building jaxws handler chain.   Even if it did  we would still have to replicate the same logics (that build the handler chain) in Camel's CxfClientFactoryBean because it CxfClientFactoryBean is a hybrid of both Jaxws and simple client frontend.  http://www.nabble.com/camel-cxf-jaxws-handler-support-td20512478s22882.html,The patch was done on the 1.x. Please review it We will need to update the document and mention that SEI must be an interface.. Applied the patch into trunk and camel-1.x branch with thanks to William. Also updated the camel-cxf wiki page.. I think the SEI change needs to be documented on the release notes for 1.5.1 and 2.0 that it must be an interface now.  http://activemq.apache.org/camel/camel-151-release.html http://activemq.apache.org/camel/camel-200-release.html. Closing 2.0m1 tickets. 
Bug,Claus Ibsen,2008-11-16T09:17:58+0000,1226827078,The Content-Type is not set in HttpBinding if an end-user has provided one as a OUT header.  So if an user exposes a Jetty service and lets requests fly in that is text/plain and want to return a response that is image/jpeg or the likes the content type can not be set as:             exchange.getOut().setHeader("Content-Type"  "image/jpeg");,Content-Length is also missing. Example as the http headers returned now  HTTP/1.x 200 OK Transfer-Encoding: chunked Server: Jetty(6.1.11)   And with a code fix we have for the same request:  HTTP/1.x 200 OK Content-Type: image/jpeg Content-Length: 10249 Server: Jetty(6.1.11). Closing 2.0m1 tickets. Claus   We are still facing the mentioned issue.  Camel Version: 2.9.2 Camel Jetty Jar Version 2.9.0  Problem statement: Although I include the statement setHeader("Content-Type"  "application/json"); or setHeader("Content-Type"  "application/xml");  upon debugging I can see the following behaviour.  1.) Class "DefaultHeaderFilterStrategy"  method "doFiltering" contains "Content-Type" as one of the filters to skip. Thus it removes the "Content-Type" from header if mentioned explicitly also.  Please provide the resolution to set the "Content-Type" in response header or please let us know in-case we are missing something.. 
Improvement,Claus Ibsen,2008-11-16T11:50:54+0000,1226836254,SUN JavaMail has many properties for configuring Java Mail. http://java.sun.com/products/javamail/javadocs/index.html  Currently you can set either all java mail properties yourself or set a few of them using the URI. We should support the  javamail.XXX option so you can append whatever you want.  And maybe also a bean ref so you can configure this nicely in Spring DSL.,For instance to set a POP3 top option to disabled http://java.sun.com/products/javamail/FAQ.html  Such as this FAQ: Q: I'm having problems using POP3 with Microsoft Exchange. A: Some versions of Microsoft Exchange do not implement the POP3 protocol properly. They return different headers from the TOP command than they do from the RETR command. This can cause all sorts of strange failures in JavaMail. One solution is to disable use of the TOP command  as described above. Another approach that works in some cases os to tell JavaMail to forget about the headers it retrieved using the TOP command after retrieving the entire message using the RETR command. To do this  set the property "mail.pop3.forgettopheaders" to "true".  It should be possible to set it as: mail.pop3.forgettopheaders=true  The option should be: *mail.*xxx. Revision #718043 Committed by davsclaus at 16-11-08 15:52:14 CAMEL-1096: camel-mail now supports setting additional java mail properties if URI options starts with mail.. As this is probably rare that you set these properties I dont wanna go throught the trouble of creating a ref option to lookup in the registry for a Properties that you can configure as a spring bean with these additional properties. Just set miltiple values on the URI directly.. Closing 2.0m1 tickets. 
New Feature,Roman Kalukiewicz,2008-11-18T10:18:39+0000,1227003519,allInterfaces parameter should allow to expose a http endpoint on all available network interfaces. It should be like passing null host to ServerSocket class.,I really don't see any difference between 0.0.0.0 as a hostname and anyLocalhost=true or allInterfaces=true attributes. We'd have to either check for an attribute value or the hostname value. When one reads a url  the semantics of 0.0.0.0 is pretty clear and we can put in the necessary code to deal with ipv6 (which i suspect it should be handled already anyway).  I'll give this a -1. I'll gladly change my vote if I see a compelling argument.  > This is what I really like. This way what we do is clear  and we > explicitely mark that we want to ignore host part of the uri. Yeah  a hostname of 0.0.0.0 would mean precisely the same thing.. The point is that in case of 0.0.0.0 we don't have to check the value. We just pass it to connector and IP stack already knows what it means. With the flag we have to test and pass null instead. If there is no difference in behavior then I agree with your -1.. If we were to test for something  I'd rather test for a hostname.startsWith( "0.0.0.0") than an attribute (which we may want to take out of the url before passing it to the stack anyway)  and then replace the hostname value with null. But as I said  I strongly doubt that's needed at all.. +1 on Hadrians suggestion: hostname.startsWith( "0.0.0.0"  Roman what is the status of this one? Isn't this important to get into Camel 1.5.1?. After all this discussion and options presented I believe that if we want to test for startsWith("0.0.0.0") then it is better to simply close the issue and do nothing. The reason is that someone can argue that if he/she writes 0.0.0.0 then he/she means it and it should be the thing passed to IP stack. In majority of situations passing 0.0.0.0 to IP stack will expose an endpoint on all interfaces via IPv4 and IPv6 (I believe). If not - the only thing we risk is that someone will have to create two endpoints for IPv4 and IPv6 separately.. 
Improvement,Willem Jiang,2008-11-18T10:37:22+0000,1227004642,Running in a server managed environment  it is preferable to use managed threads when ever possible. Is it possible to have these components (and others that spawn threads) modified to use Spring's TaskExecutor abstraction (a la JmsComponent). If this is the case  we could configure the components to use the server's WorkManager API.,We should also check if there are other components that has similar issue.. Lowering priority from blocker to major.. Took a crack at modifying MulticastProcessor to use Spring's TaskExecutor abstraction. By default  it will now use Spring's ThreadPoolTaskExecutor with the same pool configuration as previous. Splitter change was also required due to the dependency. Necessary changes to the units tests were also done. These changes have been integration tested in JBoss and Webpshere containers using the respective Work Manager's.  Patch is being submitted.  Tim.... Patch for Multicast and Splitter processors. Tim  we can not have dependency on any spring.jars in the camel-core. camel-core should be extremely lightweight and thus only requires commons-logging.jar.  I think if possible there should be a option on the multicast and splitter type to reference a TaskExecutor. I think we have this in some of the other types.. Yep  that makes a lot of sense. Where would this option be set? It would be trivial to create a SpringManagedMultiprocessor in the camel-spring module  Tim.... I think James or Hadrian should be in on this as they might have some ideas to this.  As the model objects is in camel-core we can't have any spring imports  and the TaskExecutor in spring is not using the java 1.5 concurrent library (to be 1.4 compatible). And we haven't pluggable DSL (yet  Hadrian have some ideas to this).  I guess using spring 3.0 that is jdk1.5+ it would be much easier to integrate as we can use the java.util.concurrent.Executor interface.  So we might need some tricks or good ideas to do it.. I just checked the Spring 3.0 source  and indeed TaskExecutor is now implementing the Executor interface. My suggestion is to modify multicast and splitter to use the Executor interface. In the interim  for my own use  I can proxy the TaskExecutor with the Executor interface.  Tim.... Basically we put the Spring related class into the camel-spring module. How about we implement the java 1.5's Excutor interface by using the Spring's TaskExecutor and let user configure it with the Spring ? In this way we could support the 2.x Spring's TaskExecutor in camel .. Spring's 2.x TaskExecutor does not implement Executor - it does in 3.0. Either way  it would be a worthwhile re-factoring.. submitting patch for Executor re-factoring. Tim the patch looks great.  Do you mind checking in the camel code if we can change to Executor instead of ThreadPoolExecuter in other areas as well? Check camel-spring in the components as well as it's kinda core also.. @ Tim I means we could write a adapter for the TaskExecutor in camel-spring module   this adapter should implement the Executor. In this way   we can use the Spring 2.x TaskExecutor directly in camel. BTW TaskExecutor defines the exact same method signature with the JDK1.5's Executor.. Now I'm thinking we could hack the Spring injector or something. If the property value is instance of TaskExecutor   we could turn it into an ExecutorAdapter.. I do not think there is a need  I was able to accomplish the adaptor with a Spring proxy. something like this:  Spring Proxied WorkManager <bean id="workManagerTaskExecutor" class="org.springframework.jca.work.glassfish.GlassFishWorkManagerTaskExecutor"/>  <bean id="taskExecutor" class="org.springframework.aop.framework.ProxyFactoryBean">      <property name="proxyInterfaces" value="java.util.concurrent.Executor"/>      <property name="target" ref="workManagerTaskExecutor"/>      <property name="proxyTargetClass" value="true"/> </bean>. Claus  I did not find any other areas that were utilizing ThreadPoolExecutor. Were there any specific components you had in mind?. @tim  No not really. Just wanted to be sure we covered it when commiting the patch. This issue states its only about: multicast and file consumer.  Have you check the components such as:  camel-spring camel-jms as well?. Hi  You workmanager spring proxy solution is very neat. I am wondering if you would mind creating a little wiki page about this?  Such as a new cookbook: http://activemq.apache.org/camel/cookbook.html  Or a brief FAQ entry: http://activemq.apache.org/camel/faq.html. The multicast and file components were merely examples  if running in a container  were using unmanaged threads. In my humble opinion  CAMEL would need considerable re-factoring to be a good citizen when running in a container managed environment. A quick code scan revealed quite a few areas that are spawning threads (DefaultComponent for example).. I am a bit apprehensive at this point to make this solution public. I had problems with the JBoss implementation  and it has not been tested on Webpshere or Weblogic. I will complete my testing in order to validate the solution.. @tim. DefaultComponent uses a ScheduledExecutorService to as pool.  So maybe it's possible to inject what the WorkManager has to offer as ScheduledExecutorService using the setScheduledExecutorService method. However being able to set that globally for all components is something I can't see done easy. Maybe something we should consider to improve.  Does the WorkManager offer a ScheduledExecutorService?  Are there other areas with issues? Tim we are interested to improve and let Camel be a first class citizen.. The unfortunate issue here is that there is another API (Timer) that provides the equivalent to ScheduledExecutorService. This API is significantly different to the Java SE concurrent equivalents that would make the previous approach of proxying the interfaces very difficult. So for now  it looks like there is no clean way to use ScheduledExecutorService implementations in a managed environment.  Moving forward  my suggestion would be for Camel to have it's own abstraction  similar to Spring's TaskExecutor  that would allow for the configuration of thread management whether running in a managed container or not.  JSR 236 offers hope for the future.  Tim.... I created a new ticket for Timms suggestions of some sort of abstraction. Thank you Camel team for integrating my suggested changes.  Claus  If you grant me (confluence user mcnamara) editing karma on the wiki  I can see about starting a Cookbook entry - something like "Camel in a J2EE Environment".. @tim  I have granted you the karma  On this page there is a brief section about the wiki docu how to edit: http://activemq.apache.org/camel/contributing.html. Closing 2.0m1 tickets. 
Improvement,Claus Ibsen,2008-11-19T03:14:11+0000,1227064451,See thread: http://www.nabble.com/Deprecation-of-file-consumer-timestamp-td20566034s22882.html  Will be following Gert's suggestion of multiple implementations for the storage mechanism so many use cases can be covered:  	an in-memory store for testing purposes 	a file-based implementation for basic production environments 	a database- or ldap-backed implementation for clustered environments  where a file can arrive through multiple directories,I got a bit deep into the code today in the FileConsumer and have added options for idempotent so you can keep track of already consumed files.  See my new post on the nabble forum with this idea.  Jon do you mind review the commited source code on trunk. Sorry for invading this ticket  but the re factor of the file consumer needed to be done in one go as to have most unit test still passing. The commits will be on CAMEL-1112. To review:  I have set the default cache size of the memory to 1000  is this a good default value? FileConsumer code file.getName is that a sufficient key for idempotent check (should we use absolute file name instead?) Is the header keys for index/total a good key name? Should idempotent be enabled by default?  Notice for unit tests that want to consume files but not delete: noop=true&idempotent=true will be as before  only consuming the file ones and not delete the source files.. MessageIdRepository should be renamed and moved to org.apache.camel.spi MessageIdRepository -> IdempotentRepository  See nabble post with James suggestion for this.. James had a good idea about the interface methods  How about following the Set naming convention?  boolean add(element) // Returns true if this set did not already contain the specified element.  boolean contains(element) // for peek. BTW: I am currently working on moving the idempotent repository to the spi package.  Should we support generic  like the Set contract?  Should it be: public interface IdempotentRepository<E> Or without the <E> and using Object as the key type?  I currently have the generics version. I know we've been removing generics all over the place in Camel lately... I like it in this case though. +1 to your current code.  Claus  you've pretty much completed this task so I'm assigning it to you so you get the credit. +1. Jon  let's have joint credit  we are a team after all   I am wondering if we / I should dig deeper to do something with the MemoryIdempotentRepository as it states that you should be careful with the cache Map to avoid memory leeks.  I was wondering if we could get the Service interface with start/stop to eg. clear the cache on stop. But I guess the callback of Service is not invoked on the idempotent node. Well something to think about.  Any thoughts?. Maybe noop=true should also make idempotent=true. It makes sense not to process the same file over and over again.. D:\project\camel>svn commit --message "CAMEL-1099: Introduced IdempotentRepository in the spi package." Sending camel-core\src\main\java\org\apache\camel\component\file\FileComponent.java Sending camel-core\src\main\java\org\apache\camel\component\file\FileConsumer.java Sending camel-core\src\main\java\org\apache\camel\component\file\FileEndpoint.java Sending camel-core\src\main\java\org\apache\camel\model\IdempotentConsumerType.java Sending camel-core\src\main\java\org\apache\camel\model\ProcessorType.java Sending camel-core\src\main\java\org\apache\camel\processor\idempotent\IdempotentConsumer.java Adding camel-core\src\main\java\org\apache\camel\processor\idempotent\MemoryIdempotentRepository.java Deleting camel-core\src\main\java\org\apache\camel\processor\idempotent\MemoryMessageIdRepository.java Deleting camel-core\src\main\java\org\apache\camel\processor\idempotent\MessageIdRepository.java Adding camel-core\src\main\java\org\apache\camel\spi\IdempotentRepository.java Sending camel-core\src\test\java\org\apache\camel\builder\RouteBuilderTest.java Sending camel-core\src\test\java\org\apache\camel\component\file\FileConsumerIdempotentRefTest.java Sending camel-core\src\test\java\org\apache\camel\processor\IdempotentConsumerTest.java Sending components\camel-jpa\src\main\java\org\apache\camel\processor\idempotent\jpa\JpaMessageIdRepository.java Sending components\camel-spring\src\test\java\org\apache\camel\component\test\TestEndpointTest.java Sending components\camel-spring\src\test\resources\org\apache\camel\component\test\TestEndpointTest-context.xml Transmitting file data .............. Committed revision 722088.. Refactor idempotent interface to spi package DONE Wiki sample how to use the Jpa store provided by camel-jpa DONE Add a file based repository DONE Wiki sample how to use the File store DONE. Claus  I wouldn't spend too much time on the MemoryIdempotentRepository  I don't think many users would want to use this in a production scenario (the file and jpa options are much more attractive). The best we can do in this case is recommend the LRU cache option so the memory doesn't get too out of hand I guess.. Jon  others?  Any good ideas of the file based repository?  I am wondering if we should  have the LRUCache as a 1st level cache  and have write through to the file store when adding  using append load the filestore on startup configurable filename and folder use camel file component to read/write (configuration could then be a file endpoint = "file://data/idempotentrepository.txt?append=true&autoCreate=true"). So when there is a miss on the LRUCache  the file repository would be queried (and this is the only case that it would queried)? I'm just wondering what kind of format we want for this kinda file... having it appended to with every add seems to imply that it would be a big list that we'd have to scroll through (very slow). Maybe I'm missing an obvious solution  it is early here. Will think about this some more when I get into the office. I bet there are some very cool file based index things in KahaDB though http://svn.apache.org/repos/asf/activemq/trunk/kahadb/. Well the file list will be loaded at startup and then only used for write when there is a cache miss  so there would not be a performance hit at runtime.  I think it's overkill to use some kind of 3rd party lib  updated: a miss of course. Makes sense (now that I'm fully caffeinated  ). Closing 2.0m1 tickets. 
Bug,Willem Jiang,2008-11-19T09:34:23+0000,1227087263,if I use the following spring-xml  the exceptions from 'converter1' get swallowed  and nothing is logged. As soons as the multicast-tag is removed  the exception appears in the logfile. Using <multicast parallelProcessing=true> made no difference.  <route> 	<from ref="queueA" /> 	<bean ref="mapper" method="map" /> 	<multicast> 		<pipeline> 			<bean ref="converter1" method="convert" /> 			<to ref="TopicB" /> 		</pipeline> 		<pipeline> 			<bean ref="DBpersister" method="onMessage" /> 		</pipeline> 	</multicast> </route>,The issue is caused by current AggregationStrategy take the exchange's exception into consideration.  I just did some change in the UseLatestAggregationStrategy.java for CAMEL-159 to hold the latest exception in the exchange and added a unit test in SplitterTest to test for the propagating exceptions testing.. Closing 2.0m1 tickets. 
New Feature,Jonathan Anstey,2008-11-19T14:50:13+0000,1227106213,Rome is the most used RSS framework AFAIK... also it looks like Apache Abdera has RSS support now. Should investigate this.  https://rome.dev.java.net/ https://issues.apache.org/jira/browse/ABDERA-202,Looked into these frameworks a bit and I think rome is the answer. RSS support in Abdera isn't fully there yet and it is not available in any release.. Will be naming this camel-rss rather than camel-rome in case we change to some other rss lib in the future.. I've added RSS support in Camel to the same level as Atom support... thinking that maybe adding in some converters for the ROME Feed objects to XML might be nice. That way  folks could manipulate the exchange body coming from an RSS endpoint more naturally with XPath or something (and would NOT need to depend on ROME API methods).. TODO for Monday (see comment here http://www.nabble.com/Re%3A-svn-commit%3A-r723844---in--activemq-camel-trunk%3A-camel-core-src-main-java-org-apache-camel-component-mock--camel-core-src-main-java-org-apache-camel-model--camel-core-src-main-java-org-apache-camel-processor-aggregate--components-camel-atom-src-ma-td20868899s22882.html)  change the date comparator to use generics add sort ability to atom component. Calling this ticket complete. Will spin off related JIRAs as I think of them.. Closing 2.0m1 tickets. 
Task,Claus Ibsen,2008-11-19T15:06:15+0000,1227107175,As mentioned in  https://issues.apache.org/jira/browse/DIRSERVER-1279  The fix required for AIX has been merged so once ApacheDS gets released we should switch to this version. Currently we are using a patched version i put up on repo.fusesource.com/maven2,Jon  Apache DS 1.5.5 has been released. Can you look into this?. This new version depends on Mina 2.0.0-M6  which conflicts with the version that we are using. We should probably put this upgrade off until we upgrade Mina to 2.0 (whenever it is released)? Unless we want to upgrade to a milestone release of Mina.... Is Apache DS not only used for testing?  Or what has it to do with ldap?. Yeah btw those Mina guys gotta get a grip together and release mina 2.0. Has been working on that for more than 18 months and still no RC release yet.. I think it was the kerberos module (the one that I had to fix for AIX) that hauled in Mina as a runtime dependency.  Yeah 18 months is a long time! Even longer that Camel 2.0  Must be big changes from mina 1.x then.. Yeah lets wait until the Mina guys get 2.0 out of the door.. trunk: 1006307.  Upgraded to ApacheDS 1.5.7.. Closing all resolved tickets from 2010 or older. 
Bug,Jonathan Anstey,2008-11-19T16:13:45+0000,1227111225,The delayer expression is not evaluated in my route builder:  from(waitQueueName).delayer(header(HEADER_EXECUTION_TIME)).bean(routerBean).recipientList(header(HEADER_TARGET_ROUTE));  While the recipientList expression is working the header expression is always ignored. I stepped through the code and saw that in DelayerType.createAbsoluteTimeDelayExpression() "expr.getLanguage()" is always null:      private Expression createAbsoluteTimeDelayExpression(RouteContext routeContext) {         ExpressionType expr = getExpression();         if (expr != null) {             if (ObjectHelper.isNotNullAndNonEmpty(expr.getLanguage()))  {                 return expr.createExpression(routeContext);             }         }         return null;     }  I have seen that this was changed in 1.5.0 (http://issues.apache.org/activemq/browse/CAMEL-811).,A workaround is of course to use your own BEAN or processor to do the sleep yourself.  I am sure we will get this fixed in 1.5.1 and 2.0 in a short time. But I am a bit busy until the weekend.. I'll give it a quick look since I touched the delayer last. Fixed this in rev 719041 on trunk and will shortly merge it to the 1.5 fixes branch.. Closing 2.0m1 tickets. 
New Feature,Claus Ibsen,2008-11-19T18:17:04+0000,1227118624,Currently if you use etc  onException(MyException.class).to("bean:handleMyException");    Then this exception is always routed if a MyException is thrown. Some end users might need to add a predicate so they can add their custom code if the exception should be routed or not  Such as supporting setting a predicate with when:  onException(MyException.class).when().header("foo").isEqualTo("bar").to("bean:handleMyException");    See nabble: http://www.nabble.com/1.5-error-handling-Spring-config-buggy-not-complete--tt20562554s22882.html,You should also look into some of the issues the end-users reported . See the nabble link above.. Wiki needs to be updated. Wiki updated on exception clause  section: Using fine grained selection using onWhen. Merged to 1.5.1 in rev 719980. Closing 2.0m1 tickets. 
Improvement,Claus Ibsen,2008-11-20T07:22:31+0000,1227165751,I'd like to be able to create reusable RedeliveryPolicy's in Spring and refer to them in Camel's Spring DSL.  This is to achieve two goals:   	I can use the Spring PropertyPlaceholderConfigurer to enable us to tune timeouts and redelivery in production - we cannot do that with Camel's Spring DSL; 	I can have several routes sharing the same RedeliveryPolicy (but possibly with different exceptions).    There doesn't seem to be a way to share RedeliveyPolicy's between onException elements  meaning it needs to be duplicated (at least not that I could find in the docco)  For example  I'd like to do something like this:       <bean id="redeliveryPolicy" class="org.apache.camel.processor.RedeliveryPolicy">         <property name="..." value=${property.placeholder}/>     </bean>      <camelContext>         <route>             <from uri="somewhere"/>             <onException>                 <exception>ExceptionA</exception>                 <redeliveryPolicy ref="redeliveryPolicy"/>                 <to uri="deadLetter"/>             </onException>             <to uri="unreliableEndpoint"/>         </route>          <route>             <from uri="xyz"/>             <onException>                 <exception>ExceptionA</exception>                 <redeliveryPolicy ref="differentRedeliveryPolicy"/>                 <to uri="differentDeadLetter"/>             </onException>             <to uri="unreliableEndpoint"/>         </route>          <route>             <from uri="somewhereElse"/>             <onException>                 <exception>ExceptionB</exception>                 <redeliveryPolicy ref="redeliveryPolicy"/>                 <to uri="deadLetter"/>             </onException>             <to uri="anotherUnreliableEndpoint"/>         </route>     </camelContext>    Thanks!,Good idea we should generally have more ref's in the spring DSL. D:\project\camel\camel-core\src\test\java\org\apache\camel\processor\ThroughPutLoggerTest.java D:\project\camel\camel-core\src\main\java\org\apache\camel\processor\DeadLetterChannel.java D:\project\camel\camel-core\src\main\java\org\apache\camel\model\RedeliveryPolicyType.java D:\project\camel\camel-core\src\main\java\org\apache\camel\model\ExceptionType.java At revision: 719334. Closing 2.0m1 tickets. 
New Feature,Jonathan Anstey,2008-11-20T11:27:12+0000,1227180432,Add an enrich() processor with the following overloaded variants:  	from(<SourceURI>).enrich(<EnricherURI>)... 	from(<SourceURI>).enrich(<EnricherURI>  <Aggregator>)... 	from(<SourceURI>).enrich(<EnricherURI>  <Aggregator>  <CachingFlag>)...   Motivation: ----------- The motivation for this feature comes from a problem that Mark Fynes encountered while trying to integrate an Artix Data Services example with Camel. The Artix DS example had multiple inputs  but it turns out that it is difficult to represent an Artix DS transform with multiple inputs in Camel.  After thinking about it for a bit  I realized that the problem can be solved using the Content Enricher EIP pattern. Currently  however  writing a Camel content enricher mostly involves rolling your own code. The aim of the 'Content Enricher Pattern' is to generalize the solution of Mark's problem so that you can create a content enricher quickly and easily in the future.   Use Case 1 - Enriching from a flat file: ---------------------------------------- In the original example that Mark worked on  there were two sources of input:  1. A stream of credit card transactions (e.g. containing a Name  Credit Card Number  TransactionAmount  and so on). This input can be represented by the start of a Camel route  e.g. from(<SourceURI>).  2. An XML file containing credit ratings for different customers (e.g. a list of associations between Names and credit ratings). This input represents the data that will be fed in through the content enricher processor.  The two sources of input could be handled by a new 'enrich()' processor  which is specified as follows:  	from(<SourceURI>).enrich(<EnricherURI>  <Aggregator>  <CachingFlag>)...  Where the <SourceURI> specifies the source of incoming credit card transactions (e.g. from a message queue)  <EnricherURI> specifies the flat file containing the credit ratings  <Aggregator> is a Camel aggregator  and <CachingFlag> indicates whether the flat file (from <EnricherURI>) should be read only once (true) or every time a transaction comes in (false).  For the <Aggregator>  probably the most generally useful implementation would be a ListAggregator that combines the incoming exchange and the enricher exchange into a java.util.List instance. The value list.get(0) would return the exchange from <SourceURI> and list.get(1) would return the exchange from the <EnricherURI>.  If you chain enrichers as follows:  	from(<SourceURI>) 		.enrich(<EnricherURI01>  listAggregator) 		.enrich(<EnricherURI02>  listAggregator) 		...  You would obtain a list with list.get(0) from <SourceURI>  list.get(1) from <EnricherURI01>  and list.get(2) from <EnricherURI02>.  If you consider ListAggregator to be a good default  you could define the following overloaded variants of enrich:  	enrich(<EnricherURI>) 	enrich(<EnricherURI>  <Aggregator>) 	enrich(<EnricherURI>  <Aggregator>  <CachingFlag>)  Where the default value of <CachingFlag> probably ought to be true.  Demo ------- The attached ZIP file contains a partial demo of this functionality. To run the demo  unzip the archive and run the command  'mvn test'.,Neat demo Fintan!  I can take a look at adding this for you. May not be till next week though. Just noticed that you've attached the demo without granting an ASF license. Would you mind re-attaching it with the license?. Fintan   Instead of adding the CachingFlag specifically for the content-enricher  wouldn't it be better to make this into a generic service that can be plugged into any route? It can be useful to have support for caching webservice requests etc. as well.  Something like...  from(<SourceURI>).enrich("direct:enricher"  <Aggregator>); from("direct:enricher").cache(<CacheOptions>).to(<EnricherURI>);   Gert. I should probably also say if any other camel devs want to take a crack at this before I do  you are welcome. I don't mean to be a JIRA hog. Updated the demo to include the Apache license in all the source code files.. Thanks Fintan.. Gert   We are probably talking at cross-purposes here. The first argument of enrich() is intended to be a consumer endpoint. So  the example route you gave does not seem to be consistent with that assumption.  But I would be grateful  if you have any ideas on how to improve the caching. The caching in the current demo is fairly simplistic.  Cheers  Fintan. This feature has been added in CAMEL-209 so I'm closing this one.. 
Bug,Claus Ibsen,2008-11-21T10:23:50+0000,1227263030,When using the options to configure httpClient using URI option  they should be removed from the uri that is left over to the HTTPProducer.   http://someserver?httpClient.soTimeOut=5000    should remove the httpClient.xxx so it's  http://someserver,Will be fixed in a patch for other issues. I have also added httpClient.XXX options configuration of camel-jetty as well. Closing 2.0m1 tickets. 
Bug,Willem Jiang,2008-11-21T20:33:13+0000,1227299593,The parallelProcessing and executor arguments are ignored in the constructor of MulticastProcessor.  Here is a call that MulticastType makes org.apache.camel.model.MulticastType.java     return new MulticastProcessor(list  aggregationStrategy  isParallelProcessing()  threadPoolExecutor);   MulticastProcessor ignores parallelProcessing and executor arguments and invokes a chain constructor with ".. false  null .." org.apache.camel.processor.MulticastProcessor.java     public MulticastProcessor(Collection<Processor> processors  AggregationStrategy aggregationStrategy  boolean parallelProcessing  ThreadPoolExecutor executor) {         this(processors  aggregationStrategy  false  null  false);     }      public MulticastProcessor(Collection<Processor> processors  AggregationStrategy aggregationStrategy  boolean parallelProcessing  ThreadPoolExecutor executor  boolean streaming) {         notNull(processors  "processors");         this.processors = processors;         this.aggregationStrategy = aggregationStrategy;         this.isParallelProcessing = parallelProcessing;         if (isParallelProcessing) {             if (executor != null) {                 this.executor = executor;             } else {                  // setup default Executor                 this.executor = new ThreadPoolExecutor(processors.size()  processors.size()  0  TimeUnit.MILLISECONDS  new ArrayBlockingQueue<Runnable>(processors.size()));             }         }         this.streaming = streaming;     }    Attached a patch but have not tested it. Also need a unit test for this.,Hi Vadim   Thanks for patching this. Can you use svn diff to create the patch and grand it with ASF license ? Also the Unit test should help us to review your patch more quickly .  Willem. Vadim any update on this one? As Willem writes please resubmit the patch with the ASF license granted.. I did some code polishing and found the issue myself.  I have fixed it in 2.0 and 1.x. Sorry  I could not get to it. Thanks for fixing the issue.  vadim. Closing 2.0m1 tickets. 
Task,Claus Ibsen,2008-11-22T09:55:32+0000,1227347732,,D:\project\camel\tests\camel-itest-spring-2.0\pom.xml D:\project\camel\tests\camel-itest-spring-2.0\src\test\resources\log4j.properties D:\project\camel\components\camel-jms\src\test\java\org\apache\camel\component\jms\tx\NonTransactedInOutForJmsWithTxnMgrTest.java D:\project\camel\tests\camel-itest\pom.xml D:\project\camel\tests\camel-itest\src\test\resources\log4j.properties D:\project\camel\components\camel-jms\src\test\resources\org\apache\camel\component\jms\tx\activemq.xml D:\project\camel\components\camel-jms\pom.xml D:\project\camel\components\camel-jms\src\test\resources\org\apache\camel\component\jms\tx\nonTxInOutJmsTest.xml D:\project\camel\pom.xml D:\project\camel\components\camel-jms\src\main\java\org\apache\camel\component\jms\JmsConfiguration.java At revision: 719851. Sorry ActiveMQ is not upgraded to 5.2 on 1.x branch. The upgrade patch has been merged in the camel-1.x branch.. Closing 2.0m1 tickets. 
Sub-task,Claus Ibsen,2008-11-22T11:36:22+0000,1227353782,After debugging for a little while I think the createInOutTemplate in JMSConfiguration needs to cater for acknowledge mode if non transacted    org.apache.camel.RuntimeCamelException: org.springframework.jms.UncategorizedJmsException: Uncategorized exception occured during JMS processing; nested exception is javax.jms.JMSException: acknowledgeMode SESSION_TRANSACTED cannot be used for an non-transacted Session 	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:719) 	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:138) 	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:100) 	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:104) 	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:120) 	at org.apache.camel.impl.DefaultProducerTemplate.requestBody(DefaultProducerTemplate.java:200) 	at org.apache.camel.component.jms.tx.NonTransactedInOutForJmsWithTxnMgrTest.testJmsNonTransactedInOutWithTxnMgr(NonTransactedInOutForJmsWithTxnMgrTest.java:35) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) 	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:40) Caused by: org.springframework.jms.UncategorizedJmsException: Uncategorized exception occured during JMS processing; nested exception is javax.jms.JMSException: acknowledgeMode SESSION_TRANSACTED cannot be used for an non-transacted Session 	at org.springframework.jms.support.JmsUtils.convertJmsAccessException(JmsUtils.java:308) 	at org.springframework.jms.support.JmsAccessor.convertJmsAccessException(JmsAccessor.java:168) 	at org.springframework.jms.core.JmsTemplate.execute(JmsTemplate.java:474) 	at org.apache.camel.component.jms.JmsConfiguration$CamelJmsTemplate.send(JmsConfiguration.java:169) 	at org.apache.camel.component.jms.JmsProducer.process(JmsProducer.java:172) 	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:151) 	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:136) 	... 23 more Caused by: javax.jms.JMSException: acknowledgeMode SESSION_TRANSACTED cannot be used for an non-transacted Session 	at org.apache.activemq.ActiveMQConnection.createSession(ActiveMQConnection.java:300) 	at org.springframework.jms.support.JmsAccessor.createSession(JmsAccessor.java:196) 	at org.springframework.jms.core.JmsTemplate.execute(JmsTemplate.java:462) 	... 27 more,Also merged this patch into the Camel-1.x branch.. Closing 2.0m1 tickets. 
Bug,Claus Ibsen,2008-11-24T02:35:05+0000,1227494105,Hello all   I'm using Camel HTTP component to send data across to HTTP web services.  Of course we need to POST this data over  and it's all been peachy until I started on a storycard to implement error handling and retry on timeouts.  Following the docco here (http://activemq.apache.org/camel/http.html)  I made the same change to my endpoint to include ?httpClient.SoTimeout=5000  and that's when the problems started.  After stepping through the code  I have now found that Camel thinks "httpClient.soTimeout" is actually a query string parameter that I want to pass across to the remote service  when it is not - it's just a configuration option for the HTTPClient.  Perhaps Camel needs a QueryStringFilter (or something like it) so that it can distinguish configuration options as opposed to real GET method parameters  or maybe for now ignore any parameters beginning with httpClient.  Filing as a bug for now because at the very least  the documentation should be updated to highlight the limitation of only allowing GET methods when URI-based configuration is employed.  I haven't identified a workaround yet (using Spring DSL) but I'm sure it won't be too difficult.  Thanks! Jason,I think this is fixed in 1.5.1 where I recently fixed some related issues.  Basically it should remove the httpClient.XXX options from the URI so it will revert to POST.  However you can force it to use POST see the wiki. Fixed by CAMEL-1107. Closing 2.0m1 tickets. 
Improvement,Claus Ibsen,2008-11-24T15:48:05+0000,1227541685,when reading files from file ftp/sftp component  it is often neccesarry to get the files in a predifined order (e.g. created date or filename). to solve this  an extra uri parameter could be used  to set the order of files beeing processed. ordering can be done after reading the file-list.  i know this can also be solved by applying a resequencer pattern in the route  but i think for large files it would be hard to apply this. also a processing in an created date order would be more natural.,I had sort of planned to do some refactorings of the file consumer in 2.0 so it would gather the list of files to consume before consuming. This would allow to resort the list based on certain out-of-the-box settings and of course also allow end users to provide their own sorting implementation. And also filter and finnaly to have a headers with total number of files and the current file number.  In summary:  sorting filtering headers with index and total number of files. Wiki documentation needed for file component:  idempotent options DONE headers with current index and total DONE important camel 2.0 changes DONE file filter options DONE file sorter options DONE out of box file sorters for: by name  by timestamp  etc. DONE idempotent sample DONE file filter sample DONE file sorter sample DONE file sortBy sample DONE sort by: ignore case option DONE. The new idempotent options is CAMEL-1099. D:\project\camel\camel-core>svn commit --message "CAMEL-1112: Refactored file consumer. Removed @deprected. Added idempotent option. Work in progress as sorting and filtering is needed." Sending camel-core\src\main\java\org\apache\camel\component\file\FileComponent.java Sending camel-core\src\main\java\org\apache\camel\component\file\FileConsumer.java Sending camel-core\src\main\java\org\apache\camel\component\file\FileEndpoint.java Deleting camel-core\src\test\java\org\apache\camel\component\file\FileAlwaysConsumeFalseTest.java Deleting camel-core\src\test\java\org\apache\camel\component\file\FileAlwaysConsumeTest.java Adding camel-core\src\test\java\org\apache\camel\component\file\FileConsumerBatchTest.java Adding camel-core\src\test\java\org\apache\camel\component\file\FileConsumerIdempotentRefTest.java Adding camel-core\src\test\java\org\apache\camel\component\file\FileConsumerIdempotentTest.java Sending camel-core\src\test\java\org\apache\camel\component\file\FileDeleteRouteTest.java Deleting camel-core\src\test\java\org\apache\camel\component\file\FileRouteGenerateEmptyExchangeWhenIdleTest.java Sending camel-core\src\test\java\org\apache\camel\component\file\MoveFilesToDirectoryTest.java Sending camel-core\src\test\java\org\apache\camel\component\file\MoveFilesToDirectoryWithNoopTest.java Transmitting file data ......... Committed revision 721695.. Revision #721798 Committed by davsclaus at 30-11-08 12:36:04 CAMEL-1112: Added file language expression based sorting incl. grouping (quite fancy). Revision #721801 Committed by davsclaus at 30-11-08 12:53:27 CAMEL-1112: Added file language expression based sorting incl. grouping (quite fancy). Closing 2.0m1 tickets. 
Task,Jonathan Anstey,2008-11-24T18:11:09+0000,1227550269,I've already done this but am creating a ticket just for tracking purposes.   Commits: http://svn.apache.org/viewvc?rev=720230&view=rev http://svn.apache.org/viewvc?rev=720242&view=rev  Related ticket: https://issues.apache.org/activemq/browse/AMQ-2013,Closing 2.0m1 tickets. 
Task,Jonathan Anstey,2008-11-24T19:49:07+0000,1227556147,We've been changing around the DSL a bit in 2.0 so the templates need updating before we release.,Is there a deadline for this one. Something that has to be done eg X weeks before a 2.0 release? Or how does it work. I was waiting till a bit closer to the 2.0 release so I won't have to do this twice. Its basically just updating all the DSL syntax changes from Camel 1.x to Camel 2.0.  I guess I could do it earlier though if we think Camel 2.0 is coming really soon.. Jon  I think it's time to get started on this.. Updated in http://svn.apache.org/viewvc?rev=800448&view=rev and http://svn.apache.org/viewvc?rev=800459&view=rev. 
Sub-task,Claus Ibsen,2008-11-24T19:55:14+0000,1227556514,Wiki documentation for parent ticket should be added to wiki: http://activemq.apache.org/camel/ibatis.html,Closing 2.0m1 tickets. 
Sub-task,Claus Ibsen,2008-11-25T07:28:02+0000,1227598082,So when end users is using the java DSL and from an IDE editor sees the javadoc in the popup there is a direct link to the wiki where they can read about this node.  For instance the aggregator can be quite overwhelming to use if you cant find the wiki page.,Damm Claus there are many methods to add some links to wiki documentation. The RouteBuilder has fluent builders as well  but hey its nice to press ctrl + q and have javadoc with links to wiki docs that end user might not find so easily.. Okay all fluent builders in the model package have javadoc and links to relevant wiki docu. Closing 2.0m1 tickets. 
Improvement,Willem Jiang,2008-11-25T12:51:30+0000,1227617490,Hi  Most of the Java DSL is defined in org.apache.camel.model.ProcessorType so when you hit ctrl+space when creating routes in Java DSL you get a list of 159 methods.  I have noticed during improving the javadoc that we overload the methods to often  instead of having a few sensible defaults that tailing 95% useage and then delegate the special customization to it's own type where the fluent builder can offer the special methods.  For instance the splitter EIP has 12 methods to offer all kind of combination of parameters. I think we should refactor this to allow 1-3 methods that should cater most usage and then add fluent builder methods on the SplitterType so end user can do the special customization there  where we can use good fluent builder methods names (eg to enable something instead of true  it's parallel() then it's much more readable  Before:  from("xxx").splitter(body().tokenize(" ")  true  myPool).to("yyy");    After:  from("xxx").splitter(body().tokenize(" ")).parrallel().threadPool(myPool).to("yyy");    See nabble: http://www.nabble.com/-PROPOSAL----Camel-2.0---improve-Java-DSL-to-reduce-methods-in-ProcessorType-tt20676775s22882.html,The types (SplitterType etc.) must extend ProcessorType to allow end user to continue the routing using fluent builders. Otherwise he might not be able to use .to("yyy"). bean(String beanRef) bean(String beanRef  String method)   is needed on BuilderSupport to allow end users to use bean expressions in Java DSL without needed to import static or other stuff  it should be easy to use.  Maybe bean(Class bean) is needed as well as it's kind nice for quick prototyping. We have a MethodCallExpression that we should consider renaming to BeanExpression. We mostly have bean() in the DSL but then we have this one that uses method / methodCall. I think we should consider aligning this so it's plain bean everywhere.. I have my hands full with the refactor of the ftp component.  So if anyone has the time and energy to do this one it would be great. Basically reduce the fluent builders we have overloaded in the ProcessType and move/add new fluent builders on the concrete xxxType instead  For instance the aggregator has 12 methods I think.. Willem do you mind take a look at this? You have done some of the work already today?  Basically reduce overloaded methods on ProcessorType and move options to the xxxType as fluent builders. Keep on the most common methods in ProcessorType and leave the advanced options as fluent builders on the xxxType.  We gotta get the 120-150 methods listed in the code completion list from the java editor when end users use the Java DSL. It's to overwhelming with all these methods.. Yes  we could reduce the Splitter and Aggregator relates DSL in ProcessorType  by add the detail optional DSL in the sub type class of PorcessorType. It may take a while to finish this task  lots for method need to be went through. 1) Added some fluent API in the sub classes of ProcessorType for setting the options. 2) Added an expression() method to set the ExpressionClause on the sub class of ExpressionNode. 3) deprecated lots of split() methods in the ProcessorType.  Clause please review the changes  and feel free to add what I am missing.. @Willem  I have committed a little fix for parallel() not using true And polished the javadoc a bit  and the splitter unit test  Great work  I am still wondering if we could reduce the ProcessorType to contain the 80-95% used methods and force end users to configure the rest using the special types. But it's much better now.. @Claus Thanks for polishing the codes.  I think we can close it now. If we want to keep on cleaning the ProcessorType DSL methods   we could fill a new JIRA for it.. Closing 2.0m1 tickets. 
Bug,Jonathan Anstey,2008-11-25T17:35:32+0000,1227634532,Camel does allow users to configure JSch with a known_hosts file. This makes the users vulnerable to man in the middle type attacks.,Sending camel-ftp/src/main/java/org/apache/camel/component/file/remote/RemoteFileConfiguration.java Sending camel-ftp/src/main/java/org/apache/camel/component/file/remote/SftpEndpoint.java Sending camel-ftp/src/test/java/org/apache/camel/component/file/remote/UriConfigurationTest.java Transmitting file data ... Committed revision 720547.  Also should mention that Dave Stanley came up with the fix for this. Many thanks Dave!. This is the Wiki police - not so fast young boy  you must add the new option to the FTP wiki page http://activemq.apache.org/camel/ftp.html. Hahahahaha  Busted!  Will update it now. Closing 2.0m1 tickets. 
Bug,Claus Ibsen,2008-11-26T10:19:49+0000,1227694789,In Camel 1.4.0  when a Web server sends an error page to HttpProducer  the Camel route can access the response headers that were sent by the server.  In Camel 1.5.0  these headers are discarded by HttpProducer  so the Camel route cannot access them.  Camel 1.5.0 also discards the content of the error page  but that was fixed in CAMEL-1083.  See discussion: HttpProducer: how to access the body of an error page?,Applied patch with thanks to Trev. This will be more self-explanatory if the field name is responseHeaders instead of just headers. It will be obvious that responseHeaders is closely associated with responseBody  and it will help distinguish these headers from the several other kinds of headers that are found in Camel.  I don't know why I didn't name it this way in the first place. Must have been operating with insufficient caffeine  I suppose.  Attached: camel_1119_b.patch. Hi Trev  Thanks for the b patch. I have commited it to 2.0 and 1.5.1. Claus   Was it commited to 1.5.1.0?  B.R.. Anderson   This fix made it into the 1.5.2.0 version of Camel from FUSE. See release notes here http://fusesource.com/wiki/display/ProdInfo/FUSE+Mediation+Router+v1.5+Release+Notes  Cheers  Jon. Closing 2.0m1 tickets. 
New Feature,Claus Ibsen,2008-11-26T10:31:48+0000,1227695508,The exception clause below                  onException(MyFunctionalException.class)                         .handled(true)                         .transform(constant("Sorry"));    Instead of returning the constant Sorry we want to return the exception message  instead of using a processor  bean etc. we want some value builder in BuilderSupport so you can do it as:                  onException(MyFunctionalException.class)                         .handled(true)                         .transform(exceptionMessage());    And also add variables to the exception message in the simple language so you can do something like this:                  onException(MyFunctionalException.class)                         .handled(true)                         .transform().simple("Error reported ${exception.message} - can not process this message.");    Then the caller will receive the response we have created there instead of the MyFunctionalException,Fixed in 2.0 and updated wiki at exception clause and simple language.. Closing 2.0m1 tickets. 
Improvement,Claus Ibsen,2008-11-26T10:41:19+0000,1227696079,When using the bean integration  http://activemq.apache.org/camel/bean-integration.html  it'd be great if we could use a single endpoint by reference or by URI; which results in messages being consumed from or sent to multiple endpoints.  So folks could create a composite endpoint something like this...   CompositeEndpoint myComposite = CompositeEndpoint.newInstance(endpoint1  endpoint2  endpoint3  ...); CompositeEndpoint myComposite = CompositeEndpoint.newInstance(uri1  uri2  uri3  ...);    Or in XML   <compositeEndpoint id="myComposite">   <endpoint uri="foo"/>   <endpoint uri="bar"/>    ...    Then referring to one endpoint would allow multiplexing over multiple endpoints   e.g. we could do things like   class Cheese {   @Consumer(ref='myComposite")   public void onSomething(String cheese) {...} },Lets close old ticket that are not in demand.. 
Bug,Jonathan Anstey,2008-11-26T11:21:44+0000,1227698504,In the case an exception is handled by the DeadLetterChannel  Camel will currently set the exception to null and add an exchange property containing the exception. We should also add this as a message header so that it will be propagated to external services  like a JBI service.,Fixed on trunk and 1.x. Closing 2.0m1 tickets. 
Bug,Jonathan Anstey,2008-11-27T13:30:10+0000,1227792610,This could be bad if commons-sandbox-parent 3-SNAPSHOT ever gets removed (the build will break). ServiceMix has a version of commons-csv without this SNAPSHOT dependency. I'm going to try switching to that one.,Closing 2.0m1 tickets. 
Improvement,Willem Jiang,2008-11-28T03:41:37+0000,1227843697,http://www.nabble.com/How-to-raise-SOAP-faults--td20727483s22882.html,Applied the patch into trunk and camel-1.x branch.. Closing 2.0m1 tickets. 
Bug,Willem Jiang,2008-11-28T07:14:09+0000,1227856449,In MockEndpoint.assertIsSatisfied()  don't use the right counter for assertion.                if (expectedMinimumCount >= 0) {             int receivedCounter = getReceivedCounter();             assertTrue("Received message count " + receivedCounter + "  expected at least " + expectedCount  expectedCount <= receivedCounter);         }    it should be change to                if (expectedMinimumCount >= 0) {             int receivedCounter = getReceivedCounter();             assertTrue("Received message count " + receivedCounter + "  expected at least " + expectedMinimumCount  expectedMinimumCount <= receivedCounter);         },Applied this patch into trunk and camel-1.x branch.. Closing 2.0m1 tickets. 
Improvement,Willem Jiang,2008-11-28T12:29:32+0000,1227875372,,Added the example document into the wiki. http://cwiki.apache.org/confluence/display/CAMEL/Spring+Java+Config+Example. Closing all 2.0M2 tickets. 
Improvement,Claus Ibsen,2008-11-28T13:13:34+0000,1227878014,I wonder if some of them need deprecating or renaming to avoid confusion. There are various methods on CamelContext / SpringCamelContext with the names [set|add]Route[s] which are a bit confusing/messy.  We should review all the methods and come up with a simpler solution,Using the interface CamelContext there are these methods related to routes:  addRouteDefinitions addRoutes getRouteDefinitions getRoutes getRouteStatus removeRouteDefinitions startRoute stopRoute  Not to bad  where you will use the add methods to add more routes to this camel context.. SpringCamelContext have no additional route related methods.. I think James have improved this already when he introduced the RouteService related to the camel-web project.. org.apache.camel.Routes is a bad name. We gotta do a rename or remove as its basically a RouteBuilder when used in Camel.. trunk: 788067.  The org.apache.camel.Routes interface have been renamed to org.apache.camel.RoutesBuilder and having a more precise and simpler interface.. Closing all 2.0M3 tickets. 
Improvement,James Strachan,2008-11-28T15:37:48+0000,1227886668,,I've hacked up an example test case using Spring Test along with Spring Java Config here https://svn.apache.org/repos/asf/activemq/camel/trunk/components/camel-spring-javaconfig/  e.g. https://svn.apache.org/repos/asf/activemq/camel/trunk/components/camel-spring-javaconfig/src/test/java/org/apache/camel/spring/javaconfig/examples/  here's the test case https://svn.apache.org/repos/asf/activemq/camel/trunk/components/camel-spring-javaconfig/src/test/java/org/apache/camel/spring/javaconfig/examples/FilterTest.java  the configuration is here https://svn.apache.org/repos/asf/activemq/camel/trunk/components/camel-spring-javaconfig/src/test/java/org/apache/camel/spring/javaconfig/examples/FilterConfig.java  Unfortunately it doesn't currently work  due to a bug where BeanPostProcessors don't seem to be invoked on test classes http://jira.springframework.org/browse/SJC-248  once this is fixed then hopefully we can enable this component and document it on the wiki. for background and documentation see http://activemq.apache.org/camel/testing.html. Closing 2.0m1 tickets. 
Improvement,Willem Jiang,2008-11-29T08:00:46+0000,1227945646,The ErrorHandler RedeliveryPolicy appears to lock threads while sleeping until the next redelivery. With lots of concurrent requests requiring increasing redelivery times  this can be a scalability problem.  The RedeliveryPolicy should support the use of a timer thread that would be responsible for managing the "timeouts" and firing the redelivery.,DeadLetterChannel need to process the sync processor and the async processor. Since we can't make the sync processor give up it's calling thread for the exchange message processing  my patch just put the async processor's redelivery call into a timer thread.  Here is the async processor's example code      protected RouteBuilder createRouteBuilder() {         final Processor processor = new AsyncProcessor() {             public void process(Exchange exchange) {                 Integer counter = exchange.getIn().getHeader(DeadLetterChannel.REDELIVERY_COUNTER                                                               Integer.class);                 int attempt = (counter == null) ? 1 : counter + 1;                 if (attempt < failUntilAttempt) {                     throw new RuntimeException("Failed to process due to attempt: " + attempt                                                + " being less than: " + failUntilAttempt);                 }             }             // START SNIPPET: AsyncProcessor             public boolean process(Exchange exchange  AsyncCallback callback) {                                 Integer counter = exchange.getIn().getHeader(DeadLetterChannel.REDELIVERY_COUNTER                                                               Integer.class);                 int attempt = (counter == null) ? 1 : counter + 1;                 if (attempt > 1) {                     assertEquals("Now we should use TimerThread to call the process"  Thread.currentThread().getName()  "Timer-0");                 }                                  if (attempt < failUntilAttempt) {                     // we can't throw the exception here   or the callback will not be invoked.                     exchange.setException(new RuntimeException("Failed to process due to attempt: " + attempt                                                + " being less than: " + failUntilAttempt));                 }                 callback.done(false);                 return false;             }             // END SNIPPET: AsyncProcessor         };          return new RouteBuilder() {             public void configure() {                 from("direct:start").errorHandler(                     deadLetterChannel("mock:failed").maximumRedeliveries(2)                         .delay(1000)                         .loggingLevel(LoggingLevel.DEBUG)                  ).process(processor).to("mock:success");             }         };     }. Applied the patch into trunk and camel-1.x branch.. Willem and we are sure this only applies for async behavior?  What if end-user or 3rd part framework adds stuff to ThreadLocal and thus if we use a different thread for redelivery then that stuff is gone. Or am I not thinking clear? I just got into the office and on the first cup of coffee. @Claus  That's because if we call the sync processor  the caller will block and wait for processor finish it's work then handle the exchange. If we put the redelivery work into the timer and return from the processor  the exchange will not handle rightly.  Current Camel AsyncProcessor API can't handle the ThreadLocal stuff  in that case   I think we need switch to use sync processor API.. Closing 2.0m1 tickets. 
New Feature,Claus Ibsen,2008-11-29T10:53:46+0000,1227956026,See nabble: http://www.nabble.com/SFTP-Component-private-key---passphrase-for-connection-tt20711040s22882.html  I will try to add the patch suggested by Yogesh,Fixed in both 1.5.1 and 2.0  The options is named: privateKeyFile and privateKeyFilePassphrase. Closing 2.0m1 tickets. 
Bug,Unassigned,2008-11-29T12:56:04+0000,1227963364,parallelProcessing and executor being overridden in constructor.  MulticastProcessor.java     public MulticastProcessor(Collection<Processor> processors  AggregationStrategy aggregationStrategy  boolean parallelProcessing  ThreadPoolExecutor executor) {         this(processors  aggregationStrategy  false  null  false);     },Thanks for reporting. It is a duplicate of CAMEL-1108 and has been fixed in 1.5.1 and 2.0. do not see the fix in either 1.5.1 or 2.0.0. Sorry about that  I did not update this morning.  It should be noted that there appears to be no test for this. I was going to create one using SplitterWithCustomThreadPoolExecutorTest as a reference  but noticed that this test was using the executor from the SplitterType to validate and not the SplitterProcessor. It was not obvious how to get at the MulticastProcessor from the camel context. Feel free to submit a unit test for the multicast based on the splitter. We would love that.  Yeah maybe we should add some methods on CamelCountext that will look for a given *Type  either returning the first found  or a list of *Type intances so end users easily can get it instead of all the cumbersome recursive code.  Any thoughts on this? As it will add more methods on the public interface. It would be trivial to create a multicast test similar to the custom splitter. The problem is  this test would not expose the multicast constructor bug as the validation is done against the type and not the processor (where the problem lies). These tests need to cover both cases - the problem I ran into  is that there was no obvious way to get at the executor from the multicast processor.. I have exposes the executor using a getter. Could you try update the trunk code and see if that helps?. We need to be able to get at the underlying processor from the context  then the getter can be used. How do you get access to the MulticastProcessor that MulticastType has created?. 
Sub-task,Claus Ibsen,2008-11-30T11:50:05+0000,1228045805,The new options:  	sorter 	sorterRef 	sortBy    should also be possible on the FTP component.   Also consider a filter as well  however we can not use java.io.FilenameFilter so we must use our own interface etc.,I will also remove the timestamp stuff that is marked as @deprecated. Closing 2.0m1 tickets. 
New Feature,Willem Jiang,2008-12-01T00:11:35+0000,1228090295,At the moment there is no ability to compress and uncompress messages in a Message Exchange as they are sent/received  on a Camel route.  The benefits of having this feature are the following:      a> ability to reduce the size of messages are they are sent in a flow to different remote destinations       b> ability to decompress messages just prior to being consumed at the endpoint.  The way it would work is as follows:       Message Deflater:  (example below)       --------------------------------------------------             context.addRoutes(new RouteBuilder() {             public void configure()  {                 from("direct:start").marshal().zip(Deflater.BEST_COMPRESSION).process(new ZippedMessageProcessor());             }         });      Message Inflater: (example below)    ------------------------------------------------        context.addRoutes(new RouteBuilder() {             public void configure()  {                 from("direct:start").marshal().zip().unmarshal().zip().process(new UnZippedMessageProcessor());             }         });,Hi   I have implemented this feature and attached a patch of the affected files above. I have also attached a zip file containing the affected files for the commiters to check-in.  I have added 4 unit test cases as well and verified that the functionality works. Can someone please review this feature and commit accordingly.  Thanks and Regards   Ashwin.... This new capablity to compress/uncompress messages in a Message exchange on the fly using a new dataformat called zip is now implemented and ready for review.. It looks like the patch may add an dependency of the org.apache.camel.impl package (org.apache.camel.impl.ZipDataFormat) in the org.apache.camel.model package (org.apache.camel.model.dataformat.ZipDataFormatType. Perhaps  we should clean it up first?. Nevermind. I think such dependency exists already.. You can use set the the charset name with the key "Exchange.CHARSET_NAME" in the Exchange properties  The converter will take care of the byte -> String encoding stuff.. Would you like to me to change the code in some way... Please clarify.  Ashwin.... Hi Ashwin   Don't worry  I am working on it. Applied patch with thanks to Ashwin.  NOTE * I removed the UnZippedMessageProcessor to use the MockEndpoint for result verification  and added the jaxb.index for schema generation.. Applied the patch into trunk and camel-1.x branch. Closing 2.0m1 tickets. 
New Feature,Willem Jiang,2008-12-01T08:37:37+0000,1228120657,CAMEL-1133's ZipDataFormat Patch does't use stream API to do the marshal and unmarshal work. It need to be refactored  to be stream friendly.,Willem   Will this not mean a change in the MarshalProcessor and UnMarshalProcessor ? Can you please clarify so that I can make the right fix.  Cheers   Ashwin.... Hi Ashwin   You don't need to change any code in the MashalProcessor and UnMarshalProcessor. If you take a look at the JAXBDataFormat  or some other Dataformat  you will find they are using the stream API to consume or produce the message.  Since there are some useful converting methods in the IOConvertor  ZipDataFormat can deal with lots of types message  and it will not need to create a big byte array to hold the compress or unconpress data any more.  Cheers   Willem. Applied the patch into trunk and camel-1.x branch.. Closing 2.0m1 tickets. 
Bug,Claus Ibsen,2008-12-01T14:36:58+0000,1228142218,Here are the stack trace of the TestEndpointTest.testMocksAreValid on different machines  org.apache.camel.component.test.TestEndpointTest.testMocksAreValid ================= java.lang.AssertionError: test:file://src/test/data?noop=true&consumer.recursive=true&consumer.delay=2000 Received message count. Expected: <567> but was: <78> 	at org.apache.camel.component.mock.MockEndpoint.fail(MockEndpoint.java:712) 	at org.apache.camel.component.mock.MockEndpoint.assertEquals(MockEndpoint.java:694) 	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:238) 	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:214) 	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:141) 	at org.apache.camel.component.test.TestEndpointTest.testMocksAreValid(TestEndpointTest.java:49)  org.apache.camel.component.test.TestEndpointTest.testMocksAreValid ================= java.lang.AssertionError: test:file://src/test/data?noop=true&consumer.recursive=true&consumer.delay=2000 Received message count. Expected: <219> but was: <78> 	at org.apache.camel.component.mock.MockEndpoint.fail(MockEndpoint.java:712) 	at org.apache.camel.component.mock.MockEndpoint.assertEquals(MockEndpoint.java:694) 	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:238) 	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:214) 	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:141) 	at org.apache.camel.component.test.TestEndpointTest.testMocksAreValid(TestEndpointTest.java:49)  I don't know why the test endpoint could get so many received message.,It's my bad. I will fix it soon. Running full unit test now  so 10 min.  It's in camel-spring that I dont test as often as camel-core. Closing 2.0m1 tickets. 
Improvement,Unassigned,2008-12-01T16:43:26+0000,1228149806,,here's an example test case...  http://svn.apache.org/viewvc/activemq/camel/trunk/components/camel-test/src/test/java/org/apache/camel/test/patterns/FilterTest.java?view=markup  it supports Camel annotations and acts as a simple alternative to using Spring Test + Spring JavaConfig or using Guice. fixed - see the documentation. in particular...  http://activemq.apache.org/camel/camel-test.html. Closing 2.0m1 tickets. 
Improvement,Unassigned,2008-12-02T13:18:56+0000,1228223936,James Strachan has done changes in the RefComponent to make it easier to derive from: just derive and override the lookupEndpoint() method and then you don't have to mess with the URI.  That's part of commit 722415 in trunk: http://svn.apache.org/viewvc?view=rev&revision=722415  It would be great to have this included into CAMEL 1.5.1,Fixed revision 722451: http://svn.apache.org/viewvc?view=rev&revision=722451. Issue resolved  therefore closed.. 
Bug,Claus Ibsen,2008-12-02T16:36:14+0000,1228235774,Using a memory profiler  we've identified what appears to be a substantial memory leak in FileConsumer in Camel 1.5.0.  It appears that the noopMap is constantly having items added to it  but nothing performs a remove on it when the file is consumed.  This causes a very large amount of string data to be accumulated in the heap.  In our application  this was a leak of several hundred megabytes and is a showstopper.   Considering the apparent severity of this issue  it would really be nice if a fix could be incorporated into a 1.5.1 version.   http://www.nabble.com/Memory-leak-in-FileConsumer-in-Camel-1.5.0-td20794405s22882.html#a20794405,This is fixed in 2.0 as we have removed all this troublesome code.  For 1.5.1 I suggest to replace the noopMap with the LRUCahce Map so it keeps up till 1000 files and nothing more.. These maps is part of some code logic to determine if the file has been changed using timestamp and filesize checks. All this code has been @deprecated and removed in 2.0. It leads to unexpected behavior and is hard to test. And shouldn't generally be used.  If you use file connectivity then you should either delete or move files after they are processed and not keep then around. As a fix for this in 1.5.1 I have added the LRUCache so the maps will contain at most 1000 elements.. D:\project\camel-1x\camel-core>svn commit --message "CAMEL-1138: Quick fix for file consumer not freeing memory" Sending camel-core\src\main\java\org\apache\camel\component\file\FileConsumer.java Transmitting file data . Committed revision 722808.. Hadrian is the current quick fix okay?. I think so. It actually solves the leak problem.  The side effect is that if a file is not moved/renamed after 1000 other entries/files it will disappear from the lru cache and look new again and get reprocessed  which may also lead to an infinite loop (that would make another one of those 1000+ files new/out of cache  and so on). However I don't think this scenario is a valid one as it has other flaws  such as the fact that the state is lost after a camel restart  so files would get processed again in that case too (a comment in the code mentions that  actually).  I would add a warn in the wiki that not renaming/moving files is a dangerous scenario and should not be used.. I think we can close this issue.. 
Improvement,Willem Jiang,2008-12-03T08:40:46+0000,1228293646,3.x is gonna be deprecated in Spring 3.0 - so maybe we should migrate our test cases from JUnit 3.x to JUnit 4.x?,+1. Okay more comment. Would be great if Camel 2.0 is spring 3.0 compatible right out of the box.. I have a question for the spring 3.0 compatible. Can camel 2.0 be spring 3.0 and spring 2.x compatible at the same time?. AFAIK 3.0 is backwards compatible - its just they are deprecating some stuff (like JUnit 3.x support). The only other change that might impact us is the JavaConfig becomes part of the standard framework (but since its modular its no biggie) - so we might change the JavaConfig groupId/artifactId. Also it looks like Jersey is gonna be integrated; so we can simplify the camel-rest module too. But the vast majority of Camel should work on 2.x too  We might want to create an integration test on 2.x to check things still work OK?. @James  For your information  I have created junit4 tests for the Camel-bindy component based on Camel-2.0. Everything works fine.. Great stuff thanks!. Have you already make a full build + tests of the existing Camel project using Junit4 ?. No most of camel testing is with 3.8. 
Bug,Claus Ibsen,2008-12-03T09:29:04+0000,1228296544,See nabble: http://www.nabble.com/camel-mina-in-servicemix---how-to-process-TCP-response--td20794416s22882.html,D:\project\camel\components\camel-mina>svn commit --message "CAMEL-1140: MinaProducer now throws CamelExchangeException if no message received from remote server when sync=true" Sending camel-mina\src\main\java\org\apache\camel\component\mina\MinaProducer.java Sending camel-mina\src\test\java\org\apache\camel\component\mina\MinaCustomCodecTest.java Adding camel-mina\src\test\java\org\apache\camel\component\mina\MinaNoResponseFromServerTest.java Sending camel-mina\src\test\java\org\apache\camel\component\mina\MinaProducerShutdownMockTest.java Sending camel-mina\src\test\java\org\apache\camel\component\mina\MinaProducerShutdownTest.java Sending camel-mina\src\test\java\org\apache\camel\component\mina\MinaTcpTest.java Sending camel-mina\src\test\java\org\apache\camel\component\mina\MinaTcpTextlineDelimiterTest.java Sending camel-mina\src\test\java\org\apache\camel\component\mina\MinaTcpTextlineProtocolTest.java Transmitting file data ........ Committed revision 722878.. Committed revision 722893. for 1.5.1 branch. Closing 2.0m1 tickets. 
New Feature,Claus Ibsen,2008-12-03T10:22:08+0000,1228299728,Looks like we get AUTO by default. And that there isn't a setter that we can use right out of the box to set the delimiter. http://mina.apache.org/report/1.1/apidocs/org/apache/mina/filter/codec/textline/LineDelimiter.html  See nabble: http://www.nabble.com/camel-mina-in-servicemix---how-to-process-TCP-response--td20794416s22882.html,Fixed in both 1.5.1 and 2.0  Committed revision 722845.for 2.0 Committed revision 722854 for 1.5.1. Closing 2.0m1 tickets. 
New Feature,Willem Jiang,2008-12-03T12:23:20+0000,1228307000,See nabble: http://www.nabble.com/Alternative-routes-td20809601s22882.html  > I think you could impl. it with the loadbalancer  extending > QueueLoadBalancer and override the process method where you will do > - try .. catch exception > - exchange.isFailed() (* might needed) > to determine if there was an error with the exchange and then find the > fallback processor and let it try it. > > I actually think this might be a good loadbalancer to have in > camel-core. We just need to work on the configuration so you can set > the designated target  and the failover. And maybe you have multiple > failovers. > > Any thoughts from others?  Agreed - we should add some kind of FailoverLoadBalancer which could filter errors/exceptions to determine if it should fail over to another endpoint. (Not all errors/exceptions would be down to a WS being down - it could be application errors and so forth).   The current LoadBalancer implementations just pick an endpoint to load to; what we need is another implementation that essentially adds a custom ErrorHandler to force a redelivery to another endpoint on certain failures,be nice to use this in the DSL something like this  failover("http://frodo"  "http://samwise"  "file://UnProcessedMessages").retries(3).interval(1000).exponentialBackOff(false). Being able to set a Redelivery Policy used for when to try redelivering to a failed master would be cool too.  e.g. once a master fails  we kinda mark it as failed - then only redeliver to it at some point in the future - maybe with exponential back off etc. Closing 2.0m1 tickets. 
Task,Willem Jiang,2008-12-04T07:55:31+0000,1228377331,It's GA now so Williem could you upgrade our integration to use the GA version,applied the patch into trunk and camel-1.x branch.. Closing 2.0m1 tickets. 
Bug,Claus Ibsen,2008-12-04T10:44:39+0000,1228387479,Related nabble: http://www.nabble.com/Handling-converter-failure-td20830148s22882.html  When an exception is thrown from a @Converter it is not correctly handled by onException.  The handler is receiving a RuntimeCamelException and not checking the cause when determining the best handler.   /////Converter @Converter public static LocalDateTime toLocalDateTime(final Object localDateTime) {   System.out.println("Converting to local date time");   throw new IllegalArgumentException("Bad data"); }  /////Routes Routes routes = new RouteBuilder() {    @Override   public void configure() throws Exception {     onException(IllegalArgumentException.class).handled(true).to("mock:exception");     from("direct:test").convertBodyTo(LocalDateTime.class).to("mock:end");   } };   /////Test MockEndpoint endpoint = (MockEndpoint) camelContext.getEndpoint("mock:end"); endpoint.expectedMessageCount(0); MockEndpoint endpoint2 = (MockEndpoint) camelContext.getEndpoint("mock:exception"); endpoint2.expectedMessageCount(1);  camelContext.createProducerTemplate().sendBody("direct:test"  "test");  endpoint.assertIsSatisfied(); endpoint2.assertIsSatisfied();,Just to give a workaround.  Use onException(Exception.class).onWhen(bean(IsThisTheExceptionIWant.class)) and implement the logic in your own POJO. This new rule applies:  If the thrown exception has a caused by then this exception is used for selection  if no match found the original exception is used for selection instead  I was wondering if we should do this cause by check for all the entire exception hierarchy starting from the bottom and then recurring up?  1) RuntimeCamelException 2) +IOException 3) + FileNotFoundException  So Camel will start with (3) and then match up the tree until (1)  Currently we support tree level 1+2 but I guess we should support all levels and start from the bottom  the real cause!. Okay got the tree fixed by introducing an iterator that walks the order we would like.  Other implementations could extend and use their own ordering.  /**  Iterator that walks the exception hieracy in the order we should match. <p/> Will default walk from bottom upwards to the root exception */ protected class ExceptionIterator implements Iterator<Throwable> {. D:\project\camel\camel-core>svn commit --message "CAMEL-1144: DefaultExceptionPolicyStrategy now tests caused by exceptions (using bottom to top exception hieracy iterator)" Sending camel-core\src\main\java\org\apache\camel\processor\exceptionpolicy\DefaultExceptionPolicyStrategy.java Adding camel-core\src\test\java\org\apache\camel\processor\onexception\OnExceptionWrappedExceptionTest.java Transmitting file data .. Committed revision 723314.. Committed revision 723319. in 1.5 branch. PS: I have updated the wiki at exception clause trying to explain how camel works when it select which onException to use.  section: Exception Policy http://cwiki.apache.org/confluence/display/CAMEL/Exception+Clause. Closing 2.0m1 tickets. 
Bug,Willem Jiang,2008-12-04T11:42:32+0000,1228390952,William could you check this error reported by end user  See nabble: http://www.nabble.com/UnitOfWork-td20829434s22882.html,additionally you will need some log4j configuration in your classpath. Hi Boris  Can you grant ASF license to the files which you submited ? I want to put them into the repository as a part of the the camel-cxf unit test. You can change it from this link[1]  [1] https://issues.apache.org/activemq/secure/ManageAttachments.jspa?id=28688  Willem. Now with the grant license.. Closing 2.0m1 tickets. 
Bug,Jonathan Anstey,2008-12-04T15:24:28+0000,1228404268,One version comes from camel-mina (version 1.5.5) and one from mina-core (version 1.4.3). This causes problems as seen when trying to use camel-mina at runtime or in my case deploying to ServiceMix. This is the error I get   org.apache.xbean.kernel.ServiceRegistrationException: java.lang.NoSuchFieldError: name 	at org.apache.xbean.kernel.standard.ServiceManagerRegistry.registerService(ServiceManagerRegistry.java:424) 	at org.apache.xbean.kernel.standard.StandardKernel.registerService(StandardKernel.java:220) 	at org.apache.xbean.server.spring.loader.SpringLoader.load(SpringLoader.java:152) 	at org.apache.servicemix.common.xbean.AbstractXBeanDeployer.deploy(AbstractXBeanDeployer.java:83) 	at org.apache.servicemix.camel.CamelSpringDeployer.deploy(CamelSpringDeployer.java:83) 	at org.apache.servicemix.common.BaseServiceUnitManager.doDeploy(BaseServiceUnitManager.java:88) 	at org.apache.servicemix.common.BaseServiceUnitManager.deploy(BaseServiceUnitManager.java:69) 	at org.apache.servicemix.jbi.framework.DeploymentService.deployServiceAssembly(DeploymentService.java:508) 	at org.apache.servicemix.jbi.framework.AutoDeploymentService.checkPendingSAs(AutoDeploymentService.java:482) 	at org.apache.servicemix.jbi.framework.AutoDeploymentService.checkPendingComponents(AutoDeploymentService.java:535) 	at org.apache.servicemix.jbi.framework.AutoDeploymentService.updateSharedLibrary(AutoDeploymentService.java:317) 	at org.apache.servicemix.jbi.framework.AutoDeploymentService.updateArchive(AutoDeploymentService.java:254) 	at org.apache.servicemix.jbi.framework.AutoDeploymentService.monitorDirectory(AutoDeploymentService.java:667) 	at org.apache.servicemix.jbi.framework.AutoDeploymentService.access$800(AutoDeploymentService.java:62) 	at org.apache.servicemix.jbi.framework.AutoDeploymentService$1.run(AutoDeploymentService.java:631) 	at java.util.TimerThread.mainLoop(Timer.java:512) 	at java.util.TimerThread.run(Timer.java:462) Caused by: java.lang.NoSuchFieldError: name 	at org.slf4j.impl.SimpleLogger.<init>(SimpleLogger.java:83) 	at org.slf4j.impl.SimpleLoggerFactory.getLogger(SimpleLoggerFactory.java:67) 	at org.slf4j.LoggerFactory.getLogger(LoggerFactory.java:103) 	at org.apache.mina.util.NamePreservingRunnable.<init>(NamePreservingRunnable.java:32) 	at org.apache.mina.transport.socket.nio.SocketAcceptor.startupWorker(SocketAcceptor.java:165) 	at org.apache.mina.transport.socket.nio.SocketAcceptor.bind(SocketAcceptor.java:141) 	at org.apache.camel.component.mina.MinaConsumer.doStart(MinaConsumer.java:60) 	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:47) 	at org.apache.camel.impl.DefaultCamelContext.addService(DefaultCamelContext.java:421) 	at org.apache.camel.impl.DefaultCamelContext.startRoutes(DefaultCamelContext.java:659) 	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:632) 	at org.apache.camel.spring.SpringCamelContext.maybeDoStart(SpringCamelContext.java:167) 	at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:162) 	at org.apache.camel.impl.ServiceSupport.start(ServiceSupport.java:47) 	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:97) 	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:116) 	at org.springframework.context.event.SimpleApplicationEventMulticaster$1.run(SimpleApplicationEventMulticaster.java:77) 	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:49) 	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:75) 	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:246) 	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:617) 	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:355) 	at org.apache.xbean.server.spring.configuration.SpringConfiguration.<init>(SpringConfiguration.java:63) 	at org.apache.xbean.server.spring.configuration.SpringConfigurationServiceFactory.createService(SpringConfigurationServiceFactory.java:106) 	at org.apache.xbean.kernel.standard.ServiceManager.start(ServiceManager.java:420) 	at org.apache.xbean.kernel.standard.ServiceManager.initialize(ServiceManager.java:200) 	at org.apache.xbean.kernel.standard.RegistryFutureTask$RegisterCallable.call(RegistryFutureTask.java:110) 	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:269) 	at java.util.concurrent.FutureTask.run(FutureTask.java:123) 	at org.apache.xbean.kernel.standard.ServiceManagerRegistry.registerService(ServiceManagerRegistry.java:409),FYI I added a test case in ServiceMix for this here https://issues.apache.org/activemq/browse/SM-1720. Hi there   Is this able to be worked around in 1.5.0? I tried excluding either slf4j from the camel-mina dependency but to no avail.  As a further question  should this problem cause Mina to stop working?  Kind regards  Christopher. I think I have a 1.5.0 work-around - it appears to work for me. Can you please confirm:  <dependency> <groupId>org.apache.camel</groupId> <artifactId>camel-mina</artifactId> <version>1.5.0</version> <exclusions> <!-- This exclusion is a 1.5.0 work-around for CAMEL-1146 --> <exclusion> <groupId>org.slf4j</groupId> <artifactId>slf4j-simple</artifactId> </exclusion> </exclusions> </dependency> <!-- This dependency is a 1.5.0 work-around for CAMEL-1146 --> <dependency> <groupId>org.slf4j</groupId> <artifactId>slf4j-simple</artifactId> <version>1.5.5</version> </dependency>. Hi Christopher   The work-around I have been using is this:  <dependency>       <groupId>org.apache.camel</groupId>       <artifactId>camel-mina</artifactId>       <version>1.5.0</version>         <exclusions>           <exclusion>             <groupId>org.apache.mina</groupId>             <artifactId>mina-core</artifactId>           </exclusion>         </exclusions>     </dependency>     <dependency>       <groupId>org.apache.mina</groupId>       <artifactId>mina-core</artifactId>       <version>1.1.7</version>       <exclusions>         <exclusion>           <groupId>org.slf4j</groupId>           <artifactId>slf4j-simple</artifactId>         </exclusion>         <exclusion>           <groupId>org.slf4j</groupId>           <artifactId>slf4j-api</artifactId>         </exclusion>       </exclusions>     </dependency>   The different version of slf4j seems to have no affect on mina (all mina unit tests passed) so all should be well.. Closing 2.0m1 tickets. 
Improvement,James Strachan,2008-12-04T15:27:55+0000,1228404475,,resolved. See this example test case to see how to create a JmsEndpoint. Closing 2.0m1 tickets. 
New Feature,Claus Ibsen,2008-12-04T15:33:41+0000,1228404821,From http://www.nabble.com/Concerns-about-File-endpoint-td20802855s22882.html  I'd like to suggest that you add a "preMove" option as it seems to be pretty much a requirement for doing clustered seda-style processing from a file endpoint.  The use case for this is a very large number of small files is being dropped into a directory.  This directory is then being scanned by camel's file endpoint.  The files as they are discovered are then moved to the .camel directory  and the filename is put onto a jms endpoint.  A clustered set of camel processors then pull the filename off the endpoint and process the file  and then delete it.,Okay Christopher let me see if I can get this in Camel 1.5.1 also.  I am aiming for options  preMoveNamePrefix preMoveNamePostfix  Well we got the full monty. I also added the expression based:  preMoveExpression. D:\project\camel\camel-core>svn commit --message "CAMEL-1148: Added options pre move options to move file before processing" Sending camel-core\src\main\java\org\apache\camel\component\file\FileConsumer.java Sending camel-core\src\main\java\org\apache\camel\component\file\FileEndpoint.java Sending camel-core\src\main\java\org\apache\camel\component\file\FileExchange.java Sending camel-core\src\main\java\org\apache\camel\component\file\strategy\FileProcessStrategyFactory.java Sending camel-core\src\main\java\org\apache\camel\component\file\strategy\RenameFileProcessStrategy.java Adding camel-core\src\test\java\org\apache\camel\component\file\FileConsumerBeginAndCommitExpressionRenameStrategyTest.java Adding camel-core\src\test\java\org\apache\camel\component\file\FileConsumerBeginAndCommitRenameStrategyTest.java Adding camel-core\src\test\java\org\apache\camel\component\file\FileConsumerBeginExpressionRenameStrategyTest.java Adding camel-core\src\test\java\org\apache\camel\component\file\FileConsumerBeginRenameStrategyTest.java Adding camel-core\src\test\java\org\apache\camel\component\file\FileConsumerCommitRenameStrategyTest.java Deleting camel-core\src\test\java\org\apache\camel\component\file\FileProducerRenameStrategyTest.java Transmitting file data .......... Committed revision 723835.. Committed revision 723860. for the 1.x branch. Closing 2.0m1 tickets. 
Improvement,Unassigned,2008-12-04T16:29:07+0000,1228408147,,See this example test case to see how to create a JmsEndpoint. Closing 2.0m1 tickets. 
Bug,Claus Ibsen,2008-12-06T09:48:18+0000,1228556898,See nabble: http://www.nabble.com/Redelivery-Strategy-td20861316s22882.html  We should convert the          if (!getOutputs().isEmpty())  {             throw new IllegalArgumentException("Aggregator must be the only output added to the route: " + this);         }  ïnto a WARN log until we get the aggreagator fixed so you can define it anywhere in the route path. We have a ticket for this bug also.,D:\project\camel\camel-core>svn commit --message "CAMEL-1150: Fixed aggregator not working with onException in a route" Sending camel-core\src\main\java\org\apache\camel\model\ProcessorType.java Sending camel-core\src\main\java\org\apache\camel\util\CollectionHelper.java Adding camel-core\src\test\java\org\apache\camel\processor\aggregator\AggregatorAndOnExceptionTest.java Transmitting file data ... Committed revision 723966.  And for 1.x branch Committed revision 723967.. Will now log at WARN instead. Closing 2.0m1 tickets. 
New Feature,Claus Ibsen,2008-12-06T11:08:22+0000,1228561702,See CAMEL-1098  quote start The unfortunate issue here is that there is another API (Timer) that provides the equivalent to ScheduledExecutorService. This API is significantly different to the Java SE concurrent equivalents that would make the previous approach of proxying the interfaces very difficult. So for now  it looks like there is no clean way to use ScheduledExecutorService implementations in a managed environment.  Moving forward  my suggestion would be for Camel to have it's own abstraction  similar to Spring's TaskExecutor  that would allow for the configuration of thread management whether running in a managed container or not.  JSR 236 offers hope for the future.  Tim... quote end,Duplicate of CAMEL-1437.  There is a SPI now which you can use to hook into J2EE by implementing the SPI and use the WorkManager API to create/lookup the thread pools of choice.. Closing all resolved tickets from 2010 or older. 
Improvement,Claus Ibsen,2008-12-06T13:41:19+0000,1228570879,I have found that it is possible to set the header "name" to null of a message.  You can set a null header name as follows..    <setHeader name="someName"><constant>SUCCESS</constant></setHeader>  This task succeeds  (ie no error occurs) but not as you would expect  because this is what it is meant to be (@headerName)  <setHeader headerName="someName"><constant>SUCCESS</constant></setHeader>  eg: log dumping the header shows   -  Headers: {null=SUCCESS}  A side effect of this happening is that if you then use the xslt: component after setting a null header with a value  the xslt (saxon) component  freaks out with a NPE because it is attempting to set parameters for each header it finds  but the header is there and has a null name.    A Snippet of the Stack Trace -   java.lang.NullPointerException 	at net.sf.saxon.om.StructuredQName.fromClarkName(StructuredQName.java:70) 	at net.sf.saxon.Controller.setParameter(Controller.java:1979) 	at org.apache.camel.builder.xml.XsltBuilder.addParameters(XsltBuilder.java:290) 	at org.apache.camel.builder.xml.XsltBuilder.configureTransformer(XsltBuilder.java:276) 	at org.apache.camel.builder.xml.XsltBuilder.process(XsltBuilder.java:74) 	at org.apache.camel.impl.ProcessorEndpoint.onExchange(ProcessorEndpoint.java:92) 	at org.apache.camel.impl.ProcessorEndpoint$1.process(ProcessorEndpoint.java:66),Yeah looks like the attrbiute headerName wasn't set as required. And I will add an assertion that headerName is not null.. trunk: 724122 1.x branch:Committed revision 724123.. Closing 2.0m1 tickets. 
Task,Claus Ibsen,2008-12-07T12:15:18+0000,1228652118,We should do the same kind of refactoring of camel-ftp as we did with the file component. Espeically get rid of the timestamp and clean up the code  to be more maintance firendly and be ready for adding the pluggable sorting  filtering and what else comes in the future.,Introduce the FileProcessStrategy as well  so we can have the code that deletes/moves the files separated from the consumer.  Also these two components would be much more alike and thus more ready for a shared VFS that we have a ticket for.. Just an update on this one. The refactor have grown on me  well I wanted the FTP and File component to be much more aligned.  And as we have a ticket for reusing file strategies and an idea of having a underlying VFS for file and FTP I have started to experiment a little.  To have this VFS we need to abstract the concrete file implementation and use the abstract in the consumer and producer that delegates to the concrete file implementation.  And as the FTP component have two file implementations  regular FTP Secure FTP  I have experimented here. It goes kinda okay at the moment. I only have abstraction for file strategies (delete  rename  noop) but login  logout  upload  download etc. is also needed.  But anyway I have the basic structure so the FTPConsumer is nearly identical with the FileConsumer. Using async and commit file strategies etc.. Backup of my major camel-ftp refactor in progress  TODO  more ftp operations DONE consider renaming of classes (ftptemplate to ftpoperations) DONE adding filtering DONE adding sort by DONE premove expression unit test DONE move and delete should not be possible DONE sftp operations DONE ftp/sftp producer can be combined DONE sftp consumer DONE use ExclusiveReadLockStrategy DONE javadoc DONE. D:\project\camel\components\camel-ftp>svn commit --message "CAMEL-1153: major refactor to camel-ftp" Adding camel-ftp\src\main\java\org\apache\camel\component\file\remote\DefaultRemoteFileSorter.java Sending camel-ftp\src\main\java\org\apache\camel\component\file\remote\FtpConsumer.java Deleting camel-ftp\src\main\java\org\apache\camel\component\file\remote\FtpEndpoint.java Deleting camel-ftp\src\main\java\org\apache\camel\component\file\remote\FtpOperationFailedException.java Deleting camel-ftp\src\main\java\org\apache\camel\component\file\remote\FtpProducer.java Adding camel-ftp\src\main\java\org\apache\camel\component\file\remote\FtpRemoteFileOperations.java Deleting camel-ftp\src\main\java\org\apache\camel\component\file\remote\FtpUtils.java Adding camel-ftp\src\main\java\org\apache\camel\component\file\remote\RemoteFile.java Deleting camel-ftp\src\main\java\org\apache\camel\component\file\remote\RemoteFileBinding.java Sending camel-ftp\src\main\java\org\apache\camel\component\file\remote\RemoteFileComponent.java Sending camel-ftp\src\main\java\org\apache\camel\component\file\remote\RemoteFileConfiguration.java Sending camel-ftp\src\main\java\org\apache\camel\component\file\remote\RemoteFileConsumer.java Sending camel-ftp\src\main\java\org\apache\camel\component\file\remote\RemoteFileConverter.java Sending camel-ftp\src\main\java\org\apache\camel\component\file\remote\RemoteFileEndpoint.java Sending camel-ftp\src\main\java\org\apache\camel\component\file\remote\RemoteFileExchange.java Adding camel-ftp\src\main\java\org\apache\camel\component\file\remote\RemoteFileExclusiveReadLockStrategy.java Adding camel-ftp\src\main\java\org\apache\camel\component\file\remote\RemoteFileFilter.java Sending camel-ftp\src\main\java\org\apache\camel\component\file\remote\RemoteFileMessage.java Adding camel-ftp\src\main\java\org\apache\camel\component\file\remote\RemoteFileOperationFailedException.java Adding camel-ftp\src\main\java\org\apache\camel\component\file\remote\RemoteFileOperations.java Adding camel-ftp\src\main\java\org\apache\camel\component\file\remote\RemoteFileProcessStrategy.java Sending camel-ftp\src\main\java\org\apache\camel\component\file\remote\RemoteFileProducer.java Sending camel-ftp\src\main\java\org\apache\camel\component\file\remote\SftpConsumer.java Deleting camel-ftp\src\main\java\org\apache\camel\component\file\remote\SftpEndpoint.java Deleting camel-ftp\src\main\java\org\apache\camel\component\file\remote\SftpProducer.java Adding camel-ftp\src\main\java\org\apache\camel\component\file\remote\SftpRemoteFileOperations.java Deleting camel-ftp\src\main\java\org\apache\camel\component\file\remote\SftpUtils.java Adding camel-ftp\src\main\java\org\apache\camel\component\file\remote\strategy Adding camel-ftp\src\main\java\org\apache\camel\component\file\remote\strategy\DefaultRemoteFileRenamer.java Adding camel-ftp\src\main\java\org\apache\camel\component\file\remote\strategy\DeleteRemoteFileProcessStrategy.java Adding camel-ftp\src\main\java\org\apache\camel\component\file\remote\strategy\NoOpRemoteFileProcessStrategy.java Adding camel-ftp\src\main\java\org\apache\camel\component\file\remote\strategy\RemoteFileExpressionRenamer.java Adding camel-ftp\src\main\java\org\apache\camel\component\file\remote\strategy\RemoteFileProcessStrategyFactory.java Adding camel-ftp\src\main\java\org\apache\camel\component\file\remote\strategy\RemoteFileProcessStrategySupport.java Adding camel-ftp\src\main\java\org\apache\camel\component\file\remote\strategy\RemoteFileRenameExclusiveReadLockStrategy.java Adding camel-ftp\src\main\java\org\apache\camel\component\file\remote\strategy\RemoteFileRenamer.java Adding camel-ftp\src\main\java\org\apache\camel\component\file\remote\strategy\RenameRemoteFileProcessStrategy.java Adding camel-ftp\src\main\java\org\apache\camel\component\file\remote\strategy\package.html Sending camel-ftp\src\main\resources\META-INF\services\org\apache\camel\component\ftp Sending camel-ftp\src\main\resources\META-INF\services\org\apache\camel\component\sftp Sending camel-ftp\src\test\java\org\apache\camel\component\file\remote\FromFileToFtpTest.java Sending camel-ftp\src\test\java\org\apache\camel\component\file\remote\FromFtpDeleteFileTest.java Sending camel-ftp\src\test\java\org\apache\camel\component\file\remote\FromFtpDirectoryToBinaryFilesTest.java Adding camel-ftp\src\test\java\org\apache\camel\component\file\remote\FromFtpExclusiveReadNoneStrategyTest.java Adding camel-ftp\src\test\java\org\apache\camel\component\file\remote\FromFtpExclusiveReadRenameStrategyTest.java Deleting camel-ftp\src\test\java\org\apache\camel\component\file\remote\FromFtpExclusiveReadTest.java Adding camel-ftp\src\test\java\org\apache\camel\component\file\remote\FromFtpFilterTest.java Sending camel-ftp\src\test\java\org\apache\camel\component\file\remote\FromFtpMoveFilePostfixTest.java Sending camel-ftp\src\test\java\org\apache\camel\component\file\remote\FromFtpMoveFilePrefixTest.java Sending camel-ftp\src\test\java\org\apache\camel\component\file\remote\FromFtpMoveFileTest.java Sending camel-ftp\src\test\java\org\apache\camel\component\file\remote\FromFtpNoFilesTest.java Deleting camel-ftp\src\test\java\org\apache\camel\component\file\remote\FromFtpNonExclusiveReadTest.java Adding camel-ftp\src\test\java\org\apache\camel\component\file\remote\FromFtpNoopTest.java Sending camel-ftp\src\test\java\org\apache\camel\component\file\remote\FromFtpPollFileOnlyTest.java Adding camel-ftp\src\test\java\org\apache\camel\component\file\remote\FromFtpPreMoveFileExpressionTest.java Adding camel-ftp\src\test\java\org\apache\camel\component\file\remote\FromFtpPreMoveFilePostfixTest.java Adding camel-ftp\src\test\java\org\apache\camel\component\file\remote\FromFtpPreMoveFilePrefixTest.java Sending camel-ftp\src\test\java\org\apache\camel\component\file\remote\FromFtpRegexPatternTest.java Adding camel-ftp\src\test\java\org\apache\camel\component\file\remote\FromFtpRemoteFileFilterTest.java Adding camel-ftp\src\test\java\org\apache\camel\component\file\remote\FromFtpRemoteFileSortByExpressionTest.java Adding camel-ftp\src\test\java\org\apache\camel\component\file\remote\FromFtpRemoteFileSortByIgnoreCaseExpressionTest.java Adding camel-ftp\src\test\java\org\apache\camel\component\file\remote\FromFtpRemoteFileSortByNestedExpressionTest.java Adding camel-ftp\src\test\java\org\apache\camel\component\file\remote\FromFtpRemoteFileSorterTest.java Sending camel-ftp\src\test\java\org\apache\camel\component\file\remote\FromFtpSetNamesWithMultiDirectoriesTest.java Sending camel-ftp\src\test\java\org\apache\camel\component\file\remote\FromFtpToBinaryFileTest.java Sending camel-ftp\src\test\java\org\apache\camel\component\file\remote\FromFtpToBinaryFilesTest.java Sending camel-ftp\src\test\java\org\apache\camel\component\file\remote\FromFtpToMockTest.java Sending camel-ftp\src\test\java\org\apache\camel\component\file\remote\FromQueueThenConsumeFtpToMockTest.java Adding camel-ftp\src\test\java\org\apache\camel\component\file\remote\FtpConsumerBodyAsStringTest.java Sending camel-ftp\src\test\java\org\apache\camel\component\file\remote\FtpConsumerDeleteNoWritePermissionTest.java Sending camel-ftp\src\test\java\org\apache\camel\component\file\remote\FtpConsumerDirectoriesNotMatchedTest.java Sending camel-ftp\src\test\java\org\apache\camel\component\file\remote\FtpConsumerExcludeNameTest.java Sending camel-ftp\src\test\java\org\apache\camel\component\file\remote\FtpConsumerExpressionTest.java Adding camel-ftp\src\test\java\org\apache\camel\component\file\remote\FtpConsumerMultipleDirectoriesTest.java Sending camel-ftp\src\test\java\org\apache\camel\component\file\remote\FtpConsumerUsingFTPClientConfigTest.java Adding camel-ftp\src\test\java\org\apache\camel\component\file\remote\FtpIllegalOptionsTest.java Sending camel-ftp\src\test\java\org\apache\camel\component\file\remote\FtpLoginTest.java Sending camel-ftp\src\test\java\org\apache\camel\component\file\remote\FtpProducerBuildDirectoryTest.java Sending camel-ftp\src\test\java\org\apache\camel\component\file\remote\FtpProducerTempPrefixTest.java Sending camel-ftp\src\test\java\org\apache\camel\component\file\remote\FtpServerTestSupport.java Sending camel-ftp\src\test\java\org\apache\camel\component\file\remote\UriConfigurationTest.java Sending camel-ftp\src\test\resources\log4j.properties Transmitting file data ....................................................................... Committed revision 729480.. TODO  Update wiki DONE. Closing 2.0m1 tickets. 
Sub-task,Claus Ibsen,2008-12-07T12:33:03+0000,1228653183,,D:\project\camel\components\camel-ftp>svn commit --message "CAMEL-1154: Added idempotent to camel-ftp" Sending camel-ftp\src\main\java\org\apache\camel\component\file\remote\RemoteFileConsumer.java Sending camel-ftp\src\main\java\org\apache\camel\component\file\remote\RemoteFileEndpoint.java Sending camel-ftp\src\main\java\org\apache\camel\component\file\remote\RemoteFileProducer.java Sending camel-ftp\src\main\java\org\apache\camel\component\file\remote\SftpConsumer.java Sending camel-ftp\src\test\java\org\apache\camel\component\file\remote\FromFtpNoopTest.java Adding camel-ftp\src\test\java\org\apache\camel\component\file\remote\FtpConsumerIdempotentRefTest.java Adding camel-ftp\src\test\java\org\apache\camel\component\file\remote\FtpConsumerIdempotentTest.java Transmitting file data ....... Committed revision 729714.. Closing 2.0m1 tickets. 
Task,Claus Ibsen,2008-12-08T07:19:04+0000,1228720744,#1 We should encurage to reuse and use ObjectHelper.notNull for parameter assertions  Currently we have a few places    if (paramter == null) {   throw new IllegalArgumentException("parameter is null"); }    Should be replaced with  ObjectHelper.notNull(parameter  "parameter");    #2 We could also consider to add a notEmpty method that will do a not null test and if the type is a String do a trim size > 0 test as well.  #3 Also we should align the methods to use either Empty or Blank for such a test method. Currently we have both combination.,#1 DONE. #1 and #2 DONE  Committed revision 725058.. Closing 2.0m1 tickets. 
Improvement,Jonathan Anstey,2008-12-08T14:51:12+0000,1228747872,See http://svn.apache.org/viewvc?view=rev&revision=723844 for same feature in camel-rss,Sending camel-atom/src/main/java/org/apache/camel/component/atom/AtomEntryPollingConsumer.java Sending camel-atom/src/main/java/org/apache/camel/component/atom/UpdatedDateFilter.java Adding camel-atom/src/test/data/unsortedfeed.atom Sending camel-atom/src/test/java/org/apache/camel/component/atom/AtomEntryPollingConsumerTest.java Adding camel-atom/src/test/java/org/apache/camel/component/atom/AtomEntrySortTest.java Transmitting file data ..... Committed revision 724434.. Closing 2.0m1 tickets. 
Improvement,James Strachan,2008-12-08T16:11:15+0000,1228752675,,Closing 2.0m1 tickets. 
Improvement,Jonathan Anstey,2008-12-08T19:40:40+0000,1228765240,Should be able to do this with a custom aggregator.,Jon could you take a look at CAMEL-971. An end user had similar need and I as well  to group X number of exchanged into a single combined exchange.  I started worked on this. But wanted feedback from the other Camel riders. There is a patch on CAMEL-971 that lays out the basic idea. Maybe we could take a discussion at the camel-dev to get the attention of the others? If we bring in a standard GroupedExchange into camel-core (or what a good name would be). Cool. Yeah  I'll take a look.. CAMEL-971 is a cool feature but is not really what I had in mind for merging multiple RSS feeds. Each exchange coming from an RSS endpoint contains a ROME SyndFeed object as the body  which also contains a list of 1 or more RSS entries. I intended to have the entries of each SyndFeed object aggregated into a new SyndFeed object  in a single exchange.  I like the GroupedExchange idea Claus  it would be very useful in a bunch of scenarios. Here's a +1 from me!. Committed a fix and added an entry into the wiki docs for this.. Fixed in rev 724775.. Closing 2.0m1 tickets. 
Task,William Tam,2008-12-09T05:40:06+0000,1228801206,Understand the logic of this method and also see if the protected method getCollection() is really needed (or getCollectionSize() is suffice).  The reason being supporting the getCollection() method may constraint the BatchProcessor class to implement less efficient algorithm.       @Override     protected boolean isBatchCompleted(int index) {         if (aggregationCompletedPredicate != null) {             // TODO: (davsclaus) What is the point with this code? I think its wrong             if (getCollection().size() > 0) {                 return true;             }         }          return super.isBatchCompleted(index);     },I found that BatchProcessor did not implement the support for "outBatchSize" properly. I applied a fix and method in question (Aggregator.isBatchCompleted) is not needed as a result. Basically  the isInBatchCompleted() checks for whether the in queue should be drained to the out collection based on the batchSize parameter. I added a method "isOutBatchCompleted()" to check whether the out collection should be sent based on the outBatchSize parameter.. Hi William  The OUT batch size was something I added recently for the aggregator  needed by end-users.  Martin Krasser (contributer with great patches for aggregator  resequencer  splitter etc.) said he would create a patch with the IN / OUT batch options in his xxxConfig objects (etc StreamResequencerConfig).  So we might need to check the wiki  splitter resequencer aggregator  That the batch size options is documented. See aggregator that has this documentation (batch options). So if the splitter and resequencer now also supports the OUT batch size then we should copy the documentation (batch options) to their wiki page as well.  And maybe the OUT batch size should be exposed on  the fluent builders the xxxConfig objects (StreamResequencerConfig and the other one). Thanks Claus. The outBatchSize for Aggregator can be set via fluent builder and spring per wiki currently but that is not the problem thought. (I'll check resequencer and splitter. splitter does not extend BatchProcessor  tho). Also  it is orthogonal to the xxxConfig works. What I saw was:  Aggregator.isBatchCompleted() does not take the outBatchSize into the account. The method returns true if aggregationCompletedPredicate and collection.size() > 0. So  the incoming exchanges are correctly batched and stored the queue but the "out collection" is not batched. The BatchProcessor.isBatchCompleted() method checks for outBatchSize first and then ignore "in" batchSize if it is true. So  it could drain the in queue prematurely (i.e. drain the quene before batchSize is > num). I think we should have two methods: isInBatchCompleted() and isOutBatchCompleted(). If isInBatchCompleted()  then it should drain the exchanges from in queue to out collection. if isOutBatchCompleted()  then we should sent out the exchanges.  I attached the patch. Let me know if I am missing something. I still have fix up the spring test.. William nice patch.  I was wondering if the out batch sample using  in batch size = 1 out batch size = 10  <aggregate strategyRef="myAggregatorStrategy" batchSize="1" outBatchSize="10">  Why is the in batch at 1? Is it intended. Can it be removed  so you can choose which batch size you want to use  IN (number of exchanges) received OUT (number of exchanges) to send  So I think a more common use case would be having higher IN batch size than OUT. If that is the fact I think we should change the sample to reflect this. There is also a Java DSL sample.  Minor spelling // out batch is disable  so go ahead and send. It should be disabled. I fixed the mis-spell. The batch size of 1 is to allow testing the out batch size better. I'll exclude it from the example when possible and add some more comment. thanks for your comments.. 1.5.1 - r726941 2.0.0 - r726932. Closing 2.0m1 tickets. 
Sub-task,Claus Ibsen,2008-12-09T06:03:12+0000,1228802592,I discovered a few other DSL have similar issue without having required = true of the key (headerName  propertyName) etc.,Fixed on 2.0.  Need to fix these on 1.x: SetPropertyType SetOutHeaderType RemovePropertyType RemoveHeaderType. Now also commited to 1.x  Committed revision 724665.. Closing 2.0m1 tickets. 
Improvement,Willem Jiang,2008-12-09T06:33:22+0000,1228804402,We should let LoadBalancer extends AsyncProcessor to get the benefit of the async processing.,Applied the patch into trunk http://svn.apache.org/viewvc?rev=724681&view=rev camel-1.x branch http://svn.apache.org/viewvc?rev=724684&view=rev. Closing 2.0m1 tickets. 
Task,Willem Jiang,2008-12-09T07:13:19+0000,1228806799,Since we have multicast which supports aggregation and parallel processing  the topic loadbalance becomes a half workable duplication   and it should be removed.,Closing 2.0m1 tickets. 
Improvement,Jonathan Anstey,2008-12-09T09:41:41+0000,1228815701,some formatting could be improved in places and we could do with including more of the wiki documentation in places.  I'll create sub tasks for specific examples. Please dive in if anyone can think of other ways to improve the user guide,2.0 snapshot guide.  page 38 (page 36 printed). The table for the annotations. I get a A text in the parameter for the annotations.. page 51 (49 printed). The image for the dot generator is old. We don't get the EIP icons on the generated images anymore. I think the image is from camel-example-docs. page 73 (73 printed) the heading for Async Processing is on top of the code example.. page 388 - the options for the JMS component is clipped  so you can not read the description. I think we should add the two "walks with Camel" mini tutorials we have. Maybe as a new section for getting started in 5 min:  http://activemq.apache.org/camel/getting-started.html http://activemq.apache.org/camel/walk-through-another-example.html. page 38 (page 36 printed). The table for the annotations. I get a A text in the parameter for the annotations.  Fixed.  page 51 (49 printed). The image for the dot generator is old. We don't get the EIP icons on the generated images anymore.  Fixed.  page 73 (73 printed) the heading for Async Processing is on top of the code example.  Fixed.. page 388 - the options for the JMS component is clipped  so you can not read the description  Fixed in revision 727502.. Claus   Perhaps we could add an examples section to include the mini tutorials? The first page of the examples chapter would be a table of contents like this http://cwiki.apache.org/confluence/display/CAMEL/Examples. @Jon +1  But I think it should be in the start of the pdf  so new users read the simple walk examples and doesn't endeavor into some more complex examples.. Added a quickstart chapter to the user guide which contains two example walk throughs.. Closing 2.0m1 tickets. 
Sub-task,Jonathan Anstey,2008-12-09T09:45:26+0000,1228815926,sometimes its got a big black line around it - other times nothing. Maybe a faint line around code blocks (or maybe a faint grey background or something) might look best? Whatever it is lets be consistent,I just committed a change to the code snippets in the manual. I've uploaded a PDF with the changes here http://people.apache.org/~janstey/temp/camel-manual-2.0-SNAPSHOT.pdf  I think it looks better than before but I'd like some feedback just to be sure. Closing 2.0m1 tickets. 
Sub-task,Jonathan Anstey,2008-12-09T09:46:04+0000,1228815964,,I've put up a manual with simple cover page at http://people.apache.org/~janstey/temp/camel-manual-2.0-SNAPSHOT.pdf  let me know what you think.  I still need to put in something that will dynamically insert the version number. That is for tomorrow though. I've put in changes that will dynamically insert the version number in rev 725302. Resolving this task now.. awesome stuff!. Closing 2.0m1 tickets. 
Sub-task,Jonathan Anstey,2008-12-09T09:46:45+0000,1228816005,,Closing 2.0m1 tickets. 
Improvement,Jonathan Anstey,2008-12-09T09:55:42+0000,1228816542,manuals for releases should appear here... http://activemq.apache.org/camel/manual/,Fixed in http://svn.apache.org/viewvc?rev=724711&view=rev  The latest released PDF will show up here in an hour or so http://activemq.apache.org/camel/manual/. Cool  but I think we still need the html version.. For some reason html manuals have not been deploying  so the script can't copy them... I've raised CAMEL-1170 to track this. It may be a simple problem  I haven't looked at it at all. Closing 2.0m1 tickets. GitHub user zregvart opened a pull request:  https://github.com/apache/camel/pull/1891  CAMEL-1167: Support Metadata component extension  Submited for review **  @lburgazzoli can you take a look  thanks 👍  Adds support for `MetaDataExtension` in the Salesforce component. Currently two kinds of metadata are supported:  listing Salesforce Object types listing fields of Salesforce object type  For Salesforce object types object name and label are returned and for Salesforce object fields name and field type are returned.  New facade to use low level Salesforce RestClient was added `SalesforceClientTemplate` intended to be used from extensions such as this and the existing `ComponentVerifierExtension` was refactored to use it.  You can merge this pull request into a Git repository by running:  $ git pull https://github.com/zregvart/camel CAMEL-11667  Alternatively you can review and apply these changes as the patch at:  https://github.com/apache/camel/pull/1891.patch  To close this pull request  make a commit to your master/trunk branch with (at least) the following in the commit message:  This closes #1891  commit 0e71530d80526e7cefd0e12a02a37e899bfa3b90 Author: Zoran Regvart <zregvart@apache.org> Date: 2017-08-15T09:52:26Z  CAMEL-1167: Support Metadata component extension  Adds support for `MetaDataExtension` in the Salesforce component. Currently two kinds of metadata are supported:  listing Salesforce Object types listing fields of Salesforce object type  For Salesforce object types object name and label are returned and for Salesforce object fields name and field type are returned.  New facade to use low level Salesforce RestClient was added `SalesforceClientTemplate` intended to be used from extensions such as this and the existing `ComponentVerifierExtension` was refactored to use it.. 
